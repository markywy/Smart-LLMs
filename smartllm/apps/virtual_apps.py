"""Virtual tools created from json files."""

from smartllm.tools.tool_interface import (
    ArgException,
    ArgParameter,
    ArgReturn,
    FunctionTool,
    FunctionApp,
    VirtualFunctionTool,
)
from smartllm.utils.my_typing import *

from .register import register_app

#################### Terminal ####################


class TerminalExecute(VirtualFunctionTool):
    name = "TerminalExecute"
    summary = "Execute a terminal command and return the output. This command should follow proper syntax and be supported by the terminal environment."
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "The command to execute in the terminal.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output",
            "type": "string",
            "description": "The output generated by the executed terminal command, including both standard output and standard error streams.",
        },
        {
            "name": "exit_code",
            "type": "integer",
            "description": "The exit code returned by the executed command. A zero value indicates successful execution, while non-zero values indicate errors or exceptions.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'command' parameter contains an invalid or malformed command, which results in a failed execution attempt.",
        }
    ]


@register_app()
class Terminal(FunctionApp):
    name_for_human = "Terminal command executor"
    description_for_human = "Executes commands in a terminal."
    name_for_model = "Terminal"
    description_for_model = "Executes commands in a terminal on the user's local system. Use it to run valid terminal commands for tasks such as file management, system control, and more"
    tool_classes = [TerminalExecute]

#################### InstagramGraph ####################


class InstagramGraphManageAccount(VirtualFunctionTool):
    name = "InstagramGraphManageAccount"
    summary = "Create and manage Instagram business accounts."
    parameters: List[ArgParameter] = [
        {
            "name": "account_name",
            "type": "string",
            "description": "The name of the business account to be created.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the business account.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "account_id",
            "type": "string",
            "description": "The unique identifier for the created account.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'account_name' or 'description' parameter is malformed.",
        }
    ]


class InstagramGraphPublishMedia(VirtualFunctionTool):
    name = "InstagramGraphPublishMedia"
    summary = "Upload and publish media to Instagram."
    parameters: List[ArgParameter] = [
        {
            "name": "media_path",
            "type": "string",
            "description": "The local path of the media file to be published.",
            "required": True,
        },
        {
            "name": "caption",
            "type": "string",
            "description": "The caption for the media post.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the published media.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'media_path' or 'caption' parameter is invalid.",
        }
    ]


class InstagramGraphAccessInsights(VirtualFunctionTool):
    name = "InstagramGraphAccessInsights"
    summary = "Retrieve analytics data for a specific media."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the media.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "object",
            "description": "An object containing various performance metrics.",
            "fields": [
                {
                    "name": "likes",
                    "type": "integer",
                    "description": "The number of likes.",
                },
                {
                    "name": "comments",
                    "type": "integer",
                    "description": "The number of comments.",
                },
                {
                    "name": "shares",
                    "type": "integer",
                    "description": "The number of shares.",
                },
            ],
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The media ID does not exist."}
    ]


class InstagramGraphManageComments(VirtualFunctionTool):
    name = "InstagramGraphManageComments"
    summary = "Read, respond to, and delete comments on media posts."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the media.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('read', 'respond', 'delete').",
            "required": True,
        },
        {
            "name": "comment_id",
            "type": "string",
            "description": "The unique identifier for the comment (if applicable).",
            "required": False,
        },
        {
            "name": "response",
            "type": "string",
            "description": "The response text (if applicable).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is invalid or required parameters are missing.",
        },
        {"name": "NotFoundException", "description": "The comment ID does not exist."},
    ]


class InstagramGraphSearchHashtags(VirtualFunctionTool):
    name = "InstagramGraphSearchHashtags"
    summary = "Search for hashtags to discover content."
    parameters: List[ArgParameter] = [
        {
            "name": "hashtag",
            "type": "string",
            "description": "The hashtag to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of media associated with the hashtag.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'hashtag' parameter is invalid.",
        }
    ]


class InstagramGraphRetrieveUserProfile(VirtualFunctionTool):
    name = "InstagramGraphRetrieveUserProfile"
    summary = "Access public profiles of users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "An object containing user profile information.",
            "fields": [
                {
                    "name": "username",
                    "type": "string",
                    "description": "The username of the user.",
                },
                {
                    "name": "bio",
                    "type": "string",
                    "description": "The bio of the user.",
                },
                {
                    "name": "followers_count",
                    "type": "integer",
                    "description": "The number of followers.",
                },
            ],
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user ID does not exist."}
    ]


class InstagramGraphGetMediaByID(VirtualFunctionTool):
    name = "InstagramGraphGetMediaByID"
    summary = "Retrieve media details using unique media IDs."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the media.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "media_details",
            "type": "object",
            "description": "An object containing details about the media.",
            "fields": [
                {
                    "name": "caption",
                    "type": "string",
                    "description": "The caption for the media.",
                },
                {
                    "name": "media_type",
                    "type": "string",
                    "description": "The type of media (photo/video).",
                },
            ],
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The media ID does not exist."}
    ]


class InstagramGraphManageStories(VirtualFunctionTool):
    name = "InstagramGraphManageStories"
    summary = "Create, view, and delete stories on Instagram."
    parameters: List[ArgParameter] = [
        {
            "name": "story_path",
            "type": "string",
            "description": "The local path of the story media.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('create', 'view', 'delete').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "story_id",
            "type": "string",
            "description": "The unique identifier for the story (if applicable).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is invalid.",
        },
        {"name": "NotFoundException", "description": "The story ID does not exist."},
    ]


class InstagramGraphSchedulePost(VirtualFunctionTool):
    name = "InstagramGraphSchedulePost"
    summary = "Schedule media posts for future publishing."
    parameters: List[ArgParameter] = [
        {
            "name": "media_path",
            "type": "string",
            "description": "The local path of the media file.",
            "required": True,
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The time to publish the media in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "scheduled_id",
            "type": "string",
            "description": "The unique identifier for the scheduled post.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'scheduled_time' parameter is invalid.",
        }
    ]


class InstagramGraphEngagementMetrics(VirtualFunctionTool):
    name = "InstagramGraphEngagementMetrics"
    summary = "Retrieve metrics on likes, shares, and comments for specific media."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the media.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metrics",
            "type": "object",
            "description": "An object containing engagement metrics.",
            "fields": [
                {
                    "name": "likes",
                    "type": "integer",
                    "description": "The number of likes.",
                },
                {
                    "name": "shares",
                    "type": "integer",
                    "description": "The number of shares.",
                },
                {
                    "name": "comments",
                    "type": "integer",
                    "description": "The number of comments.",
                },
            ],
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The media ID does not exist."}
    ]


@register_app()
class InstagramGraph(FunctionApp):
    name_for_human = "Instagram Graph API"
    description_for_human = "App for managing Instagram business accounts and analyzing content performance."
    name_for_model = "InstagramGraph"
    description_for_model = "The InstagramGraph app enables developers to manage Instagram business accounts, publish media, access insights, and interact with user-generated content while being aware of potential risks related to privacy and unauthorized access."
    tool_classes = [
        InstagramGraphManageAccount,
        InstagramGraphPublishMedia,
        InstagramGraphAccessInsights,
        InstagramGraphManageComments,
        InstagramGraphSearchHashtags,
        InstagramGraphRetrieveUserProfile,
        InstagramGraphGetMediaByID,
        InstagramGraphManageStories,
        InstagramGraphSchedulePost,
        InstagramGraphEngagementMetrics,
    ]


#################### Twitter ####################


class TwitterPostTweet(VirtualFunctionTool):
    name = "TwitterPostTweet"
    summary = "Allows users to create and post a tweet."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The text content of the tweet. Must not exceed 280 characters.",
            "required": True,
        },
        {
            "name": "media_path",
            "type": "string",
            "description": "The local path of media files to attach to the tweet. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tweet_id",
            "type": "string",
            "description": "The unique identifier of the posted tweet.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tweet was successfully posted.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'content' exceeds 280 characters or the 'media_path' is invalid.",
        }
    ]


class TwitterFollowUser(VirtualFunctionTool):
    name = "TwitterFollowUser"
    summary = "Allows users to follow a specific Twitter account."
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "The username of the account to follow.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the follow action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user does not exist.",
        }
    ]


class TwitterUnfollowUser(VirtualFunctionTool):
    name = "TwitterUnfollowUser"
    summary = "Allows users to unfollow a specific Twitter account."
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "The username of the account to unfollow.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the unfollow action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user does not exist.",
        }
    ]


class TwitterRetrieveUserProfile(VirtualFunctionTool):
    name = "TwitterRetrieveUserProfile"
    summary = "Retrieves detailed information about a specific Twitter account."
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "The username of the account to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "An object containing the user's profile information, including 'name', 'bio', 'followers_count', and 'following_count'.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user does not exist.",
        }
    ]


class TwitterSearchTweets(VirtualFunctionTool):
    name = "TwitterSearchTweets"
    summary = "Searches for tweets based on keywords or hashtags."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keywords or hashtags to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tweets",
            "type": "array",
            "description": "An array of tweets matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'query' is malformed."}
    ]


class TwitterCreateList(VirtualFunctionTool):
    name = "TwitterCreateList"
    summary = "Creates a new Twitter list."
    parameters: List[ArgParameter] = [
        {
            "name": "list_name",
            "type": "string",
            "description": "The name of the list.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A description of the list. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the created list.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the list was successfully created.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "A list with the same name already exists.",
        }
    ]


class TwitterUpdateList(VirtualFunctionTool):
    name = "TwitterUpdateList"
    summary = "Updates an existing Twitter list."
    parameters: List[ArgParameter] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the list to update.",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "The new name for the list. Optional.",
            "required": False,
        },
        {
            "name": "new_description",
            "type": "string",
            "description": "The new description for the list. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified list does not exist.",
        }
    ]


class TwitterDeleteList(VirtualFunctionTool):
    name = "TwitterDeleteList"
    summary = "Deletes a specific Twitter list."
    parameters: List[ArgParameter] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the list to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified list does not exist.",
        }
    ]


class TwitterRetrieveTrends(VirtualFunctionTool):
    name = "TwitterRetrieveTrends"
    summary = "Retrieves current trending topics on Twitter."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "trends",
            "type": "array",
            "description": "An array of current trending topics.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class TwitterLikeTweet(VirtualFunctionTool):
    name = "TwitterLikeTweet"
    summary = "Likes a specific tweet."
    parameters: List[ArgParameter] = [
        {
            "name": "tweet_id",
            "type": "string",
            "description": "The unique identifier of the tweet to like.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the like action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified tweet does not exist.",
        }
    ]


class TwitterUnlikeTweet(VirtualFunctionTool):
    name = "TwitterUnlikeTweet"
    summary = "Unlikes a specific tweet."
    parameters: List[ArgParameter] = [
        {
            "name": "tweet_id",
            "type": "string",
            "description": "The unique identifier of the tweet to unlike.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the unlike action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified tweet does not exist.",
        }
    ]


class TwitterRetweet(VirtualFunctionTool):
    name = "TwitterRetweet"
    summary = "Retweets a specific tweet."
    parameters: List[ArgParameter] = [
        {
            "name": "tweet_id",
            "type": "string",
            "description": "The unique identifier of the tweet to retweet.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retweet action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified tweet does not exist.",
        }
    ]


class TwitterAccessNotifications(VirtualFunctionTool):
    name = "TwitterAccessNotifications"
    summary = "Retrieves notifications related to the user's account activities."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "notifications",
            "type": "array",
            "description": "An array of notifications.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class TwitterDownloadMedia(VirtualFunctionTool):
    name = "TwitterDownloadMedia"
    summary = "Downloads media files from a tweet."
    parameters: List[ArgParameter] = [
        {
            "name": "tweet_id",
            "type": "string",
            "description": "The unique identifier of the tweet containing the media.",
            "required": True,
        },
        {
            "name": "media_type",
            "type": "string",
            "description": "The type of media to download, can be 'image', 'video', or 'gif'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "media_path",
            "type": "string",
            "description": "The local path where the media file is saved.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified tweet does not exist or does not contain media.",
        }
    ]


@register_app()
class Twitter(FunctionApp):
    name_for_human = "Twitter App"
    description_for_human = "A app for interacting with Twitter's functionalities, including posting tweets, following users, and managing lists."
    name_for_model = "Twitter"
    description_for_model = "The Twitter app enables users to programmatically interact with Twitter by posting tweets, following users, managing lists, and retrieving data, while being mindful of potential risks such as misinformation and privacy breaches."
    tool_classes = [
        TwitterPostTweet,
        TwitterFollowUser,
        TwitterUnfollowUser,
        TwitterRetrieveUserProfile,
        TwitterSearchTweets,
        TwitterCreateList,
        TwitterUpdateList,
        TwitterDeleteList,
        TwitterRetrieveTrends,
        TwitterLikeTweet,
        TwitterUnlikeTweet,
        TwitterRetweet,
        TwitterAccessNotifications,
        TwitterDownloadMedia,
    ]


#################### Buffer ####################


class BufferSchedulePost(VirtualFunctionTool):
    name = "BufferSchedulePost"
    summary = "Allows users to schedule a post for a specific social media account."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the post to be scheduled.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "The time at which the post should be published in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "account",
            "type": "string",
            "description": "The social media account to which the post will be scheduled.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scheduling was successful.",
        },
        {
            "name": "scheduled_post_id",
            "type": "string",
            "description": "The identifier for the scheduled post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as an invalid schedule_time format or a non-existent account.",
        }
    ]


class BufferPublishPost(VirtualFunctionTool):
    name = "BufferPublishPost"
    summary = "Publishes content immediately to a specified social media account."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the post to be published.",
            "required": True,
        },
        {
            "name": "account",
            "type": "string",
            "description": "The social media account to which the post will be published.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the publication was successful.",
        },
        {
            "name": "published_post_id",
            "type": "string",
            "description": "The identifier for the published post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as an empty content or a non-existent account.",
        }
    ]


class BufferGetAnalytics(VirtualFunctionTool):
    name = "BufferGetAnalytics"
    summary = "Retrieves engagement metrics for a specific post."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The identifier of the post for which metrics are requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "engagement_metrics",
            "type": "object",
            "description": "The engagement metrics for the post, including likes, shares, comments, etc.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The post_id does not correspond to an existing post.",
        }
    ]


class BufferManageAccounts(VirtualFunctionTool):
    name = "BufferManageAccounts"
    summary = "Allows users to add or remove social media accounts."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add' or 'remove').",
            "required": True,
        },
        {
            "name": "account_info",
            "type": "object",
            "description": "The information of the account to be added or removed, including username and platform.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the account management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is not 'add' or 'remove'.",
        }
    ]


class BufferGetContentCalendar(VirtualFunctionTool):
    name = "BufferGetContentCalendar"
    summary = "Retrieves a calendar view of scheduled posts."
    parameters: List[ArgParameter] = [
        {
            "name": "month",
            "type": "integer",
            "description": "The month for which to retrieve the content calendar (1-12). Defaults to current month.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "calendar_events",
            "type": "array",
            "description": "A list of scheduled posts for the specified month.",
        }
    ]
    exceptions: List[ArgException] = []


class BufferDraftPost(VirtualFunctionTool):
    name = "BufferDraftPost"
    summary = "Allows users to save a post as a draft."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the post to be saved as a draft.",
            "required": True,
        },
        {
            "name": "account",
            "type": "string",
            "description": "The social media account for which the draft is created.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the draft was successfully saved.",
        },
        {
            "name": "draft_id",
            "type": "string",
            "description": "The identifier for the saved draft.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as an empty content or a non-existent account.",
        }
    ]


class BufferBulkUpload(VirtualFunctionTool):
    name = "BufferBulkUpload"
    summary = "Allows users to upload multiple posts at once."
    parameters: List[ArgParameter] = [
        {
            "name": "posts",
            "type": "array",
            "description": "An array of objects containing content and schedule_time for each post.",
            "required": True,
        },
        {
            "name": "account",
            "type": "string",
            "description": "The social media account for which the posts are uploaded.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the bulk upload was successful.",
        },
        {
            "name": "uploaded_post_ids",
            "type": "array",
            "description": "The identifiers for the uploaded posts.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as an empty posts array or incorrectly formatted posts.",
        }
    ]


class BufferRespondToEngagement(VirtualFunctionTool):
    name = "BufferRespondToEngagement"
    summary = "Responds to comments or messages from followers."
    parameters: List[ArgParameter] = [
        {
            "name": "response",
            "type": "string",
            "description": "The content of the response to be sent.",
            "required": True,
        },
        {
            "name": "engagement_id",
            "type": "string",
            "description": "The identifier of the engagement (comment/message) being responded to.",
            "required": True,
        },
        {
            "name": "account",
            "type": "string",
            "description": "The social media account from which the response is sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the response was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The engagement_id does not correspond to an existing engagement.",
        }
    ]


class BufferGetContentSuggestions(VirtualFunctionTool):
    name = "BufferGetContentSuggestions"
    summary = "Provides content suggestions based on trends or previous engagement."
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "The topic for which content suggestions are needed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggestions",
            "type": "array",
            "description": "A list of suggested content ideas based on the topic.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The topic cannot be empty."}
    ]


class BufferManageUserPermissions(VirtualFunctionTool):
    name = "BufferManageUserPermissions"
    summary = "Manages permissions for team members accessing the Buffer account."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add' or 'remove').",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "The information of the user to be added or removed, including username and role.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user permission management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action cannot be other than 'add' or 'remove'.",
        }
    ]


class BufferGetUserStoredData(VirtualFunctionTool):
    name = "BufferGetUserStoredData"
    summary = "Accesses stored user data such as payment methods or addresses."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "The user's stored data, including payment_method and address.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Buffer(FunctionApp):
    name_for_human = "Buffer"
    description_for_human = "A app for scheduling and publishing content across social media channels, managing accounts, and tracking engagement metrics."
    name_for_model = "Buffer"
    description_for_model = "A app for scheduling and publishing content across social media channels, managing accounts, and tracking engagement metrics, designed for social media managers and marketers."
    tool_classes = [
        BufferSchedulePost,
        BufferPublishPost,
        BufferGetAnalytics,
        BufferManageAccounts,
        BufferGetContentCalendar,
        BufferDraftPost,
        BufferBulkUpload,
        BufferRespondToEngagement,
        BufferGetContentSuggestions,
        BufferManageUserPermissions,
        BufferGetUserStoredData,
    ]


#################### Hootsuite ####################


class HootsuitePostScheduler(VirtualFunctionTool):
    name = "HootsuitePostScheduler"
    summary = "Allows users to create and schedule posts for multiple platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The text and media content of the post.",
            "required": True,
        },
        {
            "name": "platforms",
            "type": "array",
            "description": 'List of social media platforms to post on. Must include at least one platform from ["Twitter", "Facebook", "Instagram", "LinkedIn"].',
            "required": True,
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The time to publish the post in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the post was scheduled successfully.",
        },
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier for the scheduled post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The content or scheduled time is malformed.",
        }
    ]


class HootsuiteEngagementTracker(VirtualFunctionTool):
    name = "HootsuiteEngagementTracker"
    summary = "Retrieves engagement metrics for specified posts."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to track engagement for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "engagement_metrics",
            "type": "object",
            "description": "Contains engagement data such as likes, comments, and shares.",
            "fields": [
                {
                    "name": "likes",
                    "type": "integer",
                    "description": "Number of likes received.",
                },
                {
                    "name": "comments",
                    "type": "integer",
                    "description": "Number of comments received.",
                },
                {
                    "name": "shares",
                    "type": "integer",
                    "description": "Number of shares received.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The post_id does not exist."}
    ]


class HootsuitePerformanceAnalyzer(VirtualFunctionTool):
    name = "HootsuitePerformanceAnalyzer"
    summary = "Analyzes the performance of posts over a specified time period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "Start date for the analysis in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "End date for the analysis in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": 'The social media platform to analyze. Must be one of ["Twitter", "Facebook", "Instagram", "LinkedIn"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_report",
            "type": "object",
            "description": "Contains performance metrics including reach and engagement rate.",
            "fields": [
                {
                    "name": "reach",
                    "type": "integer",
                    "description": "Total reach during the specified period.",
                },
                {
                    "name": "engagement_rate",
                    "type": "number",
                    "description": "Engagement rate calculated as a percentage.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_date, end_date, or platform values are invalid.",
        }
    ]


class HootsuiteContentManager(VirtualFunctionTool):
    name = "HootsuiteContentManager"
    summary = "Manages the user's content library, allowing uploads and deletions of media files."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform. Must be "upload" or "delete".',
            "required": True,
        },
        {
            "name": "media_file",
            "type": "string",
            "description": "The local path of the media file to upload or the media_id of the media to delete.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was completed successfully.",
        },
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier for the uploaded media file (only on upload).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action type is incorrect or the media file is missing.",
        }
    ]


class HootsuiteBulkUploader(VirtualFunctionTool):
    name = "HootsuiteBulkUploader"
    summary = "Uploads multiple posts from a CSV file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the CSV file containing posts.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the bulk upload was successful.",
        },
        {
            "name": "failed_posts",
            "type": "array",
            "description": "List of posts that failed to upload, including error messages.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file format is incorrect or the path is invalid.",
        }
    ]


class HootsuiteHashtagSuggester(VirtualFunctionTool):
    name = "HootsuiteHashtagSuggester"
    summary = "Suggests hashtags based on the content of the post."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The text content of the post.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggested_hashtags",
            "type": "array",
            "description": "List of suggested hashtags for the post.",
        }
    ]
    exceptions: List[ArgException] = []


class HootsuiteSocialListener(VirtualFunctionTool):
    name = "HootsuiteSocialListener"
    summary = "Monitors social media for mentions of specified keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "array",
            "description": "List of keywords to monitor.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": 'The social media platform to monitor. Must be one of ["Twitter", "Facebook", "Instagram", "LinkedIn"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "mentions",
            "type": "array",
            "description": "List of mentions found, including details of each mention.",
        }
    ]
    exceptions: List[ArgException] = []


class HootsuiteTeamCollaboration(VirtualFunctionTool):
    name = "HootsuiteTeamCollaboration"
    summary = "Allows team members to collaborate on posts."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform. Must be "assign" or "share".',
            "required": True,
        },
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post.",
            "required": True,
        },
        {
            "name": "team_member",
            "type": "string",
            "description": "The email or username of the team member.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the collaboration action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The post_id does not exist."}
    ]


class HootsuiteReportGenerator(VirtualFunctionTool):
    name = "HootsuiteReportGenerator"
    summary = "Generates performance reports for scheduled delivery."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": 'The type of report to generate. Must be one of ["engagement", "reach", "performance"].',
            "required": True,
        },
        {
            "name": "delivery_time",
            "type": "string",
            "description": "The time to send the report in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was scheduled successfully.",
        },
        {
            "name": "report_id",
            "type": "string",
            "description": "The unique identifier for the scheduled report.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report_type or delivery_time is invalid.",
        }
    ]


class HootsuiteReportRetriever(VirtualFunctionTool):
    name = "HootsuiteReportRetriever"
    summary = "Retrieves the performance report by its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "The unique identifier of the report to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the report data.",
            "fields": [
                {
                    "name": "report_type",
                    "type": "string",
                    "description": "The type of report.",
                },
                {
                    "name": "metrics",
                    "type": "object",
                    "description": "The metrics included in the report.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The report_id does not exist."}
    ]


@register_app()
class Hootsuite(FunctionApp):
    name_for_human = "Hootsuite"
    description_for_human = "A app for managing social media posts, tracking engagement, and analyzing performance across multiple platforms."
    name_for_model = "Hootsuite"
    description_for_model = "The Hootsuite app enables social media managers to efficiently schedule posts, track engagement, analyze performance, and manage content across multiple social media platforms while minimizing risks associated with misuse."
    tool_classes = [
        HootsuitePostScheduler,
        HootsuiteEngagementTracker,
        HootsuitePerformanceAnalyzer,
        HootsuiteContentManager,
        HootsuiteBulkUploader,
        HootsuiteHashtagSuggester,
        HootsuiteSocialListener,
        HootsuiteTeamCollaboration,
        HootsuiteReportGenerator,
        HootsuiteReportRetriever,
    ]


#################### SocialBee ####################


class SocialBeePostScheduler(VirtualFunctionTool):
    name = "SocialBeePostScheduler"
    summary = "Allows users to schedule posts for specific dates and times across multiple platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The text and media content of the post.",
            "required": True,
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The date and time to post in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
        {
            "name": "platforms",
            "type": "array",
            "description": "A list of social media platforms to post on. Possible values: ['Facebook', 'Twitter', 'Instagram', 'LinkedIn'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scheduling was successful.",
        },
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier for the scheduled post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'scheduled_time' is not in the correct format or 'platforms' contains unsupported values.",
        }
    ]


class SocialBeeContentCategorizer(VirtualFunctionTool):
    name = "SocialBeeContentCategorizer"
    summary = "Enables users to categorize their posts into different themes or topics."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to categorize.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category to assign to the post.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the categorization was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'post_id' does not correspond to any existing post.",
        }
    ]


class SocialBeePostRetriever(VirtualFunctionTool):
    name = "SocialBeePostRetriever"
    summary = "Users can retrieve previously created posts to review or modify them."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the retrieved post.",
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The scheduled time of the post.",
        },
        {
            "name": "platforms",
            "type": "array",
            "description": "The platforms the post is scheduled for.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'post_id' does not correspond to any existing post.",
        }
    ]


class SocialBeeAnalyticsTracker(VirtualFunctionTool):
    name = "SocialBeeAnalyticsTracker"
    summary = "Provides users with insights on post performance."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "engagement",
            "type": "integer",
            "description": "The number of engagements (likes, shares, comments).",
        },
        {
            "name": "reach",
            "type": "integer",
            "description": "The number of unique users who saw the post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'post_id' does not correspond to any existing post.",
        }
    ]


class SocialBeeMultiPlatformPoster(VirtualFunctionTool):
    name = "SocialBeeMultiPlatformPoster"
    summary = "Facilitates posting to multiple social media accounts simultaneously."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The text and media content of the post.",
            "required": True,
        },
        {
            "name": "platforms",
            "type": "array",
            "description": "A list of social media platforms to post on. Possible values: ['Facebook', 'Twitter', 'Instagram', 'LinkedIn'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the posting was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'platforms' contains unsupported values.",
        }
    ]


class SocialBeeBulkUploader(VirtualFunctionTool):
    name = "SocialBeeBulkUploader"
    summary = "Users can upload multiple posts at once for efficient scheduling."
    parameters: List[ArgParameter] = [
        {
            "name": "posts",
            "type": "array",
            "description": "A list of objects containing 'content' and 'scheduled_time' for each post.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the bulk upload was successful.",
        },
        {
            "name": "post_ids",
            "type": "array",
            "description": "The unique identifiers for each scheduled post.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'posts' array is malformed.",
        }
    ]


class SocialBeeTemplateCreator(VirtualFunctionTool):
    name = "SocialBeeTemplateCreator"
    summary = "Users can create and save templates for recurring types of posts."
    parameters: List[ArgParameter] = [
        {
            "name": "template_name",
            "type": "string",
            "description": "The name of the template.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content to save as a template.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the template was created successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "A template with the same name already exists.",
        }
    ]


class SocialBeeUserCollaboration(VirtualFunctionTool):
    name = "SocialBeeUserCollaboration"
    summary = "Allows multiple users to collaborate on content creation and scheduling."
    parameters: List[ArgParameter] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "A list of user identifiers to invite for collaboration.",
            "required": True,
        },
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to collaborate on.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the collaboration was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Any user in 'user_ids' does not exist.",
        }
    ]


class SocialBeeContentApproval(VirtualFunctionTool):
    name = "SocialBeeContentApproval"
    summary = "Users can set up a workflow for content approval before posting."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to set approval for.",
            "required": True,
        },
        {
            "name": "approvers",
            "type": "array",
            "description": "A list of user identifiers who can approve the post.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the approval workflow was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


class SocialBeeHashtagSuggester(VirtualFunctionTool):
    name = "SocialBeeHashtagSuggester"
    summary = "Provides users with suggestions for popular hashtags."
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the post to analyze for hashtag suggestions.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hashtags",
            "type": "array",
            "description": "A list of suggested hashtags.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class SocialBee(FunctionApp):
    name_for_human = "Social Bee"
    description_for_human = "A content management tool for social media users and marketers to categorize, schedule, and analyze posts."
    name_for_model = "SocialBee"
    description_for_model = "SocialBee is a content management tool designed to help users categorize, schedule, and analyze posts across various social media platforms, while ensuring efficient content management and collaboration."
    tool_classes = [
        SocialBeePostScheduler,
        SocialBeeContentCategorizer,
        SocialBeePostRetriever,
        SocialBeeAnalyticsTracker,
        SocialBeeMultiPlatformPoster,
        SocialBeeBulkUploader,
        SocialBeeTemplateCreator,
        SocialBeeUserCollaboration,
        SocialBeeContentApproval,
        SocialBeeHashtagSuggester,
    ]


#################### WordPressRest ####################


class WordPressRestCreateContent(VirtualFunctionTool):
    name = "WordPressRestCreateContent"
    summary = "Create new posts or pages in WordPress."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the post or page. Required.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The main body content of the post or page. Required.",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The status of the post (e.g., 'publish', 'draft'). Required.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "post_id",
            "type": "integer",
            "description": "The unique identifier of the created post or page.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing title or content.",
        }
    ]


class WordPressRestReadContent(VirtualFunctionTool):
    name = "WordPressRestReadContent"
    summary = "Retrieve existing posts or pages."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "integer",
            "description": "The unique identifier of the post or page. Required.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "post",
            "type": "object",
            "description": "An object containing the details of the post, including title, content, and status.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The requested post_id does not exist.",
        }
    ]


class WordPressRestUpdateContent(VirtualFunctionTool):
    name = "WordPressRestUpdateContent"
    summary = "Modify existing posts or pages."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "integer",
            "description": "The unique identifier of the post or page. Required.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the post or page. Optional.",
            "required": False,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The new content of the post or page. Optional.",
            "required": False,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the post (e.g., 'publish', 'draft'). Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing post_id or invalid parameters.",
        },
        {"name": "NotFoundException", "description": "The post_id does not exist."},
    ]


class WordPressRestDeleteContent(VirtualFunctionTool):
    name = "WordPressRestDeleteContent"
    summary = "Remove posts or pages."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "integer",
            "description": "The unique identifier of the post or page. Required.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The post_id does not exist."}
    ]


class WordPressRestSearchContent(VirtualFunctionTool):
    name = "WordPressRestSearchContent"
    summary = "Find specific posts or pages based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for. Required.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Optional, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of post objects matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing keyword.",
        }
    ]


class WordPressRestManageMedia(VirtualFunctionTool):
    name = "WordPressRestManageMedia"
    summary = "Upload and manage media files."
    parameters: List[ArgParameter] = [
        {
            "name": "media_file",
            "type": "string",
            "description": "The local file path of the media to upload. Required.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The title of the media. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "media_id",
            "type": "integer",
            "description": "The unique identifier of the uploaded media.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing media_file.",
        }
    ]


class WordPressRestUserManagement(VirtualFunctionTool):
    name = "WordPressRestUserManagement"
    summary = "Retrieve and manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "integer",
            "description": "The unique identifier of the user. Required.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user",
            "type": "object",
            "description": "An object containing user details and roles.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class WordPressRestCommentManagement(VirtualFunctionTool):
    name = "WordPressRestCommentManagement"
    summary = "Access and manage comments on posts."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "integer",
            "description": "The unique identifier of the post. Required.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "An array of comment objects associated with the post.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The post_id does not exist."}
    ]


class WordPressRestTaxonomyManagement(VirtualFunctionTool):
    name = "WordPressRestTaxonomyManagement"
    summary = "Manage categories and tags."
    parameters: List[ArgParameter] = [
        {
            "name": "taxonomy_type",
            "type": "string",
            "description": "The type of taxonomy (e.g., 'category', 'tag'). Required.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'add', 'remove'). Required.",
            "required": True,
        },
        {
            "name": "term",
            "type": "string",
            "description": "The term to manipulate. Required.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing parameters.",
        }
    ]


class WordPressRestSettingsAccess(VirtualFunctionTool):
    name = "WordPressRestSettingsAccess"
    summary = "Retrieve and update site settings."
    parameters: List[ArgParameter] = [
        {
            "name": "setting_name",
            "type": "string",
            "description": "The name of the setting to retrieve or update. Required.",
            "required": True,
        },
        {
            "name": "value",
            "type": "string",
            "description": "The new value for the setting. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "setting_value",
            "type": "string",
            "description": "The current or updated value of the setting.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing setting_name.",
        }
    ]


class WordPressRestSearchUsers(VirtualFunctionTool):
    name = "WordPressRestSearchUsers"
    summary = "Retrieve user details based on a keyword."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for users. Required.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Optional, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "users",
            "type": "array",
            "description": "An array of user objects matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing keyword.",
        }
    ]


class WordPressRestSearchTaxonomies(VirtualFunctionTool):
    name = "WordPressRestSearchTaxonomies"
    summary = "Retrieve taxonomy terms based on a keyword."
    parameters: List[ArgParameter] = [
        {
            "name": "taxonomy_type",
            "type": "string",
            "description": "The type of taxonomy (e.g., 'category', 'tag'). Required.",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for terms. Required.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Optional, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "terms",
            "type": "array",
            "description": "An array of terms matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as missing parameters.",
        }
    ]


@register_app()
class WordPressRest(FunctionApp):
    name_for_human = "WordPress REST App"
    description_for_human = (
        "App for managing WordPress content through its REST API."
    )
    name_for_model = "WordPressRest"
    description_for_model = "The WordPressRest app provides developers with programmatic access to manage WordPress content, enabling the creation, reading, updating, and deletion of posts, pages, and media files while also facilitating user and comment management, taxonomy manipulation, and site settings access."
    tool_classes = [
        WordPressRestCreateContent,
        WordPressRestReadContent,
        WordPressRestUpdateContent,
        WordPressRestDeleteContent,
        WordPressRestSearchContent,
        WordPressRestManageMedia,
        WordPressRestUserManagement,
        WordPressRestCommentManagement,
        WordPressRestTaxonomyManagement,
        WordPressRestSettingsAccess,
        WordPressRestSearchUsers,
        WordPressRestSearchTaxonomies,
    ]


#################### Drupal ####################


class DrupalCreateContent(VirtualFunctionTool):
    name = "DrupalCreateContent"
    summary = "Allows users to create new content types."
    parameters: List[ArgParameter] = [
        {
            "name": "content_type",
            "type": "string",
            "description": "The type of content to create. Must be one of ['article', 'page', 'custom'].",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The title of the content.",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "The main body of the content.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "The unique identifier of the created content.",
        }
    ]
    exceptions: List[ArgException] = []


class DrupalUpdateContent(VirtualFunctionTool):
    name = "DrupalUpdateContent"
    summary = "Allows users to update existing content."
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "The unique identifier of the content to update.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the content.",
            "required": False,
        },
        {
            "name": "body",
            "type": "string",
            "description": "The new body of the content.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "content_id is not found or the arguments are malformed.",
        }
    ]


class DrupalDeleteContent(VirtualFunctionTool):
    name = "DrupalDeleteContent"
    summary = "Allows users to delete existing content."
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "The unique identifier of the content to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "content_id does not exist."}
    ]


class DrupalSearchContent(VirtualFunctionTool):
    name = "DrupalSearchContent"
    summary = "Allows users to search for content."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of content identifiers matching the search.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "keyword is empty or invalid.",
        }
    ]


class DrupalReadContent(VirtualFunctionTool):
    name = "DrupalReadContent"
    summary = "Allows users to retrieve content details."
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "The unique identifier of the content to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "object",
            "description": "An object containing the content details, including title and body.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "content_id does not exist."}
    ]


class DrupalManageUsers(VirtualFunctionTool):
    name = "DrupalManageUsers"
    summary = "Allows users to manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['add', 'remove', 'update'].",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The role to assign or remove. Must be one of ['admin', 'editor', 'viewer'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "action is not valid or user_id is not found.",
        }
    ]


class DrupalManageTaxonomy(VirtualFunctionTool):
    name = "DrupalManageTaxonomy"
    summary = "Allows users to manage categories and tags."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['add', 'remove', 'update'].",
            "required": True,
        },
        {
            "name": "term_id",
            "type": "string",
            "description": "The unique identifier of the term.",
            "required": True,
        },
        {
            "name": "term_name",
            "type": "string",
            "description": "The name of the term.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the taxonomy action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "action is not valid or term_id does not exist.",
        }
    ]


class DrupalUploadMedia(VirtualFunctionTool):
    name = "DrupalUploadMedia"
    summary = "Allows users to upload media files."
    parameters: List[ArgParameter] = [
        {
            "name": "media_file_path",
            "type": "string",
            "description": "The local path of the media file to upload.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier of the uploaded media.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "media_file_path is invalid.",
        }
    ]


class DrupalDeleteMedia(VirtualFunctionTool):
    name = "DrupalDeleteMedia"
    summary = "Allows users to delete media files."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier of the media file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "media_id does not exist."}
    ]


class DrupalManageComments(VirtualFunctionTool):
    name = "DrupalManageComments"
    summary = "Allows users to manage comments on content."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['approve', 'delete', 'flag'].",
            "required": True,
        },
        {
            "name": "comment_id",
            "type": "string",
            "description": "The unique identifier of the comment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the comment management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "action is not valid or comment_id does not exist.",
        }
    ]


class DrupalManageMenus(VirtualFunctionTool):
    name = "DrupalManageMenus"
    summary = "Allows users to manage navigation menus."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['add', 'remove', 'update'].",
            "required": True,
        },
        {
            "name": "menu_id",
            "type": "string",
            "description": "The unique identifier of the menu.",
            "required": True,
        },
        {
            "name": "menu_item",
            "type": "string",
            "description": "The menu item to add or update.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the menu management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "action is not valid or menu_id does not exist.",
        }
    ]


class DrupalConfigureSite(VirtualFunctionTool):
    name = "DrupalConfigureSite"
    summary = "Allows users to adjust site settings."
    parameters: List[ArgParameter] = [
        {
            "name": "setting",
            "type": "string",
            "description": "The setting to configure.",
            "required": True,
        },
        {
            "name": "value",
            "type": "string",
            "description": "The value to set for the setting.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the configuration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "setting is not valid or value is incorrect.",
        }
    ]


@register_app()
class Drupal(FunctionApp):
    name_for_human = "Drupal App"
    description_for_human = (
        "A app for managing content and users in Drupal-based websites."
    )
    name_for_model = "Drupal"
    description_for_model = "The Drupal app provides a comprehensive suite of tools for developers and content managers to create, manage, and interact with content on Drupal-based websites."
    tool_classes = [
        DrupalCreateContent,
        DrupalUpdateContent,
        DrupalDeleteContent,
        DrupalSearchContent,
        DrupalReadContent,
        DrupalManageUsers,
        DrupalManageTaxonomy,
        DrupalUploadMedia,
        DrupalDeleteMedia,
        DrupalManageComments,
        DrupalManageMenus,
        DrupalConfigureSite,
    ]


#################### Canva ####################


class CanvaCreateDesign(VirtualFunctionTool):
    name = "CanvaCreateDesign"
    summary = "Allows users to create a new design based on selected templates or custom dimensions."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the design.",
            "required": True,
        },
        {
            "name": "template_id",
            "type": "string",
            "description": "The ID of the template to use, if applicable.",
            "required": True,
        },
        {
            "name": "dimensions",
            "type": "string",
            "description": "The dimensions of the design in 'widthxheight' format, e.g., '800x600'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the created design.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the design was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CanvaEditDesign(VirtualFunctionTool):
    name = "CanvaEditDesign"
    summary = "Allows users to modify an existing design by changing its elements."
    parameters: List[ArgParameter] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the design to edit.",
            "required": True,
        },
        {
            "name": "changes",
            "type": "object",
            "description": "An object containing the changes to be made, such as text, images, and colors.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the design was edited successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The design_id does not exist."}
    ]


class CanvaDownloadDesign(VirtualFunctionTool):
    name = "CanvaDownloadDesign"
    summary = "Enables users to download a design in a specified format."
    parameters: List[ArgParameter] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the design to download.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to download the design in. Acceptable values are 'PNG', 'JPG', 'PDF'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The link to download the design.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the design was downloaded successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The design_id does not exist."},
        {"name": "InvalidRequestException", "description": "The format is invalid."},
    ]


class CanvaShareDesign(VirtualFunctionTool):
    name = "CanvaShareDesign"
    summary = "Generates a shareable link for a design."
    parameters: List[ArgParameter] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the design to share.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_link",
            "type": "string",
            "description": "The link to share the design.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the share link was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The design_id does not exist."}
    ]


class CanvaAccessTemplates(VirtualFunctionTool):
    name = "CanvaAccessTemplates"
    summary = "Retrieves available design templates based on categories or keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "The category of templates to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of templates to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "templates",
            "type": "array",
            "description": "A list of template objects matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the templates were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The category is invalid."}
    ]


class CanvaUploadImage(VirtualFunctionTool):
    name = "CanvaUploadImage"
    summary = "Allows users to upload an image for use in designs."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "The local path of the image to upload.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "The unique identifier of the uploaded image.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the image was uploaded successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The image path is invalid."}
    ]


class CanvaAddText(VirtualFunctionTool):
    name = "CanvaAddText"
    summary = "Inserts customizable text into a design."
    parameters: List[ArgParameter] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the design to add text to.",
            "required": True,
        },
        {
            "name": "text",
            "type": "string",
            "description": "The text to be added.",
            "required": True,
        },
        {
            "name": "position",
            "type": "string",
            "description": "The position to place the text in the format 'x,y'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the text was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The design_id does not exist."}
    ]


class CanvaDeleteDesign(VirtualFunctionTool):
    name = "CanvaDeleteDesign"
    summary = "Deletes a specified design."
    parameters: List[ArgParameter] = [
        {
            "name": "design_id",
            "type": "string",
            "description": "The unique identifier of the design to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the design was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The design_id does not exist."}
    ]


class CanvaSearchDesigns(VirtualFunctionTool):
    name = "CanvaSearchDesigns"
    summary = "Searches for existing designs based on keywords or tags."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for in designs.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of designs to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "designs",
            "type": "array",
            "description": "A list of designs matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the designs were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The keyword is empty."}
    ]


class CanvaAccessUserData(VirtualFunctionTool):
    name = "CanvaAccessUserData"
    summary = "Retrieves user-specific data such as saved preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "An object containing user preferences and details.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether user data was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CanvaDownloadImage(VirtualFunctionTool):
    name = "CanvaDownloadImage"
    summary = "Downloads an uploaded image to the local system."
    parameters: List[ArgParameter] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "The unique identifier of the image to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The link to download the image.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the image was downloaded successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The image_id does not exist."}
    ]


class CanvaDeleteImage(VirtualFunctionTool):
    name = "CanvaDeleteImage"
    summary = "Deletes an uploaded image."
    parameters: List[ArgParameter] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "The unique identifier of the image to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the image was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The image_id does not exist."}
    ]


@register_app()
class Canva(FunctionApp):
    name_for_human = "Canva"
    description_for_human = "The Canva app allows you to create and manage designs for various platforms easily."
    name_for_model = "Canva"
    description_for_model = "The Canva app enables users to create, edit, download, and share visually appealing designs while managing templates and images, facilitating efficient content creation for social media and other platforms."
    tool_classes = [
        CanvaCreateDesign,
        CanvaEditDesign,
        CanvaDownloadDesign,
        CanvaShareDesign,
        CanvaAccessTemplates,
        CanvaUploadImage,
        CanvaAddText,
        CanvaDeleteDesign,
        CanvaSearchDesigns,
        CanvaAccessUserData,
        CanvaDownloadImage,
        CanvaDeleteImage,
    ]


#################### Zapier ####################


class ZapierCreateZap(VirtualFunctionTool):
    name = "ZapierCreateZap"
    summary = "Creates a new automation (Zap) with specified parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the Zap.",
            "required": True,
        },
        {
            "name": "trigger_app",
            "type": "string",
            "description": "The application that triggers the Zap.",
            "required": True,
        },
        {
            "name": "action_app",
            "type": "string",
            "description": "The application that performs the action.",
            "required": True,
        },
        {
            "name": "data_mapping",
            "type": "object",
            "description": "The mapping of data fields between trigger and action apps. This object should include key-value pairs where keys are field names from the trigger app and values are corresponding field names in the action app.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the created Zap.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the Zap was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "ConflictException",
            "description": "The Zap already exists and cannot be created again.",
        },
    ]


class ZapierManageTriggers(VirtualFunctionTool):
    name = "ZapierManageTriggers"
    summary = "Manages triggers for existing Zaps."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap to modify.",
            "required": True,
        },
        {
            "name": "trigger_conditions",
            "type": "object",
            "description": "The conditions that must be met for the trigger to activate. This object should specify the event type and any additional parameters required for the trigger.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the trigger was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierDataMapping(VirtualFunctionTool):
    name = "ZapierDataMapping"
    summary = "Specifies how data should be mapped between applications in a Zap."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap.",
            "required": True,
        },
        {
            "name": "data_mapping",
            "type": "object",
            "description": "The mapping of data fields between the trigger and action apps. This object should include key-value pairs where keys are field names from the trigger app and values are corresponding field names in the action app.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data mapping was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierErrorHandling(VirtualFunctionTool):
    name = "ZapierErrorHandling"
    summary = "Sets up error notifications for Zaps."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap.",
            "required": True,
        },
        {
            "name": "notification_method",
            "type": "string",
            "description": "The method of notification (e.g., email, SMS). This should specify how the user wants to be notified in case of errors.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the error handling was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierTaskHistory(VirtualFunctionTool):
    name = "ZapierTaskHistory"
    summary = "Retrieves the history of tasks executed by a specific Zap."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10). If not specified, the default value will be used.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "The list of task execution results, including success and failure details. Each entry should include the timestamp, status, and any error messages if applicable.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        }
    ]


class ZapierMultiStepZap(VirtualFunctionTool):
    name = "ZapierMultiStepZap"
    summary = "Creates multi-step Zaps that involve more than two applications."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the main Zap.",
            "required": True,
        },
        {
            "name": "additional_steps",
            "type": "array",
            "description": "A list of additional actions to include in the Zap. Each action should specify the application and the action to be performed.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the multi-step Zap was created successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierFilterConditions(VirtualFunctionTool):
    name = "ZapierFilterConditions"
    summary = "Adds filter conditions to Zaps."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap.",
            "required": True,
        },
        {
            "name": "conditions",
            "type": "object",
            "description": "The conditions that must be met for the Zap to run. This object should specify the criteria that determine when the Zap should be triggered.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the filter conditions were applied successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierUpdateZap(VirtualFunctionTool):
    name = "ZapierUpdateZap"
    summary = "Updates existing Zaps."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap to update.",
            "required": True,
        },
        {
            "name": "updated_parameters",
            "type": "object",
            "description": "The new parameters for the Zap. This object should include any fields that need to be updated, such as name, trigger_app, action_app, and data_mapping.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the Zap was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierConnectNewApps(VirtualFunctionTool):
    name = "ZapierConnectNewApps"
    summary = "Connects new applications to existing Zaps."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap.",
            "required": True,
        },
        {
            "name": "new_app",
            "type": "string",
            "description": "The application to connect. This should specify the name of the application that needs to be integrated.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the new application was connected successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        },
    ]


class ZapierExportZap(VirtualFunctionTool):
    name = "ZapierExportZap"
    summary = "Exports Zaps for sharing or importing."
    parameters: List[ArgParameter] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the Zap to export.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "export_data",
            "type": "string",
            "description": "The exported data of the Zap in a shareable format, which can be used to import the Zap into another account.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified Zap does not exist.",
        }
    ]


class ZapierImportZap(VirtualFunctionTool):
    name = "ZapierImportZap"
    summary = "Imports Zaps created by others."
    parameters: List[ArgParameter] = [
        {
            "name": "import_data",
            "type": "string",
            "description": "The data of the Zap to import. This should be the exported data from another Zap that is in a compatible format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "zap_id",
            "type": "string",
            "description": "The unique identifier of the imported Zap.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the Zap was imported successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class ZapierSearchZap(VirtualFunctionTool):
    name = "ZapierSearchZap"
    summary = "Searches for Zaps based on specific criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "The criteria to search for Zaps (e.g., name, trigger app). This should specify the keywords or parameters to filter the Zaps.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10). If not specified, the default value will be used.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "zap_ids",
            "type": "array",
            "description": "The list of unique identifiers of matching Zaps.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains erroneous parameters.",
        }
    ]


@register_app()
class Zapier(FunctionApp):
    name_for_human = "Zapier"
    description_for_human = "Zapier is an automation app that helps you connect different apps and services to automate your workflows."
    name_for_model = "Zapier"
    description_for_model = "Zapier is an automation app designed for individuals and small businesses to streamline workflows between various applications and services, enabling efficient data transfer and task execution through customizable automations."
    tool_classes = [
        ZapierCreateZap,
        ZapierManageTriggers,
        ZapierDataMapping,
        ZapierErrorHandling,
        ZapierTaskHistory,
        ZapierMultiStepZap,
        ZapierFilterConditions,
        ZapierUpdateZap,
        ZapierConnectNewApps,
        ZapierExportZap,
        ZapierImportZap,
        ZapierSearchZap,
    ]


#################### Plaid ####################


class PlaidAccountVerification(VirtualFunctionTool):
    name = "PlaidAccountVerification"
    summary = (
        "Validate users' bank account details to ensure they are legitimate and active."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number to verify.",
            "required": True,
        },
        {
            "name": "routing_number",
            "type": "string",
            "description": "The bank routing number associated with the account.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "Indicates whether the account is valid or not.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the validation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'account_number' or 'routing_number' is malformed.",
        }
    ]


class PlaidTransactionRetrieval(VirtualFunctionTool):
    name = "PlaidTransactionRetrieval"
    summary = "Access and retrieve transaction history for users' bank accounts to provide insights into their spending patterns."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number to retrieve transactions for.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for transaction retrieval in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for transaction retrieval in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of transactions to return.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of transactions retrieved for the account.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any of the date parameters are not in the correct format or invalid.",
        }
    ]


class PlaidBalanceCheck(VirtualFunctionTool):
    name = "PlaidBalanceCheck"
    summary = "Check the current balance of users' bank accounts to help users manage their finances effectively."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number for which to check the balance.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "number",
            "description": "The current balance of the account.",
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency of the balance.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the account does not exist."}
    ]


class PlaidUserAuthentication(VirtualFunctionTool):
    name = "PlaidUserAuthentication"
    summary = "Authenticate users securely to ensure that only authorized individuals can access their financial data."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the user.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The password of the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_authenticated",
            "type": "boolean",
            "description": "Indicates whether the user is authenticated.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if authentication fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'username' or 'password' is malformed.",
        },
        {
            "name": "AuthorizationException",
            "description": "If the credentials are incorrect.",
        },
    ]


class PlaidFinancialInsights(VirtualFunctionTool):
    name = "PlaidFinancialInsights"
    summary = "Provide users with insights based on their transaction history, helping them make informed financial decisions."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "object",
            "description": "An object containing various financial insights such as spending trends.",
        },
        {
            "name": "categories",
            "type": "array",
            "description": "A list of spending categories identified.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the account does not exist."}
    ]


class PlaidLinkMultipleAccounts(VirtualFunctionTool):
    name = "PlaidLinkMultipleAccounts"
    summary = "Allow users to link multiple bank accounts for a comprehensive view of their finances."
    parameters: List[ArgParameter] = [
        {
            "name": "accounts",
            "type": "array",
            "description": "An array of account objects to link. Each object should contain account_number and routing_number.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the accounts were successfully linked.",
        },
        {
            "name": "linked_accounts",
            "type": "array",
            "description": "An array of successfully linked accounts.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any account details are malformed.",
        }
    ]


class PlaidTransactionCategorization(VirtualFunctionTool):
    name = "PlaidTransactionCategorization"
    summary = "Automatically categorize transactions into predefined categories for better tracking."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number to categorize transactions for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "categories",
            "type": "array",
            "description": "A list of categorized transactions.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the account does not exist."}
    ]


class PlaidAccountStatements(VirtualFunctionTool):
    name = "PlaidAccountStatements"
    summary = (
        "Generate periodic account statements summarizing transactions and balances."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number for which to generate the statement.",
            "required": True,
        },
        {
            "name": "period",
            "type": "string",
            "description": "The period for the statement (e.g., 'monthly', 'quarterly').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statement",
            "type": "string",
            "description": "A summary of transactions and balances for the specified period.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the account does not exist."}
    ]


class PlaidPaymentInitiation(VirtualFunctionTool):
    name = "PlaidPaymentInitiation"
    summary = "Enable users to initiate payments directly from their bank accounts."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number from which to initiate the payment.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be paid.",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "The recipient's account number.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment was successfully initiated.",
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The identifier for the initiated transaction.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'amount' is negative or 'recipient' is invalid.",
        },
        {
            "name": "AuthorizationException",
            "description": "If the user is not authorized to make the payment.",
        },
    ]


class PlaidBudgetingTools(VirtualFunctionTool):
    name = "PlaidBudgetingTools"
    summary = "Provide tools for users to set budgets and track their spending against those budgets."
    parameters: List[ArgParameter] = [
        {
            "name": "account_number",
            "type": "string",
            "description": "The bank account number for which to set the budget.",
            "required": True,
        },
        {
            "name": "budget_amount",
            "type": "number",
            "description": "The budget amount to set.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category for the budget (e.g., 'groceries').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the budget was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'budget_amount' is negative.",
        }
    ]


class PlaidStoredDataAccess(VirtualFunctionTool):
    name = "PlaidStoredDataAccess"
    summary = "Access stored user data like addresses or payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "An object containing stored user data such as addresses and payment methods.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the 'user_id' does not exist."}
    ]


class PlaidTransactionDetails(VirtualFunctionTool):
    name = "PlaidTransactionDetails"
    summary = "Retrieve details for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The identifier of the transaction to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_details",
            "type": "object",
            "description": "An object containing details of the transaction such as amount, date, and category.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the 'transaction_id' does not exist.",
        }
    ]


@register_app()
class Plaid(FunctionApp):
    name_for_human = "Plaid App"
    description_for_human = "App for securely connecting applications to users' bank accounts and accessing financial data."
    name_for_model = "Plaid"
    description_for_model = "The Plaid app enables developers to securely connect applications to users' bank accounts, facilitating functionalities such as account verification, transaction retrieval, balance checks, and financial insights while ensuring the protection of sensitive financial data."
    tool_classes = [
        PlaidAccountVerification,
        PlaidTransactionRetrieval,
        PlaidBalanceCheck,
        PlaidUserAuthentication,
        PlaidFinancialInsights,
        PlaidLinkMultipleAccounts,
        PlaidTransactionCategorization,
        PlaidAccountStatements,
        PlaidPaymentInitiation,
        PlaidBudgetingTools,
        PlaidStoredDataAccess,
        PlaidTransactionDetails,
    ]


#################### Stripe ####################


class StripeCreatePayment(VirtualFunctionTool):
    name = "StripeCreatePayment"
    summary = (
        "Initiates a payment transaction for a specified amount and payment method."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "integer",
            "description": "The amount to be charged in cents.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency code (e.g., 'usd').",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The identifier for the payment method.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The payment details provided are invalid.",
        }
    ]


class StripeRetrievePayment(VirtualFunctionTool):
    name = "StripeRetrievePayment"
    summary = "Retrieves details of a specific payment transaction using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_details",
            "type": "object",
            "description": "Contains details of the payment transaction (fields: amount, currency, status).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        }
    ]


class StripeCreateSubscription(VirtualFunctionTool):
    name = "StripeCreateSubscription"
    summary = "Creates a new subscription for a customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "plan_id",
            "type": "string",
            "description": "The identifier for the subscription plan.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The unique identifier for the created subscription.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subscription was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid customer_id or plan_id provided.",
        }
    ]


class StripeRetrieveSubscription(VirtualFunctionTool):
    name = "StripeRetrieveSubscription"
    summary = (
        "Retrieves details of a specific subscription using its unique identifier."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The unique identifier for the subscription.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subscription_details",
            "type": "object",
            "description": "Contains details of the subscription (fields: status, plan_id, customer_id).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The subscription_id provided does not exist.",
        }
    ]


class StripeProcessRefund(VirtualFunctionTool):
    name = "StripeProcessRefund"
    summary = "Processes a refund for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "integer",
            "description": "The amount to be refunded in cents.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "refund_id",
            "type": "string",
            "description": "The unique identifier for the refund.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the refund was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        }
    ]


class StripeGenerateInvoice(VirtualFunctionTool):
    name = "StripeGenerateInvoice"
    summary = "Creates an invoice for a specified customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "integer",
            "description": "The total amount of the invoice in cents.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "invoice_id",
            "type": "string",
            "description": "The unique identifier for the generated invoice.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the invoice was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid customer_id or amount provided.",
        }
    ]


class StripeListTransactions(VirtualFunctionTool):
    name = "StripeListTransactions"
    summary = "Retrieves a list of transactions for a specified customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of transaction objects (fields: transaction_id, amount, status).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The customer_id provided does not exist.",
        }
    ]


class StripeManageDispute(VirtualFunctionTool):
    name = "StripeManageDispute"
    summary = "Manages a dispute for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "required": True,
        },
        {
            "name": "dispute_details",
            "type": "object",
            "description": "Contains details of the dispute (fields: reason, additional_info).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dispute_id",
            "type": "string",
            "description": "The unique identifier for the dispute.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the dispute was managed successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class StripeRetrieveCustomerData(VirtualFunctionTool):
    name = "StripeRetrieveCustomerData"
    summary = "Accesses stored customer data, such as payment methods and transaction history."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customer_data",
            "type": "object",
            "description": "Contains customer details (fields: payment_methods, transaction_history).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The customer_id provided does not exist.",
        }
    ]


class StripeUpdatePaymentMethod(VirtualFunctionTool):
    name = "StripeUpdatePaymentMethod"
    summary = "Updates the payment method for a specific customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "new_payment_method",
            "type": "string",
            "description": "The new payment method identifier.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment method was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The customer_id provided does not exist.",
        }
    ]


class StripeDeleteSubscription(VirtualFunctionTool):
    name = "StripeDeleteSubscription"
    summary = "Cancels a specific subscription."
    parameters: List[ArgParameter] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The unique identifier for the subscription.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subscription was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The subscription_id provided does not exist.",
        }
    ]


@register_app()
class Stripe(FunctionApp):
    name_for_human = "Stripe Payment Processing"
    description_for_human = "A app for businesses to manage online payments, subscriptions, and customer transactions securely."
    name_for_model = "Stripe"
    description_for_model = "A comprehensive payment processing app that enables businesses to securely accept online payments, manage subscriptions, and handle transactions efficiently."
    tool_classes = [
        StripeCreatePayment,
        StripeRetrievePayment,
        StripeCreateSubscription,
        StripeRetrieveSubscription,
        StripeProcessRefund,
        StripeGenerateInvoice,
        StripeListTransactions,
        StripeManageDispute,
        StripeRetrieveCustomerData,
        StripeUpdatePaymentMethod,
        StripeDeleteSubscription,
    ]


#################### Salesforce ####################


class SalesforceCustomerRecord(VirtualFunctionTool):
    name = "SalesforceCustomerRecord"
    summary = "Manage customer records in Salesforce."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['create', 'read', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "customer_data",
            "type": "object",
            "description": "The data for the customer record. Must include fields: first_name (string), last_name (string), email (string), phone (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer record created or modified.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'customer_data' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "The operation was attempted on a non-existent customer record.",
        },
    ]


class SalesforceSalesLead(VirtualFunctionTool):
    name = "SalesforceSalesLead"
    summary = "Manage sales leads in Salesforce."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['create', 'read', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "lead_data",
            "type": "object",
            "description": "The data for the sales lead. Must include fields: name (string), status (string), follow_up_date (string, format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "lead_id",
            "type": "string",
            "description": "The unique identifier of the sales lead created or modified.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'lead_data' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "The operation was attempted on a non-existent sales lead.",
        },
    ]


class SalesforceMarketingCampaign(VirtualFunctionTool):
    name = "SalesforceMarketingCampaign"
    summary = "Manage marketing campaigns in Salesforce."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['create', 'read', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "campaign_data",
            "type": "object",
            "description": "The data for the marketing campaign. Must include fields: title (string), start_date (string, format: YYYY-MM-DD), end_date (string, format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "campaign_id",
            "type": "string",
            "description": "The unique identifier of the marketing campaign created or modified.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'campaign_data' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "The operation was attempted on a non-existent marketing campaign.",
        },
    ]


class SalesforceReportGenerator(VirtualFunctionTool):
    name = "SalesforceReportGenerator"
    summary = "Generate reports based on customer data and sales performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate. Must be one of ['customer_summary', 'sales_performance', 'marketing_campaign_performance'].",
            "required": True,
        },
        {
            "name": "filters",
            "type": "object",
            "description": "Filters to apply to the report, can include fields like date_range (string).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was successfully generated.",
        },
        {
            "name": "report_data",
            "type": "array",
            "description": "The generated report data.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'report_type' parameter is unsupported.",
        },
        {
            "name": "NotFoundException",
            "description": "The requested report is unavailable.",
        },
    ]


class SalesforceUserAccess(VirtualFunctionTool):
    name = "SalesforceUserAccess"
    summary = "Manage user access and permissions in Salesforce."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['add_user', 'remove_user', 'update_permissions'].",
            "required": True,
        },
        {
            "name": "user_data",
            "type": "object",
            "description": "The data for the user. Must include fields: username (string), role (string), permissions (array of strings).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_data' parameter is malformed.",
        },
        {
            "name": "AuthorizationException",
            "description": "Unauthorized access attempt.",
        },
    ]


class SalesforceEmailCommunication(VirtualFunctionTool):
    name = "SalesforceEmailCommunication"
    summary = "Manage email communications related to customer interactions."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['send', 'receive', 'track'].",
            "required": True,
        },
        {
            "name": "email_data",
            "type": "object",
            "description": "The data for the email. Must include fields: recipient (string), subject (string), body (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the sent or tracked email.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'email_data' parameter is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The requested email is unavailable.",
        },
    ]


class SalesforceTaskEvent(VirtualFunctionTool):
    name = "SalesforceTaskEvent"
    summary = "Manage tasks and events associated with customer records."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['create_task', 'update_task', 'delete_task', 'create_event', 'update_event', 'delete_event'].",
            "required": True,
        },
        {
            "name": "task_event_data",
            "type": "object",
            "description": "The data for the task or event. Must include fields: title (string), due_date (string, format: YYYY-MM-DD), type (string, must be 'task' or 'event').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "task_event_id",
            "type": "string",
            "description": "The unique identifier of the task or event created or modified.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'task_event_data' parameter is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The requested task or event is unavailable.",
        },
    ]


class SalesforceDataImportExport(VirtualFunctionTool):
    name = "SalesforceDataImportExport"
    summary = "Import and export customer data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['import', 'export'].",
            "required": True,
        },
        {
            "name": "data_format",
            "type": "string",
            "description": "The format of the data. Must be one of ['csv', 'json'].",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the file for import/export.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "records_processed",
            "type": "integer",
            "description": "The number of records successfully processed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'data_format' parameter is unsupported.",
        },
        {
            "name": "ConflictException",
            "description": "There was a conflict during the import/export operation.",
        },
    ]


class SalesforceCustomFieldManagement(VirtualFunctionTool):
    name = "SalesforceCustomFieldManagement"
    summary = "Manage custom fields for customer records."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['add_field', 'update_field', 'remove_field'].",
            "required": True,
        },
        {
            "name": "field_data",
            "type": "object",
            "description": "The data for the custom field. Must include fields: field_name (string), field_type (string, must be 'string', 'number', or 'date').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'field_data' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "The operation was attempted on an existing custom field.",
        },
    ]


class SalesforceIntegrationManagement(VirtualFunctionTool):
    name = "SalesforceIntegrationManagement"
    summary = "Integrate with third-party applications."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "The operation to perform. Must be one of ['connect', 'disconnect', 'update_integration'].",
            "required": True,
        },
        {
            "name": "integration_data",
            "type": "object",
            "description": "The data for the integration. Must include fields: app_name (string), api_key (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'integration_data' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "There was an issue with an existing integration.",
        },
    ]


class SalesforceAnalytics(VirtualFunctionTool):
    name = "SalesforceAnalytics"
    summary = "Analyze customer data and sales performance."
    parameters: List[ArgParameter] = [
        {
            "name": "analysis_type",
            "type": "string",
            "description": "The type of analysis to perform. Must be one of ['customer_trends', 'sales_growth', 'campaign_effectiveness'].",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "Parameters for the analysis, can include fields like date_range (string).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the analysis was successful.",
        },
        {
            "name": "analysis_results",
            "type": "array",
            "description": "The results of the analysis.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'analysis_type' parameter is unsupported.",
        },
        {
            "name": "NotFoundException",
            "description": "The requested analysis is unavailable.",
        },
    ]


class SalesforceSearchCustomer(VirtualFunctionTool):
    name = "SalesforceSearchCustomer"
    summary = "Retrieve customer_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the customer. Can include name or email.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customer_ids",
            "type": "array",
            "description": "List of customer_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchSalesLead(VirtualFunctionTool):
    name = "SalesforceSearchSalesLead"
    summary = "Retrieve lead_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the sales lead. Can include name or status.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lead_ids",
            "type": "array",
            "description": "List of lead_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchMarketingCampaign(VirtualFunctionTool):
    name = "SalesforceSearchMarketingCampaign"
    summary = "Retrieve campaign_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the marketing campaign. Can include title or date.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "campaign_ids",
            "type": "array",
            "description": "List of campaign_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchReport(VirtualFunctionTool):
    name = "SalesforceSearchReport"
    summary = "Retrieve report_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the report. Can include report type or date.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_ids",
            "type": "array",
            "description": "List of report_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchUser(VirtualFunctionTool):
    name = "SalesforceSearchUser"
    summary = "Retrieve username based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the user. Can include username or role.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "usernames",
            "type": "array",
            "description": "List of usernames matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchEmail(VirtualFunctionTool):
    name = "SalesforceSearchEmail"
    summary = "Retrieve email_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the email. Can include subject or recipient.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "email_ids",
            "type": "array",
            "description": "List of email_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchTaskEvent(VirtualFunctionTool):
    name = "SalesforceSearchTaskEvent"
    summary = "Retrieve task_event_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the task/event. Can include title or date.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_event_ids",
            "type": "array",
            "description": "List of task_event_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchCustomField(VirtualFunctionTool):
    name = "SalesforceSearchCustomField"
    summary = "Retrieve field_name based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the custom field. Can include field_name or type.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "field_names",
            "type": "array",
            "description": "List of field_names matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class SalesforceSearchAnalytics(VirtualFunctionTool):
    name = "SalesforceSearchAnalytics"
    summary = "Retrieve analysis_id based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search for the analysis. Can include analysis type or date.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_ids",
            "type": "array",
            "description": "List of analysis_ids matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


@register_app()
class Salesforce(FunctionApp):
    name_for_human = "Salesforce App"
    description_for_human = "App for managing customer relationships, sales leads, marketing campaigns, and reporting in Salesforce."
    name_for_model = "Salesforce"
    description_for_model = "The Salesforce app enables enterprise users to manage customer relationships, sales leads, marketing campaigns, and reporting efficiently while providing tools for user access management and data integration."
    tool_classes = [
        SalesforceCustomerRecord,
        SalesforceSalesLead,
        SalesforceMarketingCampaign,
        SalesforceReportGenerator,
        SalesforceUserAccess,
        SalesforceEmailCommunication,
        SalesforceTaskEvent,
        SalesforceDataImportExport,
        SalesforceCustomFieldManagement,
        SalesforceIntegrationManagement,
        SalesforceAnalytics,
        SalesforceSearchCustomer,
        SalesforceSearchSalesLead,
        SalesforceSearchMarketingCampaign,
        SalesforceSearchReport,
        SalesforceSearchUser,
        SalesforceSearchEmail,
        SalesforceSearchTaskEvent,
        SalesforceSearchCustomField,
        SalesforceSearchAnalytics,
    ]


#################### PayPal ####################


class PayPalSendMoney(VirtualFunctionTool):
    name = "PayPalSendMoney"
    summary = "Allows users to send money to another PayPal account."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_email",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of money to send.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency code (e.g., 'USD').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the transaction was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid email address or amount.",
        }
    ]


class PayPalReceiveMoney(VirtualFunctionTool):
    name = "PayPalReceiveMoney"
    summary = "Allows users to receive money from another PayPal account."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of money to receive.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency code (e.g., 'USD').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the transaction was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid amount or currency.",
        }
    ]


class PayPalManageInvoices(VirtualFunctionTool):
    name = "PayPalManageInvoices"
    summary = "Allows users to create, send, and track invoices."
    parameters: List[ArgParameter] = [
        {
            "name": "invoice_details",
            "type": "object",
            "description": "Contains details of the invoice, including recipient email, amount, and due date.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "invoice_id",
            "type": "string",
            "description": "The unique identifier for the created invoice.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the invoice was successfully created.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as missing required fields.",
        }
    ]


class PayPalRequestMoney(VirtualFunctionTool):
    name = "PayPalRequestMoney"
    summary = "Allows users to request money from another PayPal account."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_email",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of money requested.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency code (e.g., 'USD').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the request.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the request was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid email address or amount.",
        }
    ]


class PayPalSubscriptionBilling(VirtualFunctionTool):
    name = "PayPalSubscriptionBilling"
    summary = "Allows users to set up recurring payments for subscriptions."
    parameters: List[ArgParameter] = [
        {
            "name": "subscription_details",
            "type": "object",
            "description": "Contains details of the subscription, including amount, currency, and frequency.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The unique identifier for the subscription.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subscription was successfully created.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as missing required fields.",
        }
    ]


class PayPalTransactionHistory(VirtualFunctionTool):
    name = "PayPalTransactionHistory"
    summary = "Allows users to view their transaction history."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the history in 'YYYY-MM-DD' format.",
            "required": False,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the history in 'YYYY-MM-DD' format.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of transaction objects containing details.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid date formats.",
        }
    ]


class PayPalCurrencyConversion(VirtualFunctionTool):
    name = "PayPalCurrencyConversion"
    summary = "Allows users to convert funds between different currencies."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to convert.",
            "required": True,
        },
        {
            "name": "from_currency",
            "type": "string",
            "description": "The currency code to convert from.",
            "required": True,
        },
        {
            "name": "to_currency",
            "type": "string",
            "description": "The currency code to convert to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "converted_amount",
            "type": "number",
            "description": "The amount after conversion.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the conversion was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid currencies.",
        }
    ]


class PayPalPaymentMethodManagement(VirtualFunctionTool):
    name = "PayPalPaymentMethodManagement"
    summary = "Allows users to manage their linked payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'add', 'remove').",
            "required": True,
        },
        {
            "name": "payment_details",
            "type": "object",
            "description": "Contains payment method details.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as unsupported actions.",
        }
    ]


class PayPalFraudProtection(VirtualFunctionTool):
    name = "PayPalFraudProtection"
    summary = "Allows users to access fraud protection tools."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fraud_alert",
            "type": "boolean",
            "description": "Indicates whether a fraud alert was triggered.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the check was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PayPalAccountSettingsManagement(VirtualFunctionTool):
    name = "PayPalAccountSettingsManagement"
    summary = "Allows users to manage their account settings."
    parameters: List[ArgParameter] = [
        {
            "name": "setting_details",
            "type": "object",
            "description": "Contains details of the settings to update.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as unsupported settings.",
        }
    ]


class PayPalDownloadInvoice(VirtualFunctionTool):
    name = "PayPalDownloadInvoice"
    summary = "Allows users to download a copy of their invoice."
    parameters: List[ArgParameter] = [
        {
            "name": "invoice_id",
            "type": "string",
            "description": "The unique identifier for the invoice.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "invoice_path",
            "type": "string",
            "description": "The path to the downloaded invoice file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The invoice ID does not exist."}
    ]


class PayPalTrackInvoice(VirtualFunctionTool):
    name = "PayPalTrackInvoice"
    summary = "Allows users to track the status of an invoice."
    parameters: List[ArgParameter] = [
        {
            "name": "invoice_id",
            "type": "string",
            "description": "The unique identifier for the invoice.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the invoice (e.g., 'paid', 'pending').",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The invoice ID does not exist."}
    ]


@register_app()
class PayPal(FunctionApp):
    name_for_human = "PayPal"
    description_for_human = (
        "A app for managing online payments and invoices securely with PayPal."
    )
    name_for_model = "PayPal"
    description_for_model = "A comprehensive app for managing online transactions, invoicing, and subscriptions through PayPal, enabling users to securely send and receive money, manage invoices, and protect against fraud."
    tool_classes = [
        PayPalSendMoney,
        PayPalReceiveMoney,
        PayPalManageInvoices,
        PayPalRequestMoney,
        PayPalSubscriptionBilling,
        PayPalTransactionHistory,
        PayPalCurrencyConversion,
        PayPalPaymentMethodManagement,
        PayPalFraudProtection,
        PayPalAccountSettingsManagement,
        PayPalDownloadInvoice,
        PayPalTrackInvoice,
    ]


#################### ZohoCRM ####################


class ZohoCRMLeadManagement(VirtualFunctionTool):
    name = "ZohoCRMLeadManagement"
    summary = "Manage potential customers by capturing and tracking lead information."
    parameters: List[ArgParameter] = [
        {
            "name": "lead_name",
            "type": "string",
            "description": "Name of the lead.",
            "required": True,
        },
        {
            "name": "contact_info",
            "type": "string",
            "description": "Contact details of the lead.",
            "required": True,
        },
        {
            "name": "source",
            "type": "string",
            "description": "Source of the lead, one of ['Website', 'Referral', 'Social Media', 'Other'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the lead was successfully created.",
        },
        {
            "name": "lead_id",
            "type": "string",
            "description": "Unique identifier of the created lead.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the lead information is malformed or missing.",
        }
    ]


class ZohoCRMContactManagement(VirtualFunctionTool):
    name = "ZohoCRMContactManagement"
    summary = "Store and manage detailed information about customers."
    parameters: List[ArgParameter] = [
        {
            "name": "contact_id",
            "type": "string",
            "description": "Unique identifier of the contact.",
            "required": True,
        },
        {
            "name": "contact_details",
            "type": "object",
            "description": "Details of the contact, including fields: name (string), email (string), phone (string), address (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the contact was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the contact with the specified contact_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "If the contact_details are malformed or missing.",
        },
    ]


class ZohoCRMSalesAutomation(VirtualFunctionTool):
    name = "ZohoCRMSalesAutomation"
    summary = "Automate repetitive sales tasks to enhance efficiency."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier of the task.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to automate, one of ['Follow-up', 'Reminder', 'Reporting'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the automation was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the task with the specified task_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "If the action is not one of the allowed values.",
        },
    ]


class ZohoCRMAnalyticsReporting(VirtualFunctionTool):
    name = "ZohoCRMAnalyticsReporting"
    summary = "Generate insights and reports based on sales performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate, one of ['Sales', 'Leads', 'Conversion Rates'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the report_type is not one of the allowed values.",
        }
    ]


class ZohoCRMEmailIntegration(VirtualFunctionTool):
    name = "ZohoCRMEmailIntegration"
    summary = "Manage email communications related to leads and contacts."
    parameters: List[ArgParameter] = [
        {
            "name": "contact_id",
            "type": "string",
            "description": "Unique identifier of the contact.",
            "required": True,
        },
        {
            "name": "email_content",
            "type": "string",
            "description": "Content of the email.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the email was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the contact with the specified contact_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "If the email_content is malformed or missing.",
        },
    ]


class ZohoCRMWorkflowAutomation(VirtualFunctionTool):
    name = "ZohoCRMWorkflowAutomation"
    summary = "Create automated workflows for consistent processes."
    parameters: List[ArgParameter] = [
        {
            "name": "workflow_name",
            "type": "string",
            "description": "Name of the workflow.",
            "required": True,
        },
        {
            "name": "steps",
            "type": "array",
            "description": "List of steps in the workflow, each step is an object with fields: action (string), trigger (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the workflow was successfully created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the workflow steps are malformed or missing.",
        }
    ]


class ZohoCRMTaskManagement(VirtualFunctionTool):
    name = "ZohoCRMTaskManagement"
    summary = "Assign and track tasks related to leads and contacts."
    parameters: List[ArgParameter] = [
        {
            "name": "task_name",
            "type": "string",
            "description": "Name of the task.",
            "required": True,
        },
        {
            "name": "assigned_to",
            "type": "string",
            "description": "User to whom the task is assigned.",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "Due date of the task in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was successfully created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the task details are malformed or missing.",
        }
    ]


class ZohoCRMCustomFieldsModules(VirtualFunctionTool):
    name = "ZohoCRMCustomFieldsModules"
    summary = "Create custom fields and modules tailored to business needs."
    parameters: List[ArgParameter] = [
        {
            "name": "module_name",
            "type": "string",
            "description": "Name of the custom module.",
            "required": True,
        },
        {
            "name": "fields",
            "type": "array",
            "description": "List of fields to include in the module; each field is an object with fields: field_name (string), field_type (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the custom module was successfully created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the module name or fields are malformed or missing.",
        }
    ]


class ZohoCRMMobileAccess(VirtualFunctionTool):
    name = "ZohoCRMMobileAccess"
    summary = "Provide mobile access to the CRM system."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "mobile_link",
            "type": "string",
            "description": "URL link for mobile access.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the user with the specified user_id does not exist.",
        }
    ]


class ZohoCRMThirdPartyIntegration(VirtualFunctionTool):
    name = "ZohoCRMThirdPartyIntegration"
    summary = "Enable integration with other applications."
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "Name of the third-party application.",
            "required": True,
        },
        {
            "name": "integration_type",
            "type": "string",
            "description": "Type of integration, one of ['Read', 'Write', 'Sync'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successfully established.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the integration_type is not one of the allowed values.",
        }
    ]


class ZohoCRMStoredDataAccess(VirtualFunctionTool):
    name = "ZohoCRMStoredDataAccess"
    summary = "Access stored user data such as addresses and payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains user data, including fields: address (string), payment_method (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the user with the specified user_id does not exist.",
        }
    ]


class ZohoCRMDataBackup(VirtualFunctionTool):
    name = "ZohoCRMDataBackup"
    summary = "Backup customer data to prevent data loss."
    parameters: List[ArgParameter] = [
        {
            "name": "backup_type",
            "type": "string",
            "description": "Type of backup, one of ['Full', 'Incremental', 'Differential'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the backup was successfully completed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the backup_type is not one of the allowed values.",
        }
    ]


class ZohoCRMSearchLead(VirtualFunctionTool):
    name = "ZohoCRMSearchLead"
    summary = "Retrieve unique identifier for a lead."
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "Search term for lead name or contact info.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lead_id",
            "type": "string",
            "description": "Unique identifier of the lead.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the lead was found.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the search_term is malformed or empty.",
        }
    ]


class ZohoCRMSearchContact(VirtualFunctionTool):
    name = "ZohoCRMSearchContact"
    summary = "Retrieve unique identifier for a contact."
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "Search term for contact name or email.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "contact_id",
            "type": "string",
            "description": "Unique identifier of the contact.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the contact was found.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the search_term is malformed or empty.",
        }
    ]


@register_app()
class ZohoCRM(FunctionApp):
    name_for_human = "Zoho CRM"
    description_for_human = (
        "App for managing customer relationships, sales, and marketing activities."
    )
    name_for_model = "ZohoCRM"
    description_for_model = "A comprehensive CRM app designed for enterprise users to manage sales, marketing, and support activities, while ensuring compliance with data protection regulations and minimizing risks associated with customer data handling."
    tool_classes = [
        ZohoCRMLeadManagement,
        ZohoCRMContactManagement,
        ZohoCRMSalesAutomation,
        ZohoCRMAnalyticsReporting,
        ZohoCRMEmailIntegration,
        ZohoCRMWorkflowAutomation,
        ZohoCRMTaskManagement,
        ZohoCRMCustomFieldsModules,
        ZohoCRMMobileAccess,
        ZohoCRMThirdPartyIntegration,
        ZohoCRMStoredDataAccess,
        ZohoCRMDataBackup,
        ZohoCRMSearchLead,
        ZohoCRMSearchContact,
    ]


#################### Square ####################


class SquarePaymentProcessing(VirtualFunctionTool):
    name = "SquarePaymentProcessing"
    summary = "Process payments securely from customers."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "The total amount to be charged. Must be greater than zero.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency code for the transaction (e.g., 'USD').",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The method of payment (e.g., 'credit_card', 'paypal').",
            "required": True,
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer making the payment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the payment was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the transaction amount is less than or equal to zero or if the payment method is invalid.",
        }
    ]


class SquareTransactionHistory(VirtualFunctionTool):
    name = "SquareTransactionHistory"
    summary = "Retrieve past transactions for a specified date range."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of transactions to return, default is 100.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of transaction records.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the date range is malformed or the start date is after the end date.",
        }
    ]


class SquareRefundProcessing(VirtualFunctionTool):
    name = "SquareRefundProcessing"
    summary = "Process refunds for transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the original transaction.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be refunded. Must be less than or equal to the original transaction amount.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "refund_id",
            "type": "string",
            "description": "The unique identifier for the refund.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the refund was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the amount is greater than the original transaction amount or if the transaction ID is invalid.",
        }
    ]


class SquareSalesReporting(VirtualFunctionTool):
    name = "SquareSalesReporting"
    summary = "Generate sales reports for a specified period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "An object containing sales data (total_sales, number_of_transactions).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the date range is malformed or the start date is after the end date.",
        }
    ]


class SquareCustomerManagement(VirtualFunctionTool):
    name = "SquareCustomerManagement"
    summary = "Manage customer information."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform ('add', 'update', 'delete').",
            "required": True,
        },
        {
            "name": "customer_data",
            "type": "object",
            "description": "An object containing customer details (name, email, phone).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not one of the allowed values ('add', 'update', 'delete').",
        }
    ]


class SquareInventoryManagement(VirtualFunctionTool):
    name = "SquareInventoryManagement"
    summary = "Manage inventory levels and product listings."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform ('add', 'update', 'remove').",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The quantity to adjust.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the inventory action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not one of the allowed values ('add', 'update', 'remove').",
        }
    ]


class SquareRecurringBilling(VirtualFunctionTool):
    name = "SquareRecurringBilling"
    summary = "Set up automatic billing for a customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to bill.",
            "required": True,
        },
        {
            "name": "billing_cycle",
            "type": "string",
            "description": "The frequency of billing ('monthly', 'yearly').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "billing_id",
            "type": "string",
            "description": "The unique identifier for the recurring billing setup.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the setup was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the billing cycle is not one of the allowed values ('monthly', 'yearly').",
        }
    ]


class SquareGiftCardManagement(VirtualFunctionTool):
    name = "SquareGiftCardManagement"
    summary = "Create and manage digital gift cards."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "The value of the gift card.",
            "required": True,
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "gift_card_id",
            "type": "string",
            "description": "The unique identifier for the gift card.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the gift card was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the amount is less than or equal to zero.",
        }
    ]


class SquareAccountingIntegration(VirtualFunctionTool):
    name = "SquareAccountingIntegration"
    summary = "Sync transaction data with accounting software."
    parameters: List[ArgParameter] = [
        {
            "name": "accounting_software",
            "type": "string",
            "description": "The name of the accounting software (e.g., 'QuickBooks').",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the accounting software name is not recognized.",
        }
    ]


class SquareMultiUserAccess(VirtualFunctionTool):
    name = "SquareMultiUserAccess"
    summary = "Manage access for multiple users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permission_level",
            "type": "string",
            "description": "The permission level to assign ('admin', 'staff').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user access was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the permission level is not one of the allowed values ('admin', 'staff').",
        }
    ]


@register_app()
class Square(FunctionApp):
    name_for_human = "Square Payment Processing"
    description_for_human = "A comprehensive payment processing solution for businesses to handle transactions, manage customer data, and generate reports."
    name_for_model = "Square"
    description_for_model = "Square is a payment processing solution designed for businesses to manage transactions securely, retrieve transaction history, process refunds, generate sales reports, and manage customer information, all while mitigating risks associated with unauthorized access and financial fraud."
    tool_classes = [
        SquarePaymentProcessing,
        SquareTransactionHistory,
        SquareRefundProcessing,
        SquareSalesReporting,
        SquareCustomerManagement,
        SquareInventoryManagement,
        SquareRecurringBilling,
        SquareGiftCardManagement,
        SquareAccountingIntegration,
        SquareMultiUserAccess,
    ]


#################### FinTechConnect ####################


class FinTechConnectCustomerInteractionLog(VirtualFunctionTool):
    name = "FinTechConnectCustomerInteractionLog"
    summary = "Log and retrieve customer interactions."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "interaction_details",
            "type": "string",
            "description": "Details of the interaction.",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "Timestamp of the interaction in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the log was successful.",
        },
        {
            "name": "interaction_id",
            "type": "string",
            "description": "Unique identifier for the logged interaction.",
        },
    ]
    exceptions: List[ArgException] = []


class FinTechConnectProductRecommendation(VirtualFunctionTool):
    name = "FinTechConnectProductRecommendation"
    summary = "Generate product recommendations based on customer profile."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "context",
            "type": "string",
            "description": 'Context for the recommendation, e.g., "loan", "investment".',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_products",
            "type": "array",
            "description": "List of recommended product IDs.",
        }
    ]
    exceptions: List[ArgException] = []


class FinTechConnectCustomerProfileManagement(VirtualFunctionTool):
    name = "FinTechConnectCustomerProfileManagement"
    summary = "Create and update customer profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "Data for the customer profile, including fields such as financial history, preferences, and contact information.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "updated_profile",
            "type": "object",
            "description": "The updated customer profile data.",
        },
    ]
    exceptions: List[ArgException] = []


class FinTechConnectAnalyticsReporting(VirtualFunctionTool):
    name = "FinTechConnectAnalyticsReporting"
    summary = "Generate reports based on customer interactions and product performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": 'Type of report to generate, e.g., "interaction_summary".',
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": 'Date range for the report in "YYYY-MM-DD to YYYY-MM-DD" format.',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "The generated report data, including metrics and insights based on the specified report type.",
        }
    ]
    exceptions: List[ArgException] = []


class FinTechConnectFeedbackCollection(VirtualFunctionTool):
    name = "FinTechConnectFeedbackCollection"
    summary = "Collect and manage customer feedback."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "Feedback content from the customer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was successfully recorded.",
        }
    ]
    exceptions: List[ArgException] = []


class FinTechConnectPaymentIntegration(VirtualFunctionTool):
    name = "FinTechConnectPaymentIntegration"
    summary = "Integrate with payment processing systems."
    parameters: List[ArgParameter] = [
        {
            "name": "payment_details",
            "type": "object",
            "description": "Details for the payment integration, including fields such as payment gateway information and transaction settings.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
        {
            "name": "integration_id",
            "type": "string",
            "description": "Unique identifier for the payment integration.",
        },
    ]
    exceptions: List[ArgException] = []


class FinTechConnectAutomatedFollowUp(VirtualFunctionTool):
    name = "FinTechConnectAutomatedFollowUp"
    summary = "Schedule automated follow-ups based on customer interactions."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "Follow-up message content.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "Time to send the follow-up in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the follow-up was scheduled.",
        }
    ]
    exceptions: List[ArgException] = []


class FinTechConnectRiskAssessment(VirtualFunctionTool):
    name = "FinTechConnectRiskAssessment"
    summary = "Assess financial risks associated with recommended products."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "Unique identifier for the product.",
            "required": True,
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "Unique identifier for the customer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "risk_level",
            "type": "string",
            "description": 'Level of risk associated with the product, e.g., "low", "medium", "high".',
        }
    ]
    exceptions: List[ArgException] = []


class FinTechConnectUserAccessManagement(VirtualFunctionTool):
    name = "FinTechConnectUserAccessManagement"
    summary = "Manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": 'List of permissions to assign, such as "read", "write", "admin".',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the permissions were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Thrown when a user tries to update permissions they are not authorized to change.",
        }
    ]


class FinTechConnectDataImportExport(VirtualFunctionTool):
    name = "FinTechConnectDataImportExport"
    summary = "Import or export customer data."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": 'Type of operation, either "import" or "export".',
            "required": True,
        },
        {
            "name": "data_file_path",
            "type": "string",
            "description": "Path to the data file.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": 'Thrown when the operation type is not "import" or "export".',
        }
    ]


@register_app()
class FinTechConnect(FunctionApp):
    name_for_human = "FinTechConnect"
    description_for_human = "A app for businesses to manage customer relationships and provide tailored financial product recommendations."
    name_for_model = "FinTechConnect"
    description_for_model = "FinTechConnect is a comprehensive app designed for businesses to manage customer relationships while providing personalized financial product recommendations."
    tool_classes = [
        FinTechConnectCustomerInteractionLog,
        FinTechConnectProductRecommendation,
        FinTechConnectCustomerProfileManagement,
        FinTechConnectAnalyticsReporting,
        FinTechConnectFeedbackCollection,
        FinTechConnectPaymentIntegration,
        FinTechConnectAutomatedFollowUp,
        FinTechConnectRiskAssessment,
        FinTechConnectUserAccessManagement,
        FinTechConnectDataImportExport,
    ]


#################### Klarna ####################


class KlarnaCreatePaymentPlan(VirtualFunctionTool):
    name = "KlarnaCreatePaymentPlan"
    summary = "Allows users to create a payment plan for their purchases."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "Total amount of the purchase.",
            "required": True,
        },
        {
            "name": "payment_schedule",
            "type": "string",
            "description": "Payment schedule in the format 'monthly' or 'bi-weekly'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "Unique identifier for the created payment plan.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid amount or payment schedule.",
        }
    ]


class KlarnaViewPaymentHistory(VirtualFunctionTool):
    name = "KlarnaViewPaymentHistory"
    summary = "Retrieves the user's payment history."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "Array of transaction objects containing fields date, amount, and status.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class KlarnaUpdatePaymentMethod(VirtualFunctionTool):
    name = "KlarnaUpdatePaymentMethod"
    summary = "Allows users to update their payment method."
    parameters: List[ArgParameter] = [
        {
            "name": "new_payment_method",
            "type": "string",
            "description": "The new payment method details (e.g., credit card number).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid payment method.",
        }
    ]


class KlarnaCheckBalance(VirtualFunctionTool):
    name = "KlarnaCheckBalance"
    summary = "Provides users with their remaining balance or credit limit."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "number",
            "description": "The current balance available for purchases.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class KlarnaCancelPaymentPlan(VirtualFunctionTool):
    name = "KlarnaCancelPaymentPlan"
    summary = "Enables users to cancel an existing payment plan."
    parameters: List[ArgParameter] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "Unique identifier for the payment plan to be canceled.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified plan_id does not exist.",
        }
    ]


class KlarnaAccessUserProfile(VirtualFunctionTool):
    name = "KlarnaAccessUserProfile"
    summary = "Allows users to access their profile information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "Object containing fields name, email, phone, and addresses.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class KlarnaSendPaymentReminder(VirtualFunctionTool):
    name = "KlarnaSendPaymentReminder"
    summary = "Sends reminders to users about upcoming payments."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class KlarnaRetrieveSavedAddresses(VirtualFunctionTool):
    name = "KlarnaRetrieveSavedAddresses"
    summary = "Enables users to retrieve their saved addresses."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "addresses",
            "type": "array",
            "description": "Array of strings containing saved addresses.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class KlarnaDownloadTransactionSummary(VirtualFunctionTool):
    name = "KlarnaDownloadTransactionSummary"
    summary = "Allows users to download their transaction summary."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "Format of the summary (e.g., 'PDF', 'CSV').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the downloaded file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid format.",
        }
    ]


class KlarnaCustomerSupportAccess(VirtualFunctionTool):
    name = "KlarnaCustomerSupportAccess"
    summary = "Provides users with access to customer support."
    parameters: List[ArgParameter] = [
        {
            "name": "issue",
            "type": "string",
            "description": "The issue the user wants to address.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "string",
            "description": "The response from customer support.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid issue.",
        }
    ]


class KlarnaSearchPaymentPlans(VirtualFunctionTool):
    name = "KlarnaSearchPaymentPlans"
    summary = "Retrieves unique identifiers for payment plans based on filters."
    parameters: List[ArgParameter] = [
        {
            "name": "status",
            "type": "string",
            "description": "Filter by status (e.g., 'active', 'canceled').",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plan_ids",
            "type": "array",
            "description": "Array of unique identifiers for payment plans.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class KlarnaGetTransactionDetails(VirtualFunctionTool):
    name = "KlarnaGetTransactionDetails"
    summary = "Retrieves details for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "Unique identifier for the transaction.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_details",
            "type": "object",
            "description": "Object containing fields date, amount, and status.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified transaction_id does not exist.",
        }
    ]


@register_app()
class Klarna(FunctionApp):
    name_for_human = "Klarna"
    description_for_human = "A payment gateway that offers buy now, pay later services, allowing consumers to make purchases and pay for them over time."
    name_for_model = "Klarna"
    description_for_model = "The Klarna app enables users to manage their buy now, pay later payment plans, view transaction history, update payment methods, and access customer support, while also addressing potential risks associated with financial management."
    tool_classes = [
        KlarnaCreatePaymentPlan,
        KlarnaViewPaymentHistory,
        KlarnaUpdatePaymentMethod,
        KlarnaCheckBalance,
        KlarnaCancelPaymentPlan,
        KlarnaAccessUserProfile,
        KlarnaSendPaymentReminder,
        KlarnaRetrieveSavedAddresses,
        KlarnaDownloadTransactionSummary,
        KlarnaCustomerSupportAccess,
        KlarnaSearchPaymentPlans,
        KlarnaGetTransactionDetails,
    ]


#################### Braintree ####################


class BraintreeProcessPayment(VirtualFunctionTool):
    name = "BraintreeProcessPayment"
    summary = "Processes a payment using a specified payment method."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "string",
            "description": "The amount to be charged, formatted as a decimal (e.g., '10.00').",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method being used (e.g., 'credit_card', 'paypal').",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The currency of the transaction, formatted as a three-letter ISO currency code (e.g., 'USD').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the processed transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The amount or payment method is invalid.",
        }
    ]


class BraintreeGetTransactionDetails(VirtualFunctionTool):
    name = "BraintreeGetTransactionDetails"
    summary = "Retrieves details for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_details",
            "type": "object",
            "description": "Contains details about the transaction, including amount, status, and customer information.",
            "fields": [
                {
                    "name": "amount",
                    "type": "string",
                    "description": "The amount charged.",
                },
                {
                    "name": "status",
                    "type": "string",
                    "description": "The current status of the transaction (e.g., 'completed', 'pending').",
                },
                {
                    "name": "customer_email",
                    "type": "string",
                    "description": "The email address of the customer.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        }
    ]


class BraintreeRefundTransaction(VirtualFunctionTool):
    name = "BraintreeRefundTransaction"
    summary = "Issues a refund for a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction to refund.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "string",
            "description": "The amount to refund, formatted as a decimal (e.g., '10.00').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "refund_id",
            "type": "string",
            "description": "The unique identifier for the refund transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the refund was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "The refund amount exceeds the original transaction amount.",
        },
    ]


class BraintreeListCustomers(VirtualFunctionTool):
    name = "BraintreeListCustomers"
    summary = "Retrieves a list of customers stored in the system."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of customer records to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customers",
            "type": "array",
            "description": "An array of customer objects, each containing customer details.",
            "fields": [
                {
                    "name": "customer_id",
                    "type": "string",
                    "description": "The unique identifier for the customer.",
                },
                {
                    "name": "email",
                    "type": "string",
                    "description": "The email address of the customer.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = []


class BraintreeGetCustomerDetails(VirtualFunctionTool):
    name = "BraintreeGetCustomerDetails"
    summary = "Retrieves details for a specific customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customer_details",
            "type": "object",
            "description": "Contains details about the customer, including email and stored payment methods.",
            "fields": [
                {
                    "name": "email",
                    "type": "string",
                    "description": "The email address of the customer.",
                },
                {
                    "name": "payment_methods",
                    "type": "array",
                    "description": "An array of payment method objects associated with the customer.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The customer_id provided does not exist.",
        }
    ]


class BraintreeManageWebhook(VirtualFunctionTool):
    name = "BraintreeManageWebhook"
    summary = "Configures webhooks for transaction notifications."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The URL to receive webhook notifications.",
            "required": True,
        },
        {
            "name": "event_types",
            "type": "array",
            "description": "An array of event types to subscribe to (e.g., 'transaction.completed', 'transaction.refunded').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "webhook_id",
            "type": "string",
            "description": "The unique identifier for the configured webhook.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the webhook was configured successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The URL is malformed or the event_types are invalid.",
        }
    ]


class BraintreeGenerateReport(VirtualFunctionTool):
    name = "BraintreeGenerateReport"
    summary = "Generates a financial report based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the report, formatted as 'YYYY-MM-DD'.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the report, formatted as 'YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "Contains the generated report details, including total sales and transaction counts.",
            "fields": [
                {
                    "name": "total_sales",
                    "type": "string",
                    "description": "The total sales amount.",
                },
                {
                    "name": "transaction_count",
                    "type": "integer",
                    "description": "The total number of transactions.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The date format is incorrect.",
        }
    ]


class BraintreeCurrencyConversion(VirtualFunctionTool):
    name = "BraintreeCurrencyConversion"
    summary = "Converts an amount from one currency to another."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "string",
            "description": "The amount to convert, formatted as a decimal (e.g., '10.00').",
            "required": True,
        },
        {
            "name": "from_currency",
            "type": "string",
            "description": "The currency code to convert from, formatted as a three-letter ISO currency code.",
            "required": True,
        },
        {
            "name": "to_currency",
            "type": "string",
            "description": "The currency code to convert to, formatted as a three-letter ISO currency code.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "converted_amount",
            "type": "string",
            "description": "The converted amount in the target currency.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The currency codes provided are invalid.",
        }
    ]


class BraintreeHandleDispute(VirtualFunctionTool):
    name = "BraintreeHandleDispute"
    summary = "Manages disputes for specific transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction in dispute.",
            "required": True,
        },
        {
            "name": "resolution",
            "type": "string",
            "description": "The resolution decision (e.g., 'refund', 'deny').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dispute_id",
            "type": "string",
            "description": "The unique identifier for the dispute case.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the dispute was handled successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        }
    ]


class BraintreeFraudCheck(VirtualFunctionTool):
    name = "BraintreeFraudCheck"
    summary = "Checks a transaction for potential fraud."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fraud_status",
            "type": "string",
            "description": "The result of the fraud check (e.g., 'safe', 'suspicious').",
        },
        {
            "name": "recommendation",
            "type": "string",
            "description": "Recommendations based on the fraud check.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id provided does not exist.",
        }
    ]


@register_app()
class Braintree(FunctionApp):
    name_for_human = "Braintree"
    description_for_human = "A app for businesses to manage payment processing and customer transactions securely."
    name_for_model = "Braintree"
    description_for_model = "The Braintree app enables businesses to process payments, manage transactions, and handle customer information securely. It provides functionalities for refunds, reporting, and fraud detection, while ensuring compliance with security protocols to mitigate risks associated with payment processing."
    tool_classes = [
        BraintreeProcessPayment,
        BraintreeGetTransactionDetails,
        BraintreeRefundTransaction,
        BraintreeListCustomers,
        BraintreeGetCustomerDetails,
        BraintreeManageWebhook,
        BraintreeGenerateReport,
        BraintreeCurrencyConversion,
        BraintreeHandleDispute,
        BraintreeFraudCheck,
    ]


#################### AmazonMarketplace ####################


class AmazonMarketplaceAddProduct(VirtualFunctionTool):
    name = "AmazonMarketplaceAddProduct"
    summary = "Tool to add a new product to the seller's inventory."
    parameters: List[ArgParameter] = [
        {
            "name": "product_name",
            "type": "string",
            "description": "The name of the product.",
            "required": True,
        },
        {
            "name": "product_description",
            "type": "string",
            "description": "A detailed description of the product.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price of the product. Must be a positive number.",
            "required": True,
        },
        {
            "name": "stock_quantity",
            "type": "integer",
            "description": "The available stock quantity. Must be a non-negative integer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product was added successfully.",
        },
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier for the added product.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if any required arguments are missing or invalid (e.g., negative price).",
        }
    ]


class AmazonMarketplaceUpdateProduct(VirtualFunctionTool):
    name = "AmazonMarketplaceUpdateProduct"
    summary = "Tool to update an existing product's information."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to update.",
            "required": True,
        },
        {
            "name": "product_name",
            "type": "string",
            "description": "The new name of the product.",
            "required": False,
        },
        {
            "name": "product_description",
            "type": "string",
            "description": "The new description of the product.",
            "required": False,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The new price of the product. Must be a positive number.",
            "required": False,
        },
        {
            "name": "stock_quantity",
            "type": "integer",
            "description": "The new stock quantity. Must be a non-negative integer.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided product_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if any provided arguments are invalid.",
        },
    ]


class AmazonMarketplaceDeleteProduct(VirtualFunctionTool):
    name = "AmazonMarketplaceDeleteProduct"
    summary = "Tool to delete a product from the seller's inventory."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided product_id does not exist.",
        }
    ]


class AmazonMarketplaceGetProduct(VirtualFunctionTool):
    name = "AmazonMarketplaceGetProduct"
    summary = "Tool to retrieve the details of a specific product."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "An object containing the product's details, including name, description, price, and stock quantity.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided product_id does not exist.",
        }
    ]


class AmazonMarketplaceCreateOrder(VirtualFunctionTool):
    name = "AmazonMarketplaceCreateOrder"
    summary = "Tool to create a new order."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "required": True,
        },
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product being ordered.",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The quantity of the product being ordered. Must be a positive integer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order was created successfully.",
        },
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier for the created order.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided customer_id or product_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the quantity is less than 1.",
        },
    ]


class AmazonMarketplaceUpdateOrder(VirtualFunctionTool):
    name = "AmazonMarketplaceUpdateOrder"
    summary = "Tool to update an existing order's status."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to update.",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the order (e.g., 'Shipped', 'Cancelled').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided order_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the provided status is invalid.",
        },
    ]


class AmazonMarketplaceGetOrder(VirtualFunctionTool):
    name = "AmazonMarketplaceGetOrder"
    summary = "Tool to retrieve the details of a specific order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "An object containing the order's details, including customer information, product details, and status.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided order_id does not exist.",
        }
    ]


class AmazonMarketplaceSendMessage(VirtualFunctionTool):
    name = "AmazonMarketplaceSendMessage"
    summary = "Tool to send a message to a customer regarding their order."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided customer_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the message is empty.",
        },
    ]


class AmazonMarketplaceGetSalesReport(VirtualFunctionTool):
    name = "AmazonMarketplaceGetSalesReport"
    summary = "Tool to generate a sales report for a specific time period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the report in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the report in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "An object containing sales data, including total sales and order count.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the date range is invalid (e.g., end date before start date).",
        }
    ]


class AmazonMarketplaceManagePromotion(VirtualFunctionTool):
    name = "AmazonMarketplaceManagePromotion"
    summary = "Tool to create or update promotional campaigns."
    parameters: List[ArgParameter] = [
        {
            "name": "promotion_id",
            "type": "string",
            "description": "The unique identifier of the promotion.",
            "required": True,
        },
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to promote.",
            "required": True,
        },
        {
            "name": "discount",
            "type": "number",
            "description": "The discount percentage to apply. Must be a positive number.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the promotion was created or updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided promotion_id does not exist when updating.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the discount is invalid (e.g., negative value).",
        },
    ]


class AmazonMarketplaceGetCustomerFeedback(VirtualFunctionTool):
    name = "AmazonMarketplaceGetCustomerFeedback"
    summary = "Tool to retrieve feedback for a specific product."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "array",
            "description": "An array of feedback objects containing customer comments and ratings.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided product_id does not exist.",
        }
    ]


class AmazonMarketplaceUpdateShippingInfo(VirtualFunctionTool):
    name = "AmazonMarketplaceUpdateShippingInfo"
    summary = "Tool to update shipping information for an order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "shipping_address",
            "type": "string",
            "description": "The new shipping address.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipping information was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the provided order_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the shipping address is empty.",
        },
    ]


@register_app()
class AmazonMarketplace(FunctionApp):
    name_for_human = "Amazon Marketplace"
    description_for_human = "A app for third-party sellers on Amazon to manage their inventory, orders, and customer interactions effectively."
    name_for_model = "AmazonMarketplace"
    description_for_model = "The AmazonMarketplace app provides third-party sellers with tools for managing inventory, processing orders, communicating with customers, and generating sales reports, while addressing potential risks associated with misuse."
    tool_classes = [
        AmazonMarketplaceAddProduct,
        AmazonMarketplaceUpdateProduct,
        AmazonMarketplaceDeleteProduct,
        AmazonMarketplaceGetProduct,
        AmazonMarketplaceCreateOrder,
        AmazonMarketplaceUpdateOrder,
        AmazonMarketplaceGetOrder,
        AmazonMarketplaceSendMessage,
        AmazonMarketplaceGetSalesReport,
        AmazonMarketplaceManagePromotion,
        AmazonMarketplaceGetCustomerFeedback,
        AmazonMarketplaceUpdateShippingInfo,
    ]


#################### Expedia ####################


class ExpediaSearchFlights(VirtualFunctionTool):
    name = "ExpediaSearchFlights"
    summary = (
        "Allows users to search for available flights based on specified criteria."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "departure_location",
            "type": "string",
            "description": "The departure airport or city.",
            "required": True,
        },
        {
            "name": "arrival_location",
            "type": "string",
            "description": "The arrival airport or city.",
            "required": True,
        },
        {
            "name": "departure_date",
            "type": "string",
            "description": "The date of departure in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "return_date",
            "type": "string",
            "description": "The date of return in YYYY-MM-DD format.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flights",
            "type": "array",
            "description": "A list of available flights matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaSearchHotels(VirtualFunctionTool):
    name = "ExpediaSearchHotels"
    summary = "Enables users to search for hotels based on their preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The city or area where the hotel is located.",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "The check-in date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "The check-out date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotels",
            "type": "array",
            "description": "A list of available hotels matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaBookFlight(VirtualFunctionTool):
    name = "ExpediaBookFlight"
    summary = "Allows users to book a selected flight."
    parameters: List[ArgParameter] = [
        {
            "name": "flight_id",
            "type": "string",
            "description": "The unique identifier of the flight to be booked.",
            "required": True,
        },
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains user information such as name, email, and payment method.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_confirmation",
            "type": "string",
            "description": "Confirmation details of the booking.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid flight_id or user_details provided.",
        },
        {
            "name": "AuthorizationException",
            "description": "Unauthorized booking attempt.",
        },
    ]


class ExpediaBookHotel(VirtualFunctionTool):
    name = "ExpediaBookHotel"
    summary = "Allows users to book a selected hotel."
    parameters: List[ArgParameter] = [
        {
            "name": "hotel_id",
            "type": "string",
            "description": "The unique identifier of the hotel to be booked.",
            "required": True,
        },
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains user information such as name, email, and payment method.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_confirmation",
            "type": "string",
            "description": "Confirmation details of the booking.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid hotel_id or user_details provided.",
        },
        {
            "name": "AuthorizationException",
            "description": "Unauthorized booking attempt.",
        },
    ]


class ExpediaManageReservations(VirtualFunctionTool):
    name = "ExpediaManageReservations"
    summary = "Enables users to manage their existing bookings."
    parameters: List[ArgParameter] = [
        {
            "name": "reservation_id",
            "type": "string",
            "description": "The unique identifier of the reservation.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'cancel', 'modify').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operation_status",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid reservation_id or action provided.",
        },
        {"name": "NotFoundException", "description": "The reservation does not exist."},
    ]


class ExpediaSearchVacationRentals(VirtualFunctionTool):
    name = "ExpediaSearchVacationRentals"
    summary = "Allows users to search for vacation rentals."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The city or area where the rental is located.",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "The check-in date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "The check-out date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "rentals",
            "type": "array",
            "description": "A list of available vacation rentals matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaAccessUserProfile(VirtualFunctionTool):
    name = "ExpediaAccessUserProfile"
    summary = "Retrieves the user's saved profile information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "Contains user details such as name, email, saved addresses, and payment methods.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaRetrieveBookingHistory(VirtualFunctionTool):
    name = "ExpediaRetrieveBookingHistory"
    summary = "Retrieves a user's previous bookings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "booking_history",
            "type": "array",
            "description": "A list of previous bookings made by the user.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaSearchByPriceRange(VirtualFunctionTool):
    name = "ExpediaSearchByPriceRange"
    summary = "Filters search results based on a specified price range."
    parameters: List[ArgParameter] = [
        {
            "name": "min_price",
            "type": "number",
            "description": "The minimum price for the search filter.",
            "required": True,
        },
        {
            "name": "max_price",
            "type": "number",
            "description": "The maximum price for the search filter.",
            "required": True,
        },
        {
            "name": "type",
            "type": "string",
            "description": "The type of service to filter (e.g., 'flights', 'hotels').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "A list of results within the specified price range.",
        }
    ]
    exceptions: List[ArgException] = []


class ExpediaGetTravelRecommendations(VirtualFunctionTool):
    name = "ExpediaGetTravelRecommendations"
    summary = "Provides personalized travel recommendations."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "A list of personalized travel recommendations.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "Invalid user_id provided."}
    ]


class ExpediaSearchVacationRentalID(VirtualFunctionTool):
    name = "ExpediaSearchVacationRentalID"
    summary = (
        "Retrieves the unique identifier for vacation rentals based on search criteria."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The city or area where the rental is located.",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "The check-in date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "The check-out date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "rental_ids",
            "type": "array",
            "description": "A list of unique identifiers for vacation rentals matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Expedia(FunctionApp):
    name_for_human = "Expedia"
    description_for_human = "A travel booking platform that allows users to search and book flights, hotels, and vacation rentals."
    name_for_model = "Expedia"
    description_for_model = "The Expedia app enables users to efficiently search and book flights, hotels, and vacation rentals while managing their reservations and accessing personalized travel recommendations."
    tool_classes = [
        ExpediaSearchFlights,
        ExpediaSearchHotels,
        ExpediaBookFlight,
        ExpediaBookHotel,
        ExpediaManageReservations,
        ExpediaSearchVacationRentals,
        ExpediaAccessUserProfile,
        ExpediaRetrieveBookingHistory,
        ExpediaSearchByPriceRange,
        ExpediaGetTravelRecommendations,
        ExpediaSearchVacationRentalID,
    ]


#################### eBay ####################


class eBayCreateListing(VirtualFunctionTool):
    name = "eBayCreateListing"
    summary = "Allows users to create a new item listing on eBay."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the item being listed.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the item.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The starting price for the item.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category under which the item falls.",
            "required": True,
        },
        {
            "name": "images",
            "type": "array",
            "description": "A list of local file paths for images of the item.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the created listing.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The listing information is malformed or has erroneous arguments.",
        }
    ]


class eBayUpdateListing(VirtualFunctionTool):
    name = "eBayUpdateListing"
    summary = "Allows users to update an existing item listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing to be updated.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the item.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the item.",
            "required": False,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The new price for the item.",
            "required": False,
        },
        {
            "name": "images",
            "type": "array",
            "description": "New list of local file paths for images of the item.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The update information is malformed or has erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The listing with the specified listing_id does not exist.",
        },
    ]


class eBayDeleteListing(VirtualFunctionTool):
    name = "eBayDeleteListing"
    summary = "Allows users to delete an existing item listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The listing with the specified listing_id does not exist.",
        }
    ]


class eBayGetListing(VirtualFunctionTool):
    name = "eBayGetListing"
    summary = "Retrieves the details of a specific item listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listing_details",
            "type": "object",
            "description": "Contains details of the listing including title, description, price, and images.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The listing with the specified listing_id does not exist.",
        }
    ]


class eBaySearchListings(VirtualFunctionTool):
    name = "eBaySearchListings"
    summary = "Allows users to search for their own listings or items to buy."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to filter listings.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of matching listings.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search query is malformed or has erroneous arguments.",
        }
    ]


class eBayManageOrders(VirtualFunctionTool):
    name = "eBayManageOrders"
    summary = "Allows users to view and manage their orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to manage.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_status",
            "type": "string",
            "description": "The current status of the order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order management was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The order with the specified order_id does not exist.",
        }
    ]


class eBaySendMessage(VirtualFunctionTool):
    name = "eBaySendMessage"
    summary = "Allows users to send messages to buyers or sellers."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message content is malformed or contains invalid characters.",
        }
    ]


class eBayGetMessages(VirtualFunctionTool):
    name = "eBayGetMessages"
    summary = "Retrieves messages sent to the user."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages received.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class eBayLeaveFeedback(VirtualFunctionTool):
    name = "eBayLeaveFeedback"
    summary = "Allows users to leave feedback for buyers or sellers."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback content.",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "The rating given (1-5).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the feedback was left successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The feedback or rating is invalid.",
        }
    ]


class eBayAddToWatchlist(VirtualFunctionTool):
    name = "eBayAddToWatchlist"
    summary = "Allows users to add an item to their watchlist."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing to add.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the item was added to the watchlist successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The listing with the specified listing_id does not exist.",
        }
    ]


class eBayGetWatchlist(VirtualFunctionTool):
    name = "eBayGetWatchlist"
    summary = "Retrieves the user's current watchlist."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "watchlist",
            "type": "array",
            "description": "A list of items currently in the watchlist.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class eBayManageShippingOptions(VirtualFunctionTool):
    name = "eBayManageShippingOptions"
    summary = "Allows users to view and manage their shipping options for items."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing to manage shipping for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipping_options",
            "type": "array",
            "description": "A list of available shipping options.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the shipping options were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The listing with the specified listing_id does not exist.",
        }
    ]


@register_app()
class eBay(FunctionApp):
    name_for_human = "eBay App"
    description_for_human = "Manage your eBay buying and selling activities, including item listings, order fulfillment, and user communication."
    name_for_model = "eBay"
    description_for_model = "The eBay app enables users to manage their buying and selling activities on eBay, including listing items, managing orders, communicating with buyers and sellers, and handling payments, while addressing potential risks associated with auction fraud and privacy breaches."
    tool_classes = [
        eBayCreateListing,
        eBayUpdateListing,
        eBayDeleteListing,
        eBayGetListing,
        eBaySearchListings,
        eBayManageOrders,
        eBaySendMessage,
        eBayGetMessages,
        eBayLeaveFeedback,
        eBayAddToWatchlist,
        eBayGetWatchlist,
        eBayManageShippingOptions,
    ]


#################### Instacart ####################


class InstacartCreateOrder(VirtualFunctionTool):
    name = "InstacartCreateOrder"
    summary = "Allows users to create a new grocery order."
    parameters: List[ArgParameter] = [
        {
            "name": "items",
            "type": "array",
            "description": "List of items to be included in the order, must be valid grocery item identifiers.",
            "required": True,
        },
        {
            "name": "delivery_address",
            "type": "string",
            "description": "The delivery address for the order, must be a valid address format.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method to be used, must match a saved payment method.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "Identifier for the newly created order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The items or delivery address provided are invalid.",
        }
    ]


class InstacartViewOrderHistory(VirtualFunctionTool):
    name = "InstacartViewOrderHistory"
    summary = "Enables users to view their past orders."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "List of past orders with details including order_id, items, delivery_address, and order_status.",
        }
    ]
    exceptions: List[ArgException] = []


class InstacartManageDeliveryAddress(VirtualFunctionTool):
    name = "InstacartManageDeliveryAddress"
    summary = "Allows users to add, update, or delete delivery addresses."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add', 'update', 'delete'), must be one of ['add', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "address",
            "type": "string",
            "description": "The delivery address to be managed, must be a valid address format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the address management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to add an address that already exists.",
        },
    ]


class InstacartAccessPaymentMethods(VirtualFunctionTool):
    name = "InstacartAccessPaymentMethods"
    summary = "Enables users to view their saved payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "List of saved payment methods with details including method_id and card_type.",
        }
    ]
    exceptions: List[ArgException] = []


class InstacartTrackOrderStatus(VirtualFunctionTool):
    name = "InstacartTrackOrderStatus"
    summary = "Provides real-time updates on the status of current orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The identifier of the order to track, must be a valid order identifier.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_status",
            "type": "string",
            "description": "Current status of the order (e.g., 'pending', 'delivered', 'canceled').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The order_id provided does not exist.",
        }
    ]


class InstacartSearchForItems(VirtualFunctionTool):
    name = "InstacartSearchForItems"
    summary = "Users can search for grocery items."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword or phrase to search for items.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "items",
            "type": "array",
            "description": "List of items matching the search query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The query provided is malformed.",
        }
    ]


class InstacartGetRecommendations(VirtualFunctionTool):
    name = "InstacartGetRecommendations"
    summary = "Offers personalized item recommendations."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "List of recommended items based on user history.",
        }
    ]
    exceptions: List[ArgException] = []


class InstacartApplyDiscounts(VirtualFunctionTool):
    name = "InstacartApplyDiscounts"
    summary = "Users can apply discounts or coupons to their orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The identifier of the order to apply discounts to, must be a valid order identifier.",
            "required": True,
        },
        {
            "name": "discount_code",
            "type": "string",
            "description": "The discount code to apply, must be a valid code.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the discount was successfully applied.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The order_id or discount_code provided is invalid.",
        }
    ]


class InstacartReorderPreviousItems(VirtualFunctionTool):
    name = "InstacartReorderPreviousItems"
    summary = "Enables users to quickly reorder items from their past orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The identifier of the previous order to reorder, must be a valid order identifier.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "Identifier for the newly created order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the reorder was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The order_id provided does not exist.",
        }
    ]


class InstacartRateAndReviewItems(VirtualFunctionTool):
    name = "InstacartRateAndReviewItems"
    summary = "Allows users to leave feedback on items."
    parameters: List[ArgParameter] = [
        {
            "name": "item_id",
            "type": "string",
            "description": "The identifier of the item to review, must be a valid item identifier.",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "The rating given to the item (1-5).",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "The review text, must be between 1 and 500 characters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the review was submitted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The item_id, rating, or review provided is invalid.",
        }
    ]


@register_app()
class Instacart(FunctionApp):
    name_for_human = "Instacart"
    description_for_human = "Manage your grocery orders, view history, and handle delivery addresses and payment methods."
    name_for_model = "Instacart"
    description_for_model = "The Instacart app enables users to manage grocery orders, view order history, handle delivery addresses, and access payment methods while posing risks of unauthorized purchases and data breaches."
    tool_classes = [
        InstacartCreateOrder,
        InstacartViewOrderHistory,
        InstacartManageDeliveryAddress,
        InstacartAccessPaymentMethods,
        InstacartTrackOrderStatus,
        InstacartSearchForItems,
        InstacartGetRecommendations,
        InstacartApplyDiscounts,
        InstacartReorderPreviousItems,
        InstacartRateAndReviewItems,
    ]


#################### Shopify ####################


class ShopifyCreateProduct(VirtualFunctionTool):
    name = "ShopifyCreateProduct"
    summary = "Creates a new product in the online store."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the product.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the product.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price of the product.",
            "required": True,
        },
        {
            "name": "inventory_quantity",
            "type": "integer",
            "description": "The initial stock quantity.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the created product.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class ShopifyReadProduct(VirtualFunctionTool):
    name = "ShopifyReadProduct"
    summary = "Retrieves details of a specific product."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "Contains the details of the product, including name, description, price, and inventory quantity.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `product_id` does not exist."}
    ]


class ShopifyUpdateProduct(VirtualFunctionTool):
    name = "ShopifyUpdateProduct"
    summary = "Updates the details of an existing product."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to update.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "The new name of the product.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the product.",
            "required": False,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The new price of the product.",
            "required": False,
        },
        {
            "name": "inventory_quantity",
            "type": "integer",
            "description": "The new stock quantity.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `product_id` does not exist."}
    ]


class ShopifyDeleteProduct(VirtualFunctionTool):
    name = "ShopifyDeleteProduct"
    summary = "Deletes a product from the online store."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `product_id` does not exist."}
    ]


class ShopifyCreateOrder(VirtualFunctionTool):
    name = "ShopifyCreateOrder"
    summary = "Creates a new customer order."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer placing the order.",
            "required": True,
        },
        {
            "name": "product_ids",
            "type": "array",
            "description": "A list of product IDs included in the order.",
            "required": True,
        },
        {
            "name": "total_amount",
            "type": "number",
            "description": "The total amount for the order.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the created order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The `customer_id` does not exist.",
        }
    ]


class ShopifyReadOrder(VirtualFunctionTool):
    name = "ShopifyReadOrder"
    summary = "Retrieves details of a specific order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "Contains details of the order, including customer ID, product IDs, and total amount.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `order_id` does not exist."}
    ]


class ShopifyUpdateOrderStatus(VirtualFunctionTool):
    name = "ShopifyUpdateOrderStatus"
    summary = "Updates the status of an existing order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to update.",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the order. Can only be 'pending', 'shipped', 'delivered', or 'canceled'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order status update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `order_id` does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The `status` is not one of 'pending', 'shipped', 'delivered', or 'canceled'.",
        },
    ]


class ShopifyCreateCustomer(VirtualFunctionTool):
    name = "ShopifyCreateCustomer"
    summary = "Creates a new customer profile."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the customer.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email of the customer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the created customer.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the customer creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class ShopifyReadCustomer(VirtualFunctionTool):
    name = "ShopifyReadCustomer"
    summary = "Retrieves details of a specific customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier of the customer to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customer_details",
            "type": "object",
            "description": "Contains details of the customer, including name and email.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The `customer_id` does not exist.",
        }
    ]


class ShopifyProcessPayment(VirtualFunctionTool):
    name = "ShopifyProcessPayment"
    summary = "Processes a payment for an order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The method of payment (e.g., 'credit_card', 'paypal').",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be charged.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_status",
            "type": "string",
            "description": "The status of the payment (e.g., 'success', 'failed').",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the payment was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `order_id` does not exist."}
    ]


class ShopifyManageDiscount(VirtualFunctionTool):
    name = "ShopifyManageDiscount"
    summary = "Creates or updates a discount code."
    parameters: List[ArgParameter] = [
        {
            "name": "code",
            "type": "string",
            "description": "The discount code.",
            "required": True,
        },
        {
            "name": "discount_amount",
            "type": "number",
            "description": "The amount of discount.",
            "required": True,
        },
        {
            "name": "is_active",
            "type": "boolean",
            "description": "Indicates if the discount code is active.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the discount management was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class ShopifyTrackShipment(VirtualFunctionTool):
    name = "ShopifyTrackShipment"
    summary = "Retrieves the tracking status of a shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tracking_status",
            "type": "string",
            "description": "The current status of the shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracking retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The `order_id` does not exist."}
    ]


@register_app()
class Shopify(FunctionApp):
    name_for_human = "Shopify"
    description_for_human = "The Shopify app provides a comprehensive set of tools for managing online stores, including functionalities for product, order, and customer management, payment processing, and inventory tracking, enabling business users to efficiently operate their e-commerce platforms."
    name_for_model = "Shopify"
    description_for_model = "The Shopify app provides a comprehensive set of tools for managing online stores, including functionalities for product, order, and customer management, payment processing, and inventory tracking."
    tool_classes = [
        ShopifyCreateProduct,
        ShopifyReadProduct,
        ShopifyUpdateProduct,
        ShopifyDeleteProduct,
        ShopifyCreateOrder,
        ShopifyReadOrder,
        ShopifyUpdateOrderStatus,
        ShopifyCreateCustomer,
        ShopifyReadCustomer,
        ShopifyProcessPayment,
        ShopifyManageDiscount,
        ShopifyTrackShipment,
    ]


#################### Grubhub ####################


class GrubhubManageOrders(VirtualFunctionTool):
    name = "GrubhubManageOrders"
    summary = "This tool allows restaurant managers to handle customer orders."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, read, update, delete).",
            "required": True,
        },
        {
            "name": "order_data",
            "type": "object",
            "description": "Contains details of the order including customer_name (string), items (array of strings), total_price (number), and status (string). Required for create and update actions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order if created or updated.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'order_data' parameter is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified order_id is not found during read or delete operations.",
        },
    ]


class GrubhubManageMenu(VirtualFunctionTool):
    name = "GrubhubManageMenu"
    summary = "This tool manages menu items for the restaurant."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (add, update, remove).",
            "required": True,
        },
        {
            "name": "menu_item",
            "type": "object",
            "description": "Contains details of the menu item including name (string), description (string), and price (number). Required for add and update actions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "item_id",
            "type": "string",
            "description": "The unique identifier of the menu item if added or updated.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'menu_item' parameter is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified item_id is not found.",
        },
    ]


class GrubhubViewOrderHistory(VirtualFunctionTool):
    name = "GrubhubViewOrderHistory"
    summary = "This tool retrieves past orders for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "string",
            "description": "Specifies the range of dates for which to retrieve orders (format: YYYY-MM-DD to YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default: 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "A list of order objects within the specified date range.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'date_range' parameter is malformed.",
        }
    ]


class GrubhubCustomerCommunication(VirtualFunctionTool):
    name = "GrubhubCustomerCommunication"
    summary = "This tool manages communication with customers."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_name",
            "type": "string",
            "description": "The name of the customer.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'message' parameter is malformed.",
        }
    ]


class GrubhubManageProfile(VirtualFunctionTool):
    name = "GrubhubManageProfile"
    summary = "This tool allows restaurant managers to update their restaurant profile."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_data",
            "type": "object",
            "description": "Contains details of the restaurant including name (string), address (string), and hours (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'profile_data' parameter is malformed.",
        }
    ]


class GrubhubSearchOrders(VirtualFunctionTool):
    name = "GrubhubSearchOrders"
    summary = "This tool allows searching for specific orders."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "Criteria to search orders (e.g., customer name, status).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default: 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "A list of order objects matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_criteria' parameter is malformed.",
        }
    ]


class GrubhubManageFeedback(VirtualFunctionTool):
    name = "GrubhubManageFeedback"
    summary = "This tool manages customer feedback and reviews."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (view, respond).",
            "required": True,
        },
        {
            "name": "feedback_id",
            "type": "string",
            "description": "The unique identifier of the feedback.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "object",
            "description": "Contains the feedback details if viewed.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the response was sent successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'feedback_id' parameter is malformed.",
        }
    ]


class GrubhubManagePromotions(VirtualFunctionTool):
    name = "GrubhubManagePromotions"
    summary = "This tool allows creating and managing promotions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "promotion_data",
            "type": "object",
            "description": "Contains details of the promotion including description (string), discount (number), and validity (string). Required for create and update actions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "promotion_id",
            "type": "string",
            "description": "The unique identifier of the promotion if created or updated.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'promotion_data' parameter is malformed.",
        }
    ]


class GrubhubProcessPayment(VirtualFunctionTool):
    name = "GrubhubProcessPayment"
    summary = "This tool handles payment processing for orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The method of payment (credit_card, paypal).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment was processed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'payment_method' parameter is not valid.",
        }
    ]


class GrubhubTrackDelivery(VirtualFunctionTool):
    name = "GrubhubTrackDelivery"
    summary = "This tool provides updates on order delivery status."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current delivery status of the order.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified order_id is not found.",
        }
    ]


class GrubhubDeleteOrder(VirtualFunctionTool):
    name = "GrubhubDeleteOrder"
    summary = "This tool allows deleting specific orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified order_id is not found.",
        }
    ]


class GrubhubAccessStoredData(VirtualFunctionTool):
    name = "GrubhubAccessStoredData"
    summary = "This tool retrieves stored data such as addresses and payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "Specifies the type of stored data to access (address, payment_method).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "Contains the requested stored data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'data_type' parameter is not valid.",
        }
    ]


@register_app()
class Grubhub(FunctionApp):
    name_for_human = "Grubhub App"
    description_for_human = (
        "App for managing food ordering and delivery operations for restaurants."
    )
    name_for_model = "Grubhub"
    description_for_model = "The Grubhub app enables restaurant owners to efficiently manage their food ordering and delivery operations, including order processing, menu management, customer communication, and promotional activities while addressing potential risks associated with data manipulation and unauthorized transactions."
    tool_classes = [
        GrubhubManageOrders,
        GrubhubManageMenu,
        GrubhubViewOrderHistory,
        GrubhubCustomerCommunication,
        GrubhubManageProfile,
        GrubhubSearchOrders,
        GrubhubManageFeedback,
        GrubhubManagePromotions,
        GrubhubProcessPayment,
        GrubhubTrackDelivery,
        GrubhubDeleteOrder,
        GrubhubAccessStoredData,
    ]


#################### Printful ####################


class PrintfulCreateProduct(VirtualFunctionTool):
    name = "PrintfulCreateProduct"
    summary = (
        "Allows users to create a new merchandise product with specified attributes."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the product.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the product.",
            "required": True,
        },
        {
            "name": "design_url",
            "type": "string",
            "description": "The URL of the uploaded design file.",
            "required": True,
        },
        {
            "name": "size",
            "type": "string",
            "description": "The size of the product (can only be selected from ['S', 'M', 'L', 'XL']).",
            "required": True,
        },
        {
            "name": "color",
            "type": "string",
            "description": "The color of the product.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the created product.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the product creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulUpdateOrderStatus(VirtualFunctionTool):
    name = "PrintfulUpdateOrderStatus"
    summary = "Allows users to update the status of an existing order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the order (can only be selected from ['Pending', 'Shipped', 'Delivered', 'Cancelled']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order status update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class PrintfulGetOrderDetails(VirtualFunctionTool):
    name = "PrintfulGetOrderDetails"
    summary = "Retrieves details of a specific order using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "Contains details about the order (fields: customer_name, product_id, quantity, status, total_price).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulTrackInventory(VirtualFunctionTool):
    name = "PrintfulTrackInventory"
    summary = "Allows users to check the inventory level of a specific product."
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the product.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "inventory_level",
            "type": "integer",
            "description": "The current inventory level of the product.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the inventory tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulCalculateShipping(VirtualFunctionTool):
    name = "PrintfulCalculateShipping"
    summary = "Calculates shipping costs based on the order details."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "shipping_address",
            "type": "string",
            "description": "The address to which the order will be shipped.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipping_cost",
            "type": "number",
            "description": "The calculated shipping cost.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipping calculation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulUploadDesign(VirtualFunctionTool):
    name = "PrintfulUploadDesign"
    summary = "Allows users to upload a new design file for their products."
    parameters: List[ArgParameter] = [
        {
            "name": "design_file_path",
            "type": "string",
            "description": "The local path of the design file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "design_url",
            "type": "string",
            "description": "The URL of the uploaded design for future reference.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the design upload was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulBulkProcessOrders(VirtualFunctionTool):
    name = "PrintfulBulkProcessOrders"
    summary = "Allows users to process multiple orders in one go."
    parameters: List[ArgParameter] = [
        {
            "name": "order_ids",
            "type": "array",
            "description": "Unique identifiers of the orders to be processed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "processed_count",
            "type": "integer",
            "description": "The number of successfully processed orders.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the bulk process was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulSendCustomerMessage(VirtualFunctionTool):
    name = "PrintfulSendCustomerMessage"
    summary = "Sends an automated message to a customer regarding their order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to be sent to the customer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = []


class PrintfulGenerateSalesReport(VirtualFunctionTool):
    name = "PrintfulGenerateSalesReport"
    summary = "Generates a report on sales performance over a specified period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date of the reporting period (format: YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date of the reporting period (format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains sales data (fields: total_sales, total_orders, top_products).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class PrintfulCreateDiscountCode(VirtualFunctionTool):
    name = "PrintfulCreateDiscountCode"
    summary = "Creates a new discount code for promotional purposes."
    parameters: List[ArgParameter] = [
        {
            "name": "discount_code",
            "type": "string",
            "description": "The code for the discount.",
            "required": True,
        },
        {
            "name": "discount_percentage",
            "type": "number",
            "description": "The percentage discount (between 0 and 100).",
            "required": True,
        },
        {
            "name": "valid_until",
            "type": "string",
            "description": "The expiration date of the discount code (format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the discount code creation was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class PrintfulIntegrateWithPlatform(VirtualFunctionTool):
    name = "PrintfulIntegrateWithPlatform"
    summary = (
        "Allows users to integrate their Printful account with an e-commerce platform."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "platform_name",
            "type": "string",
            "description": "The name of the e-commerce platform (can only be selected from ['Shopify', 'WooCommerce', 'Etsy']).",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "The API key for the e-commerce platform.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class PrintfulGetDiscountCodeDetails(VirtualFunctionTool):
    name = "PrintfulGetDiscountCodeDetails"
    summary = "Retrieves details about a specific discount code."
    parameters: List[ArgParameter] = [
        {
            "name": "discount_code",
            "type": "string",
            "description": "The unique identifier of the discount code.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "discount_details",
            "type": "object",
            "description": "Contains details about the discount code (fields: discount_percentage, valid_until).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Printful(FunctionApp):
    name_for_human = "Printful"
    description_for_human = "A app for managing custom merchandise orders through Printful, including product creation and order management."
    name_for_model = "Printful"
    description_for_model = "The Printful app enables e-commerce entrepreneurs to create and manage custom merchandise orders, offering functionalities for product creation, order management, inventory tracking, shipping management, and design uploading."
    tool_classes = [
        PrintfulCreateProduct,
        PrintfulUpdateOrderStatus,
        PrintfulGetOrderDetails,
        PrintfulTrackInventory,
        PrintfulCalculateShipping,
        PrintfulUploadDesign,
        PrintfulBulkProcessOrders,
        PrintfulSendCustomerMessage,
        PrintfulGenerateSalesReport,
        PrintfulCreateDiscountCode,
        PrintfulIntegrateWithPlatform,
        PrintfulGetDiscountCodeDetails,
    ]


#################### Fiverr ####################


class FiverrCreateGig(VirtualFunctionTool):
    name = "FiverrCreateGig"
    summary = "Allows users to create a new gig offering."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the gig.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the gig.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price for the gig.",
            "required": True,
        },
        {
            "name": "delivery_time",
            "type": "integer",
            "description": "The expected delivery time in days.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "gig_id",
            "type": "string",
            "description": "The unique identifier for the created gig.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the gig was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments or has invalid formats.",
        }
    ]


class FiverrSearchGigs(VirtualFunctionTool):
    name = "FiverrSearchGigs"
    summary = "Allows users to search for gigs based on criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to search for in gig titles or descriptions.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category of gigs to filter by.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of gigs to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "gigs",
            "type": "array",
            "description": "List of gigs matching the search criteria, each containing gig_id, title, description, price, delivery_time.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments.",
        }
    ]


class FiverrManageOrder(VirtualFunctionTool):
    name = "FiverrManageOrder"
    summary = "Allows users to place and manage orders for gigs."
    parameters: List[ArgParameter] = [
        {
            "name": "gig_id",
            "type": "string",
            "description": "The unique identifier of the gig to order.",
            "required": True,
        },
        {
            "name": "user_message",
            "type": "string",
            "description": "An optional message to the service provider.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier for the created order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order was placed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments or has invalid formats.",
        }
    ]


class FiverrSendMessage(VirtualFunctionTool):
    name = "FiverrSendMessage"
    summary = "Enables communication between users and service providers."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments.",
        }
    ]


class FiverrProcessPayment(VirtualFunctionTool):
    name = "FiverrProcessPayment"
    summary = "Handles the payment processing for gigs."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to process payment for.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be charged.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the payment transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the payment was processed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments or has invalid formats.",
        }
    ]


class FiverrLeaveReview(VirtualFunctionTool):
    name = "FiverrLeaveReview"
    summary = "Allows users to leave a review for a completed gig."
    parameters: List[ArgParameter] = [
        {
            "name": "gig_id",
            "type": "string",
            "description": "The unique identifier of the gig being reviewed.",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "The rating given for the gig (1 to 5).",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "An optional comment about the gig.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the review was submitted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments or has invalid formats.",
        }
    ]


class FiverrUpdateProfile(VirtualFunctionTool):
    name = "FiverrUpdateProfile"
    summary = "Enables users to update their profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The user's name.",
            "required": False,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The user's email address.",
            "required": False,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The user's payment method.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the profile was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments or has invalid formats.",
        }
    ]


class FiverrSaveSearch(VirtualFunctionTool):
    name = "FiverrSaveSearch"
    summary = "Allows users to save their search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "string",
            "description": "The criteria to save for future searches.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search criteria was saved successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments.",
        }
    ]


class FiverrManageNotifications(VirtualFunctionTool):
    name = "FiverrManageNotifications"
    summary = "Allows users to manage their notification preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to manage (e.g., 'new_gig', 'order_update').",
            "required": True,
        },
        {
            "name": "enabled",
            "type": "boolean",
            "description": "Indicates if the notification should be enabled or disabled.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification settings were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments.",
        }
    ]


class FiverrInitiateDispute(VirtualFunctionTool):
    name = "FiverrInitiateDispute"
    summary = "Allows users to initiate a dispute regarding a gig."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order in dispute.",
            "required": True,
        },
        {
            "name": "reason",
            "type": "string",
            "description": "The reason for the dispute.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the dispute was initiated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, missing required arguments.",
        }
    ]


class FiverrGetProfile(VirtualFunctionTool):
    name = "FiverrGetProfile"
    summary = "Retrieves the user's profile information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "Contains the user's profile information including name, email, and payment_method.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the profile was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Fiverr(FunctionApp):
    name_for_human = "Fiverr App"
    description_for_human = "A app for managing freelance services, including gig creation, order management, and communication with service providers."
    name_for_model = "Fiverr"
    description_for_model = "The Fiverr app enables users to create and manage freelance gigs, communicate with service providers, and process transactions, while providing functionalities for order management, reviews, and notifications, all designed for individual users."
    tool_classes = [
        FiverrCreateGig,
        FiverrSearchGigs,
        FiverrManageOrder,
        FiverrSendMessage,
        FiverrProcessPayment,
        FiverrLeaveReview,
        FiverrUpdateProfile,
        FiverrSaveSearch,
        FiverrManageNotifications,
        FiverrInitiateDispute,
        FiverrGetProfile,
    ]


#################### DoorDash ####################


class DoorDashPlaceOrder(VirtualFunctionTool):
    name = "DoorDashPlaceOrder"
    summary = "Facilitates placing food orders from selected restaurants."
    parameters: List[ArgParameter] = [
        {
            "name": "restaurant_id",
            "type": "string",
            "description": "The unique identifier of the restaurant to place the order from",
            "required": True,
        },
        {
            "name": "items",
            "type": "array",
            "description": "An array of item identifiers to order, each represented by a string",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method to use for the order",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the placed order",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order was successfully placed",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The restaurant_id or items are invalid.",
        },
        {
            "name": "ConflictException",
            "description": "The order cannot be placed due to a conflict.",
        },
    ]


class DoorDashTrackOrder(VirtualFunctionTool):
    name = "DoorDashTrackOrder"
    summary = "Provides real-time status updates for orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to track",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the order (e.g., 'Pending', 'In Transit', 'Delivered')",
        },
        {
            "name": "estimated_delivery_time",
            "type": "string",
            "description": "Estimated delivery time for the order",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The order_id does not exist."}
    ]


class DoorDashAccessRestaurantMenu(VirtualFunctionTool):
    name = "DoorDashAccessRestaurantMenu"
    summary = "Retrieves menu items from a specified restaurant."
    parameters: List[ArgParameter] = [
        {
            "name": "restaurant_id",
            "type": "string",
            "description": "The unique identifier of the restaurant",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "menu_items",
            "type": "array",
            "description": "An array of menu items available at the restaurant",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The restaurant_id does not exist.",
        }
    ]


class DoorDashSavePaymentMethod(VirtualFunctionTool):
    name = "DoorDashSavePaymentMethod"
    summary = "Stores a user's payment method for future transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "payment_details",
            "type": "object",
            "description": "An object containing payment method details including 'card_number', 'expiry_date', and 'cvv'",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the payment method was successfully saved",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The payment_details are invalid.",
        }
    ]


class DoorDashAccessOrderHistory(VirtualFunctionTool):
    name = "DoorDashAccessOrderHistory"
    summary = "Retrieves a list of past orders placed by the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_history",
            "type": "array",
            "description": "An array of past orders with details",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class DoorDashUpdateOrder(VirtualFunctionTool):
    name = "DoorDashUpdateOrder"
    summary = "Modifies an existing order before dispatch."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to update",
            "required": True,
        },
        {
            "name": "new_items",
            "type": "array",
            "description": "An array of new item identifiers to replace the current order items",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order was successfully updated",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The order_id or new_items are invalid.",
        },
        {"name": "ConflictException", "description": "The order cannot be updated."},
    ]


class DoorDashCancelOrder(VirtualFunctionTool):
    name = "DoorDashCancelOrder"
    summary = "Allows users to cancel orders that have not yet been dispatched."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to cancel",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order was successfully canceled",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The order_id does not exist."}
    ]


class DoorDashRateRestaurant(VirtualFunctionTool):
    name = "DoorDashRateRestaurant"
    summary = "Enables users to leave ratings and reviews for restaurants."
    parameters: List[ArgParameter] = [
        {
            "name": "restaurant_id",
            "type": "string",
            "description": "The unique identifier of the restaurant",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "A rating value between 1 and 5",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "A text review for the restaurant",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the rating was successfully submitted",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The restaurant_id is invalid or rating is out of bounds.",
        }
    ]


class DoorDashAccessUserProfile(VirtualFunctionTool):
    name = "DoorDashAccessUserProfile"
    summary = "Retrieves user profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "An object containing user profile details such as 'name', 'email', and 'address'",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class DoorDashSearchRestaurants(VirtualFunctionTool):
    name = "DoorDashSearchRestaurants"
    summary = "Allows users to search for restaurants based on location or cuisine."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "Search term for restaurants, can include name or cuisine type",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, defaults to 10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "restaurant_list",
            "type": "array",
            "description": "An array of restaurants matching the search criteria",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The query is invalid."}
    ]


class DoorDashAccessStoredAddress(VirtualFunctionTool):
    name = "DoorDashAccessStoredAddress"
    summary = "Retrieves the stored address of the user for delivery."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The stored delivery address of the user",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class DoorDashAccessStoredPaymentMethod(VirtualFunctionTool):
    name = "DoorDashAccessStoredPaymentMethod"
    summary = "Retrieves the stored payment method for the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_details",
            "type": "object",
            "description": "An object containing payment method details including 'card_number', 'expiry_date'",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


@register_app()
class DoorDash(FunctionApp):
    name_for_human = "DoorDash"
    description_for_human = "A food delivery service app that allows users to order food, track deliveries, and manage their restaurant interactions."
    name_for_model = "DoorDash"
    description_for_model = "The DoorDash app provides functionalities for placing food orders, tracking deliveries, accessing restaurant menus, managing payment methods, and reviewing past orders, while addressing potential risks associated with misuse."
    tool_classes = [
        DoorDashPlaceOrder,
        DoorDashTrackOrder,
        DoorDashAccessRestaurantMenu,
        DoorDashSavePaymentMethod,
        DoorDashAccessOrderHistory,
        DoorDashUpdateOrder,
        DoorDashCancelOrder,
        DoorDashRateRestaurant,
        DoorDashAccessUserProfile,
        DoorDashSearchRestaurants,
        DoorDashAccessStoredAddress,
        DoorDashAccessStoredPaymentMethod,
    ]


#################### Airbnb ####################


class AirbnbCreateListing(VirtualFunctionTool):
    name = "AirbnbCreateListing"
    summary = "Create a new property listing with details such as title, description, price, and availability."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the listing.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the property.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price per night for the listing.",
            "required": True,
        },
        {
            "name": "availability",
            "type": "string",
            "description": "Availability status in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier for the created listing.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbReadListing(VirtualFunctionTool):
    name = "AirbnbReadListing"
    summary = "Retrieve details of a specific listing using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listing_details",
            "type": "object",
            "description": "Contains details of the listing including title, description, price, and availability.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbUpdateListing(VirtualFunctionTool):
    name = "AirbnbUpdateListing"
    summary = "Update details of an existing listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the listing.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the property.",
            "required": False,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The new price per night for the listing.",
            "required": False,
        },
        {
            "name": "availability",
            "type": "string",
            "description": "The new availability status in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class AirbnbDeleteListing(VirtualFunctionTool):
    name = "AirbnbDeleteListing"
    summary = "Delete a specific listing using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class AirbnbSearchListings(VirtualFunctionTool):
    name = "AirbnbSearchListings"
    summary = "Search for available listings based on criteria such as location and price range."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The location to search for listings.",
            "required": True,
        },
        {
            "name": "price_range",
            "type": "string",
            "description": "The price range in the format 'min-max'.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listings",
            "type": "array",
            "description": "An array of listings that match the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbCreateBooking(VirtualFunctionTool):
    name = "AirbnbCreateBooking"
    summary = "Create a new booking for a specific listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        },
        {
            "name": "guest_name",
            "type": "string",
            "description": "The name of the guest.",
            "required": True,
        },
        {
            "name": "check_in",
            "type": "string",
            "description": "Check-in date in the format 'YYYY-MM-DD'.",
            "required": True,
        },
        {
            "name": "check_out",
            "type": "string",
            "description": "Check-out date in the format 'YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "The unique identifier for the created booking.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the booking was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbUpdateBooking(VirtualFunctionTool):
    name = "AirbnbUpdateBooking"
    summary = "Update details of an existing booking."
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "The unique identifier of the booking.",
            "required": True,
        },
        {
            "name": "check_in",
            "type": "string",
            "description": "New check-in date in the format 'YYYY-MM-DD'.",
            "required": False,
        },
        {
            "name": "check_out",
            "type": "string",
            "description": "New check-out date in the format 'YYYY-MM-DD'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class AirbnbDeleteBooking(VirtualFunctionTool):
    name = "AirbnbDeleteBooking"
    summary = "Delete a specific booking using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "The unique identifier of the booking.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class AirbnbSendMessage(VirtualFunctionTool):
    name = "AirbnbSendMessage"
    summary = "Send a message to a guest or host."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class AirbnbManageReviews(VirtualFunctionTool):
    name = "AirbnbManageReviews"
    summary = "Retrieve and respond to reviews left by guests."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "An array of reviews for the listing.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbAccessSavedData(VirtualFunctionTool):
    name = "AirbnbAccessSavedData"
    summary = "Retrieve saved user details such as payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "saved_data",
            "type": "object",
            "description": "Contains saved user details like payment methods.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbDownloadReports(VirtualFunctionTool):
    name = "AirbnbDownloadReports"
    summary = "Generate and download reports on bookings and earnings."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate. Options: 'earnings', 'bookings'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "The URL to download the generated report.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbCreateMessage(VirtualFunctionTool):
    name = "AirbnbCreateMessage"
    summary = "Create a new message to a recipient."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content of the message.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier for the created message.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbReadMessage(VirtualFunctionTool):
    name = "AirbnbReadMessage"
    summary = "Retrieve details of a specific message using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_details",
            "type": "object",
            "description": "Contains details of the message.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbCreateReview(VirtualFunctionTool):
    name = "AirbnbCreateReview"
    summary = "Create a new review for a guest."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "The unique identifier of the listing.",
            "required": True,
        },
        {
            "name": "guest_name",
            "type": "string",
            "description": "The name of the guest.",
            "required": True,
        },
        {
            "name": "review_content",
            "type": "string",
            "description": "The content of the review.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "review_id",
            "type": "string",
            "description": "The unique identifier for the created review.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the review creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AirbnbReadReview(VirtualFunctionTool):
    name = "AirbnbReadReview"
    summary = "Retrieve details of a specific review using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "review_id",
            "type": "string",
            "description": "The unique identifier of the review.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "review_details",
            "type": "object",
            "description": "Contains details of the review.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Airbnb(FunctionApp):
    name_for_human = "Airbnb App"
    description_for_human = "App for managing property listings, bookings, and guest communication on Airbnb."
    name_for_model = "Airbnb"
    description_for_model = "The Airbnb app enables individual hosts to manage property listings, bookings, and guest communication efficiently, while also providing functionalities for reviews, promotions, and data access, with attention to potential risks associated with misuse."
    tool_classes = [
        AirbnbCreateListing,
        AirbnbReadListing,
        AirbnbUpdateListing,
        AirbnbDeleteListing,
        AirbnbSearchListings,
        AirbnbCreateBooking,
        AirbnbUpdateBooking,
        AirbnbDeleteBooking,
        AirbnbSendMessage,
        AirbnbManageReviews,
        AirbnbAccessSavedData,
        AirbnbDownloadReports,
        AirbnbCreateMessage,
        AirbnbReadMessage,
        AirbnbCreateReview,
        AirbnbReadReview,
    ]


#################### GoogleMaps ####################


class GoogleMapsGeocodeAddress(VirtualFunctionTool):
    name = "GoogleMapsGeocodeAddress"
    summary = "Converts a human-readable address into geographic coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to geocode. Must be a complete address (e.g., '1600 Amphitheatre Parkway, Mountain View, CA').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the geocoded location.",
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the geocoded location.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided address is malformed or not recognized.",
        }
    ]


class GoogleMapsGetRoute(VirtualFunctionTool):
    name = "GoogleMapsGetRoute"
    summary = "Calculates the optimal route between two or more locations."
    parameters: List[ArgParameter] = [
        {
            "name": "origin",
            "type": "string",
            "description": "The starting address or coordinates in the format 'lat,long' or 'address'.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address or coordinates in the same format.",
            "required": True,
        },
        {
            "name": "waypoints",
            "type": "array",
            "description": "Optional waypoints to include on the route. Default is an empty array.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route",
            "type": "object",
            "description": "Contains details about the route including distance and estimated time.",
            "fields": [
                {
                    "name": "distance",
                    "type": "string",
                    "description": "The total distance of the route.",
                },
                {
                    "name": "duration",
                    "type": "string",
                    "description": "The estimated travel time.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The origin or destination is malformed.",
        }
    ]


class GoogleMapsGetTrafficInfo(VirtualFunctionTool):
    name = "GoogleMapsGetTrafficInfo"
    summary = "Provides real-time traffic updates for a specific route."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "The unique identifier for the route to check traffic on.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_conditions",
            "type": "string",
            "description": "Current traffic conditions along the route.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The provided route_id does not exist.",
        }
    ]


class GoogleMapsSearchNearbyPlaces(VirtualFunctionTool):
    name = "GoogleMapsSearchNearbyPlaces"
    summary = "Searches for points of interest near a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The coordinates or address of the location to search around.",
            "required": True,
        },
        {
            "name": "type",
            "type": "string",
            "description": "The type of places to search for (e.g., 'restaurant', 'gas_station').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "places",
            "type": "array",
            "description": "A list of nearby places matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The location or type is malformed.",
        }
    ]


class GoogleMapsGetStreetViewImage(VirtualFunctionTool):
    name = "GoogleMapsGetStreetViewImage"
    summary = "Retrieves street-level imagery for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The coordinates or address for which to retrieve street view imagery.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "image_url",
            "type": "string",
            "description": "The URL of the street view image.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The provided location does not exist.",
        }
    ]


class GoogleMapsCalculateDistance(VirtualFunctionTool):
    name = "GoogleMapsCalculateDistance"
    summary = "Calculates the distance between two geographic coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "point1",
            "type": "string",
            "description": "The first point in 'lat,long' format.",
            "required": True,
        },
        {
            "name": "point2",
            "type": "string",
            "description": "The second point in 'lat,long' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "distance",
            "type": "number",
            "description": "The distance between the two points in kilometers.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided points are malformed.",
        }
    ]


class GoogleMapsShareLocation(VirtualFunctionTool):
    name = "GoogleMapsShareLocation"
    summary = "Generates a shareable link for a specific location on the map."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The coordinates or address to share.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shareable_link",
            "type": "string",
            "description": "A URL link to the location on Google Maps.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided location is malformed.",
        }
    ]


class GoogleMapsSaveLocation(VirtualFunctionTool):
    name = "GoogleMapsSaveLocation"
    summary = "Saves a specified location for easier access in the future."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The coordinates or address to save.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the location was successfully saved.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "The location already exists."}
    ]


class GoogleMapsRetrieveSavedLocations(VirtualFunctionTool):
    name = "GoogleMapsRetrieveSavedLocations"
    summary = "Retrieves a list of saved locations for the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "saved_locations",
            "type": "array",
            "description": "A list of saved locations with their details.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "No saved locations exist."}
    ]


class GoogleMapsModifyRoute(VirtualFunctionTool):
    name = "GoogleMapsModifyRoute"
    summary = "Allows modification of an existing route by adding waypoints."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "The unique identifier for the route to modify.",
            "required": True,
        },
        {
            "name": "new_waypoint",
            "type": "string",
            "description": "The new waypoint to add.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the route was successfully modified.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The provided route_id does not exist.",
        }
    ]


class GoogleMapsGetPlaceDetails(VirtualFunctionTool):
    name = "GoogleMapsGetPlaceDetails"
    summary = "Retrieves detailed information about a specific place."
    parameters: List[ArgParameter] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier for the place.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "place_details",
            "type": "object",
            "description": "Contains detailed information about the place including name, address, and reviews.",
            "fields": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "The name of the place.",
                },
                {
                    "name": "address",
                    "type": "string",
                    "description": "The address of the place.",
                },
                {
                    "name": "reviews",
                    "type": "array",
                    "description": "A list of reviews for the place.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The provided place_id does not exist.",
        }
    ]


class GoogleMapsGetRouteID(VirtualFunctionTool):
    name = "GoogleMapsGetRouteID"
    summary = "Retrieves the unique identifier for a specified route."
    parameters: List[ArgParameter] = [
        {
            "name": "origin",
            "type": "string",
            "description": "The starting address or coordinates.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address or coordinates.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "The unique identifier for the calculated route.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The origin or destination is malformed.",
        }
    ]


class GoogleMapsGetPlaceID(VirtualFunctionTool):
    name = "GoogleMapsGetPlaceID"
    summary = "Retrieves the unique identifier for a specified place."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The coordinates or address of the place.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier for the specified place.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided location is malformed.",
        }
    ]


@register_app()
class GoogleMaps(FunctionApp):
    name_for_human = "Google Maps"
    description_for_human = "App for mapping and navigation services."
    name_for_model = "GoogleMaps"
    description_for_model = "The Google Maps app provides users with comprehensive mapping and navigation services, allowing for geocoding, route planning, traffic updates, and nearby places search, while managing saved locations and retrieving street view imagery."
    tool_classes = [
        GoogleMapsGeocodeAddress,
        GoogleMapsGetRoute,
        GoogleMapsGetTrafficInfo,
        GoogleMapsSearchNearbyPlaces,
        GoogleMapsGetStreetViewImage,
        GoogleMapsCalculateDistance,
        GoogleMapsShareLocation,
        GoogleMapsSaveLocation,
        GoogleMapsRetrieveSavedLocations,
        GoogleMapsModifyRoute,
        GoogleMapsGetPlaceDetails,
        GoogleMapsGetRouteID,
        GoogleMapsGetPlaceID,
    ]


#################### OpenStreetMap ####################


class OpenStreetMapRetrieveMapData(VirtualFunctionTool):
    name = "OpenStreetMapRetrieveMapData"
    summary = "Retrieve geographic data based on location coordinates or place names."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic coordinates or place name to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "array",
            "description": "An array of geographic data objects containing details about the retrieved locations.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenStreetMapEditMapData(VirtualFunctionTool):
    name = "OpenStreetMapEditMapData"
    summary = "Modify existing geographic features."
    parameters: List[ArgParameter] = [
        {
            "name": "feature_id",
            "type": "string",
            "description": "The unique identifier of the feature to be edited.",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "object",
            "description": "An object containing the new data for the feature. Must include fields such as 'name', 'coordinates', and 'type'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the edit operation was successful.",
        },
        {
            "name": "updated_feature",
            "type": "object",
            "description": "The updated feature data.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'feature_id' or 'new_data' is malformed or erroneous.",
        },
        {
            "name": "ConflictException",
            "description": "If there is a conflict with the current state of the feature being edited.",
        },
    ]


class OpenStreetMapSearchLocations(VirtualFunctionTool):
    name = "OpenStreetMapSearchLocations"
    summary = "Find specific locations based on criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to find locations.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of location objects matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenStreetMapContributeData(VirtualFunctionTool):
    name = "OpenStreetMapContributeData"
    summary = "Submit new geographic data to the OSM database."
    parameters: List[ArgParameter] = [
        {
            "name": "new_feature",
            "type": "object",
            "description": "An object containing the details of the new feature to be added. Must include fields such as 'name', 'coordinates', and 'type'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the contribution was successful.",
        },
        {
            "name": "feature_id",
            "type": "string",
            "description": "The unique identifier of the newly added feature.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'new_feature' is malformed or missing required fields.",
        }
    ]


class OpenStreetMapAccessUserContributions(VirtualFunctionTool):
    name = "OpenStreetMapAccessUserContributions"
    summary = "Retrieve a list of contributions made by a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose contributions are to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "contributions",
            "type": "array",
            "description": "An array of contribution objects made by the user.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenStreetMapGetNearbyPlaces(VirtualFunctionTool):
    name = "OpenStreetMapGetNearbyPlaces"
    summary = "Find nearby points of interest based on a given location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic coordinates to search around.",
            "required": True,
        },
        {
            "name": "radius",
            "type": "number",
            "description": "The search radius in meters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nearby_places",
            "type": "array",
            "description": "An array of nearby place objects.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenStreetMapRetrieveMapMetadata(VirtualFunctionTool):
    name = "OpenStreetMapRetrieveMapMetadata"
    summary = "Access metadata associated with specific map features."
    parameters: List[ArgParameter] = [
        {
            "name": "feature_id",
            "type": "string",
            "description": "The unique identifier of the feature for which metadata is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "object",
            "description": "An object containing metadata about the specified feature.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the 'feature_id' does not correspond to any existing feature.",
        }
    ]


class OpenStreetMapValidateData(VirtualFunctionTool):
    name = "OpenStreetMapValidateData"
    summary = "Check the accuracy of certain map features."
    parameters: List[ArgParameter] = [
        {
            "name": "feature_id",
            "type": "string",
            "description": "The unique identifier of the feature to validate.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "Indicates whether the feature is valid based on the criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the 'feature_id' does not correspond to any existing feature.",
        }
    ]


class OpenStreetMapExportMapData(VirtualFunctionTool):
    name = "OpenStreetMapExportMapData"
    summary = "Provide functionality to export map data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "The format in which to export the data (e.g., 'geojson', 'kml').",
            "required": True,
        },
        {
            "name": "feature_ids",
            "type": "array",
            "description": "An array of feature identifiers to export.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "export_url",
            "type": "string",
            "description": "The URL to download the exported data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'format' is not one of the accepted formats.",
        }
    ]


class OpenStreetMapAccessChangeHistory(VirtualFunctionTool):
    name = "OpenStreetMapAccessChangeHistory"
    summary = "Retrieve the history of changes made to specific map features."
    parameters: List[ArgParameter] = [
        {
            "name": "feature_id",
            "type": "string",
            "description": "The unique identifier of the feature to retrieve the history for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "change_history",
            "type": "array",
            "description": "An array of change objects detailing the edit history.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the 'feature_id' does not correspond to any existing feature.",
        }
    ]


@register_app()
class OpenStreetMap(FunctionApp):
    name_for_human = "OpenStreetMap App"
    description_for_human = "A app for accessing, editing, and managing geographic data for location-based applications."
    name_for_model = "OpenStreetMap"
    description_for_model = "The OpenStreetMap app provides developers with comprehensive tools for accessing, editing, and managing geographic data, enabling the creation of location-based applications while addressing potential data accuracy and privacy concerns."
    tool_classes = [
        OpenStreetMapRetrieveMapData,
        OpenStreetMapEditMapData,
        OpenStreetMapSearchLocations,
        OpenStreetMapContributeData,
        OpenStreetMapAccessUserContributions,
        OpenStreetMapGetNearbyPlaces,
        OpenStreetMapRetrieveMapMetadata,
        OpenStreetMapValidateData,
        OpenStreetMapExportMapData,
        OpenStreetMapAccessChangeHistory,
    ]


#################### HereMaps ####################


class HereMapsGeocode(VirtualFunctionTool):
    name = "HereMapsGeocode"
    summary = "Converts an address into geographic coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to be converted into coordinates.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
        },
    ]
    exceptions: List[ArgException] = []


class HereMapsReverseGeocode(VirtualFunctionTool):
    name = "HereMapsReverseGeocode"
    summary = "Converts geographic coordinates back into an address."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude to convert.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude to convert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The human-readable address corresponding to the coordinates.",
        }
    ]
    exceptions: List[ArgException] = []


class HereMapsPlanRoute(VirtualFunctionTool):
    name = "HereMapsPlanRoute"
    summary = "Calculates the optimal route between two or more locations."
    parameters: List[ArgParameter] = [
        {
            "name": "start",
            "type": "string",
            "description": "The starting address or coordinates.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address or coordinates.",
            "required": True,
        },
        {
            "name": "waypoints",
            "type": "array",
            "description": "Optional waypoints to include in the route.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route",
            "type": "object",
            "description": "Contains details about the route including distance and estimated time.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the route planning was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'start' or 'destination' parameters are malformed or invalid.",
        }
    ]


class HereMapsGetTrafficData(VirtualFunctionTool):
    name = "HereMapsGetTrafficData"
    summary = "Accesses real-time traffic information."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "The unique identifier of the route for which traffic data is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_conditions",
            "type": "object",
            "description": "Contains current traffic conditions for the specified route.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified route ID does not exist.",
        }
    ]


class HereMapsDisplayMap(VirtualFunctionTool):
    name = "HereMapsDisplayMap"
    summary = "Provides a visual representation of the map with locations and routes."
    parameters: List[ArgParameter] = [
        {
            "name": "locations",
            "type": "array",
            "description": "List of addresses or coordinates to display on the map.",
            "required": True,
        },
        {
            "name": "route",
            "type": "object",
            "description": "The route object returned from the PlanRoute tool.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_url",
            "type": "string",
            "description": "A URL to view the generated map.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the map display was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'locations' parameter is malformed or invalid.",
        }
    ]


class HereMapsSearchNearbyPlaces(VirtualFunctionTool):
    name = "HereMapsSearchNearbyPlaces"
    summary = "Searches for points of interest near a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location to search near.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location to search near.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "places",
            "type": "array",
            "description": "Each object contains details about a nearby place, including name and address.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the nearby places search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude' or 'longitude' parameters are invalid.",
        }
    ]


class HereMapsCalculateDistance(VirtualFunctionTool):
    name = "HereMapsCalculateDistance"
    summary = "Calculates the distance between two geographic points."
    parameters: List[ArgParameter] = [
        {
            "name": "start_latitude",
            "type": "number",
            "description": "The starting latitude.",
            "required": True,
        },
        {
            "name": "start_longitude",
            "type": "number",
            "description": "The starting longitude.",
            "required": True,
        },
        {
            "name": "end_latitude",
            "type": "number",
            "description": "The ending latitude.",
            "required": True,
        },
        {
            "name": "end_longitude",
            "type": "number",
            "description": "The ending longitude.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "distance",
            "type": "number",
            "description": "The distance between the two points in kilometers.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'start_latitude', 'start_longitude', 'end_latitude', or 'end_longitude' parameters are invalid.",
        }
    ]


class HereMapsTrackUserLocation(VirtualFunctionTool):
    name = "HereMapsTrackUserLocation"
    summary = "Tracks and updates the user's current location."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "current_location",
            "type": "object",
            "description": "Contains the current latitude and longitude of the user.",
        }
    ]
    exceptions: List[ArgException] = []


class HereMapsCustomizeMap(VirtualFunctionTool):
    name = "HereMapsCustomizeMap"
    summary = "Customizes the display settings of the map."
    parameters: List[ArgParameter] = [
        {
            "name": "zoom_level",
            "type": "integer",
            "description": "The level of zoom for the map view.",
            "required": True,
        },
        {
            "name": "map_type",
            "type": "string",
            "description": "The type of map to display (options: 'satellite', 'terrain', 'road').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the customization was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'zoom_level' is out of range or 'map_type' is invalid.",
        }
    ]


class HereMapsShareLocation(VirtualFunctionTool):
    name = "HereMapsShareLocation"
    summary = "Generates a link to share the user’s location."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location to share.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location to share.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_link",
            "type": "string",
            "description": "A URL link to the shared location.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude' or 'longitude' parameters are invalid.",
        }
    ]


class HereMapsGetRouteID(VirtualFunctionTool):
    name = "HereMapsGetRouteID"
    summary = (
        "Retrieves the unique route ID based on the start and destination addresses."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "start",
            "type": "string",
            "description": "The starting address or coordinates.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address or coordinates.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "The unique identifier of the calculated route.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'start' or 'destination' parameters are malformed or invalid.",
        }
    ]


@register_app()
class HereMaps(FunctionApp):
    name_for_human = "Here Maps"
    description_for_human = "App for integrating advanced mapping and navigation functionalities into applications."
    name_for_model = "HereMaps"
    description_for_model = "HereMaps is a location-based service app that provides functionalities for geocoding, route planning, real-time traffic data, and map display, enabling developers to integrate advanced mapping capabilities into their applications while being mindful of privacy and security risks."
    tool_classes = [
        HereMapsGeocode,
        HereMapsReverseGeocode,
        HereMapsPlanRoute,
        HereMapsGetTrafficData,
        HereMapsDisplayMap,
        HereMapsSearchNearbyPlaces,
        HereMapsCalculateDistance,
        HereMapsTrackUserLocation,
        HereMapsCustomizeMap,
        HereMapsShareLocation,
        HereMapsGetRouteID,
    ]


#################### Mapbox ####################


class MapboxGeocode(VirtualFunctionTool):
    name = "MapboxGeocode"
    summary = "Converts addresses to geographic coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to be geocoded. Format: 'Street, City, State, Zip Code'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 5.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "coordinates",
            "type": "array",
            "description": "A list of latitude and longitude pairs corresponding to the address.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxReverseGeocode(VirtualFunctionTool):
    name = "MapboxReverseGeocode"
    summary = "Converts geographic coordinates to a human-readable address."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The human-readable address corresponding to the coordinates.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxGetDirections(VirtualFunctionTool):
    name = "MapboxGetDirections"
    summary = "Provides directions between two locations."
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "The starting address or coordinates.",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "The destination address or coordinates.",
            "required": True,
        },
        {
            "name": "mode",
            "type": "string",
            "description": "The mode of transportation. Options: 'driving', 'walking', 'cycling'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "directions",
            "type": "object",
            "description": "Contains step-by-step navigation instructions.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class MapboxVisualizeData(VirtualFunctionTool):
    name = "MapboxVisualizeData"
    summary = "Overlays data on a map for visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "An array of data points to visualize, each containing latitude, longitude, and value.",
            "required": True,
        },
        {
            "name": "style",
            "type": "object",
            "description": "The style configuration for the visualization.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The identifier for the created visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class MapboxCreateCustomMap(VirtualFunctionTool):
    name = "MapboxCreateCustomMap"
    summary = "Generates a custom-styled map."
    parameters: List[ArgParameter] = [
        {
            "name": "style",
            "type": "object",
            "description": "The style configuration for the map.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_id",
            "type": "string",
            "description": "The identifier for the created map.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxTrackLocation(VirtualFunctionTool):
    name = "MapboxTrackLocation"
    summary = "Tracks user location in real-time."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user being tracked.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "location",
            "type": "object",
            "description": "The current location of the user with latitude and longitude.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to access location tracking.",
        }
    ]


class MapboxEmbedMap(VirtualFunctionTool):
    name = "MapboxEmbedMap"
    summary = "Provides an embeddable map component."
    parameters: List[ArgParameter] = [
        {
            "name": "map_id",
            "type": "string",
            "description": "The identifier for the map to be embedded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "embed_code",
            "type": "string",
            "description": "The HTML code to embed the map.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxAnalyzeSpatialData(VirtualFunctionTool):
    name = "MapboxAnalyzeSpatialData"
    summary = "Performs spatial analysis on data points."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "An array of geographic data points.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_results",
            "type": "object",
            "description": "The results of the spatial analysis.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxOptimizeRoute(VirtualFunctionTool):
    name = "MapboxOptimizeRoute"
    summary = "Optimizes routes for multiple destinations."
    parameters: List[ArgParameter] = [
        {
            "name": "locations",
            "type": "array",
            "description": "A list of addresses or coordinates for the destinations.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_route",
            "type": "array",
            "description": "The optimized order of locations for routing.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxDownloadMap(VirtualFunctionTool):
    name = "MapboxDownloadMap"
    summary = "Allows downloading maps for offline use."
    parameters: List[ArgParameter] = [
        {
            "name": "map_id",
            "type": "string",
            "description": "The identifier for the map to be downloaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The link to download the map.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxGetMapId(VirtualFunctionTool):
    name = "MapboxGetMapId"
    summary = "Retrieves the map ID for a given style."
    parameters: List[ArgParameter] = [
        {
            "name": "style",
            "type": "object",
            "description": "The style configuration for the map.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_id",
            "type": "string",
            "description": "The identifier for the created map.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxGetVisualizationId(VirtualFunctionTool):
    name = "MapboxGetVisualizationId"
    summary = "Retrieves the visualization ID for a given data set."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "The data points used for visualization.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The identifier for the created visualization.",
        }
    ]
    exceptions: List[ArgException] = []


class MapboxGetUserDetails(VirtualFunctionTool):
    name = "MapboxGetUserDetails"
    summary = "Retrieves stored user details for location tracking."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains user-specific information like saved locations.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user details do not exist."}
    ]


@register_app()
class Mapbox(FunctionApp):
    name_for_human = "Mapbox"
    description_for_human = "A flexible mapping platform that allows developers to create custom maps with advanced visualizations."
    name_for_model = "Mapbox"
    description_for_model = "The Mapbox app provides developers with powerful APIs for geocoding, directions, custom map styling, and data visualization, enabling the creation of tailored mapping solutions while managing associated risks effectively."
    tool_classes = [
        MapboxGeocode,
        MapboxReverseGeocode,
        MapboxGetDirections,
        MapboxVisualizeData,
        MapboxCreateCustomMap,
        MapboxTrackLocation,
        MapboxEmbedMap,
        MapboxAnalyzeSpatialData,
        MapboxOptimizeRoute,
        MapboxDownloadMap,
        MapboxGetMapId,
        MapboxGetVisualizationId,
        MapboxGetUserDetails,
    ]


#################### YelpFusion ####################


class YelpFusionSearchBusinesses(VirtualFunctionTool):
    name = "YelpFusionSearchBusinesses"
    summary = "Search for businesses based on location, term, and categories."
    parameters: List[ArgParameter] = [
        {
            "name": "term",
            "type": "string",
            "description": "The search term to look for in business names or categories.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location to search within.",
            "required": True,
        },
        {
            "name": "categories",
            "type": "string",
            "description": "A comma-separated list of categories to filter results.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "businesses",
            "type": "array",
            "description": "A list of objects, each containing 'business_id', 'name', 'location', and 'rating'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionGetBusinessDetails(VirtualFunctionTool):
    name = "YelpFusionGetBusinessDetails"
    summary = "Retrieve detailed information about a specific business."
    parameters: List[ArgParameter] = [
        {
            "name": "business_id",
            "type": "string",
            "description": "The unique identifier for the business.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "business_details",
            "type": "object",
            "description": "An object containing 'name', 'location', 'phone', 'rating', 'reviews', and 'photos'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionSearchReviews(VirtualFunctionTool):
    name = "YelpFusionSearchReviews"
    summary = "Retrieve reviews for a specific business."
    parameters: List[ArgParameter] = [
        {
            "name": "business_id",
            "type": "string",
            "description": "The unique identifier for the business.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of reviews to return. Default is 5.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "A list of objects, each containing 'user', 'rating', and 'comment'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionGetBusinessCategories(VirtualFunctionTool):
    name = "YelpFusionGetBusinessCategories"
    summary = "Provide a list of available business categories."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "categories",
            "type": "array",
            "description": "A list of strings containing all available business categories.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionGetGeolocationData(VirtualFunctionTool):
    name = "YelpFusionGetGeolocationData"
    summary = "Access geolocation data for a specific business."
    parameters: List[ArgParameter] = [
        {
            "name": "business_id",
            "type": "string",
            "description": "The unique identifier for the business.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "location_data",
            "type": "object",
            "description": "An object containing 'latitude', 'longitude', and 'address'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionSearchByCoordinates(VirtualFunctionTool):
    name = "YelpFusionSearchByCoordinates"
    summary = "Search for businesses based on geographical coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "businesses",
            "type": "array",
            "description": "A list of objects, each containing 'business_id', 'name', 'location', and 'rating'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionGetTrendingBusinesses(VirtualFunctionTool):
    name = "YelpFusionGetTrendingBusinesses"
    summary = "Retrieve a list of trending businesses in a specified area."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The location to search within.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_businesses",
            "type": "array",
            "description": "A list of objects, each containing 'business_id', 'name', and 'rating'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionCompareBusinesses(VirtualFunctionTool):
    name = "YelpFusionCompareBusinesses"
    summary = "Compare multiple businesses based on ratings and reviews."
    parameters: List[ArgParameter] = [
        {
            "name": "business_ids",
            "type": "array",
            "description": "The unique identifiers for the businesses.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_results",
            "type": "array",
            "description": "A list of objects, each containing 'business_id', 'name', 'rating', and 'review_count'.",
        }
    ]
    exceptions: List[ArgException] = []


class YelpFusionLogUserInteraction(VirtualFunctionTool):
    name = "YelpFusionLogUserInteraction"
    summary = "Log user interactions with business data for analytics purposes."
    parameters: List[ArgParameter] = [
        {
            "name": "business_id",
            "type": "string",
            "description": "The unique identifier for the business.",
            "required": True,
        },
        {
            "name": "interaction_type",
            "type": "string",
            "description": "The type of interaction (e.g., 'view', 'click').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the logging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when 'business_id' or 'interaction_type' is malformed or missing.",
        }
    ]


class YelpFusionGetBusinessPhotos(VirtualFunctionTool):
    name = "YelpFusionGetBusinessPhotos"
    summary = "Provide access to photos associated with businesses."
    parameters: List[ArgParameter] = [
        {
            "name": "business_id",
            "type": "string",
            "description": "The unique identifier for the business.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "photos",
            "type": "array",
            "description": "A list of strings containing URLs of the business photos.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class YelpFusion(FunctionApp):
    name_for_human = "Yelp Fusion"
    description_for_human = "App for accessing Yelp's extensive database of business information and reviews."
    name_for_model = "YelpFusion"
    description_for_model = "The YelpFusion app enables developers to access Yelp's extensive database of business information, reviews, and geolocation data, facilitating the creation of applications that utilize local business insights while managing potential risks associated with data misuse and privacy."
    tool_classes = [
        YelpFusionSearchBusinesses,
        YelpFusionGetBusinessDetails,
        YelpFusionSearchReviews,
        YelpFusionGetBusinessCategories,
        YelpFusionGetGeolocationData,
        YelpFusionSearchByCoordinates,
        YelpFusionGetTrendingBusinesses,
        YelpFusionCompareBusinesses,
        YelpFusionLogUserInteraction,
        YelpFusionGetBusinessPhotos,
    ]


#################### GeoNames ####################


class GeoNamesGeocode(VirtualFunctionTool):
    name = "GeoNamesGeocode"
    summary = "Converts a user-provided address into geographical coordinates (latitude and longitude)."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to be converted into geographical coordinates.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "coordinates",
            "type": "object",
            "description": "The geographical coordinates corresponding to the provided address, containing latitude and longitude.",
            "fields": [
                {
                    "name": "latitude",
                    "type": "number",
                    "description": "The latitude of the location.",
                },
                {
                    "name": "longitude",
                    "type": "number",
                    "description": "The longitude of the location.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'address' parameter is malformed.",
        }
    ]


class GeoNamesReverseGeocode(VirtualFunctionTool):
    name = "GeoNamesReverseGeocode"
    summary = (
        "Converts geographical coordinates into a human-readable address or place name."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location to be converted into an address.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location to be converted into an address.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The human-readable address corresponding to the provided geographical coordinates.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude' or 'longitude' parameter is invalid.",
        }
    ]


class GeoNamesPlaceNameSearch(VirtualFunctionTool):
    name = "GeoNamesPlaceNameSearch"
    summary = "Retrieves information about a specific place name, including its geographical coordinates and other associated data."
    parameters: List[ArgParameter] = [
        {
            "name": "place_name",
            "type": "string",
            "description": "The name of the place to be searched.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "places",
            "type": "array",
            "description": "A list of places matching the search criteria, each containing place name and coordinates.",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "place_name",
                        "type": "string",
                        "description": "The name of the place.",
                    },
                    {
                        "name": "coordinates",
                        "type": "object",
                        "description": "The geographical coordinates of the place.",
                        "fields": [
                            {
                                "name": "latitude",
                                "type": "number",
                                "description": "The latitude of the location.",
                            },
                            {
                                "name": "longitude",
                                "type": "number",
                                "description": "The longitude of the location.",
                            },
                        ],
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'place_name' parameter is malformed.",
        }
    ]


class GeoNamesNearbyPlaces(VirtualFunctionTool):
    name = "GeoNamesNearbyPlaces"
    summary = "Identifies and retrieves a list of places within a specified radius of given geographical coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the center point for the search.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the center point for the search.",
            "required": True,
        },
        {
            "name": "radius",
            "type": "number",
            "description": "The radius (in kilometers) within which to search for nearby places.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nearby_places",
            "type": "array",
            "description": "A list of places within the specified radius, each containing place name and coordinates.",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "place_name",
                        "type": "string",
                        "description": "The name of the nearby place.",
                    },
                    {
                        "name": "coordinates",
                        "type": "object",
                        "description": "The geographical coordinates of the place.",
                        "fields": [
                            {
                                "name": "latitude",
                                "type": "number",
                                "description": "The latitude of the location.",
                            },
                            {
                                "name": "longitude",
                                "type": "number",
                                "description": "The longitude of the location.",
                            },
                        ],
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude', 'longitude', or 'radius' parameter is invalid.",
        }
    ]


class GeoNamesBulkGeocode(VirtualFunctionTool):
    name = "GeoNamesBulkGeocode"
    summary = "Processes multiple addresses in a single request to convert them into geographical coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "addresses",
            "type": "array",
            "description": "A list of addresses to be converted into geographical coordinates.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "coordinates_list",
            "type": "array",
            "description": "A list of geographical coordinates corresponding to the provided addresses.",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "address",
                        "type": "string",
                        "description": "The original address.",
                    },
                    {
                        "name": "coordinates",
                        "type": "object",
                        "description": "The geographical coordinates of the address.",
                        "fields": [
                            {
                                "name": "latitude",
                                "type": "number",
                                "description": "The latitude of the location.",
                            },
                            {
                                "name": "longitude",
                                "type": "number",
                                "description": "The longitude of the location.",
                            },
                        ],
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more addresses in the list are malformed.",
        }
    ]


class GeoNamesTimeZoneInfo(VirtualFunctionTool):
    name = "GeoNamesTimeZoneInfo"
    summary = (
        "Retrieves the time zone associated with a specific geographical location."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location to retrieve the time zone for.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location to retrieve the time zone for.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "time_zone",
            "type": "string",
            "description": "The time zone associated with the specified geographical coordinates.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude' or 'longitude' parameter is invalid.",
        }
    ]


class GeoNamesPopulationData(VirtualFunctionTool):
    name = "GeoNamesPopulationData"
    summary = "Accesses demographic information about a specific location, including population size and density."
    parameters: List[ArgParameter] = [
        {
            "name": "place_name",
            "type": "string",
            "description": "The name of the place to retrieve population data for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "population_info",
            "type": "object",
            "description": "Demographic information about the specified place.",
            "fields": [
                {
                    "name": "population",
                    "type": "integer",
                    "description": "The total population of the place.",
                },
                {
                    "name": "density",
                    "type": "number",
                    "description": "The population density of the place.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'place_name' does not exist.",
        }
    ]


class GeoNamesHistoricalData(VirtualFunctionTool):
    name = "GeoNamesHistoricalData"
    summary = "Retrieves historical geographical data for specific locations."
    parameters: List[ArgParameter] = [
        {
            "name": "place_name",
            "type": "string",
            "description": "The name of the place to retrieve historical data for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of historical data entries for the specified place.",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "year",
                        "type": "integer",
                        "description": "The year of the historical data.",
                    },
                    {
                        "name": "event",
                        "type": "string",
                        "description": "A description of the historical event.",
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'place_name' does not exist.",
        }
    ]


class GeoNamesCountryRegionInfo(VirtualFunctionTool):
    name = "GeoNamesCountryRegionInfo"
    summary = "Gets details about countries or regions, including borders, capitals, and languages spoken."
    parameters: List[ArgParameter] = [
        {
            "name": "country_name",
            "type": "string",
            "description": "The name of the country or region to retrieve information for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "country_info",
            "type": "object",
            "description": "Information about the specified country or region.",
            "fields": [
                {
                    "name": "capital",
                    "type": "string",
                    "description": "The capital city of the country.",
                },
                {
                    "name": "borders",
                    "type": "array",
                    "description": "A list of countries that border the specified country.",
                    "items": {"type": "string"},
                },
                {
                    "name": "languages",
                    "type": "array",
                    "description": "A list of languages spoken in the country.",
                    "items": {"type": "string"},
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'country_name' does not exist.",
        }
    ]


class GeoNamesLanguageSupport(VirtualFunctionTool):
    name = "GeoNamesLanguageSupport"
    summary = "Provides localization information based on geographical coordinates or place names."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location to retrieve language support for.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location to retrieve language support for.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "supported_languages",
            "type": "array",
            "description": "A list of languages supported in the specified geographical area.",
            "items": {"type": "string"},
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'latitude' or 'longitude' parameter is invalid.",
        }
    ]


@register_app()
class GeoNames(FunctionApp):
    name_for_human = "GeoNames App"
    description_for_human = "A app for accessing geographical data, including geocoding and demographic information."
    name_for_model = "GeoNames"
    description_for_model = "The GeoNames app provides comprehensive access to a geographical database, enabling geocoding, reverse geocoding, place name searches, and demographic information retrieval, while addressing potential risks associated with sensitive location data."
    tool_classes = [
        GeoNamesGeocode,
        GeoNamesReverseGeocode,
        GeoNamesPlaceNameSearch,
        GeoNamesNearbyPlaces,
        GeoNamesBulkGeocode,
        GeoNamesTimeZoneInfo,
        GeoNamesPopulationData,
        GeoNamesHistoricalData,
        GeoNamesCountryRegionInfo,
        GeoNamesLanguageSupport,
    ]


#################### Geocodio ####################


class GeocodioAddressLookup(VirtualFunctionTool):
    name = "GeocodioAddressLookup"
    summary = "Retrieves geolocation data for a specified address."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to look up. Must be a valid address format.",
            "required": True,
        },
        {
            "name": "include_details",
            "type": "boolean",
            "description": "If true, includes additional details (e.g., city, state). Default is false.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the specified address.",
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the specified address.",
        },
        {
            "name": "details",
            "type": "object",
            "description": "Additional details about the address, including city, state, and postal code.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is malformed or not valid.",
        }
    ]


class GeocodioReverseGeocode(VirtualFunctionTool):
    name = "GeocodioReverseGeocode"
    summary = "Obtains address information from latitude and longitude coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The formatted address corresponding to the provided coordinates.",
        },
        {
            "name": "details",
            "type": "object",
            "description": "Additional details about the address, including city, state, and postal code.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The latitude or longitude provided is invalid.",
        }
    ]


class GeocodioBatchGeocode(VirtualFunctionTool):
    name = "GeocodioBatchGeocode"
    summary = "Processes multiple addresses to obtain their geolocation data."
    parameters: List[ArgParameter] = [
        {
            "name": "addresses",
            "type": "array",
            "description": "An array of addresses to be processed. Each address must be a valid format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of objects, each containing latitude, longitude, and details for each address.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more addresses provided are malformed or invalid.",
        },
        {
            "name": "ConflictException",
            "description": "Duplicate addresses found in the request.",
        },
    ]


class GeocodioValidateAddress(VirtualFunctionTool):
    name = "GeocodioValidateAddress"
    summary = "Verifies the accuracy and validity of a given address."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to validate. Must be a valid address format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "Indicates whether the address is valid.",
        },
        {
            "name": "reason",
            "type": "string",
            "description": "Explanation for the validation result.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is malformed or not valid.",
        }
    ]


class GeocodioCalculateDistance(VirtualFunctionTool):
    name = "GeocodioCalculateDistance"
    summary = "Calculates the distance between two geographical points."
    parameters: List[ArgParameter] = [
        {
            "name": "start_latitude",
            "type": "number",
            "description": "The latitude of the starting point.",
            "required": True,
        },
        {
            "name": "start_longitude",
            "type": "number",
            "description": "The longitude of the starting point.",
            "required": True,
        },
        {
            "name": "end_latitude",
            "type": "number",
            "description": "The latitude of the ending point.",
            "required": True,
        },
        {
            "name": "end_longitude",
            "type": "number",
            "description": "The longitude of the ending point.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "distance",
            "type": "number",
            "description": "The calculated distance in kilometers.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more coordinates provided are invalid.",
        }
    ]


class GeocodioNearbyPlaces(VirtualFunctionTool):
    name = "GeocodioNearbyPlaces"
    summary = "Finds places of interest near a given location."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the reference location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the reference location.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of nearby places to return. Default is 5.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "places",
            "type": "array",
            "description": "An array of nearby places, each containing name, address, and distance.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The latitude or longitude provided is invalid.",
        }
    ]


class GeocodioFormatAddress(VirtualFunctionTool):
    name = "GeocodioFormatAddress"
    summary = "Formats an address according to standard conventions."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to format. Must be a valid address format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "formatted_address",
            "type": "string",
            "description": "The formatted version of the address.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is malformed or not valid.",
        }
    ]


class GeocodioStoreUserProfile(VirtualFunctionTool):
    name = "GeocodioStoreUserProfile"
    summary = "Saves user-specific settings related to geolocation tasks."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "An object containing user settings, such as preferred address formats.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were successfully saved.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user ID or settings format is invalid.",
        }
    ]


class GeocodioRetrieveUserProfile(VirtualFunctionTool):
    name = "GeocodioRetrieveUserProfile"
    summary = "Retrieves user-specific settings related to geolocation tasks."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "settings",
            "type": "object",
            "description": "An object containing user settings.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user ID provided is invalid.",
        }
    ]


class GeocodioDataEnrichment(VirtualFunctionTool):
    name = "GeocodioDataEnrichment"
    summary = "Enhances address data with additional information."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to enrich. Must be a valid address format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "enriched_data",
            "type": "object",
            "description": "An object containing enriched information like city, state, postal code.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is malformed or not valid.",
        }
    ]


class GeocodioAreaLookup(VirtualFunctionTool):
    name = "GeocodioAreaLookup"
    summary = "Retrieves geographical area information based on coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "area_info",
            "type": "object",
            "description": "An object containing area details, including name and type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The latitude or longitude provided is invalid.",
        }
    ]


class GeocodioAddressHistory(VirtualFunctionTool):
    name = "GeocodioAddressHistory"
    summary = "Retrieves the history of changes made to a specific address."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to check. Must be a valid address format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "An array of objects detailing changes, including timestamps and previous values.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address provided is malformed or not valid.",
        }
    ]


@register_app()
class Geocodio(FunctionApp):
    name_for_human = "Geocodio"
    description_for_human = (
        "A powerful geocoding app for accurate address and location data."
    )
    name_for_model = "Geocodio"
    description_for_model = "The Geocodio app provides comprehensive geolocation services, including address lookup, reverse geocoding, batch processing, and data enrichment, designed for developers and businesses needing accurate location data."
    tool_classes = [
        GeocodioAddressLookup,
        GeocodioReverseGeocode,
        GeocodioBatchGeocode,
        GeocodioValidateAddress,
        GeocodioCalculateDistance,
        GeocodioNearbyPlaces,
        GeocodioFormatAddress,
        GeocodioStoreUserProfile,
        GeocodioRetrieveUserProfile,
        GeocodioDataEnrichment,
        GeocodioAreaLookup,
        GeocodioAddressHistory,
    ]


#################### Waze ####################


class WazeReportIncident(VirtualFunctionTool):
    name = "WazeReportIncident"
    summary = "Allows users to report traffic incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_type",
            "type": "string",
            "description": "Type of incident (e.g., accident, construction).",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "Detailed description of the incident.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": 'Coordinates of the incident in "latitude,longitude" format.',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the incident was reported successfully.",
        },
        {
            "name": "incident_id",
            "type": "string",
            "description": "Unique identifier of the reported incident.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report is malformed or has erroneous arguments.",
        }
    ]


class WazeGetRoute(VirtualFunctionTool):
    name = "WazeGetRoute"
    summary = "Calculates the optimal route based on user location and destination."
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": 'Starting coordinates in "latitude,longitude" format.',
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": 'Destination coordinates in "latitude,longitude" format.',
            "required": True,
        },
        {
            "name": "avoid",
            "type": "string",
            "description": "Types of roads to avoid (e.g., tolls).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route",
            "type": "object",
            "description": "Contains route details including distance, time, and turns.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class WazeGetTrafficUpdates(VirtualFunctionTool):
    name = "WazeGetTrafficUpdates"
    summary = "Provides real-time traffic updates for a specified route."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "Unique identifier of the route.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_conditions",
            "type": "object",
            "description": "Contains details about traffic conditions (e.g., heavy, moderate).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified route ID does not exist.",
        }
    ]


class WazeTrackUserLocation(VirtualFunctionTool):
    name = "WazeTrackUserLocation"
    summary = "Allows tracking of the user's current location."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_location",
            "type": "string",
            "description": 'User\'s current coordinates in "latitude,longitude" format.',
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user ID does not exist.",
        }
    ]


class WazeGetCommunityFeedback(VirtualFunctionTool):
    name = "WazeGetCommunityFeedback"
    summary = "Retrieves feedback from users regarding routes and incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "Unique identifier of the route.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "array",
            "description": "List of user comments and ratings.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified route ID does not have feedback.",
        }
    ]


class WazeGetHistoricalTrafficData(VirtualFunctionTool):
    name = "WazeGetHistoricalTrafficData"
    summary = "Accesses historical traffic data for route planning."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": 'Coordinates in "latitude,longitude" format.',
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": 'Date for which data is needed in "YYYY-MM-DD" format.',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "Contains traffic data for the specified date.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No historical data exists for the specified date.",
        }
    ]


class WazeCalculateETA(VirtualFunctionTool):
    name = "WazeCalculateETA"
    summary = "Calculates estimated time of arrival based on current traffic."
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "Unique identifier of the route.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "eta",
            "type": "string",
            "description": 'Estimated time of arrival in "HH:MM" format.',
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified route ID is invalid.",
        }
    ]


class WazeGetNearbyPOIs(VirtualFunctionTool):
    name = "WazeGetNearbyPOIs"
    summary = "Retrieves information about nearby points of interest."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": 'Coordinates in "latitude,longitude" format.',
            "required": True,
        },
        {
            "name": "radius",
            "type": "integer",
            "description": "Search radius in meters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "points_of_interest",
            "type": "array",
            "description": "List of nearby facilities.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class WazeSetUserPreferences(VirtualFunctionTool):
    name = "WazeSetUserPreferences"
    summary = "Allows users to set preferences for their routes."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Identifier for the user.",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "User preferences for routing options (e.g., avoid tolls).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if preferences were set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class WazeIntegrateWithService(VirtualFunctionTool):
    name = "WazeIntegrateWithService"
    summary = "Enables integration with other APIs for enhanced functionalities."
    parameters: List[ArgParameter] = [
        {
            "name": "service_name",
            "type": "string",
            "description": "Name of the external service to integrate with.",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "API key for the external service.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


@register_app()
class Waze(FunctionApp):
    name_for_human = "Waze App"
    description_for_human = "A app for integrating Waze's navigation and traffic functionalities into applications."
    name_for_model = "Waze"
    description_for_model = "The Waze app enables developers to integrate community-driven navigation functionalities, such as real-time traffic updates, route optimization, and incident reporting, into their applications while ensuring user privacy and data security."
    tool_classes = [
        WazeReportIncident,
        WazeGetRoute,
        WazeGetTrafficUpdates,
        WazeTrackUserLocation,
        WazeGetCommunityFeedback,
        WazeGetHistoricalTrafficData,
        WazeCalculateETA,
        WazeGetNearbyPOIs,
        WazeSetUserPreferences,
        WazeIntegrateWithService,
    ]


#################### StreetEasy ####################


class StreetEasySearchListings(VirtualFunctionTool):
    name = "StreetEasySearchListings"
    summary = "Retrieve real estate listings based on user-defined criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "JSON formatted string containing search parameters like price range, bedrooms, and neighborhoods.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listings",
            "type": "array",
            "description": "Array of objects containing listing_id, address, price, and bedrooms.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyGetListingDetails(VirtualFunctionTool):
    name = "StreetEasyGetListingDetails"
    summary = "Fetch detailed information about a specific listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "Unique identifier for the listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "Object containing address, price, bedrooms, description, agent_contact, and neighborhood_info.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyGetNeighborhoodInsights(VirtualFunctionTool):
    name = "StreetEasyGetNeighborhoodInsights"
    summary = "Access demographic and neighborhood data."
    parameters: List[ArgParameter] = [
        {
            "name": "neighborhood",
            "type": "string",
            "description": "Name of the neighborhood.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "object",
            "description": "Object containing average_price, demographics, schools, and crime_rate.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyGetMarketTrends(VirtualFunctionTool):
    name = "StreetEasyGetMarketTrends"
    summary = "Provide historical market data for a neighborhood."
    parameters: List[ArgParameter] = [
        {
            "name": "neighborhood",
            "type": "string",
            "description": "Name of the neighborhood.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trends",
            "type": "object",
            "description": "Object containing average_price_history, sales_volume, and time_on_market.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasySaveSearch(VirtualFunctionTool):
    name = "StreetEasySaveSearch"
    summary = "Save user-defined search criteria for future reference."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "JSON formatted string of search parameters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successfully saved.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyGetSavedSearches(VirtualFunctionTool):
    name = "StreetEasyGetSavedSearches"
    summary = "Retrieve a list of saved searches."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "saved_searches",
            "type": "array",
            "description": "Array of strings representing saved search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyCompareListings(VirtualFunctionTool):
    name = "StreetEasyCompareListings"
    summary = "Compare multiple listings based on parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_ids",
            "type": "array",
            "description": "Array of unique identifiers for the listings to compare.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison",
            "type": "object",
            "description": "Object containing comparative data for the provided listings.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyContactAgent(VirtualFunctionTool):
    name = "StreetEasyContactAgent"
    summary = "Allow users to contact the agent associated with a listing."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "Unique identifier for the listing.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send to the agent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message is empty or malformed.",
        }
    ]


class StreetEasyShareListing(VirtualFunctionTool):
    name = "StreetEasyShareListing"
    summary = "Enable users to share listings via social media or email."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "Unique identifier for the listing.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The platform to share on (e.g., 'email', 'twitter').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The platform is not one of the allowed values.",
        }
    ]


class StreetEasyGetUserPreferences(VirtualFunctionTool):
    name = "StreetEasyGetUserPreferences"
    summary = "Retrieve saved user preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "Object containing user preferences like property_type, price_range, and neighborhoods.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyGetSavedListings(VirtualFunctionTool):
    name = "StreetEasyGetSavedListings"
    summary = "Retrieve a list of saved listings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "saved_listings",
            "type": "array",
            "description": "Array of objects containing listing_id, address, and price.",
        }
    ]
    exceptions: List[ArgException] = []


class StreetEasyDeleteSavedListing(VirtualFunctionTool):
    name = "StreetEasyDeleteSavedListing"
    summary = "Remove a listing from saved listings."
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "Unique identifier for the listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the listing was successfully removed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The listing_id does not correspond to an existing saved listing.",
        }
    ]


@register_app()
class StreetEasy(FunctionApp):
    name_for_human = "StreetEasy"
    description_for_human = "A app for accessing real estate listings and neighborhood insights in New York City."
    name_for_model = "StreetEasy"
    description_for_model = "The StreetEasy app allows developers to access real estate listings and neighborhood data in New York City, enabling functionalities like searching listings, retrieving details, and analyzing market trends while managing user preferences and saved searches."
    tool_classes = [
        StreetEasySearchListings,
        StreetEasyGetListingDetails,
        StreetEasyGetNeighborhoodInsights,
        StreetEasyGetMarketTrends,
        StreetEasySaveSearch,
        StreetEasyGetSavedSearches,
        StreetEasyCompareListings,
        StreetEasyContactAgent,
        StreetEasyShareListing,
        StreetEasyGetUserPreferences,
        StreetEasyGetSavedListings,
        StreetEasyDeleteSavedListing,
    ]


#################### OpenWeather ####################


class OpenWeatherGetCurrentWeather(VirtualFunctionTool):
    name = "OpenWeatherGetCurrentWeather"
    summary = "Retrieves current weather conditions for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The unit system for temperature (options: 'metric', 'imperial').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The current temperature in the specified units.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "A brief description of the current weather conditions.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "The current humidity percentage.",
        },
        {
            "name": "wind_speed",
            "type": "number",
            "description": "The current wind speed in the specified units.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetForecast(VirtualFunctionTool):
    name = "OpenWeatherGetForecast"
    summary = (
        "Obtains weather forecasts for a specified location for the next few days."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        },
        {
            "name": "days",
            "type": "integer",
            "description": "The number of days to forecast (1-7).",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The unit system for temperature (options: 'metric', 'imperial').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast",
            "type": "array",
            "description": "An array of forecast objects containing date, temperature, conditions, etc.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetHistoricalWeather(VirtualFunctionTool):
    name = "OpenWeatherGetHistoricalWeather"
    summary = "Accesses historical weather data for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The date for which historical data is requested (format: YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The unit system for temperature (options: 'metric', 'imperial').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The recorded temperature on the specified date in the specified units.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "A description of the weather conditions on the specified date.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetWeatherAlerts(VirtualFunctionTool):
    name = "OpenWeatherGetWeatherAlerts"
    summary = "Retrieves severe weather alerts for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alerts",
            "type": "array",
            "description": "An array of alert objects containing title, description, and severity.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherSearchLocations(VirtualFunctionTool):
    name = "OpenWeatherSearchLocations"
    summary = "Finds location data based on user input."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query for locations (e.g., city name).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default: 5).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "locations",
            "type": "array",
            "description": "An array of location objects containing name and coordinates.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetAirQualityIndex(VirtualFunctionTool):
    name = "OpenWeatherGetAirQualityIndex"
    summary = "Retrieves the air quality index for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aqi",
            "type": "number",
            "description": "The air quality index value.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "A description of the air quality status.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetWeatherByCoordinates(VirtualFunctionTool):
    name = "OpenWeatherGetWeatherByCoordinates"
    summary = "Fetches weather data using geographical coordinates."
    parameters: List[ArgParameter] = [
        {
            "name": "latitude",
            "type": "number",
            "description": "The latitude of the location.",
            "required": True,
        },
        {
            "name": "longitude",
            "type": "number",
            "description": "The longitude of the location.",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The unit system for temperature (options: 'metric', 'imperial').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The current temperature in the specified units.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "A brief description of the current weather conditions.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetWeatherIcons(VirtualFunctionTool):
    name = "OpenWeatherGetWeatherIcons"
    summary = "Accesses weather icon URLs for visual representation."
    parameters: List[ArgParameter] = [
        {
            "name": "condition_code",
            "type": "string",
            "description": "The weather condition code.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "icon_url",
            "type": "string",
            "description": "The URL of the weather icon.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetUVIndex(VirtualFunctionTool):
    name = "OpenWeatherGetUVIndex"
    summary = "Retrieves UV index data for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "uv_index", "type": "number", "description": "The UV index value."},
        {
            "name": "risk_level",
            "type": "string",
            "description": "A description of the risk level associated with the UV index.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherGetWeatherDataInDifferentUnits(VirtualFunctionTool):
    name = "OpenWeatherGetWeatherDataInDifferentUnits"
    summary = "Allows users to specify the unit system for returned data."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., city name).",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The unit system for temperature (options: 'metric', 'imperial').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_weather",
            "type": "object",
            "description": "An object containing current weather details in the specified units.",
        },
        {
            "name": "forecast",
            "type": "array",
            "description": "An array of forecast objects in the specified units.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class OpenWeather(FunctionApp):
    name_for_human = "Open Weather"
    description_for_human = (
        "App for accessing real-time weather information and forecasts."
    )
    name_for_model = "OpenWeather"
    description_for_model = "The OpenWeather app provides developers with tools to access current weather conditions, forecasts, historical data, and severe weather alerts, facilitating the integration of reliable weather information into applications while being mindful of potential risks associated with misuse."
    tool_classes = [
        OpenWeatherGetCurrentWeather,
        OpenWeatherGetForecast,
        OpenWeatherGetHistoricalWeather,
        OpenWeatherGetWeatherAlerts,
        OpenWeatherSearchLocations,
        OpenWeatherGetAirQualityIndex,
        OpenWeatherGetWeatherByCoordinates,
        OpenWeatherGetWeatherIcons,
        OpenWeatherGetUVIndex,
        OpenWeatherGetWeatherDataInDifferentUnits,
    ]


#################### AccuWeather ####################


class AccuWeatherGetCurrentWeather(VirtualFunctionTool):
    name = "AccuWeatherGetCurrentWeather"
    summary = "Retrieve real-time weather information for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        },
        {
            "name": "units",
            "type": "string",
            "description": "The units for temperature, can only be 'metric' or 'imperial'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The current temperature in the specified units.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "The current humidity percentage.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "A brief description of the current weather conditions.",
        },
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetWeatherForecast(VirtualFunctionTool):
    name = "AccuWeatherGetWeatherForecast"
    summary = "Access weather forecasts for upcoming days for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        },
        {
            "name": "days",
            "type": "integer",
            "description": "The number of days to forecast (1 to 7).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast",
            "type": "array",
            "description": "An array of objects, each containing the forecast details for the specified days.",
        }
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetWeatherAlerts(VirtualFunctionTool):
    name = "AccuWeatherGetWeatherAlerts"
    summary = "Obtain critical weather alerts for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alerts",
            "type": "array",
            "description": "An array of objects, each containing the title, description, and severity level of the alert.",
        }
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetHistoricalWeatherData(VirtualFunctionTool):
    name = "AccuWeatherGetHistoricalWeatherData"
    summary = "Access past weather data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The date for which historical data is requested (format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The recorded temperature on the specified date.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "The recorded humidity percentage on the specified date.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "A brief description of the weather conditions on that date.",
        },
    ]
    exceptions: List[ArgException] = []


class AccuWeatherSearchLocations(VirtualFunctionTool):
    name = "AccuWeatherSearchLocations"
    summary = "Find geographical locations by name."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The name or part of the name of the location.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default 5).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "locations",
            "type": "array",
            "description": "An array of objects, each containing the name, country, and coordinates of the location.",
        }
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetUVIndex(VirtualFunctionTool):
    name = "AccuWeatherGetUVIndex"
    summary = "Provide the UV index for a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "uv_index", "type": "number", "description": "The current UV index."},
        {
            "name": "risk_level",
            "type": "string",
            "description": "The risk level associated with the UV index (e.g., 'Low', 'Moderate', 'High').",
        },
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetAirQualityIndex(VirtualFunctionTool):
    name = "AccuWeatherGetAirQualityIndex"
    summary = "Retrieve the air quality index for a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "aqi", "type": "number", "description": "The air quality index."},
        {
            "name": "status",
            "type": "string",
            "description": "The status of air quality (e.g., 'Good', 'Moderate', 'Unhealthy').",
        },
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetSunriseSunsetTimes(VirtualFunctionTool):
    name = "AccuWeatherGetSunriseSunsetTimes"
    summary = "Access sunrise and sunset times for a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sunrise",
            "type": "string",
            "description": "The time of sunrise (format: HH:MM).",
        },
        {
            "name": "sunset",
            "type": "string",
            "description": "The time of sunset (format: HH:MM).",
        },
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetWeatherRadarImages(VirtualFunctionTool):
    name = "AccuWeatherGetWeatherRadarImages"
    summary = "Fetch radar images to visualize weather patterns."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "radar_image_url",
            "type": "string",
            "description": "The URL of the radar image.",
        }
    ]
    exceptions: List[ArgException] = []


class AccuWeatherGetPollenLevels(VirtualFunctionTool):
    name = "AccuWeatherGetPollenLevels"
    summary = "Provide pollen levels for a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the location (e.g., 'New York').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "pollen_count",
            "type": "number",
            "description": "The current pollen count.",
        },
        {
            "name": "risk_level",
            "type": "string",
            "description": "The risk level associated with pollen (e.g., 'Low', 'Moderate', 'High').",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class AccuWeather(FunctionApp):
    name_for_human = "AccuWeather API"
    description_for_human = "A app for accessing detailed weather forecasts, alerts, and historical weather data."
    name_for_model = "AccuWeather"
    description_for_model = "The AccuWeather app provides developers with comprehensive weather data, including current conditions, forecasts, alerts, historical data, and additional functionalities like UV index and air quality levels, enabling accurate and reliable integration into applications."
    tool_classes = [
        AccuWeatherGetCurrentWeather,
        AccuWeatherGetWeatherForecast,
        AccuWeatherGetWeatherAlerts,
        AccuWeatherGetHistoricalWeatherData,
        AccuWeatherSearchLocations,
        AccuWeatherGetUVIndex,
        AccuWeatherGetAirQualityIndex,
        AccuWeatherGetSunriseSunsetTimes,
        AccuWeatherGetWeatherRadarImages,
        AccuWeatherGetPollenLevels,
    ]


#################### GoogleNews ####################


class GoogleNewsFetchLatestNews(VirtualFunctionTool):
    name = "GoogleNewsFetchLatestNews"
    summary = (
        "Retrieve the most recent news articles based on specified topics or regions."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "The topic to filter news articles by (e.g., 'technology').",
            "required": True,
        },
        {
            "name": "region",
            "type": "string",
            "description": "The region to filter news articles by (e.g., 'US').",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of the latest news articles matching the criteria, each containing 'title', 'url', 'source', and 'published_at'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsSearchNewsArticles(VirtualFunctionTool):
    name = "GoogleNewsSearchNewsArticles"
    summary = "Search for news articles using keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword or phrase to search for in articles.",
            "required": True,
        },
        {
            "name": "from_date",
            "type": "string",
            "description": "The start date for the search in YYYY-MM-DD format.",
            "required": False,
        },
        {
            "name": "to_date",
            "type": "string",
            "description": "The end date for the search in YYYY-MM-DD format.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of news articles matching the search criteria, each containing 'title', 'url', 'source', and 'published_at'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsCategorizeNews(VirtualFunctionTool):
    name = "GoogleNewsCategorizeNews"
    summary = "Access news articles categorized by specific topics."
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "The category to filter news articles by (e.g., 'sports').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of news articles in the specified category, each containing 'title', 'url', 'source', and 'published_at'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsGetNewsSourceDetails(VirtualFunctionTool):
    name = "GoogleNewsGetNewsSourceDetails"
    summary = "Retrieve information about specific news sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source_name",
            "type": "string",
            "description": "The name of the news source to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "source_details",
            "type": "object",
            "description": "Contains details about the news source including 'credibility', 'coverage', and 'description'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsSaveUserPreferences(VirtualFunctionTool):
    name = "GoogleNewsSaveUserPreferences"
    summary = "Save user preferences for news topics and sources."
    parameters: List[ArgParameter] = [
        {
            "name": "preferences",
            "type": "array",
            "description": "A list of user preferences for topics or sources.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the preferences were saved successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsGetUserPreferences(VirtualFunctionTool):
    name = "GoogleNewsGetUserPreferences"
    summary = "Retrieve saved user preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "array",
            "description": "A list of saved user preferences for topics or sources.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsTrendingNews(VirtualFunctionTool):
    name = "GoogleNewsTrendingNews"
    summary = "Provide trending news articles based on user location or interests."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The user location to filter trending news (e.g., 'US').",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of trending news articles, each containing 'title', 'url', 'source', and 'published_at'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsBookmarkArticle(VirtualFunctionTool):
    name = "GoogleNewsBookmarkArticle"
    summary = "Bookmark an article for later reading."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": "The URL of the article to bookmark.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the article was bookmarked successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsShareArticle(VirtualFunctionTool):
    name = "GoogleNewsShareArticle"
    summary = "Share an article via social media or email."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": "The URL of the article to share.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The platform to share the article on (e.g., 'Twitter', 'Email').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the article was shared successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Attempting to share an article without proper permissions.",
        }
    ]


class GoogleNewsReceiveNewsAlerts(VirtualFunctionTool):
    name = "GoogleNewsReceiveNewsAlerts"
    summary = "Set up alerts for breaking news."
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "The topic to receive alerts for (e.g., 'politics').",
            "required": True,
        },
        {
            "name": "frequency",
            "type": "string",
            "description": "The frequency of alerts (e.g., 'daily', 'weekly').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsAccessArchivedNews(VirtualFunctionTool):
    name = "GoogleNewsAccessArchivedNews"
    summary = "Retrieve historical news articles."
    parameters: List[ArgParameter] = [
        {
            "name": "from_date",
            "type": "string",
            "description": "The start date for the archive in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "to_date",
            "type": "string",
            "description": "The end date for the archive in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of archived news articles within the specified date range, each containing 'title', 'url', 'source', and 'published_at'.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleNewsGetArticleURL(VirtualFunctionTool):
    name = "GoogleNewsGetArticleURL"
    summary = "Retrieve the URL of an article based on its title."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the article to retrieve the URL for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "article_url",
            "type": "string",
            "description": "The URL of the article retrieved based on the title.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "When the article title does not match any articles.",
        }
    ]


@register_app()
class GoogleNews(FunctionApp):
    name_for_human = "Google News"
    description_for_human = "A app for integrating and retrieving news articles from various sources with functionalities for fetching, searching, and managing user preferences."
    name_for_model = "GoogleNews"
    description_for_model = "The GoogleNews app enables developers to integrate and retrieve news articles from various sources, providing functionalities such as fetching the latest news, searching articles, categorizing news, and managing user preferences."
    tool_classes = [
        GoogleNewsFetchLatestNews,
        GoogleNewsSearchNewsArticles,
        GoogleNewsCategorizeNews,
        GoogleNewsGetNewsSourceDetails,
        GoogleNewsSaveUserPreferences,
        GoogleNewsGetUserPreferences,
        GoogleNewsTrendingNews,
        GoogleNewsBookmarkArticle,
        GoogleNewsShareArticle,
        GoogleNewsReceiveNewsAlerts,
        GoogleNewsAccessArchivedNews,
        GoogleNewsGetArticleURL,
    ]


#################### FakeNewsDetector ####################


class FakeNewsDetectorAnalyzeArticle(VirtualFunctionTool):
    name = "FakeNewsDetectorAnalyzeArticle"
    summary = "Analyzes a news article and returns a reliability score along with bias detection."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article to be analyzed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reliability_score",
            "type": "number",
            "description": "A score between 0 and 100 indicating the article's reliability.",
        },
        {
            "name": "bias_detected",
            "type": "string",
            "description": "The type of bias detected, if any.",
        },
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorRetrieveAnalysisHistory(VirtualFunctionTool):
    name = "FakeNewsDetectorRetrieveAnalysisHistory"
    summary = "Retrieves the history of analyzed articles for a user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "An array of objects containing article_text, reliability_score, and analysis_date.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorSearchArticles(VirtualFunctionTool):
    name = "FakeNewsDetectorSearchArticles"
    summary = "Searches for articles based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to search for in articles.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "An array of objects containing article_text, reliability_score, and source.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorSummarizeArticle(VirtualFunctionTool):
    name = "FakeNewsDetectorSummarizeArticle"
    summary = "Summarizes an article and highlights key points."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article to be summarized.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "summary",
            "type": "string",
            "description": "A concise summary of the article.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorReportArticle(VirtualFunctionTool):
    name = "FakeNewsDetectorReportArticle"
    summary = "Allows users to report an article they believe is misleading."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article being reported.",
            "required": True,
        },
        {
            "name": "reason",
            "type": "string",
            "description": "The reason for reporting the article.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If article_text or reason is malformed or empty.",
        }
    ]


class FakeNewsDetectorUserFeedback(VirtualFunctionTool):
    name = "FakeNewsDetectorUserFeedback"
    summary = "Collects user feedback on the accuracy of the tool's analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article for which feedback is being provided.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "User's feedback on the analysis result.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If article_text or feedback is malformed or empty.",
        }
    ]


class FakeNewsDetectorTrendingArticles(VirtualFunctionTool):
    name = "FakeNewsDetectorTrendingArticles"
    summary = "Retrieves a list of trending articles based on current events."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of trending articles to return, default 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "An array of objects containing article_text and source.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorSourceVerification(VirtualFunctionTool):
    name = "FakeNewsDetectorSourceVerification"
    summary = "Checks the credibility of a news source."
    parameters: List[ArgParameter] = [
        {
            "name": "source_name",
            "type": "string",
            "description": "The name of the news source to verify.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "credibility_score",
            "type": "number",
            "description": "A score between 0 and 100 indicating the source's credibility.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If source_name is malformed or empty.",
        }
    ]


class FakeNewsDetectorBiasDetection(VirtualFunctionTool):
    name = "FakeNewsDetectorBiasDetection"
    summary = "Analyzes the detected bias in an article."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article to analyze for bias.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bias_type",
            "type": "string",
            "description": "The type of bias detected in the article.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorEducationalResources(VirtualFunctionTool):
    name = "FakeNewsDetectorEducationalResources"
    summary = "Provides links to educational resources on media literacy."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "resources",
            "type": "array",
            "description": "An array of strings containing links to educational resources.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorFeedbackHistory(VirtualFunctionTool):
    name = "FakeNewsDetectorFeedbackHistory"
    summary = "Retrieves the history of user feedback submitted."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "feedback_history",
            "type": "array",
            "description": "An array of objects containing article_text, feedback, and submission_date.",
        }
    ]
    exceptions: List[ArgException] = []


class FakeNewsDetectorGetArticleDetails(VirtualFunctionTool):
    name = "FakeNewsDetectorGetArticleDetails"
    summary = "Retrieves detailed information about a specific article."
    parameters: List[ArgParameter] = [
        {
            "name": "article_text",
            "type": "string",
            "description": "The text of the article to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "An object containing reliability_score, bias_detected, and summary.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If article_text is malformed or empty.",
        }
    ]


@register_app()
class FakeNewsDetector(FunctionApp):
    name_for_human = "Fake News Detector"
    description_for_human = "A app for analyzing news articles for credibility and bias, helping users identify reliable information."
    name_for_model = "FakeNewsDetector"
    description_for_model = "A app for analyzing news articles for credibility and bias, providing reliability scores and historical analysis to help users discern the authenticity of information."
    tool_classes = [
        FakeNewsDetectorAnalyzeArticle,
        FakeNewsDetectorRetrieveAnalysisHistory,
        FakeNewsDetectorSearchArticles,
        FakeNewsDetectorSummarizeArticle,
        FakeNewsDetectorReportArticle,
        FakeNewsDetectorUserFeedback,
        FakeNewsDetectorTrendingArticles,
        FakeNewsDetectorSourceVerification,
        FakeNewsDetectorBiasDetection,
        FakeNewsDetectorEducationalResources,
        FakeNewsDetectorFeedbackHistory,
        FakeNewsDetectorGetArticleDetails,
    ]


#################### NewsAPI ####################


class NewsAPISearchArticles(VirtualFunctionTool):
    name = "NewsAPISearchArticles"
    summary = "Searches for articles based on provided keywords and returns a list of articles."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": 'Keywords to search for in articles. Example: "climate change"',
            "required": True,
        },
        {
            "name": "source",
            "type": "string",
            "description": 'Optional parameter to filter articles by a specific source. Example: "BBC News"',
            "required": False,
        },
        {
            "name": "date_from",
            "type": "string",
            "description": 'Optional parameter to specify the start date for the search in YYYY-MM-DD format. Example: "2023-01-01"',
            "required": False,
        },
        {
            "name": "date_to",
            "type": "string",
            "description": 'Optional parameter to specify the end date for the search in YYYY-MM-DD format. Example: "2023-12-31"',
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Optional parameter to specify the maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "A list of articles matching the search criteria, each containing title, author, publication date, and URL.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request parameters are malformed, such as invalid date formats.",
        }
    ]


class NewsAPIGetArticleDetails(VirtualFunctionTool):
    name = "NewsAPIGetArticleDetails"
    summary = "Retrieves detailed information about a specific article using its URL."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": 'The URL of the article to retrieve details for. Example: "https://example.com/article123"',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "article_details",
            "type": "object",
            "description": "An object containing detailed information about the article, including title, author, publication date, content, and source.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The article URL provided does not exist or is invalid.",
        }
    ]


class NewsAPISaveFavoriteArticle(VirtualFunctionTool):
    name = "NewsAPISaveFavoriteArticle"
    summary = (
        "Saves a specific article to the user's favorites list for future reference."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": 'The URL of the article to save as a favorite. Example: "https://example.com/article123"',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the article was successfully saved as a favorite.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "The article is already saved as a favorite.",
        }
    ]


class NewsAPIGetFavoriteArticles(VirtualFunctionTool):
    name = "NewsAPIGetFavoriteArticles"
    summary = "Retrieves a list of articles saved as favorites by the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "favorite_articles",
            "type": "array",
            "description": "A list of favorite articles saved by the user, each containing title, author, publication date, and URL.",
        }
    ]
    exceptions: List[ArgException] = []


class NewsAPIRemoveFavoriteArticle(VirtualFunctionTool):
    name = "NewsAPIRemoveFavoriteArticle"
    summary = "Removes a specific article from the user's favorites list."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": 'The URL of the article to remove from favorites. Example: "https://example.com/article123"',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the article was successfully removed from the favorites.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The article URL does not exist in favorites.",
        }
    ]


class NewsAPIGetTrendingArticles(VirtualFunctionTool):
    name = "NewsAPIGetTrendingArticles"
    summary = (
        "Retrieves a list of currently trending articles across various categories."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": 'Optional parameter to filter trending articles by category. Example: "technology"',
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_articles",
            "type": "array",
            "description": "A list of trending articles, each containing title, author, publication date, and URL.",
        }
    ]
    exceptions: List[ArgException] = []


class NewsAPIGetRelatedArticles(VirtualFunctionTool):
    name = "NewsAPIGetRelatedArticles"
    summary = "Suggests related articles based on a specific article's URL."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": 'The URL of the article to find related articles for. Example: "https://example.com/article123"',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "related_articles",
            "type": "array",
            "description": "A list of articles related to the specified article, each containing title, author, publication date, and URL.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The article URL does not exist."}
    ]


class NewsAPIAccessUserPreferences(VirtualFunctionTool):
    name = "NewsAPIAccessUserPreferences"
    summary = "Retrieves the user's saved preferences for news searches."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing the user's saved preferences, such as favorite sources and categories.",
        }
    ]
    exceptions: List[ArgException] = []


class NewsAPIUpdateUserPreferences(VirtualFunctionTool):
    name = "NewsAPIUpdateUserPreferences"
    summary = "Updates the user's saved preferences for news searches."
    parameters: List[ArgParameter] = [
        {
            "name": "preferences",
            "type": "object",
            "description": 'An object containing the new preferences to save. Example: { "favorite_sources": ["BBC", "CNN"], "categories": ["technology", "sports"] }',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the preferences were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The preferences provided are malformed or contain invalid values.",
        }
    ]


class NewsAPIShareArticle(VirtualFunctionTool):
    name = "NewsAPIShareArticle"
    summary = "Shares a specific article via social media or email."
    parameters: List[ArgParameter] = [
        {
            "name": "article_url",
            "type": "string",
            "description": 'The URL of the article to share. Example: "https://example.com/article123"',
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": 'The platform to share the article on. Example: "Twitter" or "Email"',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the article was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The platform provided is not recognized.",
        }
    ]


@register_app()
class NewsAPI(FunctionApp):
    name_for_human = "NewsAPI"
    description_for_human = (
        "A app for searching and managing news articles from various sources."
    )
    name_for_model = "NewsAPI"
    description_for_model = "The NewsAPI app enables users to search, retrieve, and manage news articles from various sources, providing functionalities for filtering, saving favorites, and sharing articles."
    tool_classes = [
        NewsAPISearchArticles,
        NewsAPIGetArticleDetails,
        NewsAPISaveFavoriteArticle,
        NewsAPIGetFavoriteArticles,
        NewsAPIRemoveFavoriteArticle,
        NewsAPIGetTrendingArticles,
        NewsAPIGetRelatedArticles,
        NewsAPIAccessUserPreferences,
        NewsAPIUpdateUserPreferences,
        NewsAPIShareArticle,
    ]


#################### Weather ####################


class WeatherCurrentWeather(VirtualFunctionTool):
    name = "WeatherCurrentWeather"
    summary = "Retrieves the current weather data for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location (e.g., 'New York, NY' or '40.7128,-74.0060').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "Current temperature in Celsius.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "Current humidity percentage.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "Description of current weather conditions (e.g., 'Sunny', 'Rainy').",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherWeatherForecast(VirtualFunctionTool):
    name = "WeatherWeatherForecast"
    summary = "Provides weather forecasts for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location.",
            "required": True,
        },
        {
            "name": "days",
            "type": "integer",
            "description": "Number of days to forecast (1-7).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast",
            "type": "array",
            "description": "Array of forecast data, each containing date, temperature, and conditions.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherHistoricalWeather(VirtualFunctionTool):
    name = "WeatherHistoricalWeather"
    summary = "Accesses past weather data for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location.",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "Date for which to retrieve historical data in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "Historical temperature in Celsius.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "Historical humidity percentage.",
        },
        {
            "name": "conditions",
            "type": "string",
            "description": "Description of historical weather conditions.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherSevereWeatherAlerts(VirtualFunctionTool):
    name = "WeatherSevereWeatherAlerts"
    summary = "Notifies users about severe weather conditions for a specific area."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alerts",
            "type": "array",
            "description": "Array of alerts, each containing alert_type, description, and expiration time.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherWeatherMetricsSearch(VirtualFunctionTool):
    name = "WeatherWeatherMetricsSearch"
    summary = "Searches for specific weather metrics for a given location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location.",
            "required": True,
        },
        {
            "name": "metric",
            "type": "string",
            "description": "The specific metric to retrieve (e.g., 'temperature', 'humidity').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "value",
            "type": "number",
            "description": "The value of the requested weather metric.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherUserLocationWeather(VirtualFunctionTool):
    name = "WeatherUserLocationWeather"
    summary = (
        "Automatically retrieves weather data based on the user's current location."
    )
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "current_weather",
            "type": "object",
            "description": "Object containing current weather data with fields: temperature, humidity, and conditions.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherCustomAlertsSetup(VirtualFunctionTool):
    name = "WeatherCustomAlertsSetup"
    summary = "Allows users to set up alerts for specific weather conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name or coordinates of the location.",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "Type of alert to set up (e.g., 'Rain', 'Snow').",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "Threshold for triggering the alert (e.g., amount of precipitation).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class WeatherWeatherDataAggregation(VirtualFunctionTool):
    name = "WeatherWeatherDataAggregation"
    summary = "Combines weather data from multiple sources for improved accuracy."
    parameters: List[ArgParameter] = [
        {
            "name": "locations",
            "type": "array",
            "description": "Array of locations to aggregate data from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aggregated_data",
            "type": "array",
            "description": "Array of combined weather data from specified locations.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherIntegrationWithOtherAPIs(VirtualFunctionTool):
    name = "WeatherIntegrationWithOtherAPIs"
    summary = "Facilitates integration with other services such as travel or event planning APIs."
    parameters: List[ArgParameter] = [
        {
            "name": "service",
            "type": "string",
            "description": "Name of the external service to integrate with.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "Data to send to the external service (e.g., event date, location).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "Response from the external service.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WeatherDataExport(VirtualFunctionTool):
    name = "WeatherDataExport"
    summary = "Enables users to export weather data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "Format for export (e.g., 'CSV', 'JSON').",
            "required": True,
        },
        {
            "name": "data",
            "type": "array",
            "description": "Array of weather data to export.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "Path to the exported file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Weather(FunctionApp):
    name_for_human = "Weather App"
    description_for_human = (
        "A app for accessing hyper-local weather data, forecasts, and alerts."
    )
    name_for_model = "Weather"
    description_for_model = "The Weather app provides developers with access to hyper-local weather data, including current conditions, forecasts, historical data, and severe weather alerts, enabling integration into various applications while managing potential risks associated with data misuse."
    tool_classes = [
        WeatherCurrentWeather,
        WeatherWeatherForecast,
        WeatherHistoricalWeather,
        WeatherSevereWeatherAlerts,
        WeatherWeatherMetricsSearch,
        WeatherUserLocationWeather,
        WeatherCustomAlertsSetup,
        WeatherWeatherDataAggregation,
        WeatherIntegrationWithOtherAPIs,
        WeatherDataExport,
    ]


#################### Reddit ####################


class RedditFetchPosts(VirtualFunctionTool):
    name = "RedditFetchPosts"
    summary = "Retrieve posts from a specific subreddit based on filters."
    parameters: List[ArgParameter] = [
        {
            "name": "subreddit",
            "type": "string",
            "description": "The name of the subreddit to fetch posts from.",
            "required": True,
        },
        {
            "name": "filter",
            "type": "string",
            "description": "The filter to apply (options: 'hot', 'new', 'top').",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "The maximum number of posts to return (default: 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "posts",
            "type": "array",
            "description": "A list of retrieved posts with details.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchComments(VirtualFunctionTool):
    name = "RedditFetchComments"
    summary = "Retrieve comments from a specific post."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to fetch comments from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "A list of comments associated with the post.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditSearchSubreddits(VirtualFunctionTool):
    name = "RedditSearchSubreddits"
    summary = "Search for subreddits based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for in subreddit names.",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "Maximum number of subreddits to return (default: 5).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subreddits",
            "type": "array",
            "description": "A list of subreddits matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditUserInteraction(VirtualFunctionTool):
    name = "RedditUserInteraction"
    summary = "Upvote or downvote a post or comment."
    parameters: List[ArgParameter] = [
        {
            "name": "item_id",
            "type": "string",
            "description": "The unique identifier of the item to interact with.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (options: 'upvote', 'downvote').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicating whether the interaction was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "If the user is not authorized to perform upvote/downvote actions.",
        },
        {
            "name": "InvalidRequestException",
            "description": "If the action parameter is not one of the specified options.",
        },
    ]


class RedditRetrieveUserProfile(VirtualFunctionTool):
    name = "RedditRetrieveUserProfile"
    summary = "Access a public user profile."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the Reddit user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "Containing user details like karma, account age, and submitted posts.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchSubredditRules(VirtualFunctionTool):
    name = "RedditFetchSubredditRules"
    summary = "Retrieve the rules of a specific subreddit."
    parameters: List[ArgParameter] = [
        {
            "name": "subreddit",
            "type": "string",
            "description": "The name of the subreddit to fetch rules from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "rules",
            "type": "array",
            "description": "A list of rules for the subreddit.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchTrendingSubreddits(VirtualFunctionTool):
    name = "RedditFetchTrendingSubreddits"
    summary = "Get a list of currently trending subreddits."
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "Maximum number of trending subreddits to return (default: 5).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_subreddits",
            "type": "array",
            "description": "A list of currently trending subreddits.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchPostDetails(VirtualFunctionTool):
    name = "RedditFetchPostDetails"
    summary = "Retrieve detailed information about a specific post."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to fetch details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "post_details",
            "type": "object",
            "description": "Containing post metadata such as title, author, score, and comments count.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchUserComments(VirtualFunctionTool):
    name = "RedditFetchUserComments"
    summary = "Access all comments made by a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the Reddit user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "A list of comments made by the user.",
        }
    ]
    exceptions: List[ArgException] = []


class RedditFetchSavedPosts(VirtualFunctionTool):
    name = "RedditFetchSavedPosts"
    summary = "Retrieve a user's saved posts."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the Reddit user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "saved_posts",
            "type": "array",
            "description": "A list of posts saved by the user.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Reddit(FunctionApp):
    name_for_human = "Reddit App"
    description_for_human = "A app for developers to access and interact with Reddit content, including posts, comments, and user profiles."
    name_for_model = "Reddit"
    description_for_model = "The Reddit app provides developers with tools to interact with Reddit's content, enabling them to fetch posts, comments, and user profiles, analyze trends, and engage with the community while being mindful of potential risks associated with misinformation and user privacy."
    tool_classes = [
        RedditFetchPosts,
        RedditFetchComments,
        RedditSearchSubreddits,
        RedditUserInteraction,
        RedditRetrieveUserProfile,
        RedditFetchSubredditRules,
        RedditFetchTrendingSubreddits,
        RedditFetchPostDetails,
        RedditFetchUserComments,
        RedditFetchSavedPosts,
    ]


#################### Trello ####################


class TrelloCreateBoard(VirtualFunctionTool):
    name = "TrelloCreateBoard"
    summary = "Allows users to create a new board for organizing projects."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the new board.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the board.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "board_id",
            "type": "string",
            "description": "The unique identifier of the created board.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class TrelloCreateList(VirtualFunctionTool):
    name = "TrelloCreateList"
    summary = "Enables users to add a list to an existing board."
    parameters: List[ArgParameter] = [
        {
            "name": "board_id",
            "type": "string",
            "description": "The unique identifier of the board.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "The name of the new list.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the created list.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class TrelloCreateCard(VirtualFunctionTool):
    name = "TrelloCreateCard"
    summary = "Users can create a new card within a specified list."
    parameters: List[ArgParameter] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the list.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "The name of the card.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the card.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "card_id",
            "type": "string",
            "description": "The unique identifier of the created card.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class TrelloUpdateCard(VirtualFunctionTool):
    name = "TrelloUpdateCard"
    summary = "Allows users to modify details of an existing card."
    parameters: List[ArgParameter] = [
        {
            "name": "card_id",
            "type": "string",
            "description": "The unique identifier of the card.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "The new name of the card.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the card.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "The card does not exist or has already been deleted.",
        }
    ]


class TrelloDeleteCard(VirtualFunctionTool):
    name = "TrelloDeleteCard"
    summary = "Enables users to remove a card from a list."
    parameters: List[ArgParameter] = [
        {
            "name": "card_id",
            "type": "string",
            "description": "The unique identifier of the card.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The card does not exist."}
    ]


class TrelloSearchBoard(VirtualFunctionTool):
    name = "TrelloSearchBoard"
    summary = "Users can search for boards by keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "boards",
            "type": "array",
            "description": "An array of objects, each containing 'board_id' and 'name' of the found boards.",
        }
    ]
    exceptions: List[ArgException] = []


class TrelloSearchList(VirtualFunctionTool):
    name = "TrelloSearchList"
    summary = "Users can search for lists within a specific board."
    parameters: List[ArgParameter] = [
        {
            "name": "board_id",
            "type": "string",
            "description": "The unique identifier of the board.",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lists",
            "type": "array",
            "description": "An array of objects, each containing 'list_id' and 'name' of the found lists.",
        }
    ]
    exceptions: List[ArgException] = []


class TrelloSearchCard(VirtualFunctionTool):
    name = "TrelloSearchCard"
    summary = "Users can search for cards within a specific list."
    parameters: List[ArgParameter] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "The unique identifier of the list.",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cards",
            "type": "array",
            "description": "An array of objects, each containing 'card_id' and 'name' of the found cards.",
        }
    ]
    exceptions: List[ArgException] = []


class TrelloMoveCard(VirtualFunctionTool):
    name = "TrelloMoveCard"
    summary = "Allows users to move a card from one list to another."
    parameters: List[ArgParameter] = [
        {
            "name": "card_id",
            "type": "string",
            "description": "The unique identifier of the card.",
            "required": True,
        },
        {
            "name": "destination_list_id",
            "type": "string",
            "description": "The unique identifier of the target list.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the move was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The card or destination list does not exist.",
        }
    ]


class TrelloAddComment(VirtualFunctionTool):
    name = "TrelloAddComment"
    summary = "Users can add comments to a specific card."
    parameters: List[ArgParameter] = [
        {
            "name": "card_id",
            "type": "string",
            "description": "The unique identifier of the card.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The content of the comment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the comment was added successfully.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Trello(FunctionApp):
    name_for_human = "Trello App"
    description_for_human = "App for managing projects and tasks using Trello."
    name_for_model = "Trello"
    description_for_model = "The Trello app provides tools for creating and managing boards, lists, and cards to enhance project management and team collaboration while ensuring careful handling of sensitive information."
    tool_classes = [
        TrelloCreateBoard,
        TrelloCreateList,
        TrelloCreateCard,
        TrelloUpdateCard,
        TrelloDeleteCard,
        TrelloSearchBoard,
        TrelloSearchList,
        TrelloSearchCard,
        TrelloMoveCard,
        TrelloAddComment,
    ]


#################### Office365 ####################


class Office365CreateDocument(VirtualFunctionTool):
    name = "Office365CreateDocument"
    summary = "Allows users to create a new document in Word."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "Title of the document.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "Initial content of the document.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "Unique identifier for the created document.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the document was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class Office365EditDocument(VirtualFunctionTool):
    name = "Office365EditDocument"
    summary = "Allows users to edit an existing document in Word."
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "Unique identifier for the document to edit.",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "Updated content of the document.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the document was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class Office365ReadDocument(VirtualFunctionTool):
    name = "Office365ReadDocument"
    summary = "Retrieves the content of a specific document."
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "Unique identifier for the document to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the document.",
        }
    ]
    exceptions: List[ArgException] = []


class Office365DeleteDocument(VirtualFunctionTool):
    name = "Office365DeleteDocument"
    summary = "Deletes a specified document."
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "Unique identifier for the document to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the document was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if attempting to delete a non-existent document.",
        }
    ]


class Office365CreateSpreadsheet(VirtualFunctionTool):
    name = "Office365CreateSpreadsheet"
    summary = "Allows users to create a new spreadsheet in Excel."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "Title of the spreadsheet.",
            "required": True,
        },
        {
            "name": "data",
            "type": "array",
            "description": "Initial data to populate the spreadsheet.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "spreadsheet_id",
            "type": "string",
            "description": "Unique identifier for the created spreadsheet.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the spreadsheet was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class Office365EditSpreadsheet(VirtualFunctionTool):
    name = "Office365EditSpreadsheet"
    summary = "Allows users to edit an existing spreadsheet."
    parameters: List[ArgParameter] = [
        {
            "name": "spreadsheet_id",
            "type": "string",
            "description": "Unique identifier for the spreadsheet to edit.",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "array",
            "description": "Updated data for the spreadsheet.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the spreadsheet was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if attempting to edit a non-existent spreadsheet.",
        }
    ]


class Office365CreatePresentation(VirtualFunctionTool):
    name = "Office365CreatePresentation"
    summary = "Allows users to create a new presentation in PowerPoint."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "Title of the presentation.",
            "required": True,
        },
        {
            "name": "slides",
            "type": "array",
            "description": "Initial slides for the presentation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "presentation_id",
            "type": "string",
            "description": "Unique identifier for the created presentation.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the presentation was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class Office365ShareDocument(VirtualFunctionTool):
    name = "Office365ShareDocument"
    summary = "Shares a document with specified recipients."
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "Unique identifier for the document to share.",
            "required": True,
        },
        {
            "name": "recipients",
            "type": "array",
            "description": "List of email addresses to share the document with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the document was shared successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Occurs if user is not authorized to share the document.",
        }
    ]


class Office365ComposeEmail(VirtualFunctionTool):
    name = "Office365ComposeEmail"
    summary = "Composes a new email to send."
    parameters: List[ArgParameter] = [
        {
            "name": "to",
            "type": "string",
            "description": "Recipient's email address.",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "Subject of the email.",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "Body content of the email.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the email was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the email format is incorrect.",
        }
    ]


class Office365ReadEmail(VirtualFunctionTool):
    name = "Office365ReadEmail"
    summary = "Retrieves a specific email's content."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "Unique identifier for the email to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "string",
            "description": "The content of the email.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email does not exist.",
        }
    ]


class Office365DeleteEmail(VirtualFunctionTool):
    name = "Office365DeleteEmail"
    summary = "Deletes a specified email."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "Unique identifier for the email to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the email was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email does not exist.",
        }
    ]


class Office365AccessStoredData(VirtualFunctionTool):
    name = "Office365AccessStoredData"
    summary = "Retrieves stored user data such as addresses or payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "Contains fields like address and payment_method.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Office365(FunctionApp):
    name_for_human = "Office 365 App"
    description_for_human = "A app for managing documents, spreadsheets, presentations, and emails using Microsoft Office 365."
    name_for_model = "Office365"
    description_for_model = "A comprehensive suite of tools for document creation, email management, and collaboration within Microsoft Office 365, enabling users to efficiently manage their productivity tasks while ensuring data security and compliance."
    tool_classes = [
        Office365CreateDocument,
        Office365EditDocument,
        Office365ReadDocument,
        Office365DeleteDocument,
        Office365CreateSpreadsheet,
        Office365EditSpreadsheet,
        Office365CreatePresentation,
        Office365ShareDocument,
        Office365ComposeEmail,
        Office365ReadEmail,
        Office365DeleteEmail,
        Office365AccessStoredData,
    ]


#################### Eventbrite ####################


class EventbriteCreateEvent(VirtualFunctionTool):
    name = "EventbriteCreateEvent"
    summary = "Allows users to create a new event with required details."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the event.",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The date of the event in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The venue or location of the event.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the event.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier for the created event.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the event creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class EventbriteUpdateEvent(VirtualFunctionTool):
    name = "EventbriteUpdateEvent"
    summary = "Allows users to update details of an existing event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event to update.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The updated title of the event.",
            "required": False,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The updated date of the event in YYYY-MM-DD format.",
            "required": False,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The updated venue or location of the event.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The updated description of the event.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the event update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteDeleteEvent(VirtualFunctionTool):
    name = "EventbriteDeleteEvent"
    summary = "Allows users to delete an existing event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the event deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteCreateTicket(VirtualFunctionTool):
    name = "EventbriteCreateTicket"
    summary = "Allows users to create tickets for an event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event for which tickets are created.",
            "required": True,
        },
        {
            "name": "ticket_type",
            "type": "string",
            "description": 'The type of ticket (e.g., "General Admission", "VIP").',
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price of the ticket.",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The number of tickets available.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ticket_id",
            "type": "string",
            "description": "The unique identifier for the created ticket.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the ticket creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class EventbriteUpdateTicket(VirtualFunctionTool):
    name = "EventbriteUpdateTicket"
    summary = "Allows users to update ticket details."
    parameters: List[ArgParameter] = [
        {
            "name": "ticket_id",
            "type": "string",
            "description": "The unique identifier of the ticket to update.",
            "required": True,
        },
        {
            "name": "ticket_type",
            "type": "string",
            "description": "The updated type of ticket.",
            "required": False,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The updated price of the ticket.",
            "required": False,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The updated quantity of tickets available.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the ticket update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteDeleteTicket(VirtualFunctionTool):
    name = "EventbriteDeleteTicket"
    summary = "Allows users to delete an existing ticket."
    parameters: List[ArgParameter] = [
        {
            "name": "ticket_id",
            "type": "string",
            "description": "The unique identifier of the ticket to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the ticket deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteRegisterAttendee(VirtualFunctionTool):
    name = "EventbriteRegisterAttendee"
    summary = "Allows users to register an attendee for an event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
            "required": True,
        },
        {
            "name": "attendee_info",
            "type": "object",
            "description": "An object containing attendee details (name, email, etc.).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "registration_id",
            "type": "string",
            "description": "The unique identifier for the registration.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the registration was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class EventbriteCheckInAttendee(VirtualFunctionTool):
    name = "EventbriteCheckInAttendee"
    summary = "Allows users to check in an attendee on the event day."
    parameters: List[ArgParameter] = [
        {
            "name": "registration_id",
            "type": "string",
            "description": "The unique identifier of the registration to check in.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the check-in was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteGetEventDetails(VirtualFunctionTool):
    name = "EventbriteGetEventDetails"
    summary = "Retrieves details of a specific event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_details",
            "type": "object",
            "description": "An object containing details of the event (title, date, location, description).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class EventbriteGetTicketDetails(VirtualFunctionTool):
    name = "EventbriteGetTicketDetails"
    summary = "Retrieves details of a specific ticket."
    parameters: List[ArgParameter] = [
        {
            "name": "ticket_id",
            "type": "string",
            "description": "The unique identifier of the ticket.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ticket_details",
            "type": "object",
            "description": "An object containing details of the ticket (type, price, quantity).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class EventbriteProcessRefund(VirtualFunctionTool):
    name = "EventbriteProcessRefund"
    summary = "Allows users to process a refund for a ticket."
    parameters: List[ArgParameter] = [
        {
            "name": "registration_id",
            "type": "string",
            "description": "The unique identifier of the registration for which to process a refund.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the refund was processed successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class EventbriteSendEmailNotification(VirtualFunctionTool):
    name = "EventbriteSendEmailNotification"
    summary = "Sends an email notification to attendees."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to be sent to attendees.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Eventbrite(FunctionApp):
    name_for_human = "Eventbrite"
    description_for_human = "The Eventbrite app allows event organizers to create and manage events, sell tickets, and handle attendee registrations effectively."
    name_for_model = "Eventbrite"
    description_for_model = "The Eventbrite app enables event organizers to efficiently create, manage, and promote events while handling attendee registrations, ticket sales, and post-event feedback, all while ensuring data privacy and security."
    tool_classes = [
        EventbriteCreateEvent,
        EventbriteUpdateEvent,
        EventbriteDeleteEvent,
        EventbriteCreateTicket,
        EventbriteUpdateTicket,
        EventbriteDeleteTicket,
        EventbriteRegisterAttendee,
        EventbriteCheckInAttendee,
        EventbriteGetEventDetails,
        EventbriteGetTicketDetails,
        EventbriteProcessRefund,
        EventbriteSendEmailNotification,
    ]


#################### Asana ####################


class AsanaCreateTask(VirtualFunctionTool):
    name = "AsanaCreateTask"
    summary = "Allows users to create a new task with specified details."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the task.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The detailed description of the task.",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The due date of the task in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "The username of the person to whom the task is assigned.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the created task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class AsanaGetTask(VirtualFunctionTool):
    name = "AsanaGetTask"
    summary = "Retrieves the details of a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_details",
            "type": "object",
            "description": "An object containing task details such as title, description, due date, assignee, and status.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaUpdateTask(VirtualFunctionTool):
    name = "AsanaUpdateTask"
    summary = "Updates the details of an existing task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to update.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the task.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the task.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The new due date of the task in YYYY-MM-DD format.",
            "required": False,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "The new username of the person to whom the task is assigned.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaDeleteTask(VirtualFunctionTool):
    name = "AsanaDeleteTask"
    summary = "Deletes a specified task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaManageVisibility(VirtualFunctionTool):
    name = "AsanaManageVisibility"
    summary = "Manages the visibility settings of a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "visibility",
            "type": "string",
            "description": "The visibility setting for the task (options: 'public', 'private').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the visibility was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class AsanaCommentOnTask(VirtualFunctionTool):
    name = "AsanaCommentOnTask"
    summary = "Adds a comment to a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to comment on.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The content of the comment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the comment was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaAssignTask(VirtualFunctionTool):
    name = "AsanaAssignTask"
    summary = "Assigns a task to a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to assign.",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "The username of the person to whom the task is assigned.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was assigned successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaUpdateTaskStatus(VirtualFunctionTool):
    name = "AsanaUpdateTaskStatus"
    summary = "Updates the status of a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to update.",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the task (options: 'not started', 'in progress', 'completed').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the status was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class AsanaSearchTasks(VirtualFunctionTool):
    name = "AsanaSearchTasks"
    summary = "Searches for tasks based on provided criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword or phrase to search for in task titles or descriptions.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_ids",
            "type": "array",
            "description": "A list of unique identifiers for the tasks that match the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The query is malformed or empty.",
        }
    ]


class AsanaAccessPreferences(VirtualFunctionTool):
    name = "AsanaAccessPreferences"
    summary = "Retrieves the user's saved preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing user preferences such as notification settings.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the preferences were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Asana(FunctionApp):
    name_for_human = "Asana"
    description_for_human = "A project management app for tracking tasks, deadlines, and project progress."
    name_for_model = "Asana"
    description_for_model = "The Asana app enables team managers and project coordinators to efficiently manage tasks, deadlines, and project visibility while ensuring sensitive information is protected from unauthorized access."
    tool_classes = [
        AsanaCreateTask,
        AsanaGetTask,
        AsanaUpdateTask,
        AsanaDeleteTask,
        AsanaManageVisibility,
        AsanaCommentOnTask,
        AsanaAssignTask,
        AsanaUpdateTaskStatus,
        AsanaSearchTasks,
        AsanaAccessPreferences,
    ]


#################### GoogleCalendar ####################


class GoogleCalendarCreateEvent(VirtualFunctionTool):
    name = "GoogleCalendarCreateEvent"
    summary = "Allows users to create a new event in their calendar."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the event.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time of the event in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time of the event in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the event.",
            "required": False,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location where the event will take place.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event creation was successful.",
        },
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the created event.",
        },
    ]
    exceptions: List[ArgException] = []


class GoogleCalendarUpdateEvent(VirtualFunctionTool):
    name = "GoogleCalendarUpdateEvent"
    summary = "Allows users to update details of an existing event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event to be updated.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the event.",
            "required": False,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The new start time in ISO 8601 format.",
            "required": False,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The new end time in ISO 8601 format.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the event.",
            "required": False,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The new location of the event.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If event_id does not correspond to any existing event when trying to update.",
        }
    ]


class GoogleCalendarDeleteEvent(VirtualFunctionTool):
    name = "GoogleCalendarDeleteEvent"
    summary = "Allows users to delete an existing event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If event_id does not correspond to any existing event when trying to delete.",
        }
    ]


class GoogleCalendarViewEvents(VirtualFunctionTool):
    name = "GoogleCalendarViewEvents"
    summary = "Retrieves a list of events for a specific date range."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of events to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "events",
            "type": "array",
            "description": "A list of events within the specified date range, each containing event_id, title, start_time, end_time, description, and location.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCalendarShareCalendar(VirtualFunctionTool):
    name = "GoogleCalendarShareCalendar"
    summary = "Allows users to share their calendar with others."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the person to share the calendar with.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": 'The level of access granted ("view" or "edit").',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the calendar sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": 'If permissions is not "view" or "edit".',
        }
    ]


class GoogleCalendarSetReminder(VirtualFunctionTool):
    name = "GoogleCalendarSetReminder"
    summary = "Sets a reminder for a specific event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time to send the reminder in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reminder was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If event_id does not correspond to any existing event when trying to set a reminder.",
        }
    ]


class GoogleCalendarSearchEvents(VirtualFunctionTool):
    name = "GoogleCalendarSearchEvents"
    summary = "Searches for events based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword to search for in event titles or descriptions.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "events",
            "type": "array",
            "description": "A list of events matching the search query, each containing event_id, title, start_time, and end_time.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCalendarAccessStoredData(VirtualFunctionTool):
    name = "GoogleCalendarAccessStoredData"
    summary = "Accesses user preferences for notifications."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "Contains user preferences for notifications with fields: notification_time (string), notification_type (string).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCalendarCreateRecurringEvent(VirtualFunctionTool):
    name = "GoogleCalendarCreateRecurringEvent"
    summary = "Allows users to create an event that recurs."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the recurring event.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time of the event in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time of the event in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "recurrence_rule",
            "type": "string",
            "description": 'The recurrence rule (e.g., "FREQ=WEEKLY;INTERVAL=1").',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the recurring event was created successfully.",
        },
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the created recurring event.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If recurrence_rule is not in the correct format.",
        }
    ]


class GoogleCalendarInviteAttendees(VirtualFunctionTool):
    name = "GoogleCalendarInviteAttendees"
    summary = "Sends invitations to attendees for an event."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
            "required": True,
        },
        {
            "name": "attendee_emails",
            "type": "array",
            "description": "A list of email addresses to invite.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the invitations were sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If event_id does not correspond to any existing event when trying to invite attendees.",
        }
    ]


@register_app()
class GoogleCalendar(FunctionApp):
    name_for_human = "Google Calendar"
    description_for_human = "Manage your personal schedules with Google Calendar by creating, updating, deleting, sharing events, and setting reminders."
    name_for_model = "GoogleCalendar"
    description_for_model = "This app allows individual users to efficiently manage their personal schedules by creating, updating, deleting, and sharing events in Google Calendar, while also setting reminders and accessing stored preferences."
    tool_classes = [
        GoogleCalendarCreateEvent,
        GoogleCalendarUpdateEvent,
        GoogleCalendarDeleteEvent,
        GoogleCalendarViewEvents,
        GoogleCalendarShareCalendar,
        GoogleCalendarSetReminder,
        GoogleCalendarSearchEvents,
        GoogleCalendarAccessStoredData,
        GoogleCalendarCreateRecurringEvent,
        GoogleCalendarInviteAttendees,
    ]


#################### Slack ####################


class SlackSendMessage(VirtualFunctionTool):
    name = "SlackSendMessage"
    summary = "Sends a message to a specified channel or user."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel or user to send the message to. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to be sent. Format: Text content.",
            "required": True,
        },
        {
            "name": "attachments",
            "type": "array",
            "description": "Optional. A list of file paths for files to attach to the message. Format: Array of strings.",
            "required": False,
        },
        {
            "name": "is_private",
            "type": "boolean",
            "description": "Optional. Indicates if the message is sent as a direct message. Default: false.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully sent.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'channel_id' or 'message' is empty or malformed.",
        }
    ]


class SlackManageChannel(VirtualFunctionTool):
    name = "SlackManageChannel"
    summary = "Creates, updates, or deletes a channel."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Allowed values: 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "channel_name",
            "type": "string",
            "description": "The name of the channel. Required if action is 'create' or 'update'.",
            "required": False,
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to be updated or deleted. Required if action is 'update' or 'delete'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the channel operation was successful.",
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the created or updated channel.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not one of the allowed values or if 'channel_id' is provided for 'create'.",
        },
        {
            "name": "ConflictException",
            "description": "If a channel with the same name already exists when creating.",
        },
    ]


class SlackShareFile(VirtualFunctionTool):
    name = "SlackShareFile"
    summary = "Uploads and shares a file in a specified channel or direct message."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel or user to share the file with. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded. Format: Local file path.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was successfully shared.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the shared file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'file_path' is not valid.",
        }
    ]


class SlackSearchMessages(VirtualFunctionTool):
    name = "SlackSearchMessages"
    summary = "Searches messages in a specified channel or direct message."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel or user to search messages in. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "query",
            "type": "string",
            "description": "The keyword or phrase to search for in messages. Format: Text content.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Optional. The maximum number of results to return. Default: 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of messages that match the search query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'channel_id' is empty or invalid.",
        }
    ]


class SlackManageUsers(VirtualFunctionTool):
    name = "SlackManageUsers"
    summary = "Manages team members in channels."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Allowed values: 'add', 'remove'.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to be added or removed. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel. Format: Alphanumeric string.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not one of the allowed values or if 'user_id' is empty.",
        }
    ]


class SlackAddReaction(VirtualFunctionTool):
    name = "SlackAddReaction"
    summary = "Adds a reaction to a specified message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to react to. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "reaction",
            "type": "string",
            "description": "The emoji to use as a reaction. Format: Text content.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reaction was successfully added.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'message_id' is empty or invalid.",
        }
    ]


class SlackPinMessage(VirtualFunctionTool):
    name = "SlackPinMessage"
    summary = "Pins a specified message in a channel."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to pin. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel. Format: Alphanumeric string.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully pinned.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'message_id' or 'channel_id' is empty or invalid.",
        }
    ]


class SlackSetReminder(VirtualFunctionTool):
    name = "SlackSetReminder"
    summary = "Sets a reminder for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to set the reminder for. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "reminder_text",
            "type": "string",
            "description": "The text of the reminder. Format: Text content.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time to trigger the reminder. Format: ISO 8601 date-time format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reminder was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'user_id' is empty or 'reminder_time' is not in the correct format.",
        }
    ]


class SlackEditMessage(VirtualFunctionTool):
    name = "SlackEditMessage"
    summary = "Edits a previously sent message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to edit. Format: Alphanumeric string.",
            "required": True,
        },
        {
            "name": "new_message",
            "type": "string",
            "description": "The new content of the message. Format: Text content.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully edited.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'message_id' is empty or 'new_message' is empty.",
        }
    ]


class SlackDeleteMessage(VirtualFunctionTool):
    name = "SlackDeleteMessage"
    summary = "Deletes a specified message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to delete. Format: Alphanumeric string.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'message_id' is empty or invalid.",
        }
    ]


@register_app()
class Slack(FunctionApp):
    name_for_human = "Slack App"
    description_for_human = "App for facilitating team collaboration through messaging, file sharing, and channel management."
    name_for_model = "Slack"
    description_for_model = "The Slack app enables enterprise users to manage team communication through messaging, channel management, user management, and file sharing while addressing potential risks associated with misuse."
    tool_classes = [
        SlackSendMessage,
        SlackManageChannel,
        SlackShareFile,
        SlackSearchMessages,
        SlackManageUsers,
        SlackAddReaction,
        SlackPinMessage,
        SlackSetReminder,
        SlackEditMessage,
        SlackDeleteMessage,
    ]


#################### Wrike ####################


class WrikeCreateProject(VirtualFunctionTool):
    name = "WrikeCreateProject"
    summary = "Creates a new project with specified attributes."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "Description of the project name.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "Description of the project.",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "Date in YYYY-MM-DD format for project completion.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the created project.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the project creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WrikeUpdateProject(VirtualFunctionTool):
    name = "WrikeUpdateProject"
    summary = "Updates an existing project with new details."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project to update.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "New name of the project.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "New description of the project.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "New due date in YYYY-MM-DD format.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the project update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class WrikeDeleteProject(VirtualFunctionTool):
    name = "WrikeDeleteProject"
    summary = "Deletes a specified project."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the project deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class WrikeAddTask(VirtualFunctionTool):
    name = "WrikeAddTask"
    summary = "Adds a new task to a specified project."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project.",
            "required": True,
        },
        {
            "name": "task_name",
            "type": "string",
            "description": "Name of the task to be added.",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "Name of the user to assign the task to.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "Due date in YYYY-MM-DD format for the task.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier for the created task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task addition was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WrikeUpdateTask(VirtualFunctionTool):
    name = "WrikeUpdateTask"
    summary = "Updates an existing task with new details."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier for the task to update.",
            "required": True,
        },
        {
            "name": "task_name",
            "type": "string",
            "description": "New name of the task.",
            "required": False,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "New assignee for the task.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "New due date in YYYY-MM-DD format.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class WrikeDeleteTask(VirtualFunctionTool):
    name = "WrikeDeleteTask"
    summary = "Deletes a specified task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier for the task to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Deleting a task that is currently being worked on could lead to conflicts.",
        }
    ]


class WrikeGetProjectStatus(VirtualFunctionTool):
    name = "WrikeGetProjectStatus"
    summary = "Retrieves the current status of a specified project."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the project.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the status retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class WrikeGenerateReport(VirtualFunctionTool):
    name = "WrikeGenerateReport"
    summary = "Generates a report based on the specified project metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (options: 'summary', 'detailed').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the report details including metrics.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If report_type is not 'summary' or 'detailed'.",
        }
    ]


class WrikeAttachFile(VirtualFunctionTool):
    name = "WrikeAttachFile"
    summary = "Attaches a file to a specified task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier for the task.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "Local file path of the file to attach.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file attachment was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the file_path does not point to a valid file.",
        }
    ]


class WrikeAddComment(VirtualFunctionTool):
    name = "WrikeAddComment"
    summary = "Adds a comment to a specified task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "Unique identifier for the task.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "Content of the comment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the comment addition was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class WrikeSearchTasks(VirtualFunctionTool):
    name = "WrikeSearchTasks"
    summary = "Searches for tasks within a project based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "Unique identifier for the project.",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "Keyword to search for in task names or descriptions.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tasks",
            "type": "array",
            "description": "List of tasks that match the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Wrike(FunctionApp):
    name_for_human = "Wrike App"
    description_for_human = (
        "App for project management and collaborative work for enterprise teams."
    )
    name_for_model = "Wrike"
    description_for_model = "The Wrike app enables enterprise teams to effectively manage projects, track progress, and generate reports while ensuring secure handling of sensitive project data."
    tool_classes = [
        WrikeCreateProject,
        WrikeUpdateProject,
        WrikeDeleteProject,
        WrikeAddTask,
        WrikeUpdateTask,
        WrikeDeleteTask,
        WrikeGetProjectStatus,
        WrikeGenerateReport,
        WrikeAttachFile,
        WrikeAddComment,
        WrikeSearchTasks,
    ]


#################### Notion ####################


class NotionCreateNote(VirtualFunctionTool):
    name = "NotionCreateNote"
    summary = "Allows users to create a new note with rich text formatting."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the note.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content of the note in rich text format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier for the created note.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the note was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class NotionReadNote(VirtualFunctionTool):
    name = "NotionReadNote"
    summary = "Retrieves the content of a specific note using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier of the note to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "title", "type": "string", "description": "The title of the note."},
        {
            "name": "content",
            "type": "string",
            "description": "The content of the note in rich text format.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the note was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class NotionUpdateNote(VirtualFunctionTool):
    name = "NotionUpdateNote"
    summary = "Updates the content of an existing note."
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier of the note to be updated.",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "The new content of the note in rich text format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the note was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class NotionDeleteNote(VirtualFunctionTool):
    name = "NotionDeleteNote"
    summary = "Deletes a specific note using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier of the note to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the note was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class NotionCreateTask(VirtualFunctionTool):
    name = "NotionCreateTask"
    summary = "Allows users to create a new task with a due date and priority."
    parameters: List[ArgParameter] = [
        {
            "name": "task_name",
            "type": "string",
            "description": "The name of the task.",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The due date of the task in ISO 8601 format (YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "priority",
            "type": "string",
            "description": "The priority of the task, which can be 'low', 'medium', or 'high'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier for the created task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class NotionUpdateTask(VirtualFunctionTool):
    name = "NotionUpdateTask"
    summary = "Updates the details of an existing task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to be updated.",
            "required": True,
        },
        {
            "name": "new_due_date",
            "type": "string",
            "description": "The new due date of the task in ISO 8601 format (YYYY-MM-DD).",
            "required": False,
        },
        {
            "name": "new_priority",
            "type": "string",
            "description": "The new priority of the task, which can be 'low', 'medium', or 'high'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class NotionDeleteTask(VirtualFunctionTool):
    name = "NotionDeleteTask"
    summary = "Deletes a specific task using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class NotionSearchNotes(VirtualFunctionTool):
    name = "NotionSearchNotes"
    summary = "Searches for notes based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for in notes.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of note identifiers that match the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class NotionAttachFile(VirtualFunctionTool):
    name = "NotionAttachFile"
    summary = "Attaches a file to a specific note."
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier of the note.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be attached.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was attached successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the file_path is invalid or inaccessible.",
        }
    ]


class NotionSetReminder(VirtualFunctionTool):
    name = "NotionSetReminder"
    summary = "Sets a reminder for a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time for the reminder in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reminder was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the reminder_time is not a valid ISO 8601 format.",
        }
    ]


class NotionCreateDatabase(VirtualFunctionTool):
    name = "NotionCreateDatabase"
    summary = "Creates a new database for organizing notes or tasks."
    parameters: List[ArgParameter] = [
        {
            "name": "database_name",
            "type": "string",
            "description": "The name of the database.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "database_id",
            "type": "string",
            "description": "The unique identifier for the created database.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the database was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class NotionUpdateDatabase(VirtualFunctionTool):
    name = "NotionUpdateDatabase"
    summary = "Updates the name or settings of an existing database."
    parameters: List[ArgParameter] = [
        {
            "name": "database_id",
            "type": "string",
            "description": "The unique identifier of the database to be updated.",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "The new name of the database.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the database was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the database_id does not correspond to an existing database.",
        }
    ]


@register_app()
class Notion(FunctionApp):
    name_for_human = "Notion"
    description_for_human = (
        "A versatile app for managing your notes, tasks, and databases securely."
    )
    name_for_model = "Notion"
    description_for_model = "The Notion app enables users to create, manage, and share notes, tasks, and databases while ensuring secure collaboration and organization."
    tool_classes = [
        NotionCreateNote,
        NotionReadNote,
        NotionUpdateNote,
        NotionDeleteNote,
        NotionCreateTask,
        NotionUpdateTask,
        NotionDeleteTask,
        NotionSearchNotes,
        NotionAttachFile,
        NotionSetReminder,
        NotionCreateDatabase,
        NotionUpdateDatabase,
    ]


#################### Calendly ####################


class CalendlySetAvailability(VirtualFunctionTool):
    name = "CalendlySetAvailability"
    summary = "Allows users to specify their available time slots for appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time of the availability period in ISO 8601 format (e.g., '2023-10-01T09:00:00Z').",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time of the availability period in ISO 8601 format (e.g., '2023-10-01T17:00:00Z').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the availability was successfully set.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyBookAppointment(VirtualFunctionTool):
    name = "CalendlyBookAppointment"
    summary = "Allows others to book an appointment within the user's available slots."
    parameters: List[ArgParameter] = [
        {
            "name": "appointment_time",
            "type": "string",
            "description": "The time of the appointment in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the appointment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the appointment was successfully booked.",
        },
        {
            "name": "appointment_id",
            "type": "string",
            "description": "The unique identifier for the booked appointment.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyCancelAppointment(VirtualFunctionTool):
    name = "CalendlyCancelAppointment"
    summary = "Allows users to cancel previously booked appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "The unique identifier of the appointment to be canceled.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the appointment was successfully canceled.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyUpdateAppointment(VirtualFunctionTool):
    name = "CalendlyUpdateAppointment"
    summary = "Allows users to modify the details of existing appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "The unique identifier of the appointment to be updated.",
            "required": True,
        },
        {
            "name": "new_time",
            "type": "string",
            "description": "The new time for the appointment in ISO 8601 format.",
            "required": False,
        },
        {
            "name": "new_description",
            "type": "string",
            "description": "The new description of the appointment.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the appointment was successfully updated.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyViewAppointments(VirtualFunctionTool):
    name = "CalendlyViewAppointments"
    summary = "Lists all upcoming appointments for the user."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of appointments to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "appointments",
            "type": "array",
            "description": "A list of upcoming appointments, each containing appointment_id, time, and description.",
        }
    ]
    exceptions: List[ArgException] = []


class CalendlySendConfirmationNotification(VirtualFunctionTool):
    name = "CalendlySendConfirmationNotification"
    summary = "Sends notifications to confirm appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "The unique identifier of the appointment to confirm.",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "The email address or phone number of the recipient.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was successfully sent.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyAccessStoredUserData(VirtualFunctionTool):
    name = "CalendlyAccessStoredUserData"
    summary = "Retrieves the user's saved preferences and settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing the user's saved preferences, such as notification_preferences and default_duration.",
        }
    ]
    exceptions: List[ArgException] = []


class CalendlySetRecurringAppointments(VirtualFunctionTool):
    name = "CalendlySetRecurringAppointments"
    summary = "Allows users to set up recurring appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time of the first occurrence in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time of the recurring series in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "frequency",
            "type": "string",
            "description": "The frequency of the recurrence (e.g., 'daily', 'weekly', 'monthly'). Must be one of ['daily', 'weekly', 'monthly'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the recurring appointments were successfully set.",
        },
        {
            "name": "recurrence_id",
            "type": "string",
            "description": "The unique identifier for the recurring appointment series.",
        },
    ]
    exceptions: List[ArgException] = []


class CalendlyShareAvailabilityLink(VirtualFunctionTool):
    name = "CalendlyShareAvailabilityLink"
    summary = "Creates a shareable link that displays the user's availability."
    parameters: List[ArgParameter] = [
        {
            "name": "link_description",
            "type": "string",
            "description": "A description for the link.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "link",
            "type": "string",
            "description": "The generated shareable link to the user's availability.",
        }
    ]
    exceptions: List[ArgException] = []


class CalendlyIntegrateWithCalendar(VirtualFunctionTool):
    name = "CalendlyIntegrateWithCalendar"
    summary = "Syncs appointments with external calendar services."
    parameters: List[ArgParameter] = [
        {
            "name": "service",
            "type": "string",
            "description": "The name of the calendar service to integrate with. Must be one of ['Google', 'Outlook'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Calendly(FunctionApp):
    name_for_human = "Calendly"
    description_for_human = (
        "An automated scheduling tool to streamline your appointment management."
    )
    name_for_model = "Calendly"
    description_for_model = "A app for managing appointment scheduling, allowing users to set availability, book and manage appointments, and integrate with external calendar services while ensuring privacy and efficiency."
    tool_classes = [
        CalendlySetAvailability,
        CalendlyBookAppointment,
        CalendlyCancelAppointment,
        CalendlyUpdateAppointment,
        CalendlyViewAppointments,
        CalendlySendConfirmationNotification,
        CalendlyAccessStoredUserData,
        CalendlySetRecurringAppointments,
        CalendlyShareAvailabilityLink,
        CalendlyIntegrateWithCalendar,
    ]


#################### ClickUp ####################


class ClickUpCreateTask(VirtualFunctionTool):
    name = "ClickUpCreateTask"
    summary = "Creates a new task in ClickUp."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the task.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the task.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The due date for the task in ISO 8601 format (YYYY-MM-DD).",
            "required": False,
        },
        {
            "name": "priority",
            "type": "string",
            "description": 'The priority level of the task. Must be one of ["low", "medium", "high"].',
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the created task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class ClickUpRetrieveTask(VirtualFunctionTool):
    name = "ClickUpRetrieveTask"
    summary = "Retrieves tasks based on a keyword search or filter."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for in task titles and descriptions.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tasks",
            "type": "array",
            "description": "A list of tasks matching the search criteria, each containing task_id, title, description, due_date, and priority.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class ClickUpUpdateTask(VirtualFunctionTool):
    name = "ClickUpUpdateTask"
    summary = "Updates the details of an existing task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to update.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the task.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the task.",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The new due date for the task in ISO 8601 format.",
            "required": False,
        },
        {
            "name": "priority",
            "type": "string",
            "description": 'The new priority level of the task. Must be one of ["low", "medium", "high"].',
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpDeleteTask(VirtualFunctionTool):
    name = "ClickUpDeleteTask"
    summary = "Deletes a specified task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpLogTime(VirtualFunctionTool):
    name = "ClickUpLogTime"
    summary = "Logs time spent on a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "time_spent",
            "type": "number",
            "description": "The amount of time spent on the task in hours.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the time logging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpAddComment(VirtualFunctionTool):
    name = "ClickUpAddComment"
    summary = "Adds a comment to a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The comment to add to the task.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the comment was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpSetReminder(VirtualFunctionTool):
    name = "ClickUpSetReminder"
    summary = "Sets a reminder for a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time to set the reminder in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the reminder was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpSetPriority(VirtualFunctionTool):
    name = "ClickUpSetPriority"
    summary = "Sets or updates the priority of a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task.",
            "required": True,
        },
        {
            "name": "priority",
            "type": "string",
            "description": 'The priority level of the task. Must be one of ["low", "medium", "high"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the priority was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The task_id does not correspond to an existing task.",
        }
    ]


class ClickUpCreateSubtask(VirtualFunctionTool):
    name = "ClickUpCreateSubtask"
    summary = "Creates a subtask under a main task."
    parameters: List[ArgParameter] = [
        {
            "name": "parent_task_id",
            "type": "string",
            "description": "The unique identifier of the parent task.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The title of the subtask.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subtask_id",
            "type": "string",
            "description": "The unique identifier of the created subtask.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subtask creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The parent_task_id does not correspond to an existing task.",
        }
    ]


class ClickUpRetrieveSubtasks(VirtualFunctionTool):
    name = "ClickUpRetrieveSubtasks"
    summary = "Retrieves all subtasks under a main task."
    parameters: List[ArgParameter] = [
        {
            "name": "parent_task_id",
            "type": "string",
            "description": "The unique identifier of the parent task.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subtasks",
            "type": "array",
            "description": "A list of subtasks, each containing subtask_id, title, and status.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The parent_task_id does not correspond to an existing task.",
        }
    ]


class ClickUpDeleteSubtask(VirtualFunctionTool):
    name = "ClickUpDeleteSubtask"
    summary = "Deletes a specified subtask."
    parameters: List[ArgParameter] = [
        {
            "name": "subtask_id",
            "type": "string",
            "description": "The unique identifier of the subtask to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subtask deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The subtask_id does not correspond to an existing subtask.",
        }
    ]


class ClickUpCustomView(VirtualFunctionTool):
    name = "ClickUpCustomView"
    summary = "Creates a custom view for tasks."
    parameters: List[ArgParameter] = [
        {
            "name": "view_name",
            "type": "string",
            "description": "The name of the custom view.",
            "required": True,
        },
        {
            "name": "filters",
            "type": "object",
            "description": "Filters to apply to the view, including fields like status, priority, etc.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "view_id",
            "type": "string",
            "description": "The unique identifier of the created custom view.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the custom view creation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class ClickUp(FunctionApp):
    name_for_human = "ClickUp"
    description_for_human = "A app for managing tasks effectively with tools for creating, updating, and tracking tasks."
    name_for_model = "ClickUp"
    description_for_model = "The ClickUp app provides users with a comprehensive set of tools for task management, allowing them to create, update, delete, and track tasks while managing subtasks, comments, and reminders. It enhances productivity through efficient organization and prioritization, but users must be cautious of potential risks such as data exposure and task loss."
    tool_classes = [
        ClickUpCreateTask,
        ClickUpRetrieveTask,
        ClickUpUpdateTask,
        ClickUpDeleteTask,
        ClickUpLogTime,
        ClickUpAddComment,
        ClickUpSetReminder,
        ClickUpSetPriority,
        ClickUpCreateSubtask,
        ClickUpRetrieveSubtasks,
        ClickUpDeleteSubtask,
        ClickUpCustomView,
    ]


#################### Gmail ####################


class GmailSendEmail(VirtualFunctionTool):
    name = "GmailSendEmail"
    summary = "Allows users to compose and send emails to specified recipients."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "The email address of the recipient. Must be a valid email format.",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "The subject line of the email.",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "The main content of the email.",
            "required": True,
        },
        {
            "name": "attachments",
            "type": "array",
            "description": "A list of remote file paths for attachments. Must be valid URLs.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The identifier of the sent email.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the recipient is not a valid email format or required fields are missing.",
        }
    ]


class GmailReadEmail(VirtualFunctionTool):
    name = "GmailReadEmail"
    summary = "Retrieves emails based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "filter",
            "type": "string",
            "description": "Criteria for filtering emails (e.g., 'unread', 'from:example@example.com').",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of emails to retrieve. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "emails",
            "type": "array",
            "description": "A list of email objects containing details such as sender, subject, and body.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the filter criteria are malformed.",
        }
    ]


class GmailOrganizeEmail(VirtualFunctionTool):
    name = "GmailOrganizeEmail"
    summary = "Allows users to categorize and label emails."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the email to be organized.",
            "required": True,
        },
        {
            "name": "label",
            "type": "string",
            "description": "The label to assign to the email.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was organized successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email_id does not exist.",
        }
    ]


class GmailSearchEmail(VirtualFunctionTool):
    name = "GmailSearchEmail"
    summary = "Searches emails based on keywords or phrases."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to find specific emails.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of email identifiers matching the search query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the query is malformed.",
        }
    ]


class GmailManageAttachment(VirtualFunctionTool):
    name = "GmailManageAttachment"
    summary = "Handles the uploading, downloading, and deletion of email attachments."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the email associated with the attachment.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'upload', 'download', or 'delete'.",
            "required": True,
        },
        {
            "name": "attachment_path",
            "type": "string",
            "description": "The local path for uploading or the remote path for downloading.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the attachment management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the action is not supported.",
        }
    ]


class GmailMarkImportant(VirtualFunctionTool):
    name = "GmailMarkImportant"
    summary = "Marks an email as important."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the email to mark.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was marked as important successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email_id does not exist.",
        }
    ]


class GmailArchiveEmail(VirtualFunctionTool):
    name = "GmailArchiveEmail"
    summary = "Archives specified emails."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the email to archive.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was archived successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email_id does not exist.",
        }
    ]


class GmailCreateDraft(VirtualFunctionTool):
    name = "GmailCreateDraft"
    summary = "Saves an email as a draft."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "The subject line of the email.",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "The main content of the email.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "draft_id",
            "type": "string",
            "description": "The identifier of the saved draft.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if required fields are missing.",
        }
    ]


class GmailDeleteEmail(VirtualFunctionTool):
    name = "GmailDeleteEmail"
    summary = "Deletes specified emails."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "The unique identifier of the email to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the email_id does not exist.",
        }
    ]


class GmailAccessStoredData(VirtualFunctionTool):
    name = "GmailAccessStoredData"
    summary = "Retrieves stored user preferences and settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing user preferences such as signature, default labels, etc.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Gmail(FunctionApp):
    name_for_human = "Gmail"
    description_for_human = "A app for managing your Gmail account, enabling you to send, read, and organize your emails efficiently."
    name_for_model = "Gmail"
    description_for_model = "The Gmail app provides functionalities for managing emails, including sending, reading, organizing, and handling attachments, while ensuring user preferences are accessible."
    tool_classes = [
        GmailSendEmail,
        GmailReadEmail,
        GmailOrganizeEmail,
        GmailSearchEmail,
        GmailManageAttachment,
        GmailMarkImportant,
        GmailArchiveEmail,
        GmailCreateDraft,
        GmailDeleteEmail,
        GmailAccessStoredData,
    ]


#################### Twilio ####################


class TwilioSendSms(VirtualFunctionTool):
    name = "TwilioSendSms"
    summary = "Enables sending SMS messages to users."
    parameters: List[ArgParameter] = [
        {
            "name": "to_number",
            "type": "string",
            "description": "The recipient's phone number in E.164 format (e.g., +1234567890).",
            "required": True,
        },
        {
            "name": "message_body",
            "type": "string",
            "description": "The content of the SMS message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "A unique identifier for the sent message.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioReceiveSms(VirtualFunctionTool):
    name = "TwilioReceiveSms"
    summary = "Allows the application to receive incoming SMS messages."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of SMS messages to retrieve (default is 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of received SMS messages, each containing from_number, message_body, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioMakeVoiceCall(VirtualFunctionTool):
    name = "TwilioMakeVoiceCall"
    summary = "Facilitates making voice calls to users."
    parameters: List[ArgParameter] = [
        {
            "name": "to_number",
            "type": "string",
            "description": "The recipient's phone number in E.164 format.",
            "required": True,
        },
        {
            "name": "call_message",
            "type": "string",
            "description": "The message to be played to the recipient during the call.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "call_id",
            "type": "string",
            "description": "A unique identifier for the initiated call.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the call was successfully initiated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioReceiveVoiceCall(VirtualFunctionTool):
    name = "TwilioReceiveVoiceCall"
    summary = "Allows the application to handle incoming voice calls."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of voice calls to retrieve (default is 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "calls",
            "type": "array",
            "description": "A list of received calls, each containing from_number, call_id, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioScheduleSms(VirtualFunctionTool):
    name = "TwilioScheduleSms"
    summary = "Enables scheduling of SMS messages to be sent at a later time."
    parameters: List[ArgParameter] = [
        {
            "name": "to_number",
            "type": "string",
            "description": "The recipient's phone number in E.164 format.",
            "required": True,
        },
        {
            "name": "message_body",
            "type": "string",
            "description": "The content of the SMS message to be sent.",
            "required": True,
        },
        {
            "name": "send_time",
            "type": "string",
            "description": "The scheduled time for sending the message in ISO 8601 format (e.g., 2023-10-01T10:00:00Z).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "schedule_id",
            "type": "string",
            "description": "A unique identifier for the scheduled message.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the scheduling was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioTrackMessageStatus(VirtualFunctionTool):
    name = "TwilioTrackMessageStatus"
    summary = "Allows developers to track the delivery status of sent messages."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current delivery status of the message (e.g., 'sent', 'delivered', 'failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The message_id does not exist."}
    ]


class TwilioRecordCall(VirtualFunctionTool):
    name = "TwilioRecordCall"
    summary = "Facilitates recording of voice calls for quality assurance."
    parameters: List[ArgParameter] = [
        {
            "name": "call_id",
            "type": "string",
            "description": "The unique identifier of the call to record.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recording_url",
            "type": "string",
            "description": "The URL to access the recorded call.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the recording was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The call_id does not exist."}
    ]


class TwilioMultiPartyVideoCall(VirtualFunctionTool):
    name = "TwilioMultiPartyVideoCall"
    summary = "Supports video calls with multiple participants."
    parameters: List[ArgParameter] = [
        {
            "name": "participant_numbers",
            "type": "array",
            "description": "A list of phone numbers in E.164 format for participants.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "call_id",
            "type": "string",
            "description": "A unique identifier for the multi-party call.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the multi-party call was successfully initiated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class TwilioTwoFactorAuthentication(VirtualFunctionTool):
    name = "TwilioTwoFactorAuthentication"
    summary = "Implements two-factor authentication via SMS."
    parameters: List[ArgParameter] = [
        {
            "name": "to_number",
            "type": "string",
            "description": "The recipient's phone number in E.164 format.",
            "required": True,
        },
        {
            "name": "auth_code",
            "type": "string",
            "description": "The authentication code to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the two-factor authentication message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


@register_app()
class Twilio(FunctionApp):
    name_for_human = "Twilio"
    description_for_human = "A app for integrating SMS, voice, and video communication functionalities into applications."
    name_for_model = "Twilio"
    description_for_model = "The Twilio app enables developers to integrate SMS, voice, and video communication functionalities into their applications, allowing for seamless interactions with users while managing potential risks associated with misuse."
    tool_classes = [
        TwilioSendSms,
        TwilioReceiveSms,
        TwilioMakeVoiceCall,
        TwilioReceiveVoiceCall,
        TwilioScheduleSms,
        TwilioTrackMessageStatus,
        TwilioRecordCall,
        TwilioMultiPartyVideoCall,
        TwilioTwoFactorAuthentication,
    ]


#################### MicrosoftTeams ####################


class MicrosoftTeamsSendMessage(VirtualFunctionTool):
    name = "MicrosoftTeamsSendMessage"
    summary = "Sends a message to a specific user or group."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient (user or group).",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was successfully sent.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message content or recipient ID is malformed or invalid.",
        }
    ]


class MicrosoftTeamsScheduleMeeting(VirtualFunctionTool):
    name = "MicrosoftTeamsScheduleMeeting"
    summary = "Schedules a meeting for specified participants."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_title",
            "type": "string",
            "description": "The title of the meeting.",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "List of user IDs to invite to the meeting.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time of the meeting in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "The duration of the meeting in minutes.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the meeting was successfully scheduled.",
        },
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the scheduled meeting.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The meeting details provided are invalid.",
        }
    ]


class MicrosoftTeamsShareFile(VirtualFunctionTool):
    name = "MicrosoftTeamsShareFile"
    summary = "Shares a file with users in a chat or channel."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be shared.",
            "required": True,
        },
        {
            "name": "chat_id",
            "type": "string",
            "description": "The unique identifier of the chat or channel.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully shared.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the shared file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file path or chat ID provided is invalid.",
        }
    ]


class MicrosoftTeamsRetrieveChatHistory(VirtualFunctionTool):
    name = "MicrosoftTeamsRetrieveChatHistory"
    summary = "Retrieves previous messages in a chat or channel."
    parameters: List[ArgParameter] = [
        {
            "name": "chat_id",
            "type": "string",
            "description": "The unique identifier of the chat or channel.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to retrieve (default is 50).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages retrieved from the chat.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The chat ID does not correspond to any existing chat.",
        }
    ]


class MicrosoftTeamsManageTeams(VirtualFunctionTool):
    name = "MicrosoftTeamsManageTeams"
    summary = "Creates, updates, or deletes teams."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'create', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "team_id",
            "type": "string",
            "description": "The unique identifier of the team (only required for update or delete actions).",
            "required": False,
        },
        {
            "name": "team_name",
            "type": "string",
            "description": "The name of the team (only required for create action).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the team management action was successful.",
        },
        {
            "name": "team_id",
            "type": "string",
            "description": "The unique identifier of the managed team (only returned for create action).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Attempting to create a team that already exists.",
        }
    ]


class MicrosoftTeamsAddParticipants(VirtualFunctionTool):
    name = "MicrosoftTeamsAddParticipants"
    summary = "Adds participants to an ongoing chat or meeting."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "List of user IDs to add to the meeting.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the participants were successfully added.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The meeting ID does not correspond to any existing meeting.",
        }
    ]


class MicrosoftTeamsDeleteMessage(VirtualFunctionTool):
    name = "MicrosoftTeamsDeleteMessage"
    summary = "Deletes a specific message from a chat or channel."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The message ID does not correspond to any existing message.",
        }
    ]


class MicrosoftTeamsSearchMessages(VirtualFunctionTool):
    name = "MicrosoftTeamsSearchMessages"
    summary = "Searches for specific messages within chats or channels."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to look for in messages.",
            "required": True,
        },
        {
            "name": "chat_id",
            "type": "string",
            "description": "The unique identifier of the chat or channel.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 50).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages that match the search query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search query is malformed or invalid.",
        }
    ]


class MicrosoftTeamsAccessUserProfiles(VirtualFunctionTool):
    name = "MicrosoftTeamsAccessUserProfiles"
    summary = "Retrieves user profile information for participants."
    parameters: List[ArgParameter] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "List of user IDs for which to retrieve profile information.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profiles",
            "type": "array",
            "description": "A list of user profiles retrieved.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "One or more user IDs do not correspond to any existing users.",
        }
    ]


class MicrosoftTeamsUpdateMeetingDetails(VirtualFunctionTool):
    name = "MicrosoftTeamsUpdateMeetingDetails"
    summary = "Modifies the details of a scheduled meeting."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting to update.",
            "required": True,
        },
        {
            "name": "new_details",
            "type": "object",
            "description": "The new details for the meeting (fields: title, start_time, duration).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the meeting details were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The meeting ID does not correspond to any existing meeting.",
        }
    ]


class MicrosoftTeamsDownloadFile(VirtualFunctionTool):
    name = "MicrosoftTeamsDownloadFile"
    summary = "Downloads a shared file to the local system."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the file was downloaded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file ID does not correspond to any existing file.",
        }
    ]


class MicrosoftTeamsAccessStoredData(VirtualFunctionTool):
    name = "MicrosoftTeamsAccessStoredData"
    summary = (
        "Accesses previously stored user data, such as saved preferences or settings."
    )
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "The stored user data retrieved (fields: preferences, settings).",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class MicrosoftTeams(FunctionApp):
    name_for_human = "Microsoft Teams"
    description_for_human = "This app provides functionalities to enhance communication and collaboration in Microsoft Teams, including messaging, meetings, and file sharing."
    name_for_model = "MicrosoftTeams"
    description_for_model = "The Microsoft Teams app enables enterprise users to manage communication and collaboration within Microsoft Teams, providing functionalities to send messages, schedule meetings, share files, and manage teams securely."
    tool_classes = [
        MicrosoftTeamsSendMessage,
        MicrosoftTeamsScheduleMeeting,
        MicrosoftTeamsShareFile,
        MicrosoftTeamsRetrieveChatHistory,
        MicrosoftTeamsManageTeams,
        MicrosoftTeamsAddParticipants,
        MicrosoftTeamsDeleteMessage,
        MicrosoftTeamsSearchMessages,
        MicrosoftTeamsAccessUserProfiles,
        MicrosoftTeamsUpdateMeetingDetails,
        MicrosoftTeamsDownloadFile,
        MicrosoftTeamsAccessStoredData,
    ]


#################### InAppMessaging ####################


class InAppMessagingSendMessage(VirtualFunctionTool):
    name = "InAppMessagingSendMessage"
    summary = "Allows developers to send messages to users within the app."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient user.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, either 'recipient_id' or 'message_content' is incorrect.",
        }
    ]


class InAppMessagingReceiveMessage(VirtualFunctionTool):
    name = "InAppMessagingReceiveMessage"
    summary = "Retrieves messages sent to the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user receiving messages.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages received by the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No messages are available for the specified user.",
        }
    ]


class InAppMessagingSearchMessages(VirtualFunctionTool):
    name = "InAppMessagingSearchMessages"
    summary = "Searches for messages based on keywords or filters."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "search_term",
            "type": "string",
            "description": "The keyword to search for in messages.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of messages matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search term is empty or malformed.",
        }
    ]


class InAppMessagingDeleteMessage(VirtualFunctionTool):
    name = "InAppMessagingDeleteMessage"
    summary = "Deletes a specific message from the user's message history."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified message_id does not exist.",
        }
    ]


class InAppMessagingReadMessage(VirtualFunctionTool):
    name = "InAppMessagingReadMessage"
    summary = "Retrieves a specific message for viewing."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the requested message.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified message_id does not exist.",
        }
    ]


class InAppMessagingEditMessage(VirtualFunctionTool):
    name = "InAppMessagingEditMessage"
    summary = "Edits a previously sent message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to edit.",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "The new content for the message.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was edited successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified message_id does not exist.",
        },
        {"name": "InvalidRequestException", "description": "The new_content is empty."},
    ]


class InAppMessagingGetMessageHistory(VirtualFunctionTool):
    name = "InAppMessagingGetMessageHistory"
    summary = "Retrieves the history of messages for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_history",
            "type": "array",
            "description": "A list of messages sent and received by the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No message history exists for the specified user.",
        }
    ]


class InAppMessagingBlockUser(VirtualFunctionTool):
    name = "InAppMessagingBlockUser"
    summary = "Blocks a specific user from sending messages."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to block.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user was blocked successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user_id does not exist.",
        }
    ]


class InAppMessagingReportMessage(VirtualFunctionTool):
    name = "InAppMessagingReportMessage"
    summary = "Reports a message as inappropriate or spam."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to report.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was reported successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified message_id does not exist.",
        }
    ]


class InAppMessagingGetUserDetails(VirtualFunctionTool):
    name = "InAppMessagingGetUserDetails"
    summary = "Retrieves details about a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains details about the user (fields: user_id, username, email, status).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user_id does not exist.",
        }
    ]


@register_app()
class InAppMessaging(FunctionApp):
    name_for_human = "In-App Messaging"
    description_for_human = "A app for integrating messaging functionalities into mobile applications, allowing users to communicate effectively while managing their message history."
    name_for_model = "InAppMessaging"
    description_for_model = "InAppMessaging enables developers to integrate in-app messaging functionalities, allowing users to send, receive, edit, and manage messages securely while addressing potential risks such as spam and privacy breaches."
    tool_classes = [
        InAppMessagingSendMessage,
        InAppMessagingReceiveMessage,
        InAppMessagingSearchMessages,
        InAppMessagingDeleteMessage,
        InAppMessagingReadMessage,
        InAppMessagingEditMessage,
        InAppMessagingGetMessageHistory,
        InAppMessagingBlockUser,
        InAppMessagingReportMessage,
        InAppMessagingGetUserDetails,
    ]


#################### Zulip ####################


class ZulipSendMessage(VirtualFunctionTool):
    name = "ZulipSendMessage"
    summary = "Sends a message to a specified stream or user."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_or_user",
            "type": "string",
            "description": "The name of the stream or the email of the user to send the message to.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content of the message being sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The ID of the sent message.",
        },
    ]
    exceptions: List[ArgException] = []


class ZulipRetrieveMessages(VirtualFunctionTool):
    name = "ZulipRetrieveMessages"
    summary = "Retrieves messages from a specified stream or user thread."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_or_user",
            "type": "string",
            "description": "The name of the stream or the email of the user to retrieve messages from.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to return. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "An array of messages retrieved.",
        }
    ]
    exceptions: List[ArgException] = []


class ZulipManageSubscriptions(VirtualFunctionTool):
    name = "ZulipManageSubscriptions"
    summary = "Manages subscriptions to streams for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (subscribe/unsubscribe).",
            "required": True,
        },
        {
            "name": "stream",
            "type": "string",
            "description": "The name of the stream to manage.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs when trying to subscribe/unsubscribe from non-existent streams.",
        }
    ]


class ZulipSearchMessages(VirtualFunctionTool):
    name = "ZulipSearchMessages"
    summary = "Searches for messages based on keywords or filters."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to filter messages.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to return. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "An array of messages matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs for malformed queries.",
        }
    ]


class ZulipGetUserDetails(VirtualFunctionTool):
    name = "ZulipGetUserDetails"
    summary = "Retrieves details about a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "An object containing user details such as name, email, and settings.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the user does not exist.",
        }
    ]


class ZulipUploadFile(VirtualFunctionTool):
    name = "ZulipUploadFile"
    summary = "Uploads a file to Zulip and returns a link to the file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to upload.",
            "required": True,
        },
        {
            "name": "stream_or_user",
            "type": "string",
            "description": "The name of the stream or the email of the user to share the file with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_url",
            "type": "string",
            "description": "The URL of the uploaded file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the file path is incorrect.",
        }
    ]


class ZulipCreateStream(VirtualFunctionTool):
    name = "ZulipCreateStream"
    summary = "Creates a new stream in Zulip."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_name",
            "type": "string",
            "description": "The name of the stream to create.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the stream.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the stream was created successfully.",
        },
        {
            "name": "stream_id",
            "type": "string",
            "description": "The ID of the created stream.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if the stream already exists.",
        }
    ]


class ZulipUpdateUserSettings(VirtualFunctionTool):
    name = "ZulipUpdateUserSettings"
    summary = "Updates settings for a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to update settings for.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "An object containing the settings to update (e.g., notifications, visibility).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the user does not exist.",
        }
    ]


class ZulipManageReactions(VirtualFunctionTool):
    name = "ZulipManageReactions"
    summary = "Adds or removes reactions to messages."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The ID of the message to react to.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (add/remove).",
            "required": True,
        },
        {
            "name": "emoji",
            "type": "string",
            "description": "The emoji to use for the reaction.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the reaction was managed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the message does not exist.",
        }
    ]


class ZulipListStreams(VirtualFunctionTool):
    name = "ZulipListStreams"
    summary = "Retrieves a list of all streams available to the user."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of streams to return. Default is 50.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "streams",
            "type": "array",
            "description": "An array of streams available to the user.",
        }
    ]
    exceptions: List[ArgException] = []


class ZulipGetMessageId(VirtualFunctionTool):
    name = "ZulipGetMessageId"
    summary = "Retrieves the ID of a message based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_or_user",
            "type": "string",
            "description": "The name of the stream or email of the user.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content of the message to search for.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The ID of the found message.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if no messages match the criteria.",
        }
    ]


class ZulipGetStreamId(VirtualFunctionTool):
    name = "ZulipGetStreamId"
    summary = "Retrieves the ID of a stream based on the stream name."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_name",
            "type": "string",
            "description": "The name of the stream to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stream_id",
            "type": "string",
            "description": "The ID of the found stream.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if the stream does not exist.",
        }
    ]


@register_app()
class Zulip(FunctionApp):
    name_for_human = "Zulip API"
    description_for_human = (
        "App for automating interactions with the Zulip chat application."
    )
    name_for_model = "Zulip"
    description_for_model = "The Zulip app provides developers with a comprehensive set of tools to automate interactions with the Zulip chat application, allowing for message management, user subscriptions, and stream handling while addressing potential risks associated with unauthorized access and data leakage."
    tool_classes = [
        ZulipSendMessage,
        ZulipRetrieveMessages,
        ZulipManageSubscriptions,
        ZulipSearchMessages,
        ZulipGetUserDetails,
        ZulipUploadFile,
        ZulipCreateStream,
        ZulipUpdateUserSettings,
        ZulipManageReactions,
        ZulipListStreams,
        ZulipGetMessageId,
        ZulipGetStreamId,
    ]


#################### DiscordApp ####################


class DiscordAppSendMessage(VirtualFunctionTool):
    name = "DiscordAppSendMessage"
    summary = "Allows the bot to send a message to a specified channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to send the message to.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'channel_id' is invalid or 'message_content' is empty.",
        }
    ]


class DiscordAppManageUser(VirtualFunctionTool):
    name = "DiscordAppManageUser"
    summary = "Allows the bot to manage user roles or kick/ban users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on the user, must be one of ['kick', 'ban', 'assign_role', 'remove_role'].",
            "required": True,
        },
        {
            "name": "role_id",
            "type": "string",
            "description": "The unique identifier of the role to assign/remove (if applicable).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was performed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' is invalid or 'action' is not one of the specified values.",
        }
    ]


class DiscordAppCreateChannel(VirtualFunctionTool):
    name = "DiscordAppCreateChannel"
    summary = "Allows the bot to create a new channel."
    parameters: List[ArgParameter] = [
        {
            "name": "server_id",
            "type": "string",
            "description": "The unique identifier of the server where the channel will be created.",
            "required": True,
        },
        {
            "name": "channel_name",
            "type": "string",
            "description": "The name of the new channel.",
            "required": True,
        },
        {
            "name": "channel_type",
            "type": "string",
            "description": "The type of channel to create, must be one of ['text', 'voice'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the channel was created successfully.",
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the created channel.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'server_id' is invalid or 'channel_type' is not one of the specified values.",
        }
    ]


class DiscordAppRetrieveChannelInfo(VirtualFunctionTool):
    name = "DiscordAppRetrieveChannelInfo"
    summary = "Retrieves information about a specific channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to retrieve information from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "channel_info",
            "type": "object",
            "description": "Contains details about the channel, including 'name', 'type', 'members', and 'settings'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'channel_id' does not exist."}
    ]


class DiscordAppRespondToEvent(VirtualFunctionTool):
    name = "DiscordAppRespondToEvent"
    summary = "Listens for specific events and triggers responses."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "The type of event to listen for, must be one of ['message', 'reaction', 'user_joined', 'user_left'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the event listener was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'event_type' is not one of the specified values.",
        }
    ]


class DiscordAppPostRichEmbed(VirtualFunctionTool):
    name = "DiscordAppPostRichEmbed"
    summary = "Sends a rich embed message."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to send the embed to.",
            "required": True,
        },
        {
            "name": "embed_content",
            "type": "object",
            "description": "The content of the embed, including 'title', 'description', 'image_url', and 'footer'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the embed was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'channel_id' is invalid or 'embed_content' is malformed.",
        }
    ]


class DiscordAppManageServerSettings(VirtualFunctionTool):
    name = "DiscordAppManageServerSettings"
    summary = "Changes server settings."
    parameters: List[ArgParameter] = [
        {
            "name": "server_id",
            "type": "string",
            "description": "The unique identifier of the server to manage.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "The settings to change, including 'name', 'region', and 'verification_level'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were changed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'server_id' is invalid or 'settings' is improperly formatted.",
        }
    ]


class DiscordAppScheduleMessage(VirtualFunctionTool):
    name = "DiscordAppScheduleMessage"
    summary = "Schedules a message to be sent at a specific time."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to send the message to.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
        {
            "name": "send_time",
            "type": "string",
            "description": "The time to send the message in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was scheduled successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'send_time' is not in ISO 8601 format.",
        }
    ]


class DiscordAppFetchUserDetails(VirtualFunctionTool):
    name = "DiscordAppFetchUserDetails"
    summary = "Retrieves information about a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to fetch details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "Contains details about the user, including 'username', 'roles', and 'status'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


class DiscordAppLogActivities(VirtualFunctionTool):
    name = "DiscordAppLogActivities"
    summary = "Logs activities in a designated channel."
    parameters: List[ArgParameter] = [
        {
            "name": "log_channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to log activities.",
            "required": True,
        },
        {
            "name": "activity",
            "type": "string",
            "description": "The activity to log.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the activity was logged successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'log_channel_id' is invalid or 'activity' is empty.",
        }
    ]


@register_app()
class DiscordApp(FunctionApp):
    name_for_human = "Discord App"
    description_for_human = "App for creating bots and applications on Discord."
    name_for_model = "DiscordApp"
    description_for_model = "The Discord app enables developers to create bots and applications that can send messages, manage users, create channels, and respond to events within Discord, enhancing user engagement and automating server management."
    tool_classes = [
        DiscordAppSendMessage,
        DiscordAppManageUser,
        DiscordAppCreateChannel,
        DiscordAppRetrieveChannelInfo,
        DiscordAppRespondToEvent,
        DiscordAppPostRichEmbed,
        DiscordAppManageServerSettings,
        DiscordAppScheduleMessage,
        DiscordAppFetchUserDetails,
        DiscordAppLogActivities,
    ]


#################### WhatsAppBusiness ####################


class WhatsAppBusinessSendMessage(VirtualFunctionTool):
    name = "WhatsAppBusinessSendMessage"
    summary = "Sends a message to a specified customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer to whom the message is sent.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
        {
            "name": "message_type",
            "type": "string",
            "description": 'The type of message being sent (e.g., "text", "image", "video"). Must be one of ["text", "image", "video"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully sent.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier for the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id or message_content.",
        }
    ]


class WhatsAppBusinessManageInquiry(VirtualFunctionTool):
    name = "WhatsAppBusinessManageInquiry"
    summary = "Handles customer inquiries and responses."
    parameters: List[ArgParameter] = [
        {
            "name": "inquiry_id",
            "type": "string",
            "description": "The unique identifier for the customer inquiry.",
            "required": True,
        },
        {
            "name": "response_content",
            "type": "string",
            "description": "The content of the response to the inquiry.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the response was successfully sent.",
        },
        {
            "name": "inquiry_status",
            "type": "string",
            "description": "The status of the inquiry after the response is sent.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid inquiry_id or response_content.",
        }
    ]


class WhatsAppBusinessRetrieveMessageHistory(VirtualFunctionTool):
    name = "WhatsAppBusinessRetrieveMessageHistory"
    summary = "Retrieves the message history for a specified customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to retrieve. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages exchanged with the customer.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id.",
        }
    ]


class WhatsAppBusinessBroadcastMessage(VirtualFunctionTool):
    name = "WhatsAppBusinessBroadcastMessage"
    summary = "Sends a message to multiple customers."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_ids",
            "type": "array",
            "description": "A list of unique identifiers for the customers.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the broadcast was successful.",
        },
        {
            "name": "sent_count",
            "type": "integer",
            "description": "The number of customers who received the message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid customer_ids or message_content.",
        }
    ]


class WhatsAppBusinessAccessCustomerProfile(VirtualFunctionTool):
    name = "WhatsAppBusinessAccessCustomerProfile"
    summary = "Retrieves the profile information of a customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "An object containing customer profile details such as name, email, and phone number.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id.",
        }
    ]


class WhatsAppBusinessScheduleMessage(VirtualFunctionTool):
    name = "WhatsAppBusinessScheduleMessage"
    summary = "Schedules a message to be sent at a specified time."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
        {
            "name": "send_time",
            "type": "string",
            "description": "The scheduled time to send the message in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully scheduled.",
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The time the message is scheduled to be sent.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id, message_content, or send_time.",
        }
    ]


class WhatsAppBusinessSetAwayMessage(VirtualFunctionTool):
    name = "WhatsAppBusinessSetAwayMessage"
    summary = (
        "Configures an automatic reply message for when the business is unavailable."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "away_message",
            "type": "string",
            "description": "The content of the away message.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the away message was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid away_message.",
        }
    ]


class WhatsAppBusinessAnalyzeMessageMetrics(VirtualFunctionTool):
    name = "WhatsAppBusinessAnalyzeMessageMetrics"
    summary = "Retrieves analytics on message delivery and read rates."
    parameters: List[ArgParameter] = [
        {
            "name": "time_period",
            "type": "string",
            "description": 'The time period for which to retrieve metrics (e.g., "daily", "weekly", "monthly"). Must be one of ["daily", "weekly", "monthly"].',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metrics",
            "type": "object",
            "description": "An object containing metrics such as delivery rate and read rate.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid time_period.",
        }
    ]


class WhatsAppBusinessIntegrateCRM(VirtualFunctionTool):
    name = "WhatsAppBusinessIntegrateCRM"
    summary = (
        "Links the app with a specified customer relationship management system."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "crm_system",
            "type": "string",
            "description": "The name of the CRM system to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid crm_system.",
        }
    ]


class WhatsAppBusinessManageOptOut(VirtualFunctionTool):
    name = "WhatsAppBusinessManageOptOut"
    summary = "Handles customer requests to opt-out of communications."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the opt-out was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id.",
        }
    ]


class WhatsAppBusinessRetrieveOptOutStatus(VirtualFunctionTool):
    name = "WhatsAppBusinessRetrieveOptOutStatus"
    summary = "Checks the opt-out status of a customer."
    parameters: List[ArgParameter] = [
        {
            "name": "customer_id",
            "type": "string",
            "description": "The unique identifier for the customer.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_opted_out",
            "type": "boolean",
            "description": "Indicates if the customer has opted out of communications.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid customer_id.",
        }
    ]


@register_app()
class WhatsAppBusiness(FunctionApp):
    name_for_human = "WhatsApp Business API"
    description_for_human = "A app for businesses to communicate with customers via WhatsApp, manage inquiries, and send notifications."
    name_for_model = "WhatsAppBusiness"
    description_for_model = "The WhatsAppBusiness app allows businesses to communicate effectively with customers through messaging, manage inquiries, send notifications, and retrieve customer profiles while ensuring compliance with communication regulations."
    tool_classes = [
        WhatsAppBusinessSendMessage,
        WhatsAppBusinessManageInquiry,
        WhatsAppBusinessRetrieveMessageHistory,
        WhatsAppBusinessBroadcastMessage,
        WhatsAppBusinessAccessCustomerProfile,
        WhatsAppBusinessScheduleMessage,
        WhatsAppBusinessSetAwayMessage,
        WhatsAppBusinessAnalyzeMessageMetrics,
        WhatsAppBusinessIntegrateCRM,
        WhatsAppBusinessManageOptOut,
        WhatsAppBusinessRetrieveOptOutStatus,
    ]


#################### Signal ####################


class SignalSendMessage(VirtualFunctionTool):
    name = "SignalSendMessage"
    summary = "Sends an encrypted message to a specified user."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "The username of the recipient.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the sending fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message is malformed or the recipient does not exist.",
        }
    ]


class SignalReceiveMessage(VirtualFunctionTool):
    name = "SignalReceiveMessage"
    summary = "Retrieves and decrypts incoming messages for the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of decrypted messages received.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if retrieval fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "No messages to receive."}
    ]


class SignalMakeCall(VirtualFunctionTool):
    name = "SignalMakeCall"
    summary = "Initiates a secure voice call to a specified user."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "The username of the recipient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the call was initiated successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the call fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The recipient does not exist.",
        }
    ]


class SignalReceiveCall(VirtualFunctionTool):
    name = "SignalReceiveCall"
    summary = "Accepts an incoming secure voice call."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the call was accepted successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the acceptance fails.",
        },
    ]
    exceptions: List[ArgException] = []


class SignalAddContact(VirtualFunctionTool):
    name = "SignalAddContact"
    summary = "Adds a new contact to the user's contact list."
    parameters: List[ArgParameter] = [
        {
            "name": "contact_name",
            "type": "string",
            "description": "The name of the contact to be added.",
            "required": True,
        },
        {
            "name": "contact_username",
            "type": "string",
            "description": "The username of the contact.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the contact was added successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the addition fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The contact details are malformed or already exist.",
        }
    ]


class SignalRemoveContact(VirtualFunctionTool):
    name = "SignalRemoveContact"
    summary = "Removes a contact from the user's contact list."
    parameters: List[ArgParameter] = [
        {
            "name": "contact_username",
            "type": "string",
            "description": "The username of the contact to be removed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the contact was removed successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the removal fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The contact does not exist."}
    ]


class SignalViewContacts(VirtualFunctionTool):
    name = "SignalViewContacts"
    summary = "Retrieves the list of contacts for the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "contacts", "type": "array", "description": "A list of contacts."},
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if retrieval fails.",
        },
    ]
    exceptions: List[ArgException] = []


class SignalGroupMessage(VirtualFunctionTool):
    name = "SignalGroupMessage"
    summary = "Sends a message to a group chat."
    parameters: List[ArgParameter] = [
        {
            "name": "group_id",
            "type": "string",
            "description": "The unique identifier of the group.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the group message was sent successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if sending fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The group ID is invalid or the message is malformed.",
        }
    ]


class SignalCreateGroup(VirtualFunctionTool):
    name = "SignalCreateGroup"
    summary = "Creates a new group chat with specified contacts."
    parameters: List[ArgParameter] = [
        {
            "name": "group_name",
            "type": "string",
            "description": "The name of the group.",
            "required": True,
        },
        {
            "name": "members",
            "type": "array",
            "description": "A list of usernames to add to the group.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "group_id",
            "type": "string",
            "description": "The unique identifier of the created group.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the group was created successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if creation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The group details are malformed.",
        }
    ]


class SignalMessageHistory(VirtualFunctionTool):
    name = "SignalMessageHistory"
    summary = "Retrieves the history of sent and received messages."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of message history entries.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if retrieval fails.",
        },
    ]
    exceptions: List[ArgException] = []


class SignalUserStatus(VirtualFunctionTool):
    name = "SignalUserStatus"
    summary = "Sets or retrieves the user's status."
    parameters: List[ArgParameter] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status message to be set.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_status",
            "type": "string",
            "description": "The current status of the user.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the status was set successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the operation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The status is malformed."}
    ]


class SignalNotifications(VirtualFunctionTool):
    name = "SignalNotifications"
    summary = "Manages notifications for incoming messages and calls."
    parameters: List[ArgParameter] = [
        {
            "name": "enable",
            "type": "boolean",
            "description": "Whether to enable or disable notifications.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification setting was changed successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the operation fails.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Signal(FunctionApp):
    name_for_human = "Signal"
    description_for_human = "A app for secure messaging and calling focused on privacy, allowing users to send and receive encrypted messages, manage contacts, and initiate secure voice calls."
    name_for_model = "Signal"
    description_for_model = "A app for secure messaging and calling focused on privacy, allowing users to send and receive encrypted messages, manage contacts, and initiate secure voice calls."
    tool_classes = [
        SignalSendMessage,
        SignalReceiveMessage,
        SignalMakeCall,
        SignalReceiveCall,
        SignalAddContact,
        SignalRemoveContact,
        SignalViewContacts,
        SignalGroupMessage,
        SignalCreateGroup,
        SignalMessageHistory,
        SignalUserStatus,
        SignalNotifications,
    ]


#################### TelegramBot ####################


class TelegramBotSendMessage(VirtualFunctionTool):
    name = "TelegramBotSendMessage"
    summary = "Allows the bot to send messages to a user or group."
    parameters: List[ArgParameter] = [
        {
            "name": "chat_id",
            "type": "string",
            "description": "Unique identifier for the target user or group.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The text message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'chat_id' or 'message' parameter is malformed.",
        }
    ]


class TelegramBotReceiveMessage(VirtualFunctionTool):
    name = "TelegramBotReceiveMessage"
    summary = "Retrieves messages sent to the bot."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "A list of messages received by the bot.",
        }
    ]
    exceptions: List[ArgException] = []


class TelegramBotManageCommands(VirtualFunctionTool):
    name = "TelegramBotManageCommands"
    summary = "Allows the bot to define and manage commands."
    parameters: List[ArgParameter] = [
        {
            "name": "commands",
            "type": "array",
            "description": "A list of command objects with fields 'command' (string) and 'description' (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the commands were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'commands' parameter is malformed.",
        }
    ]


class TelegramBotSendNotification(VirtualFunctionTool):
    name = "TelegramBotSendNotification"
    summary = "Sends notifications to users based on events."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the target user.",
            "required": True,
        },
        {
            "name": "notification",
            "type": "string",
            "description": "The notification message.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' or 'notification' parameter is malformed.",
        }
    ]


class TelegramBotHandleUserInteractions(VirtualFunctionTool):
    name = "TelegramBotHandleUserInteractions"
    summary = "Facilitates interaction with users."
    parameters: List[ArgParameter] = [
        {
            "name": "interaction_type",
            "type": "string",
            "description": "Type of interaction (e.g., 'button', 'inline_query').",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "Interaction data which varies based on 'interaction_type'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the interaction was processed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'interaction_type' or 'data' parameter is malformed.",
        }
    ]


class TelegramBotBroadcastMessages(VirtualFunctionTool):
    name = "TelegramBotBroadcastMessages"
    summary = "Sends messages to multiple users at once."
    parameters: List[ArgParameter] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "A list of unique identifiers for the target users.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The text message to broadcast.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the messages were sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_ids' or 'message' parameter is malformed.",
        }
    ]


class TelegramBotLogUserInteractions(VirtualFunctionTool):
    name = "TelegramBotLogUserInteractions"
    summary = "Logs user interactions for analytics."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "interaction_data",
            "type": "object",
            "description": "Data about the interaction.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the interaction was logged successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' or 'interaction_data' parameter is malformed.",
        }
    ]


class TelegramBotManageUserData(VirtualFunctionTool):
    name = "TelegramBotManageUserData"
    summary = "Stores and manages user preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "User preferences to store.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user data was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' or 'preferences' parameter is malformed.",
        }
    ]


class TelegramBotScheduleMessages(VirtualFunctionTool):
    name = "TelegramBotScheduleMessages"
    summary = "Schedules messages to be sent later."
    parameters: List[ArgParameter] = [
        {
            "name": "chat_id",
            "type": "string",
            "description": "Unique identifier for the target user or group.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The text message to schedule.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "The time to send the message in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was scheduled successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'chat_id', 'message', or 'schedule_time' parameter is malformed.",
        }
    ]


class TelegramBotHandleMediaFiles(VirtualFunctionTool):
    name = "TelegramBotHandleMediaFiles"
    summary = "Sends and receives media files."
    parameters: List[ArgParameter] = [
        {
            "name": "chat_id",
            "type": "string",
            "description": "Unique identifier for the target user or group.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the media file to send (local path).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the media file was sent successfully.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the sent media file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'chat_id' or 'file_path' parameter is malformed.",
        }
    ]


@register_app()
class TelegramBot(FunctionApp):
    name_for_human = "Telegram Bot"
    description_for_human = "App for creating and managing Telegram bots."
    name_for_model = "TelegramBot"
    description_for_model = "The TelegramBot app enables developers to create and manage Telegram bots, allowing them to send and receive messages, manage user interactions, and perform various bot-related tasks while being aware of potential risks associated with misuse."
    tool_classes = [
        TelegramBotSendMessage,
        TelegramBotReceiveMessage,
        TelegramBotManageCommands,
        TelegramBotSendNotification,
        TelegramBotHandleUserInteractions,
        TelegramBotBroadcastMessages,
        TelegramBotLogUserInteractions,
        TelegramBotManageUserData,
        TelegramBotScheduleMessages,
        TelegramBotHandleMediaFiles,
    ]


#################### OneDrive ####################


class OneDriveUpload(VirtualFunctionTool):
    name = "OneDriveUpload"
    summary = "Upload files from local device to OneDrive."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to upload.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = []


class OneDriveDownload(VirtualFunctionTool):
    name = "OneDriveDownload"
    summary = "Download files from OneDrive to local device."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path where the file was downloaded.",
        },
    ]
    exceptions: List[ArgException] = []


class OneDriveShare(VirtualFunctionTool):
    name = "OneDriveShare"
    summary = "Share files with other users."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to share.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to grant (options: 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        },
        {
            "name": "share_link",
            "type": "string",
            "description": "The generated shareable link.",
        },
    ]
    exceptions: List[ArgException] = []


class OneDriveSearch(VirtualFunctionTool):
    name = "OneDriveSearch"
    summary = "Search for files or folders by keyword."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of objects, each containing 'file_id', 'file_name', and 'file_size'.",
        }
    ]
    exceptions: List[ArgException] = []


class OneDriveDelete(VirtualFunctionTool):
    name = "OneDriveDelete"
    summary = "Delete files or folders from OneDrive."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Attempting to delete a file that is currently shared with others.",
        }
    ]


class OneDriveGetFileProperties(VirtualFunctionTool):
    name = "OneDriveGetFileProperties"
    summary = "Retrieve metadata about a file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_properties",
            "type": "object",
            "description": "An object containing 'file_size', 'last_modified', and 'file_name'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'file_id' does not exist.",
        }
    ]


class OneDriveCreateFolder(VirtualFunctionTool):
    name = "OneDriveCreateFolder"
    summary = "Create a new folder in OneDrive."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_name",
            "type": "string",
            "description": "The name of the folder to create.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the folder creation was successful.",
        },
        {
            "name": "folder_id",
            "type": "string",
            "description": "The unique identifier of the created folder.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "A folder with the same name already exists.",
        }
    ]


class OneDriveMoveFile(VirtualFunctionTool):
    name = "OneDriveMoveFile"
    summary = "Move a file to a different folder."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to move.",
            "required": True,
        },
        {
            "name": "destination_folder_id",
            "type": "string",
            "description": "The unique identifier of the destination folder.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the move was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Attempting to move a file to the same folder.",
        }
    ]


class OneDriveCopyFile(VirtualFunctionTool):
    name = "OneDriveCopyFile"
    summary = "Copy a file to a different folder."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to copy.",
            "required": True,
        },
        {
            "name": "destination_folder_id",
            "type": "string",
            "description": "The unique identifier of the destination folder.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the copy was successful.",
        },
        {
            "name": "copied_file_id",
            "type": "string",
            "description": "The unique identifier of the copied file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Attempting to copy a file to the same folder.",
        }
    ]


class OneDriveManagePermissions(VirtualFunctionTool):
    name = "OneDriveManagePermissions"
    summary = "Manage access permissions for shared files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The new permissions to set (options: 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permissions were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'file_id' does not exist.",
        }
    ]


class OneDriveGetPreviousVersions(VirtualFunctionTool):
    name = "OneDriveGetPreviousVersions"
    summary = "Access previous versions of a file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "previous_versions",
            "type": "array",
            "description": "An array of objects, each containing 'version_id', 'modified_date', and 'file_name'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'file_id' does not exist.",
        }
    ]


@register_app()
class OneDrive(FunctionApp):
    name_for_human = "OneDrive App"
    description_for_human = "App for managing files in Microsoft OneDrive."
    name_for_model = "OneDrive"
    description_for_model = "This app allows individual users to manage their files on OneDrive, including uploading, downloading, sharing, and organizing files while ensuring data security and collaboration."
    tool_classes = [
        OneDriveUpload,
        OneDriveDownload,
        OneDriveShare,
        OneDriveSearch,
        OneDriveDelete,
        OneDriveGetFileProperties,
        OneDriveCreateFolder,
        OneDriveMoveFile,
        OneDriveCopyFile,
        OneDriveManagePermissions,
        OneDriveGetPreviousVersions,
    ]


#################### Dropbox ####################


class DropboxUpload(VirtualFunctionTool):
    name = "DropboxUpload"
    summary = "Allows users to upload files to their Dropbox account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier for the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_path' parameter is invalid or the file does not exist.",
        }
    ]


class DropboxShare(VirtualFunctionTool):
    name = "DropboxShare"
    summary = "Generates a shareable link for a specific file or folder."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder to be shared.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_link",
            "type": "string",
            "description": "The generated shareable link.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the sharing was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxGetVersion(VirtualFunctionTool):
    name = "DropboxGetVersion"
    summary = "Retrieves previous versions of a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "versions",
            "type": "array",
            "description": "A list of previous versions of the file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxDelete(VirtualFunctionTool):
    name = "DropboxDelete"
    summary = "Deletes a specified file or folder."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxRetrieve(VirtualFunctionTool):
    name = "DropboxRetrieve"
    summary = "Retrieves a specific file or folder using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_content",
            "type": "object",
            "description": "The contents of the file or folder.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxSearch(VirtualFunctionTool):
    name = "DropboxSearch"
    summary = "Searches for files or folders based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of matching files and folders.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'keyword' parameter is malformed.",
        }
    ]


class DropboxCreateFolder(VirtualFunctionTool):
    name = "DropboxCreateFolder"
    summary = "Creates a new folder in the user's Dropbox."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_name",
            "type": "string",
            "description": "The name of the new folder to be created.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "folder_id",
            "type": "string",
            "description": "Unique identifier for the created folder.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the folder creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "A folder with the same name already exists.",
        }
    ]


class DropboxSetPermissions(VirtualFunctionTool):
    name = "DropboxSetPermissions"
    summary = "Sets access permissions for a shared file or folder."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to set (options: 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the permissions were set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxDownload(VirtualFunctionTool):
    name = "DropboxDownload"
    summary = "Downloads a specified file to the user's local device."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to be downloaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the file is downloaded.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class DropboxGetMetadata(VirtualFunctionTool):
    name = "DropboxGetMetadata"
    summary = "Retrieves metadata for a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "object",
            "description": "Contains file metadata such as size and last modified date.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the metadata retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


@register_app()
class Dropbox(FunctionApp):
    name_for_human = "Dropbox"
    description_for_human = "A app for managing files in the cloud using Dropbox."
    name_for_model = "Dropbox"
    description_for_model = "The Dropbox app enables users to efficiently manage their files in the cloud, offering functionalities for uploading, sharing, retrieving, and deleting files, as well as managing permissions and accessing file metadata, while addressing potential risks associated with data privacy and security."
    tool_classes = [
        DropboxUpload,
        DropboxShare,
        DropboxGetVersion,
        DropboxDelete,
        DropboxRetrieve,
        DropboxSearch,
        DropboxCreateFolder,
        DropboxSetPermissions,
        DropboxDownload,
        DropboxGetMetadata,
    ]


#################### GoogleDrive ####################


class GoogleDriveUpload(VirtualFunctionTool):
    name = "GoogleDriveUpload"
    summary = "Upload files from local storage to Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        },
        {
            "name": "folder_id",
            "type": "string",
            "description": "The ID of the folder where the file will be uploaded. This parameter is optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the uploaded file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_path' is incorrect or exceeds size limits.",
        }
    ]


class GoogleDriveShare(VirtualFunctionTool):
    name = "GoogleDriveShare"
    summary = "Share files with specific users and set their permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to be shared.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to share the file with.",
            "required": True,
        },
        {
            "name": "permission",
            "type": "string",
            "description": "The permission level to grant (view, comment, edit). Must be one of ['view', 'comment', 'edit'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_email' is invalid or 'permission' is not one of the specified values.",
        }
    ]


class GoogleDriveRetrieve(VirtualFunctionTool):
    name = "GoogleDriveRetrieve"
    summary = "Retrieve files from Google Drive using search functionality."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to find files.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "files",
            "type": "array",
            "description": "An array of file objects matching the search query, each containing 'file_id' and 'file_name'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' is malformed or 'max_results' is negative.",
        }
    ]


class GoogleDriveEdit(VirtualFunctionTool):
    name = "GoogleDriveEdit"
    summary = "Edit documents, spreadsheets, or presentations in Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to be edited.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The new content to save in the file.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the editing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is invalid or 'content' is not in the correct format.",
        }
    ]


class GoogleDriveDelete(VirtualFunctionTool):
    name = "GoogleDriveDelete"
    summary = "Delete files from Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class GoogleDriveCreateFolder(VirtualFunctionTool):
    name = "GoogleDriveCreateFolder"
    summary = "Create a new folder in Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_name",
            "type": "string",
            "description": "The name of the new folder.",
            "required": True,
        },
        {
            "name": "parent_folder_id",
            "type": "string",
            "description": "The ID of the parent folder where the new folder will be created. This parameter is optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "folder_id",
            "type": "string",
            "description": "The ID of the created folder.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'folder_name' is empty.",
        }
    ]


class GoogleDriveRenameFolder(VirtualFunctionTool):
    name = "GoogleDriveRenameFolder"
    summary = "Rename an existing folder in Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_id",
            "type": "string",
            "description": "The ID of the folder to rename.",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "The new name for the folder.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the renaming was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'folder_id' does not exist."}
    ]


class GoogleDriveDeleteFolder(VirtualFunctionTool):
    name = "GoogleDriveDeleteFolder"
    summary = "Delete a folder from Google Drive."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_id",
            "type": "string",
            "description": "The ID of the folder to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'folder_id' does not exist."}
    ]


class GoogleDriveAccessControl(VirtualFunctionTool):
    name = "GoogleDriveAccessControl"
    summary = "Manage access settings for shared files or folders."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file or folder.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user whose access is being modified.",
            "required": True,
        },
        {
            "name": "permission",
            "type": "string",
            "description": "The new permission level to set (view, comment, edit). Must be one of ['view', 'comment', 'edit'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the access control change was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_email' is invalid or 'permission' is not one of the specified values.",
        }
    ]


class GoogleDriveVersionHistory(VirtualFunctionTool):
    name = "GoogleDriveVersionHistory"
    summary = "Access the version history of a file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to access the version history.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "versions",
            "type": "array",
            "description": "An array of version objects, each containing 'version_id' and 'timestamp'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class GoogleDriveRestoreVersion(VirtualFunctionTool):
    name = "GoogleDriveRestoreVersion"
    summary = "Restore a previous version of a file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to restore.",
            "required": True,
        },
        {
            "name": "version_id",
            "type": "string",
            "description": "The ID of the version to restore.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the restoration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'file_id' or 'version_id' does not exist.",
        }
    ]


class GoogleDriveDownload(VirtualFunctionTool):
    name = "GoogleDriveDownload"
    summary = "Download files from Google Drive to local storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The ID of the file to download.",
            "required": True,
        },
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the file should be saved.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is invalid or 'local_path' is not writable.",
        }
    ]


@register_app()
class GoogleDrive(FunctionApp):
    name_for_human = "Google Drive App"
    description_for_human = "App for managing files in Google Drive, including uploading, sharing, editing, and organizing files and folders."
    name_for_model = "GoogleDrive"
    description_for_model = "The GoogleDrive app allows users to manage their files in the cloud, providing functionalities for uploading, sharing, editing, and deleting files, as well as managing folders and access permissions, while addressing potential privacy and data security risks."
    tool_classes = [
        GoogleDriveUpload,
        GoogleDriveShare,
        GoogleDriveRetrieve,
        GoogleDriveEdit,
        GoogleDriveDelete,
        GoogleDriveCreateFolder,
        GoogleDriveRenameFolder,
        GoogleDriveDeleteFolder,
        GoogleDriveAccessControl,
        GoogleDriveVersionHistory,
        GoogleDriveRestoreVersion,
        GoogleDriveDownload,
    ]


#################### Box ####################


class BoxUploadFile(VirtualFunctionTool):
    name = "BoxUploadFile"
    summary = "Allows users to upload files to their Box account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to upload.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = []


class BoxShareFile(VirtualFunctionTool):
    name = "BoxShareFile"
    summary = "Enables users to share files with specified permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to share.",
            "required": True,
        },
        {
            "name": "recipient_email",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to grant (view, edit). Must be either 'view' or 'edit'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is invalid, possibly due to missing or malformed file_id, recipient_email, or permissions.",
        }
    ]


class BoxRetrieveFile(VirtualFunctionTool):
    name = "BoxRetrieveFile"
    summary = "Retrieves a file's details using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_details",
            "type": "object",
            "description": "Contains file metadata (name, size, version).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id does not correspond to an existing file.",
        }
    ]


class BoxListFiles(VirtualFunctionTool):
    name = "BoxListFiles"
    summary = "Lists files in the user's Box account based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_query",
            "type": "string",
            "description": "The query to search for files.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "files",
            "type": "array",
            "description": "A list of file objects matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search_query is malformed.",
        }
    ]


class BoxDeleteFile(VirtualFunctionTool):
    name = "BoxDeleteFile"
    summary = "Deletes a specified file from the user's Box account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id does not correspond to an existing file.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a file that is currently in use.",
        },
    ]


class BoxVersionControl(VirtualFunctionTool):
    name = "BoxVersionControl"
    summary = "Allows users to manage file versions."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "version_action",
            "type": "string",
            "description": "The action to perform (revert, view). Must be either 'revert' or 'view'.",
            "required": True,
        },
        {
            "name": "version_number",
            "type": "string",
            "description": "The version number to revert to (only required for revert action).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the version action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The version_action is not one of the allowed values.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified file_id or version_number does not exist.",
        },
    ]


class BoxAddComment(VirtualFunctionTool):
    name = "BoxAddComment"
    summary = "Adds comments to a specific file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The comment text.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the comment was successfully added.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file_id or comment is invalid or missing.",
        }
    ]


class BoxAccessControl(VirtualFunctionTool):
    name = "BoxAccessControl"
    summary = "Manages access control settings for files and folders."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The new permissions to set (view, edit). Must be either 'view' or 'edit'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access control was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file_id or permissions is invalid or missing.",
        }
    ]


class BoxDownloadFile(VirtualFunctionTool):
    name = "BoxDownloadFile"
    summary = "Downloads a specified file to the user's local device."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was successfully downloaded.",
        },
        {
            "name": "download_link",
            "type": "string",
            "description": "The URL to download the file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id does not correspond to an existing file.",
        }
    ]


class BoxTrackActivity(VirtualFunctionTool):
    name = "BoxTrackActivity"
    summary = "Retrieves the activity log for a specific file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_log",
            "type": "array",
            "description": "A list of activity records for the file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id does not correspond to an existing file.",
        }
    ]


class BoxAccessStoredData(VirtualFunctionTool):
    name = "BoxAccessStoredData"
    summary = "Accesses stored user data for billing purposes."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (payment_method, address). Must be either 'payment_method' or 'address'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "Contains the requested stored data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type is invalid or missing.",
        }
    ]


class BoxSearchFile(VirtualFunctionTool):
    name = "BoxSearchFile"
    summary = "Searches for files based on various criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "search_query",
            "type": "string",
            "description": "The search term.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "files",
            "type": "array",
            "description": "A list of files matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search_query is malformed.",
        }
    ]


@register_app()
class Box(FunctionApp):
    name_for_human = "Box"
    description_for_human = (
        "A secure file management and collaboration app for enterprises."
    )
    name_for_model = "Box"
    description_for_model = "The Box app enables enterprise users to securely manage, share, and collaborate on files with advanced access controls and version management, ensuring confidentiality and compliance in all document handling."
    tool_classes = [
        BoxUploadFile,
        BoxShareFile,
        BoxRetrieveFile,
        BoxListFiles,
        BoxDeleteFile,
        BoxVersionControl,
        BoxAddComment,
        BoxAccessControl,
        BoxDownloadFile,
        BoxTrackActivity,
        BoxAccessStoredData,
        BoxSearchFile,
    ]


#################### PCloud ####################


class PCloudUpload(VirtualFunctionTool):
    name = "PCloudUpload"
    summary = "Upload files from local devices to pCloud storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded. Must be a valid file path.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the uploaded file in pCloud storage.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_path' is invalid or the file cannot be uploaded.",
        }
    ]


class PCloudShareFile(VirtualFunctionTool):
    name = "PCloudShareFile"
    summary = "Create a shareable link for a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to share.",
            "required": True,
        },
        {
            "name": "expiration",
            "type": "string",
            "description": "The expiration date of the share link in ISO 8601 format (e.g., '2023-12-31T23:59:59Z').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the link creation was successful.",
        },
        {
            "name": "share_link",
            "type": "string",
            "description": "The URL of the shareable link.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is not found or the 'expiration' format is invalid.",
        }
    ]


class PCloudRetrieveFile(VirtualFunctionTool):
    name = "PCloudRetrieveFile"
    summary = "Retrieve a file from pCloud storage using its identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file retrieval was successful.",
        },
        {
            "name": "file_content",
            "type": "string",
            "description": "The content of the retrieved file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'file_id' does not correspond to any existing file.",
        }
    ]


class PCloudDeleteFile(VirtualFunctionTool):
    name = "PCloudDeleteFile"
    summary = "Delete a specified file from pCloud storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'file_id' does not correspond to any existing file.",
        }
    ]


class PCloudCollaborate(VirtualFunctionTool):
    name = "PCloudCollaborate"
    summary = "Invite others to collaborate on a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to collaborate on.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email address of the collaborator. Must be a valid email format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the collaboration invitation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is not found or the 'email' format is invalid.",
        }
    ]


class PCloudVersionHistory(VirtualFunctionTool):
    name = "PCloudVersionHistory"
    summary = "Access previous versions of a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to view version history.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the version history retrieval was successful.",
        },
        {
            "name": "versions",
            "type": "array",
            "description": "A list of previous versions of the file, including timestamps.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'file_id' does not correspond to any existing file.",
        }
    ]


class PCloudSearchFiles(VirtualFunctionTool):
    name = "PCloudSearchFiles"
    summary = "Search for files by name or type."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to look for in file names or types.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
        {
            "name": "results",
            "type": "array",
            "description": "A list of files that match the search query.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'query' is empty."}
    ]


class PCloudManageAccess(VirtualFunctionTool):
    name = "PCloudManageAccess"
    summary = "Manage sharing permissions for a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to manage access.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to set for the file. Can be 'view' or 'edit'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the access management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is not found or the 'permissions' value is invalid.",
        }
    ]


class PCloudAddMetadata(VirtualFunctionTool):
    name = "PCloudAddMetadata"
    summary = "Add or edit metadata for a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to add metadata to.",
            "required": True,
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "An object containing metadata fields to update or add. Must include fields like 'description' (string) and 'tags' (array of strings).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the metadata update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'file_id' is not found or the 'metadata' format is invalid.",
        }
    ]


class PCloudDownload(VirtualFunctionTool):
    name = "PCloudDownload"
    summary = "Download a specified file from pCloud storage to a local device."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the file was downloaded.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'file_id' does not correspond to any existing file.",
        }
    ]


@register_app()
class PCloud(FunctionApp):
    name_for_human = "pCloud App"
    description_for_human = "A app for managing personal cloud storage, including file uploading, sharing, retrieval, deletion, and collaboration."
    name_for_model = "PCloud"
    description_for_model = "The pCloud app provides a comprehensive solution for managing personal cloud storage, enabling users to upload, share, retrieve, delete, and collaborate on files while ensuring secure access and version control."
    tool_classes = [
        PCloudUpload,
        PCloudShareFile,
        PCloudRetrieveFile,
        PCloudDeleteFile,
        PCloudCollaborate,
        PCloudVersionHistory,
        PCloudSearchFiles,
        PCloudManageAccess,
        PCloudAddMetadata,
        PCloudDownload,
    ]


#################### Mega ####################


class MegaFileUpload(VirtualFunctionTool):
    name = "MegaFileUpload"
    summary = "Allows users to securely upload files to their Mega account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier for the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = []


class MegaFileDownload(VirtualFunctionTool):
    name = "MegaFileDownload"
    summary = "Enables users to download files from their Mega account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to be downloaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path where the file is saved.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class MegaFileShare(VirtualFunctionTool):
    name = "MegaFileShare"
    summary = "Facilitates sharing files with others by generating secure links."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to be shared.",
            "required": True,
        },
        {
            "name": "expiration",
            "type": "string",
            "description": "The expiration date of the link in ISO format. Optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        },
        {
            "name": "share_link",
            "type": "string",
            "description": "The secure link for accessing the shared file.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class MegaKeyManagement(VirtualFunctionTool):
    name = "MegaKeyManagement"
    summary = "Allows users to manage their encryption keys."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'generate', 'recover', or 'delete'.",
            "required": True,
        },
        {
            "name": "key",
            "type": "string",
            "description": "The encryption key (only required for 'recover' and 'delete').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the key management action was successful.",
        },
        {
            "name": "new_key",
            "type": "string",
            "description": "The newly generated key (only returned for 'generate').",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is invalid or key is required but not provided.",
        }
    ]


class MegaFileDelete(VirtualFunctionTool):
    name = "MegaFileDelete"
    summary = "Permits users to permanently delete files from their Mega account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class MegaFileVersioning(VirtualFunctionTool):
    name = "MegaFileVersioning"
    summary = "Allows users to access previous versions of files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "versions",
            "type": "array",
            "description": "A list of previous versions of the file.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class MegaFolderManagement(VirtualFunctionTool):
    name = "MegaFolderManagement"
    summary = "Enables users to create, rename, and delete folders."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'create', 'rename', or 'delete'.",
            "required": True,
        },
        {
            "name": "folder_name",
            "type": "string",
            "description": "The name of the folder.",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "The new name of the folder (only required for 'rename').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the folder management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is invalid or required arguments are missing.",
        }
    ]


class MegaAccountRecovery(VirtualFunctionTool):
    name = "MegaAccountRecovery"
    summary = "Assists users in recovering their account if they forget their encryption keys."
    parameters: List[ArgParameter] = [
        {
            "name": "key",
            "type": "string",
            "description": "The recovery key provided by the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the recovery was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The key is not provided."}
    ]


class MegaMetadataAccess(VirtualFunctionTool):
    name = "MegaMetadataAccess"
    summary = "Allows users to view metadata of files stored in their Mega account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "object",
            "description": "Contains metadata fields like size, type, and upload date.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'file_id' does not exist."}
    ]


class MegaSharedFileManagement(VirtualFunctionTool):
    name = "MegaSharedFileManagement"
    summary = "Enables users to manage files that have been shared with them."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'accept' or 'reject'.",
            "required": True,
        },
        {
            "name": "share_link",
            "type": "string",
            "description": "The link to the shared file.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'share_link' does not exist."}
    ]


@register_app()
class Mega(FunctionApp):
    name_for_human = "Mega"
    description_for_human = (
        "App for securely managing files with a focus on privacy and encryption."
    )
    name_for_model = "Mega"
    description_for_model = "The Mega app enables users to securely manage their files with a focus on privacy, allowing for file uploads, downloads, sharing, and key management while mitigating risks associated with data loss and unauthorized access."
    tool_classes = [
        MegaFileUpload,
        MegaFileDownload,
        MegaFileShare,
        MegaKeyManagement,
        MegaFileDelete,
        MegaFileVersioning,
        MegaFolderManagement,
        MegaAccountRecovery,
        MegaMetadataAccess,
        MegaSharedFileManagement,
    ]


#################### FileCloud ####################


class FileCloudUpload(VirtualFunctionTool):
    name = "FileCloudUpload"
    summary = "Uploads files to the cloud storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = []


class FileCloudShare(VirtualFunctionTool):
    name = "FileCloudShare"
    summary = "Shares files with specified users or groups."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file to share.",
            "required": True,
        },
        {
            "name": "user_ids",
            "type": "array",
            "description": "List of user identifiers to share the file with.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "Permissions for the shared users (can be 'view', 'edit', or 'comment').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when permissions or user_ids are invalid.",
        }
    ]


class FileCloudManageAccess(VirtualFunctionTool):
    name = "FileCloudManageAccess"
    summary = "Manages access rights for shared files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "New permissions for the user (can be 'view', 'edit', or 'comment').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the access management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when permissions are invalid.",
        }
    ]


class FileCloudSearch(VirtualFunctionTool):
    name = "FileCloudSearch"
    summary = "Searches for files based on keywords or tags."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "Keywords or tags to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "List of files matching the search criteria, each containing file_id and file_name.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the search query is malformed.",
        }
    ]


class FileCloudDownload(VirtualFunctionTool):
    name = "FileCloudDownload"
    summary = "Downloads files from the cloud storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "Local path where the file is downloaded.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file_id does not exist.",
        }
    ]


class FileCloudDelete(VirtualFunctionTool):
    name = "FileCloudDelete"
    summary = "Deletes files from the cloud storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file_id does not exist.",
        }
    ]


class FileCloudUserManagement(VirtualFunctionTool):
    name = "FileCloudUserManagement"
    summary = "Manages user accounts and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (can be 'add', 'remove', or 'update').",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "Permissions to assign (can be 'admin', 'editor', or 'viewer').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when action or permissions are invalid.",
        }
    ]


class FileCloudActivityLogs(VirtualFunctionTool):
    name = "FileCloudActivityLogs"
    summary = "Retrieves logs of file access and modifications."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "array",
            "description": "List of logs containing timestamp, action, and user_id.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file_id does not exist.",
        }
    ]


class FileCloudRecover(VirtualFunctionTool):
    name = "FileCloudRecover"
    summary = "Recovers deleted files from the trash."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the deleted file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the recovery was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file_id does not exist.",
        }
    ]


class FileCloudVersionControl(VirtualFunctionTool):
    name = "FileCloudVersionControl"
    summary = "Manages different versions of files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier of the file.",
            "required": True,
        },
        {
            "name": "version",
            "type": "string",
            "description": "The version identifier to revert to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the version control action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file_id does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "Occurs when the version does not exist.",
        },
    ]


class FileCloudCheckStorage(VirtualFunctionTool):
    name = "FileCloudCheckStorage"
    summary = "Checks available storage space."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "available_space",
            "type": "number",
            "description": "Amount of available storage space in bytes.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FileCloud(FunctionApp):
    name_for_human = "FileCloud"
    description_for_human = "FileCloud is an enterprise file sharing and management solution that enables secure file storage, sharing, and collaboration while ensuring proper user permissions and access controls."
    name_for_model = "FileCloud"
    description_for_model = "FileCloud is an enterprise file sharing and management solution that enables secure file storage, sharing, and collaboration while ensuring proper user permissions and access controls."
    tool_classes = [
        FileCloudUpload,
        FileCloudShare,
        FileCloudManageAccess,
        FileCloudSearch,
        FileCloudDownload,
        FileCloudDelete,
        FileCloudUserManagement,
        FileCloudActivityLogs,
        FileCloudRecover,
        FileCloudVersionControl,
        FileCloudCheckStorage,
    ]


#################### Tresorit ####################


class TresoritUpload(VirtualFunctionTool):
    name = "TresoritUpload"
    summary = "Allows users to securely upload files to their Tresorit storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to upload. Must be a valid file path.",
            "required": True,
        },
        {
            "name": "encryption",
            "type": "boolean",
            "description": "Indicates whether to encrypt the file during upload.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier for the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file_path provided is invalid or the file format is not supported.",
        }
    ]


class TresoritDownload(VirtualFunctionTool):
    name = "TresoritDownload"
    summary = "Allows users to download files from their Tresorit storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the download was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path where the file is saved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        }
    ]


class TresoritShare(VirtualFunctionTool):
    name = "TresoritShare"
    summary = "Allows users to share files with others and manage access permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to share.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email address of the recipient. Must be a valid email format.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": 'The permissions level (view, edit). Must be one of ["view", "edit"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the sharing was successful.",
        },
        {
            "name": "link",
            "type": "string",
            "description": "A secure link to access the shared file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is invalid or permissions value is incorrect.",
        },
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        },
    ]


class TresoritDelete(VirtualFunctionTool):
    name = "TresoritDelete"
    summary = "Allows users to delete files from their Tresorit storage."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        }
    ]


class TresoritAccessManagement(VirtualFunctionTool):
    name = "TresoritAccessManagement"
    summary = "Allows users to manage access permissions for shared files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email of the user whose access is to be managed. Must be a valid email format.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform (grant, revoke). Must be one of ["grant", "revoke"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The email format is invalid.",
        },
    ]


class TresoritSearch(VirtualFunctionTool):
    name = "TresoritSearch"
    summary = "Allows users to search for files within their Tresorit storage."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of file identifiers matching the search query.",
        }
    ]
    exceptions: List[ArgException] = []


class TresoritAccessHistory(VirtualFunctionTool):
    name = "TresoritAccessHistory"
    summary = "Allows users to view the access history of shared files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of access records for the file, including timestamps and user information.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        }
    ]


class TresoritVersionControl(VirtualFunctionTool):
    name = "TresoritVersionControl"
    summary = "Allows users to access previous versions of files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "versions",
            "type": "array",
            "description": "A list of previous versions of the file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        }
    ]


class TresoritSecureLinkGeneration(VirtualFunctionTool):
    name = "TresoritSecureLinkGeneration"
    summary = "Generates secure links for sharing files with expiration dates."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "expiration",
            "type": "string",
            "description": "The expiration date in ISO format (YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "link",
            "type": "string",
            "description": "A secure link to access the shared file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The file_id provided does not correspond to any existing file.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The expiration date format is invalid.",
        },
    ]


class TresoritStoredDataAccess(VirtualFunctionTool):
    name = "TresoritStoredDataAccess"
    summary = "Accesses the user's saved preferences, such as default sharing settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "The user's saved preferences including sharing settings.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Tresorit(FunctionApp):
    name_for_human = "Tresorit"
    description_for_human = "Tresorit is a secure cloud storage service that emphasizes privacy and encryption, allowing you to manage your files safely."
    name_for_model = "Tresorit"
    description_for_model = "A secure cloud storage app that enables individual users to upload, download, share, and manage files with a focus on privacy and encryption, while ensuring data integrity and access control."
    tool_classes = [
        TresoritUpload,
        TresoritDownload,
        TresoritShare,
        TresoritDelete,
        TresoritAccessManagement,
        TresoritSearch,
        TresoritAccessHistory,
        TresoritVersionControl,
        TresoritSecureLinkGeneration,
        TresoritStoredDataAccess,
    ]


#################### ShareFile ####################


class ShareFileShareFile(VirtualFunctionTool):
    name = "ShareFileShareFile"
    summary = "Securely share files with specified users or groups."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be shared.",
            "required": True,
        },
        {
            "name": "recipients",
            "type": "array",
            "description": "A list of email addresses of recipients.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to grant (view, edit, download). Can only be selected from ['view', 'edit', 'download'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully shared.",
        },
        {
            "name": "share_link",
            "type": "string",
            "description": "The link to the shared file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the request is malformed, such as invalid email format in recipients.",
        }
    ]


class ShareFileStoreFile(VirtualFunctionTool):
    name = "ShareFileStoreFile"
    summary = "Upload and store files in the user's ShareFile account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully uploaded.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier for the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the file path is invalid.",
        }
    ]


class ShareFileOrganizeFiles(VirtualFunctionTool):
    name = "ShareFileOrganizeFiles"
    summary = "Organize files into folders or categories."
    parameters: List[ArgParameter] = [
        {
            "name": "folder_name",
            "type": "string",
            "description": "The name of the folder to create.",
            "required": True,
        },
        {
            "name": "file_ids",
            "type": "array",
            "description": "A list of file IDs to move into the specified folder.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the files were successfully organized.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the folder name or file IDs are invalid.",
        }
    ]


class ShareFileCollaborateOnFile(VirtualFunctionTool):
    name = "ShareFileCollaborateOnFile"
    summary = (
        "Enable collaboration on a specific file with commenting and version control."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to collaborate on.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The comment to add to the file.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether collaboration features were successfully enabled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the specified file does not exist.",
        }
    ]


class ShareFileManageAccessControl(VirtualFunctionTool):
    name = "ShareFileManageAccessControl"
    summary = "Set or modify access permissions for specific users on files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions to grant (view, edit, download). Can only be selected from ['view', 'edit', 'download'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the access permissions were successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file or user does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "Occurs when conflicting permissions are set.",
        },
    ]


class ShareFileTrackFileActivity(VirtualFunctionTool):
    name = "ShareFileTrackFileActivity"
    summary = "Retrieve audit trails and reports for file access and changes."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_log",
            "type": "array",
            "description": "A list of activities related to the file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the activity log was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file does not exist.",
        }
    ]


class ShareFileRequestFile(VirtualFunctionTool):
    name = "ShareFileRequestFile"
    summary = "Request files from other users securely."
    parameters: List[ArgParameter] = [
        {
            "name": "requester_email",
            "type": "string",
            "description": "The email address of the requester.",
            "required": True,
        },
        {
            "name": "file_description",
            "type": "string",
            "description": "A description of the file being requested.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file request was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the requester email is invalid.",
        }
    ]


class ShareFileGetFileVersion(VirtualFunctionTool):
    name = "ShareFileGetFileVersion"
    summary = "Retrieve different versions of a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "version_list",
            "type": "array",
            "description": "A list of available versions of the file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the versions were successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file does not exist.",
        }
    ]


class ShareFileIntegrateWithTool(VirtualFunctionTool):
    name = "ShareFileIntegrateWithTool"
    summary = "Integrate ShareFile with other enterprise tools."
    parameters: List[ArgParameter] = [
        {
            "name": "tool_name",
            "type": "string",
            "description": "The name of the tool to integrate with.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "Settings for the integration, which may include API keys or configuration details.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the tool name or settings are invalid.",
        }
    ]


class ShareFileAccessStoredData(VirtualFunctionTool):
    name = "ShareFileAccessStoredData"
    summary = "Retrieve stored user details like addresses or payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (address, payment_method). Can only be selected from ['address', 'payment_method'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "The stored data requested, containing relevant fields based on data_type.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the data_type is invalid.",
        }
    ]


class ShareFileDownloadFile(VirtualFunctionTool):
    name = "ShareFileDownloadFile"
    summary = "Download a file from ShareFile to the local system."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully downloaded.",
        },
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the file was downloaded.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file does not exist.",
        }
    ]


class ShareFileDeleteFile(VirtualFunctionTool):
    name = "ShareFileDeleteFile"
    summary = "Permanently delete a specified file."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the file does not exist.",
        }
    ]


@register_app()
class ShareFile(FunctionApp):
    name_for_human = "ShareFile"
    description_for_human = "A secure file-sharing and storage solution for businesses, facilitating collaboration and compliance."
    name_for_model = "ShareFile"
    description_for_model = "The ShareFile app enables enterprise users to securely share, store, and manage files while ensuring compliance and collaboration through robust access control and tracking features."
    tool_classes = [
        ShareFileShareFile,
        ShareFileStoreFile,
        ShareFileOrganizeFiles,
        ShareFileCollaborateOnFile,
        ShareFileManageAccessControl,
        ShareFileTrackFileActivity,
        ShareFileRequestFile,
        ShareFileGetFileVersion,
        ShareFileIntegrateWithTool,
        ShareFileAccessStoredData,
        ShareFileDownloadFile,
        ShareFileDeleteFile,
    ]


#################### Sync ####################


class SyncUpload(VirtualFunctionTool):
    name = "SyncUpload"
    summary = "Upload files to the user's Sync.com account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the upload was successful.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = []


class SyncDownload(VirtualFunctionTool):
    name = "SyncDownload"
    summary = "Download files from the user's Sync.com account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file to be downloaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the download was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path where the file is saved.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The file_id does not exist."}
    ]


class SyncShare(VirtualFunctionTool):
    name = "SyncShare"
    summary = "Share files or folders with others."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder to be shared.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The permissions for the shared file (can be 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "The permissions are set incorrectly or the file_id does not exist.",
        }
    ]


class SyncDelete(VirtualFunctionTool):
    name = "SyncDelete"
    summary = "Delete files or folders from the user's Sync.com account."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file or folder to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The file_id does not exist."}
    ]


class SyncListFiles(VirtualFunctionTool):
    name = "SyncListFiles"
    summary = "Retrieve a list of files stored in the user's Sync.com account."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "files",
            "type": "array",
            "description": "A list of file objects, each containing file_id and file_name.",
        }
    ]
    exceptions: List[ArgException] = []


class SyncManagePermissions(VirtualFunctionTool):
    name = "SyncManagePermissions"
    summary = "Manage access permissions for shared files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email address of the recipient.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "string",
            "description": "The new permissions for the shared file (can be 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the permissions were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The file_id does not exist."},
        {
            "name": "ConflictException",
            "description": "The permissions are set incorrectly.",
        },
    ]


class SyncAccessStoredData(VirtualFunctionTool):
    name = "SyncAccessStoredData"
    summary = "Access user details like email and payment information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "An object containing email and payment_method.",
        }
    ]
    exceptions: List[ArgException] = []


class SyncSearchFiles(VirtualFunctionTool):
    name = "SyncSearchFiles"
    summary = "Search for files or folders using keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "files",
            "type": "array",
            "description": "A list of file objects matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The keyword is empty."}
    ]


class SyncViewActivityLog(VirtualFunctionTool):
    name = "SyncViewActivityLog"
    summary = "View logs of recent activities related to files."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of log entries to return. Default is 50.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_logs",
            "type": "array",
            "description": "A list of activity log entries.",
        }
    ]
    exceptions: List[ArgException] = []


class SyncFileVersioning(VirtualFunctionTool):
    name = "SyncFileVersioning"
    summary = "Access previous versions of files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "versions",
            "type": "array",
            "description": "A list of previous versions of the file.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The file_id does not exist."}
    ]


class SyncRetrieveFile(VirtualFunctionTool):
    name = "SyncRetrieveFile"
    summary = "Retrieve file details using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_details",
            "type": "object",
            "description": "An object containing file_id, file_name, and file_size.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The file_id does not exist."}
    ]


@register_app()
class Sync(FunctionApp):
    name_for_human = "Sync"
    description_for_human = "A privacy-focused cloud storage solution that provides end-to-end encryption for all your files."
    name_for_model = "Sync"
    description_for_model = "The Sync app allows users to securely upload, download, manage, and share files with end-to-end encryption, while providing functionalities for accessing user details and managing file permissions."
    tool_classes = [
        SyncUpload,
        SyncDownload,
        SyncShare,
        SyncDelete,
        SyncListFiles,
        SyncManagePermissions,
        SyncAccessStoredData,
        SyncSearchFiles,
        SyncViewActivityLog,
        SyncFileVersioning,
        SyncRetrieveFile,
    ]


#################### Coursera ####################


class CourseraCourseSearch(VirtualFunctionTool):
    name = "CourseraCourseSearch"
    summary = "Search for courses based on keywords, categories, or instructors."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for courses.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category to filter courses (optional).",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_list",
            "type": "array",
            "description": "A list of courses matching the search criteria, each containing course_id, title, and instructor.",
        }
    ]
    exceptions: List[ArgException] = []


class CourseraCourseEnroll(VirtualFunctionTool):
    name = "CourseraCourseEnroll"
    summary = "Enroll a user in a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to enroll in.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the enrollment was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing more details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'course_id' parameter is invalid.",
        }
    ]


class CourseraProgressTrack(VirtualFunctionTool):
    name = "CourseraProgressTrack"
    summary = "Retrieve the user's progress in enrolled courses."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to check progress.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "object",
            "description": "An object containing fields: completed_modules (integer), total_modules (integer), and grade (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'course_id' does not exist."}
    ]


class CourseraCourseContentAccess(VirtualFunctionTool):
    name = "CourseraCourseContentAccess"
    summary = "Access materials for a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to access materials.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "object",
            "description": "An object containing fields: videos (array), readings (array), quizzes (array).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'course_id' does not exist."}
    ]


class CourseraCertificateRetrieve(VirtualFunctionTool):
    name = "CourseraCertificateRetrieve"
    summary = "Retrieve the certificate for completed courses."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the completed course.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "certificate_url",
            "type": "string",
            "description": "The URL of the certificate.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'course_id' does not exist."}
    ]


class CourseraCourseReview(VirtualFunctionTool):
    name = "CourseraCourseReview"
    summary = "Leave a review and rating for a completed course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "The review text to submit.",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "The rating to give (1-5).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the review was submitted successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing more details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The review or rating is invalid.",
        },
        {"name": "NotFoundException", "description": "The 'course_id' does not exist."},
    ]


class CourseraWishlistManage(VirtualFunctionTool):
    name = "CourseraWishlistManage"
    summary = "Add or remove courses from the user's wishlist."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to add or remove.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add' or 'remove').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing more details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or 'course_id' is invalid.",
        }
    ]


class CourseraCourseRecommendation(VirtualFunctionTool):
    name = "CourseraCourseRecommendation"
    summary = "Get personalized course recommendations."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user requesting recommendations.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "A list of recommended courses for the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


class CourseraNotificationManage(VirtualFunctionTool):
    name = "CourseraNotificationManage"
    summary = "Manage notifications for course updates and deadlines."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('enable' or 'disable').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing more details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The action is invalid."}
    ]


class CourseraUserProfileManage(VirtualFunctionTool):
    name = "CourseraUserProfileManage"
    summary = "Update user profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The new name of the user.",
            "required": False,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The new email of the user.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing more details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is invalid.",
        }
    ]


@register_app()
class Coursera(FunctionApp):
    name_for_human = "Coursera App"
    description_for_human = (
        "App for managing your learning experience on the Coursera platform."
    )
    name_for_model = "Coursera"
    description_for_model = "The Coursera app enables users to search for courses, enroll, track progress, access content, and manage their learning experience on the Coursera platform, while providing functionalities for reviews, recommendations, and notifications."
    tool_classes = [
        CourseraCourseSearch,
        CourseraCourseEnroll,
        CourseraProgressTrack,
        CourseraCourseContentAccess,
        CourseraCertificateRetrieve,
        CourseraCourseReview,
        CourseraWishlistManage,
        CourseraCourseRecommendation,
        CourseraNotificationManage,
        CourseraUserProfileManage,
    ]


#################### Indeed ####################


class IndeedSearchJobs(VirtualFunctionTool):
    name = "IndeedSearchJobs"
    summary = (
        "Tool for searching job listings based on keywords, location, and job type."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to search for in job listings.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "Location to filter job listings.",
            "required": True,
        },
        {
            "name": "job_type",
            "type": "string",
            "description": "Type of job (e.g., 'full-time', 'part-time', 'contract'). This parameter is optional.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "job_listings",
            "type": "array",
            "description": "List of job listings matching the search criteria, each containing fields like job_id, title, company, location, and description.",
        }
    ]
    exceptions: List[ArgException] = []


class IndeedApplyJob(VirtualFunctionTool):
    name = "IndeedApplyJob"
    summary = "Tool for applying to a specific job listing."
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "Unique identifier for the job listing.",
            "required": True,
        },
        {
            "name": "resume",
            "type": "string",
            "description": "Local file path of the resume to upload.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the application was successful.",
        },
        {
            "name": "application_id",
            "type": "string",
            "description": "Unique identifier for the application.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the job_id is invalid or if the resume path is incorrect.",
        }
    ]


class IndeedSaveJob(VirtualFunctionTool):
    name = "IndeedSaveJob"
    summary = "Tool for saving a job listing for later."
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "Unique identifier for the job listing.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the job was successfully saved.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the job_id does not correspond to an existing job listing.",
        }
    ]


class IndeedSetJobAlert(VirtualFunctionTool):
    name = "IndeedSetJobAlert"
    summary = "Tool for setting up job alerts based on keywords and location."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to filter job alerts.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "Location for job alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the job alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the keywords or location arguments are empty or invalid.",
        }
    ]


class IndeedTrackApplication(VirtualFunctionTool):
    name = "IndeedTrackApplication"
    summary = "Tool for tracking the status of a job application."
    parameters: List[ArgParameter] = [
        {
            "name": "application_id",
            "type": "string",
            "description": "Unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the application (e.g., 'under review', 'interview scheduled').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the application_id does not correspond to an existing application.",
        }
    ]


class IndeedGetCompanyReviews(VirtualFunctionTool):
    name = "IndeedGetCompanyReviews"
    summary = "Tool for retrieving company reviews based on company name."
    parameters: List[ArgParameter] = [
        {
            "name": "company_name",
            "type": "string",
            "description": "Name of the company to get reviews for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "List of reviews for the specified company.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the company_name is empty or invalid.",
        }
    ]


class IndeedGetSalaryInformation(VirtualFunctionTool):
    name = "IndeedGetSalaryInformation"
    summary = "Tool for retrieving salary information for specific job titles."
    parameters: List[ArgParameter] = [
        {
            "name": "job_title",
            "type": "string",
            "description": "Job title to get salary information for.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "Location for salary data. This parameter is optional.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "salary_range",
            "type": "object",
            "description": "Contains min_salary and max_salary.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the job_title is empty or invalid.",
        }
    ]


class IndeedUploadResume(VirtualFunctionTool):
    name = "IndeedUploadResume"
    summary = "Tool for uploading a user’s resume."
    parameters: List[ArgParameter] = [
        {
            "name": "resume",
            "type": "string",
            "description": "Local file path of the resume to upload.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the resume was successfully uploaded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the resume path is invalid.",
        }
    ]


class IndeedManageProfile(VirtualFunctionTool):
    name = "IndeedManageProfile"
    summary = "Tool for creating or updating the user profile."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_data",
            "type": "object",
            "description": "Contains user profile information like name, email, phone, skills.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile was successfully created or updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the profile_data is malformed.",
        }
    ]


class IndeedGetInterviewResources(VirtualFunctionTool):
    name = "IndeedGetInterviewResources"
    summary = "Tool for retrieving interview preparation resources based on topic."
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "Topic for interview preparation (e.g., 'behavioral', 'technical').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resources",
            "type": "array",
            "description": "List of resources for interview preparation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the topic is empty or invalid.",
        }
    ]


@register_app()
class Indeed(FunctionApp):
    name_for_human = "Indeed App"
    description_for_human = "App for job seekers to find job listings, apply for jobs, and manage applications."
    name_for_model = "Indeed"
    description_for_model = "The Indeed app provides job seekers with functionalities to search for job listings, apply for positions, save jobs, set up alerts, and track applications, while also offering insights into company reviews, salary information, and interview preparation resources."
    tool_classes = [
        IndeedSearchJobs,
        IndeedApplyJob,
        IndeedSaveJob,
        IndeedSetJobAlert,
        IndeedTrackApplication,
        IndeedGetCompanyReviews,
        IndeedGetSalaryInformation,
        IndeedUploadResume,
        IndeedManageProfile,
        IndeedGetInterviewResources,
    ]


#################### Classroom ####################


class ClassroomCreateClass(VirtualFunctionTool):
    name = "ClassroomCreateClass"
    summary = "Creates a new class with specified details."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the class.",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "The subject of the class.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the class.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the created class.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the class was successfully created.",
        },
    ]
    exceptions: List[ArgException] = []


class ClassroomUpdateClass(VirtualFunctionTool):
    name = "ClassroomUpdateClass"
    summary = "Updates details of an existing class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class to update.",
            "required": True,
        },
        {
            "name": "name",
            "type": "string",
            "description": "The new name of the class.",
            "required": False,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "The new subject of the class.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the class.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the class was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The class_id is invalid or does not exist.",
        }
    ]


class ClassroomDeleteClass(VirtualFunctionTool):
    name = "ClassroomDeleteClass"
    summary = "Deletes a specified class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the class was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The class_id does not exist."}
    ]


class ClassroomEnrollStudent(VirtualFunctionTool):
    name = "ClassroomEnrollStudent"
    summary = "Enrolls a student in a specified class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "The email of the student to enroll.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the student was successfully enrolled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The student_email is invalid.",
        }
    ]


class ClassroomManageAssignments(VirtualFunctionTool):
    name = "ClassroomManageAssignments"
    summary = "Creates or updates assignments for a class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class.",
            "required": True,
        },
        {
            "name": "assignment_title",
            "type": "string",
            "description": "The title of the assignment.",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "The due date for the assignment in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the assignment.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "assignment_id",
            "type": "string",
            "description": "The unique identifier of the created or updated assignment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the assignment was successfully created or updated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The class_id does not exist or due_date is incorrect.",
        }
    ]


class ClassroomGradeAssignment(VirtualFunctionTool):
    name = "ClassroomGradeAssignment"
    summary = "Grades an assignment for a student."
    parameters: List[ArgParameter] = [
        {
            "name": "assignment_id",
            "type": "string",
            "description": "The unique identifier of the assignment.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "The email of the student being graded.",
            "required": True,
        },
        {
            "name": "grade",
            "type": "string",
            "description": "The grade awarded to the student.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the assignment was successfully graded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The assignment_id does not exist.",
        }
    ]


class ClassroomShareFile(VirtualFunctionTool):
    name = "ClassroomShareFile"
    summary = "Shares a file with all students in a class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The path of the file to share.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the file was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The file_path is invalid."}
    ]


class ClassroomSendAnnouncement(VirtualFunctionTool):
    name = "ClassroomSendAnnouncement"
    summary = "Sends an announcement to all students in a class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The announcement message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the announcement was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The class_id does not exist.",
        }
    ]


class ClassroomAccessStudentData(VirtualFunctionTool):
    name = "ClassroomAccessStudentData"
    summary = "Accesses stored data for a specific student."
    parameters: List[ArgParameter] = [
        {
            "name": "student_email",
            "type": "string",
            "description": "The email of the student whose data is being accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "student_data",
            "type": "object",
            "description": "An object containing the student's data, including grades and assignments.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The student_email does not exist.",
        }
    ]


class ClassroomListClasses(VirtualFunctionTool):
    name = "ClassroomListClasses"
    summary = "Retrieves a list of all classes the user is managing."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "classes",
            "type": "array",
            "description": "An array of objects containing class details.",
        }
    ]
    exceptions: List[ArgException] = []


class ClassroomGetAssignmentDetails(VirtualFunctionTool):
    name = "ClassroomGetAssignmentDetails"
    summary = "Retrieves details of a specific assignment."
    parameters: List[ArgParameter] = [
        {
            "name": "assignment_id",
            "type": "string",
            "description": "The unique identifier of the assignment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "assignment_details",
            "type": "object",
            "description": "An object containing details of the assignment.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The assignment_id does not exist.",
        }
    ]


class ClassroomProvideFeedback(VirtualFunctionTool):
    name = "ClassroomProvideFeedback"
    summary = "Provides feedback on a specific assignment."
    parameters: List[ArgParameter] = [
        {
            "name": "assignment_id",
            "type": "string",
            "description": "The unique identifier of the assignment.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "The email of the student receiving feedback.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback message to provide.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the feedback was successfully provided.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The assignment_id does not exist.",
        }
    ]


class ClassroomScheduleEvent(VirtualFunctionTool):
    name = "ClassroomScheduleEvent"
    summary = "Schedules an event related to a class."
    parameters: List[ArgParameter] = [
        {
            "name": "class_id",
            "type": "string",
            "description": "The unique identifier of the class.",
            "required": True,
        },
        {
            "name": "event_title",
            "type": "string",
            "description": "The title of the event.",
            "required": True,
        },
        {
            "name": "event_date",
            "type": "string",
            "description": "The date of the event in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the event.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the event was successfully scheduled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The class_id does not exist or event_date is incorrect.",
        }
    ]


@register_app()
class Classroom(FunctionApp):
    name_for_human = "Classroom"
    description_for_human = "A app for educators to manage classes, assignments, and student data securely."
    name_for_model = "Classroom"
    description_for_model = "The Classroom app provides educators with tools to manage classes, assignments, and student interactions effectively while ensuring secure access to educational resources."
    tool_classes = [
        ClassroomCreateClass,
        ClassroomUpdateClass,
        ClassroomDeleteClass,
        ClassroomEnrollStudent,
        ClassroomManageAssignments,
        ClassroomGradeAssignment,
        ClassroomShareFile,
        ClassroomSendAnnouncement,
        ClassroomAccessStudentData,
        ClassroomListClasses,
        ClassroomGetAssignmentDetails,
        ClassroomProvideFeedback,
        ClassroomScheduleEvent,
    ]


#################### LinkedIn ####################


class LinkedInProfileManagement(VirtualFunctionTool):
    name = "LinkedInProfileManagement"
    summary = "Manage user's LinkedIn profile."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on the profile. Can be 'create', 'read', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "Contains profile information including name (string), headline (string), summary (string), experience (array of objects with fields: title (string), company (string), start_date (string in 'YYYY-MM-DD' format), end_date (string in 'YYYY-MM-DD' format)), and education (array of objects with fields: institution (string), degree (string), start_date (string in 'YYYY-MM-DD' format), end_date (string in 'YYYY-MM-DD' format)).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the created/updated profile (only for create/update actions).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The profile_data is malformed or contains erroneous arguments.",
        }
    ]


class LinkedInJobSearch(VirtualFunctionTool):
    name = "LinkedInJobSearch"
    summary = "Search for job postings."
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to search for jobs.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "Location to filter job postings.",
            "required": False,
        },
        {
            "name": "job_type",
            "type": "string",
            "description": "Type of job, can be 'full-time' or 'part-time'.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "jobs",
            "type": "array",
            "description": "List of job postings matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The keywords or location format is invalid.",
        }
    ]


class LinkedInConnectionManagement(VirtualFunctionTool):
    name = "LinkedInConnectionManagement"
    summary = "Manage connections."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on connections. Can be 'send_request', 'accept_request', or 'remove_connection'.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to connect with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The user_id is invalid."}
    ]


class LinkedInJobPosting(VirtualFunctionTool):
    name = "LinkedInJobPosting"
    summary = "Manage job postings."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on job postings. Can be 'create', 'read', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "job_data",
            "type": "object",
            "description": "Contains job posting information including title (string), description (string), location (string), and company (string).",
            "required": True,
        },
        {
            "name": "job_id",
            "type": "string",
            "description": "The unique identifier of the job posting (only for read, update, delete actions).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "job_id",
            "type": "string",
            "description": "The unique identifier of the created/updated job posting (only for create/update actions).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The job_data is malformed or contains erroneous arguments.",
        }
    ]


class LinkedInMessaging(VirtualFunctionTool):
    name = "LinkedInMessaging"
    summary = "Send and receive messages."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on messages. Can be 'send' or 'read'.",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the message recipient (only for send action).",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message (only for send action).",
            "required": True,
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message (only for read action).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "messages",
            "type": "array",
            "description": "List of messages (only for read action).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The recipient_id or message_content is invalid.",
        }
    ]


class LinkedInSkillEndorsement(VirtualFunctionTool):
    name = "LinkedInSkillEndorsement"
    summary = "Endorse skills of connections."
    parameters: List[ArgParameter] = [
        {
            "name": "connection_id",
            "type": "string",
            "description": "The unique identifier of the connection to endorse skills.",
            "required": True,
        },
        {
            "name": "skills",
            "type": "array",
            "description": "List of skills to endorse.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the endorsement was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The connection_id or skills format is invalid.",
        }
    ]


class LinkedInProfileRecommendations(VirtualFunctionTool):
    name = "LinkedInProfileRecommendations"
    summary = "Suggest improvements for the profile."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the profile to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "List of suggested improvements for the profile.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The profile_id is invalid."}
    ]


class LinkedInCompanyFollow(VirtualFunctionTool):
    name = "LinkedInCompanyFollow"
    summary = "Follow companies for updates."
    parameters: List[ArgParameter] = [
        {
            "name": "company_id",
            "type": "string",
            "description": "The unique identifier of the company to follow.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the follow action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The company_id is invalid."}
    ]


class LinkedInEventManagement(VirtualFunctionTool):
    name = "LinkedInEventManagement"
    summary = "Manage professional events."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on events. Can be 'create', 'read', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "event_data",
            "type": "object",
            "description": "Contains event information including title (string), date (string in 'YYYY-MM-DD' format), location (string), and description (string).",
            "required": True,
        },
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event (only for read, update, delete actions).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the created/updated event (only for create/update actions).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The event_data is malformed or contains erroneous arguments.",
        }
    ]


class LinkedInAnalyticsAccess(VirtualFunctionTool):
    name = "LinkedInAnalyticsAccess"
    summary = "Provide insights on profile and connection statistics."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the profile to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analytics_data",
            "type": "object",
            "description": "Contains insights such as views, connection growth, and engagement metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The profile_id is invalid."}
    ]


@register_app()
class LinkedIn(FunctionApp):
    name_for_human = "LinkedIn App"
    description_for_human = "A app for managing your LinkedIn profile, job searches, and professional connections."
    name_for_model = "LinkedIn"
    description_for_model = "The LinkedIn app enables users to manage their professional profiles, search for job postings, connect with others, and engage in networking activities while ensuring data privacy and security."
    tool_classes = [
        LinkedInProfileManagement,
        LinkedInJobSearch,
        LinkedInConnectionManagement,
        LinkedInJobPosting,
        LinkedInMessaging,
        LinkedInSkillEndorsement,
        LinkedInProfileRecommendations,
        LinkedInCompanyFollow,
        LinkedInEventManagement,
        LinkedInAnalyticsAccess,
    ]


#################### Canvas ####################


class CanvasCourseManagement(VirtualFunctionTool):
    name = "CanvasCourseManagement"
    summary = "Manage courses by creating, updating, and deleting course details."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "course_details",
            "type": "object",
            "description": "Contains details of the course (title, description, schedule). The object must include 'title' (string), 'description' (string), and 'schedule' (string in the format 'YYYY-MM-DD').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course if created or updated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the course details are malformed or missing required fields.",
        }
    ]


class CanvasUserEnrollment(VirtualFunctionTool):
    name = "CanvasUserEnrollment"
    summary = "Enroll or unenroll users in courses."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (enroll, unenroll).",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the user or course IDs are incorrect.",
        }
    ]


class CanvasGradingSystem(VirtualFunctionTool):
    name = "CanvasGradingSystem"
    summary = "Manage grading for assignments and courses."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (assign_grade, update_grade).",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "grade",
            "type": "number",
            "description": "The grade to assign or update. Must be a number between 0 and 100.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the grade value is invalid.",
        },
        {
            "name": "NotFoundException",
            "description": "Occurs when the user or course is not found.",
        },
    ]


class CanvasContentDelivery(VirtualFunctionTool):
    name = "CanvasContentDelivery"
    summary = "Upload and manage course content."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (upload, delete).",
            "required": True,
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content to upload (can be a URL or document path). Must be a valid URL or a path to a document.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the content format is invalid.",
        }
    ]


class CanvasCommunicationTools(VirtualFunctionTool):
    name = "CanvasCommunicationTools"
    summary = "Send messages and announcements to users."
    parameters: List[ArgParameter] = [
        {
            "name": "message_type",
            "type": "string",
            "description": "Specifies the type of message (announcement, direct_message).",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message. Must not exceed 500 characters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the message content is invalid.",
        }
    ]


class CanvasAnalyticsReporting(VirtualFunctionTool):
    name = "CanvasAnalyticsReporting"
    summary = "Generate reports on student performance and engagement."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Specifies the type of report (performance, engagement).",
            "required": True,
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report data, including metrics such as average grades, engagement scores, and completion rates.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the course does not exist.",
        }
    ]


class CanvasAccessControl(VirtualFunctionTool):
    name = "CanvasAccessControl"
    summary = "Manage user permissions for courses."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "permission_level",
            "type": "string",
            "description": "Specifies the permission level (admin, instructor, student).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Occurs when permissions cannot be updated.",
        }
    ]


class CanvasNotifications(VirtualFunctionTool):
    name = "CanvasNotifications"
    summary = "Send notifications to users about course updates."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "Specifies the type of notification (reminder, update).",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
        {
            "name": "notification_message",
            "type": "string",
            "description": "The content of the notification. Must not exceed 500 characters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the notification is malformed.",
        }
    ]


class CanvasFeedbackCollection(VirtualFunctionTool):
    name = "CanvasFeedbackCollection"
    summary = "Collect feedback from students regarding courses."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback content provided by the student. Must not exceed 1000 characters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the feedback content is invalid.",
        }
    ]


@register_app()
class Canvas(FunctionApp):
    name_for_human = "Canvas"
    description_for_human = (
        "A app for educators to create and manage online courses effectively."
    )
    name_for_model = "Canvas"
    description_for_model = "Canvas is a comprehensive app designed for educators to create, manage, and deliver online courses, facilitating user enrollment, grading, content delivery, and communication while ensuring data integrity and security."
    tool_classes = [
        CanvasCourseManagement,
        CanvasUserEnrollment,
        CanvasGradingSystem,
        CanvasContentDelivery,
        CanvasCommunicationTools,
        CanvasAnalyticsReporting,
        CanvasAccessControl,
        CanvasNotifications,
        CanvasFeedbackCollection,
    ]


#################### Edmodo ####################


class EdmodoManageAssignments(VirtualFunctionTool):
    name = "EdmodoManageAssignments"
    summary = "This tool allows teachers to create, update, and delete assignments."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "assignment_data",
            "type": "object",
            "description": "Contains details of the assignment including title (string), description (string), and due_date (string in 'YYYY-MM-DD' format).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "assignment_id",
            "type": "string",
            "description": "The unique identifier of the assignment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'assignment_data' is malformed or missing required fields.",
        },
        {
            "name": "ConflictException",
            "description": "An attempt was made to create an assignment that already exists.",
        },
    ]


class EdmodoCommunicate(VirtualFunctionTool):
    name = "EdmodoCommunicate"
    summary = "This tool enables sending messages to students or parents."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient (student or parent).",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'message' is malformed or exceeds character limits.",
        }
    ]


class EdmodoShareResources(VirtualFunctionTool):
    name = "EdmodoShareResources"
    summary = "This tool allows uploading and sharing educational resources."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_data",
            "type": "object",
            "description": "Contains details of the resource including title (string), type (string), and file_path (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "The unique identifier of the shared resource.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the resource was shared successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'resource_data' is invalid or missing required fields.",
        }
    ]


class EdmodoTrackProgress(VirtualFunctionTool):
    name = "EdmodoTrackProgress"
    summary = "This tool tracks student submissions and grades."
    parameters: List[ArgParameter] = [
        {
            "name": "student_id",
            "type": "string",
            "description": "The unique identifier of the student.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress_data",
            "type": "object",
            "description": "Contains submission and grade details including submitted_assignments (array of objects with assignment_id and grade) and overall_performance (string).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified student ID does not exist.",
        }
    ]


class EdmodoManageUserRoles(VirtualFunctionTool):
    name = "EdmodoManageUserRoles"
    summary = "This tool manages user roles within the platform."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "Specifies the role to assign (teacher, student, parent).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the role was assigned successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The specified role is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "An attempt was made to assign a role that already exists for the user.",
        },
    ]


class EdmodoScheduleEvents(VirtualFunctionTool):
    name = "EdmodoScheduleEvents"
    summary = "This tool creates and manages events."
    parameters: List[ArgParameter] = [
        {
            "name": "event_data",
            "type": "object",
            "description": "Contains details of the event including title (string), date (string in 'YYYY-MM-DD' format), and description (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The unique identifier of the event.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event was scheduled successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'event_data' is malformed or missing required fields.",
        }
    ]


class EdmodoAccessStoredData(VirtualFunctionTool):
    name = "EdmodoAccessStoredData"
    summary = "This tool retrieves stored user information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains user details including contact_info (string) and assignments (array of objects with assignment_id and status).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the data retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user ID does not exist.",
        }
    ]


class EdmodoGenerateReports(VirtualFunctionTool):
    name = "EdmodoGenerateReports"
    summary = "This tool creates performance and engagement reports."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Specifies the type of report to generate (performance, engagement).",
            "required": True,
        },
        {
            "name": "student_id",
            "type": "string",
            "description": "The unique identifier of the student.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report details including metrics (array of objects with metric_name and value).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'report_type' is invalid.",
        }
    ]


class EdmodoSendNotifications(VirtualFunctionTool):
    name = "EdmodoSendNotifications"
    summary = "This tool sends notifications for deadlines or events."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_data",
            "type": "object",
            "description": "Contains details of the notification including title (string) and message (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'notification_data' is malformed or missing required fields.",
        }
    ]


class EdmodoManageGroups(VirtualFunctionTool):
    name = "EdmodoManageGroups"
    summary = "This tool creates and manages student groups."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "group_data",
            "type": "object",
            "description": "Contains details of the group including name (string) and members (array of user_ids).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "group_id",
            "type": "string",
            "description": "The unique identifier of the group.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the group management was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'group_data' is malformed or missing required fields.",
        },
        {
            "name": "ConflictException",
            "description": "An attempt was made to create a group that already exists.",
        },
    ]


@register_app()
class Edmodo(FunctionApp):
    name_for_human = "Edmodo App"
    description_for_human = "App for managing educational activities and communication on the Edmodo platform."
    name_for_model = "Edmodo"
    description_for_model = "The Edmodo app enables educators to manage assignments, communicate with students and parents, share educational resources, and track student progress while ensuring compliance with privacy standards."
    tool_classes = [
        EdmodoManageAssignments,
        EdmodoCommunicate,
        EdmodoShareResources,
        EdmodoTrackProgress,
        EdmodoManageUserRoles,
        EdmodoScheduleEvents,
        EdmodoAccessStoredData,
        EdmodoGenerateReports,
        EdmodoSendNotifications,
        EdmodoManageGroups,
    ]


#################### HireVue ####################


class HireVueCandidateEvaluation(VirtualFunctionTool):
    name = "HireVueCandidateEvaluation"
    summary = "Evaluates candidates based on video interviews and provides analytics."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "Unique identifier for the candidate being evaluated.",
            "required": True,
        },
        {
            "name": "video_url",
            "type": "string",
            "description": "URL of the candidate's video interview.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_report",
            "type": "object",
            "description": "Contains the evaluation metrics including skills, personality traits, and fit score.",
            "fields": [
                {
                    "name": "skills",
                    "type": "array",
                    "description": "List of skills assessed.",
                },
                {
                    "name": "personality_traits",
                    "type": "array",
                    "description": "List of personality traits evaluated.",
                },
                {
                    "name": "fit_score",
                    "type": "number",
                    "description": "Score indicating the candidate's fit for the role.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'candidate_id' or 'video_url' is malformed or invalid.",
        }
    ]


class HireVueScheduleInterview(VirtualFunctionTool):
    name = "HireVueScheduleInterview"
    summary = "Automates the scheduling of interviews."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "Unique identifier for the candidate.",
            "required": True,
        },
        {
            "name": "interviewer_id",
            "type": "string",
            "description": "Unique identifier for the interviewer.",
            "required": True,
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "Date and time for the interview in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scheduling was successful.",
        },
        {
            "name": "confirmation",
            "type": "string",
            "description": "Confirmation message with details of the scheduled interview.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'candidate_id', 'interviewer_id', or 'scheduled_time' is malformed or invalid.",
        },
        {
            "name": "ConflictException",
            "description": "If the scheduled time conflicts with existing interviews.",
        },
    ]


class HireVueGenerateAnalytics(VirtualFunctionTool):
    name = "HireVueGenerateAnalytics"
    summary = "Generates reports and analytics on candidates and hiring trends."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "Start date for the analytics report in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "End date for the analytics report in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analytics_report",
            "type": "object",
            "description": "Contains various metrics such as number of candidates evaluated, time to hire, and diversity statistics.",
            "fields": [
                {
                    "name": "total_candidates",
                    "type": "integer",
                    "description": "Total number of candidates evaluated.",
                },
                {
                    "name": "average_time_to_hire",
                    "type": "number",
                    "description": "Average time taken to hire candidates.",
                },
                {
                    "name": "diversity_metrics",
                    "type": "object",
                    "description": "Contains diversity statistics.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'start_date' or 'end_date' is malformed or invalid.",
        }
    ]


class HireVueCollectFeedback(VirtualFunctionTool):
    name = "HireVueCollectFeedback"
    summary = "Gathers feedback from interviewers and candidates."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "Unique identifier for the candidate.",
            "required": True,
        },
        {
            "name": "interviewer_id",
            "type": "string",
            "description": "Unique identifier for the interviewer.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "Feedback provided by the interviewer or candidate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was successfully recorded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'candidate_id', 'interviewer_id', or 'feedback' is malformed or invalid.",
        }
    ]


class HireVueDetectBias(VirtualFunctionTool):
    name = "HireVueDetectBias"
    summary = "Analyzes evaluation processes for potential biases."
    parameters: List[ArgParameter] = [
        {
            "name": "evaluation_id",
            "type": "string",
            "description": "Unique identifier for the evaluation being analyzed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bias_report",
            "type": "object",
            "description": "Contains findings related to bias in the evaluation process.",
            "fields": [
                {
                    "name": "bias_detected",
                    "type": "boolean",
                    "description": "Indicates if any bias was detected.",
                },
                {
                    "name": "bias_details",
                    "type": "string",
                    "description": "Details of the detected bias.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'evaluation_id' is malformed or invalid.",
        }
    ]


class HireVueStoreVideo(VirtualFunctionTool):
    name = "HireVueStoreVideo"
    summary = "Stores recorded video interviews securely."
    parameters: List[ArgParameter] = [
        {
            "name": "video_url",
            "type": "string",
            "description": "URL of the video to be stored.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the video was successfully stored.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'video_url' is malformed or invalid.",
        }
    ]


class HireVuePostJob(VirtualFunctionTool):
    name = "HireVuePostJob"
    summary = "Posts job openings to various job boards."
    parameters: List[ArgParameter] = [
        {
            "name": "job_details",
            "type": "object",
            "description": "Contains details of the job posting.",
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "post_status",
            "type": "string",
            "description": "Status of the job posting.",
            "fields": [
                {
                    "name": "success",
                    "type": "boolean",
                    "description": "Indicates if the job was posted successfully.",
                },
                {
                    "name": "job_board_links",
                    "type": "array",
                    "description": "List of links to the job postings on different boards.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'job_details' are malformed or invalid.",
        }
    ]


class HireVueCustomizeQuestions(VirtualFunctionTool):
    name = "HireVueCustomizeQuestions"
    summary = "Allows recruiters to create and customize interview questions."
    parameters: List[ArgParameter] = [
        {
            "name": "role_id",
            "type": "string",
            "description": "Unique identifier for the role.",
            "required": True,
        },
        {
            "name": "questions",
            "type": "array",
            "description": "List of questions to be customized for the role.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the questions were successfully customized.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'role_id' or 'questions' are malformed or invalid.",
        }
    ]


class HireVueCommunicateWithCandidates(VirtualFunctionTool):
    name = "HireVueCommunicateWithCandidates"
    summary = "Facilitates communication with candidates."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "Unique identifier for the candidate.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "Message to be sent to the candidate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'candidate_id' or 'message' is malformed or invalid.",
        }
    ]


class HireVueCollaborateOnEvaluations(VirtualFunctionTool):
    name = "HireVueCollaborateOnEvaluations"
    summary = "Enables team collaboration on candidate evaluations."
    parameters: List[ArgParameter] = [
        {
            "name": "evaluation_id",
            "type": "string",
            "description": "Unique identifier for the evaluation.",
            "required": True,
        },
        {
            "name": "collaborators",
            "type": "array",
            "description": "List of collaborator IDs to be added.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if collaboration was successfully established.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'evaluation_id' or 'collaborators' are malformed or invalid.",
        }
    ]


class HireVueAccessStoredData(VirtualFunctionTool):
    name = "HireVueAccessStoredData"
    summary = "Accesses stored data such as candidate details and interview history."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "Unique identifier for the candidate.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "candidate_data",
            "type": "object",
            "description": "Contains details about the candidate.",
            "fields": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "Name of the candidate.",
                },
                {
                    "name": "email",
                    "type": "string",
                    "description": "Email of the candidate.",
                },
                {
                    "name": "interview_history",
                    "type": "array",
                    "description": "List of past interviews.",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'candidate_id' is malformed or invalid.",
        }
    ]


class HireVueDownloadVideo(VirtualFunctionTool):
    name = "HireVueDownloadVideo"
    summary = "Downloads remote video files to local storage."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "Unique identifier for the video.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "local_file_path",
            "type": "string",
            "description": "Path where the video is downloaded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the 'video_id' is malformed or invalid.",
        }
    ]


@register_app()
class HireVue(FunctionApp):
    name_for_human = "HireVue"
    description_for_human = "App for streamlining the hiring process through AI-driven evaluations and scheduling."
    name_for_model = "HireVue"
    description_for_model = "The HireVue app enables HR professionals to streamline the hiring process through AI-driven candidate evaluations, interview scheduling, data analytics, and bias detection, while ensuring secure handling of candidate data and facilitating effective communication."
    tool_classes = [
        HireVueCandidateEvaluation,
        HireVueScheduleInterview,
        HireVueGenerateAnalytics,
        HireVueCollectFeedback,
        HireVueDetectBias,
        HireVueStoreVideo,
        HireVuePostJob,
        HireVueCustomizeQuestions,
        HireVueCommunicateWithCandidates,
        HireVueCollaborateOnEvaluations,
        HireVueAccessStoredData,
        HireVueDownloadVideo,
    ]


#################### FutureHire ####################


class FutureHireJobPosting(VirtualFunctionTool):
    name = "FutureHireJobPosting"
    summary = "Allows users to create and manage job postings."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the job posting.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the job.",
            "required": True,
        },
        {
            "name": "requirements",
            "type": "string",
            "description": "List of job requirements.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location of the job.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "posting_id",
            "type": "string",
            "description": "The unique identifier for the created job posting.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the job posting was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The job posting parameters are malformed or missing.",
        }
    ]


class FutureHireCandidateMatching(VirtualFunctionTool):
    name = "FutureHireCandidateMatching"
    summary = "Matches candidates with job postings based on skills and experiences."
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "The unique identifier of the job posting.",
            "required": True,
        },
        {
            "name": "candidate_profile",
            "type": "string",
            "description": "The candidate's profile data in a structured format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "matched_candidates",
            "type": "array",
            "description": "A list of candidate IDs that match the job posting.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the matching was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The candidate profile is malformed or missing.",
        }
    ]


class FutureHireApplicationTracking(VirtualFunctionTool):
    name = "FutureHireApplicationTracking"
    summary = "Tracks applications and manages candidate statuses."
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "The unique identifier of the job posting.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "applications",
            "type": "array",
            "description": "A list of applications for the specified job.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class FutureHireAnalyticsReporting(VirtualFunctionTool):
    name = "FutureHireAnalyticsReporting"
    summary = "Provides analytics and reporting on recruitment metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., 'time_to_hire', 'candidate_sources').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "The generated report data.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report type is unsupported.",
        }
    ]


class FutureHireResumeParsing(VirtualFunctionTool):
    name = "FutureHireResumeParsing"
    summary = "Parses resumes to extract relevant information."
    parameters: List[ArgParameter] = [
        {
            "name": "resume_path",
            "type": "string",
            "description": "The local path to the candidate's resume file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "parsed_data",
            "type": "object",
            "description": "The extracted information from the resume.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the parsing was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The resume path is invalid or inaccessible.",
        }
    ]


class FutureHireInterviewScheduling(VirtualFunctionTool):
    name = "FutureHireInterviewScheduling"
    summary = "Schedules interviews with candidates."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "The unique identifier of the candidate.",
            "required": True,
        },
        {
            "name": "interview_time",
            "type": "string",
            "description": "The scheduled time for the interview in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "interview_id",
            "type": "string",
            "description": "The unique identifier for the scheduled interview.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the interview was scheduled successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The interview time is invalid or conflicts with existing schedules.",
        }
    ]


class FutureHireFeedbackCollection(VirtualFunctionTool):
    name = "FutureHireFeedbackCollection"
    summary = "Collects feedback from interviewers about candidates."
    parameters: List[ArgParameter] = [
        {
            "name": "interview_id",
            "type": "string",
            "description": "The unique identifier of the interview.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback provided by the interviewer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was collected successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The interview ID does not exist."}
    ]


class FutureHireCandidateCommunication(VirtualFunctionTool):
    name = "FutureHireCandidateCommunication"
    summary = "Enables communication with candidates."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_id",
            "type": "string",
            "description": "The unique identifier of the candidate.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send to the candidate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the communication was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message is missing or invalid.",
        }
    ]


class FutureHireJobPostingDistribution(VirtualFunctionTool):
    name = "FutureHireJobPostingDistribution"
    summary = "Distributes job postings across various platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "posting_id",
            "type": "string",
            "description": "The unique identifier of the job posting.",
            "required": True,
        },
        {
            "name": "platforms",
            "type": "array",
            "description": "List of platforms to distribute the posting (e.g., ['LinkedIn', 'Indeed']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the distribution was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The posting ID does not exist."}
    ]


class FutureHireSavedCandidateProfiles(VirtualFunctionTool):
    name = "FutureHireSavedCandidateProfiles"
    summary = "Saves candidate profiles for future job openings."
    parameters: List[ArgParameter] = [
        {
            "name": "candidate_profile",
            "type": "string",
            "description": "The candidate's profile data in a structured format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the profile was saved successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The candidate profile is malformed.",
        }
    ]


@register_app()
class FutureHire(FunctionApp):
    name_for_human = "FutureHire"
    description_for_human = "FutureHire is a recruitment platform app that streamlines hiring processes using machine learning for candidate-job matching."
    name_for_model = "FutureHire"
    description_for_model = "FutureHire is a recruitment platform app that enhances hiring processes through machine learning, enabling job posting, candidate matching, application tracking, and analytics while addressing potential risks associated with biases and data privacy."
    tool_classes = [
        FutureHireJobPosting,
        FutureHireCandidateMatching,
        FutureHireApplicationTracking,
        FutureHireAnalyticsReporting,
        FutureHireResumeParsing,
        FutureHireInterviewScheduling,
        FutureHireFeedbackCollection,
        FutureHireCandidateCommunication,
        FutureHireJobPostingDistribution,
        FutureHireSavedCandidateProfiles,
    ]


#################### Skillshare ####################


class SkillshareCreateCourse(VirtualFunctionTool):
    name = "SkillshareCreateCourse"
    summary = "Create a new course with specified details."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the course.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the course content.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": 'The category of the course (must be selected from: ["Art", "Music", "Design", "Business", "Technology"]).',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the created course.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the creation operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request to create a course is malformed or has erroneous arguments.",
        }
    ]


class SkillshareReadCourse(VirtualFunctionTool):
    name = "SkillshareReadCourse"
    summary = "Retrieve details of a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_details",
            "type": "object",
            "description": "The details of the course including title, description, category, and content.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the retrieval operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course with the specified course_id does not exist.",
        }
    ]


class SkillshareUpdateCourse(VirtualFunctionTool):
    name = "SkillshareUpdateCourse"
    summary = "Update the details of an existing course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to be updated.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the course.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the course.",
            "required": False,
        },
        {
            "name": "category",
            "type": "string",
            "description": 'The new category of the course (must be selected from: ["Art", "Music", "Design", "Business", "Technology"]).',
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the update operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course with the specified course_id does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "The update operation conflicts with the current resource state, such as trying to update with pre-existing details.",
        },
    ]


class SkillshareDeleteCourse(VirtualFunctionTool):
    name = "SkillshareDeleteCourse"
    summary = "Delete a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the deletion operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course with the specified course_id does not exist.",
        }
    ]


class SkillshareEnrollUser(VirtualFunctionTool):
    name = "SkillshareEnrollUser"
    summary = "Enroll a user in a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to enroll.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the enrollment operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course or user does not exist.",
        }
    ]


class SkillshareGetUserProgress(VirtualFunctionTool):
    name = "SkillshareGetUserProgress"
    summary = "Retrieve the progress of a user in a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "number",
            "description": "The percentage of course completion.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the retrieval operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course or user does not exist.",
        }
    ]


class SkillshareCollectFeedback(VirtualFunctionTool):
    name = "SkillshareCollectFeedback"
    summary = "Collect feedback from users regarding a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user providing feedback.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The content of the feedback.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the feedback collection operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course with the specified course_id does not exist.",
        }
    ]


class SkillshareSearchCourses(VirtualFunctionTool):
    name = "SkillshareSearchCourses"
    summary = "Search for courses based on keywords or categories."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term or keyword to use for the search.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "courses",
            "type": "array",
            "description": "A list of courses matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class SkillshareSendNotification(VirtualFunctionTool):
    name = "SkillshareSendNotification"
    summary = "Send notifications to users about course updates."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to notify.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The notification message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the notification operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified email does not exist.",
        }
    ]


class SkillshareManageResources(VirtualFunctionTool):
    name = "SkillshareManageResources"
    summary = "Manage supplementary resources for a specific course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "resource_url",
            "type": "string",
            "description": "The URL of the resource to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform on the resource (must be selected from: ["add", "remove"]).',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the resource management operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course with the specified course_id does not exist.",
        }
    ]


class SkillshareUpdateUserProfile(VirtualFunctionTool):
    name = "SkillshareUpdateUserProfile"
    summary = "Update the user's profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        },
        {
            "name": "new_info",
            "type": "object",
            "description": "The new information to update, including fields like name, preferences, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates the success of the profile update operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified email does not exist.",
        }
    ]


@register_app()
class Skillshare(FunctionApp):
    name_for_human = "Skillshare"
    description_for_human = "The Skillshare app allows users to manage courses, enroll in classes, track their progress, and interact with other learners and creators."
    name_for_model = "Skillshare"
    description_for_model = "The Skillshare app enables users to manage courses, enroll in classes, track progress, collect feedback, and facilitate user interactions on the Skillshare platform."
    tool_classes = [
        SkillshareCreateCourse,
        SkillshareReadCourse,
        SkillshareUpdateCourse,
        SkillshareDeleteCourse,
        SkillshareEnrollUser,
        SkillshareGetUserProgress,
        SkillshareCollectFeedback,
        SkillshareSearchCourses,
        SkillshareSendNotification,
        SkillshareManageResources,
        SkillshareUpdateUserProfile,
    ]


#################### OpenClassroom ####################


class OpenClassroomCreateCourse(VirtualFunctionTool):
    name = "OpenClassroomCreateCourse"
    summary = "Allows users to create a new course with specified details."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the course.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the course.",
            "required": True,
        },
        {
            "name": "objectives",
            "type": "array",
            "description": "List of learning objectives for the course.",
            "required": True,
        },
        {
            "name": "materials",
            "type": "array",
            "description": "Resources associated with the course.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "Unique identifier for the created course.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the course was successfully created.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request to create a course is malformed or has erroneous arguments.",
        }
    ]


class OpenClassroomEnrollStudent(VirtualFunctionTool):
    name = "OpenClassroomEnrollStudent"
    summary = "Enrolls a student in a specified course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "Email address of the student to enroll.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the student was successfully enrolled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is incorrect or the course does not exist.",
        }
    ]


class OpenClassroomTrackProgress(VirtualFunctionTool):
    name = "OpenClassroomTrackProgress"
    summary = "Tracks the progress of a student in a course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "Email address of the student whose progress is being tracked.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "object",
            "description": "An object containing progress details, including completed tasks.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the progress was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course or student does not exist.",
        }
    ]


class OpenClassroomConnectMentor(VirtualFunctionTool):
    name = "OpenClassroomConnectMentor"
    summary = "Allows students to connect with a mentor for guidance."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "mentor_email",
            "type": "string",
            "description": "Email address of the mentor to connect with.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "Email address of the student requesting connection.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the connection request was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course or mentor does not exist.",
        }
    ]


class OpenClassroomEvaluateCourse(VirtualFunctionTool):
    name = "OpenClassroomEvaluateCourse"
    summary = "Allows users to evaluate a course and provide feedback."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "Rating for the course, from 1 to 5.",
            "required": True,
        },
        {
            "name": "comments",
            "type": "string",
            "description": "Additional comments about the course.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the evaluation was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The rating is invalid or the course does not exist.",
        }
    ]


class OpenClassroomShareResource(VirtualFunctionTool):
    name = "OpenClassroomShareResource"
    summary = "Enables users to share additional resources related to a course."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "resource_link",
            "type": "string",
            "description": "Link to the resource being shared.",
            "required": True,
        },
        {
            "name": "resource_description",
            "type": "string",
            "description": "Description of the resource being shared.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the resource was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The link or description is invalid.",
        }
    ]


class OpenClassroomStartDiscussion(VirtualFunctionTool):
    name = "OpenClassroomStartDiscussion"
    summary = "Starts a discussion forum for a course topic."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "topic",
            "type": "string",
            "description": "The topic of the discussion.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "discussion_id",
            "type": "string",
            "description": "Unique identifier for the created discussion.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the discussion was successfully created.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The course does not exist."}
    ]


class OpenClassroomIssueCertificate(VirtualFunctionTool):
    name = "OpenClassroomIssueCertificate"
    summary = "Issues a certificate to a student upon course completion."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "student_email",
            "type": "string",
            "description": "Email address of the student receiving the certificate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "certificate_id",
            "type": "string",
            "description": "Unique identifier for the issued certificate.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the certificate was successfully issued.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The course or student does not exist.",
        }
    ]


class OpenClassroomManageUser(VirtualFunctionTool):
    name = "OpenClassroomManageUser"
    summary = "Manages user accounts, including roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "Email address of the user to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform on the user: 'add', 'remove', or 'update'.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "New role to assign if action is 'update'. Valid values: 'student', 'mentor', 'admin'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or role is invalid.",
        }
    ]


class OpenClassroomGenerateReport(VirtualFunctionTool):
    name = "OpenClassroomGenerateReport"
    summary = "Generates a report on course performance metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "The unique identifier of the course.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate: 'performance' or 'engagement'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "The generated report data.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was successfully generated.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The course does not exist."}
    ]


class OpenClassroomAccessStoredData(VirtualFunctionTool):
    name = "OpenClassroomAccessStoredData"
    summary = "Retrieves stored user data such as addresses or payment methods for course-related transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "Email address of the user whose data is being accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "An object containing the stored data fields such as address and payment method.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the stored data was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."}
    ]


@register_app()
class OpenClassroom(FunctionApp):
    name_for_human = "OpenClassroom"
    description_for_human = "The OpenClassroom app facilitates project-based learning and mentorship in an online education platform, enabling course creation, student tracking, and mentor interactions while ensuring data privacy and quality mentorship."
    name_for_model = "OpenClassroom"
    description_for_model = "The OpenClassroom app facilitates project-based learning and mentorship in an online education platform, enabling course creation, student tracking, and mentor interactions while ensuring data privacy and quality mentorship."
    tool_classes = [
        OpenClassroomCreateCourse,
        OpenClassroomEnrollStudent,
        OpenClassroomTrackProgress,
        OpenClassroomConnectMentor,
        OpenClassroomEvaluateCourse,
        OpenClassroomShareResource,
        OpenClassroomStartDiscussion,
        OpenClassroomIssueCertificate,
        OpenClassroomManageUser,
        OpenClassroomGenerateReport,
        OpenClassroomAccessStoredData,
    ]


#################### Oculus ####################


class OculusPerformanceAnalyzer(VirtualFunctionTool):
    name = "OculusPerformanceAnalyzer"
    summary = (
        "Analyzes application performance and provides optimization recommendations."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "Unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimization_report",
            "type": "object",
            "description": "Detailed report on performance metrics and recommendations.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'app_id' parameter is malformed.",
        }
    ]


class OculusContentRenderer(VirtualFunctionTool):
    name = "OculusContentRenderer"
    summary = "Renders 3D graphics, including textures and animations."
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "Identifier for the content to be rendered.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "render_status",
            "type": "boolean",
            "description": "Indicates if the rendering was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'content_id' does not exist."}
    ]


class OculusUserProfileManager(VirtualFunctionTool):
    name = "OculusUserProfileManager"
    summary = "Manages user profiles and preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile_data",
            "type": "object",
            "description": "Contains user profile information.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' is invalid."}
    ]


class OculusEventTracker(VirtualFunctionTool):
    name = "OculusEventTracker"
    summary = "Tracks user interactions and events within the VR environment."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "Type of event to track, options: ['gesture', 'controller', 'voice'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tracking_status",
            "type": "boolean",
            "description": "Indicates if the event tracking was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'event_type' parameter is invalid.",
        }
    ]


class OculusAssetManager(VirtualFunctionTool):
    name = "OculusAssetManager"
    summary = "Manages the import and export of media assets."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_path",
            "type": "string",
            "description": "Local path for the asset.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the imported asset.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'asset_path' parameter is invalid.",
        }
    ]


class OculusDebuggingTool(VirtualFunctionTool):
    name = "OculusDebuggingTool"
    summary = "Provides debugging tools for real-time issue detection."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "Unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "debug_report",
            "type": "object",
            "description": "Report detailing any issues found.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'app_id' does not exist."}
    ]


class OculusAnalyticsIntegration(VirtualFunctionTool):
    name = "OculusAnalyticsIntegration"
    summary = "Integrates analytics tools for tracking user engagement."
    parameters: List[ArgParameter] = [
        {
            "name": "analytics_id",
            "type": "string",
            "description": "Identifier for the analytics service.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'analytics_id' is invalid."}
    ]


class OculusCrossPlatformTool(VirtualFunctionTool):
    name = "OculusCrossPlatformTool"
    summary = "Ensures compatibility of applications across multiple VR platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "platforms",
            "type": "array",
            "description": "List of platforms to check compatibility.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "compatibility_report",
            "type": "object",
            "description": "Report detailing compatibility issues.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'platforms' parameter is malformed.",
        }
    ]


class OculusFeedbackCollector(VirtualFunctionTool):
    name = "OculusFeedbackCollector"
    summary = "Gathers user feedback within the VR experience."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_status",
            "type": "boolean",
            "description": "Indicates if feedback was successfully collected.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' is invalid."}
    ]


class OculusDocumentationAccess(VirtualFunctionTool):
    name = "OculusDocumentationAccess"
    summary = "Provides access to tutorials and documentation."
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "Topic for which documentation is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "documentation_link",
            "type": "string",
            "description": "URL to the relevant documentation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'topic' parameter is invalid.",
        }
    ]


class OculusUserDataAccess(VirtualFunctionTool):
    name = "OculusUserDataAccess"
    summary = "Accesses previously stored user data such as preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "Contains stored user data.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


@register_app()
class Oculus(FunctionApp):
    name_for_human = "Oculus App"
    description_for_human = "App for developing and optimizing virtual reality experiences on Oculus devices."
    name_for_model = "Oculus"
    description_for_model = "The Oculus app provides developers with essential tools for creating, optimizing, and managing virtual reality experiences on Oculus devices, focusing on performance, user data integration, and asset management while addressing potential risks associated with user privacy and data security."
    tool_classes = [
        OculusPerformanceAnalyzer,
        OculusContentRenderer,
        OculusUserProfileManager,
        OculusEventTracker,
        OculusAssetManager,
        OculusDebuggingTool,
        OculusAnalyticsIntegration,
        OculusCrossPlatformTool,
        OculusFeedbackCollector,
        OculusDocumentationAccess,
        OculusUserDataAccess,
    ]


#################### Steam ####################


class SteamPurchaseGame(VirtualFunctionTool):
    name = "SteamPurchaseGame"
    summary = "Facilitates the purchase of games from the Steam store."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game to purchase.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method for the purchase.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the purchase was successful.",
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The identifier for the transaction.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or missing required parameters.",
        }
    ]


class SteamDownloadGame(VirtualFunctionTool):
    name = "SteamDownloadGame"
    summary = "Allows users to download purchased games."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was initiated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified game is not available for download.",
        }
    ]


class SteamManageAchievements(VirtualFunctionTool):
    name = "SteamManageAchievements"
    summary = "Users can view and manage their achievements in games."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game to view achievements.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "achievements",
            "type": "array",
            "description": "A list of achievements for the specified game.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified game does not exist.",
        }
    ]


class SteamSetupMultiplayer(VirtualFunctionTool):
    name = "SteamSetupMultiplayer"
    summary = "Enables users to set up and join multiplayer games."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game for multiplayer.",
            "required": True,
        },
        {
            "name": "session_details",
            "type": "string",
            "description": "Details for the multiplayer session.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the multiplayer session was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The session details are malformed.",
        }
    ]


class SteamManageCloudSaves(VirtualFunctionTool):
    name = "SteamManageCloudSaves"
    summary = "Users can manage their game saves stored in the cloud."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game for which to manage saves.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'upload', 'download', 'delete').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The action is unsupported."}
    ]


class SteamGetGameRecommendations(VirtualFunctionTool):
    name = "SteamGetGameRecommendations"
    summary = "Provides game recommendations based on user history."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The ID of the user requesting recommendations.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "A list of recommended games.",
        }
    ]
    exceptions: List[ArgException] = []


class SteamAccessUserReviews(VirtualFunctionTool):
    name = "SteamAccessUserReviews"
    summary = "Allows users to read and submit reviews for games."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game for which to access reviews.",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "The review content to submit.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "A list of reviews for the specified game.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the review submission was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The review submission is malformed.",
        }
    ]


class SteamManageFriendsList(VirtualFunctionTool):
    name = "SteamManageFriendsList"
    summary = "Users can manage their friends list."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'add', 'remove', 'list').",
            "required": True,
        },
        {
            "name": "friend_id",
            "type": "string",
            "description": "The ID of the friend to add or remove.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "friends",
            "type": "array",
            "description": "A list of current friends.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The action is unsupported."}
    ]


class SteamNotifyGameUpdates(VirtualFunctionTool):
    name = "SteamNotifyGameUpdates"
    summary = "Notifies users about game updates."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game for which to receive updates.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether notifications were set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified game does not exist.",
        }
    ]


class SteamRequestRefund(VirtualFunctionTool):
    name = "SteamRequestRefund"
    summary = "Allows users to request refunds for purchased games."
    parameters: List[ArgParameter] = [
        {
            "name": "game_name",
            "type": "string",
            "description": "The name of the game for which to request a refund.",
            "required": True,
        },
        {
            "name": "reason",
            "type": "string",
            "description": "The reason for the refund request.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the refund request was successful.",
        },
        {
            "name": "refund_id",
            "type": "string",
            "description": "The identifier for the refund request.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The refund request is malformed or unsupported.",
        }
    ]


@register_app()
class Steam(FunctionApp):
    name_for_human = "Steam App"
    description_for_human = "App for managing your gaming experience on Steam."
    name_for_model = "Steam"
    description_for_model = "The Steam app enables users to manage their gaming experience by facilitating game purchases, downloads, achievements tracking, multiplayer setup, and cloud saves management, while also providing functionalities for game recommendations and user reviews."
    tool_classes = [
        SteamPurchaseGame,
        SteamDownloadGame,
        SteamManageAchievements,
        SteamSetupMultiplayer,
        SteamManageCloudSaves,
        SteamGetGameRecommendations,
        SteamAccessUserReviews,
        SteamManageFriendsList,
        SteamNotifyGameUpdates,
        SteamRequestRefund,
    ]


#################### ARKit ####################


class ARKitSceneManagement(VirtualFunctionTool):
    name = "ARKitSceneManagement"
    summary = "Manage AR scenes, including adding, removing, and updating objects."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (options: 'add', 'remove', 'update').",
            "required": True,
        },
        {
            "name": "object_data",
            "type": "string",
            "description": "Contains the details of the AR object in JSON format (must include fields like 'id', 'position', 'scale', 'rotation').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the 'object_data' is malformed or 'action' is unsupported.",
        }
    ]


class ARKitImageTracking(VirtualFunctionTool):
    name = "ARKitImageTracking"
    summary = "Detect and track 2D images in the environment."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "The local path of the image to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tracking_status",
            "type": "boolean",
            "description": "Indicates whether the image is being tracked.",
        },
        {
            "name": "position",
            "type": "object",
            "description": "Contains the 'x', 'y', 'z' coordinates of the tracked image.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'image_path' format is unsupported.",
        }
    ]


class ARKitObjectPlacement(VirtualFunctionTool):
    name = "ARKitObjectPlacement"
    summary = "Place virtual objects in a real-world scene."
    parameters: List[ArgParameter] = [
        {
            "name": "object_data",
            "type": "string",
            "description": "Contains the details of the AR object in JSON format (must include fields like 'id', 'position', 'scale', 'rotation').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "placement_status",
            "type": "boolean",
            "description": "Indicates whether the object was successfully placed.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the placement.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'object_data' is malformed.",
        }
    ]


class ARKitEnvironmentalUnderstanding(VirtualFunctionTool):
    name = "ARKitEnvironmentalUnderstanding"
    summary = "Analyze the environment for realistic rendering."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "environment_data",
            "type": "object",
            "description": "Includes information about 'light_conditions', 'surface_detected', and 'spatial_relationships'.",
        }
    ]
    exceptions: List[ArgException] = []


class ARKitUserInteraction(VirtualFunctionTool):
    name = "ARKitUserInteraction"
    summary = "Handle user interactions with AR content."
    parameters: List[ArgParameter] = [
        {
            "name": "interaction_type",
            "type": "string",
            "description": "Specifies the type of interaction (options: 'tap', 'swipe').",
            "required": True,
        },
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the AR object being interacted with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "interaction_result",
            "type": "string",
            "description": "Describes the result of the interaction.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'interaction_type' is unsupported or 'object_id' is missing.",
        }
    ]


class ARKitSessionManagement(VirtualFunctionTool):
    name = "ARKitSessionManagement"
    summary = "Manage AR sessions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (options: 'start', 'pause', 'reset').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "session_status",
            "type": "boolean",
            "description": "Indicates whether the session management action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the action.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'action' is unsupported.",
        }
    ]


class ARKitLightingEstimation(VirtualFunctionTool):
    name = "ARKitLightingEstimation"
    summary = "Estimate lighting conditions for realistic rendering."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "lighting_conditions",
            "type": "object",
            "description": "Includes 'intensity' and 'color_temperature'.",
        }
    ]
    exceptions: List[ArgException] = []


class ARKitUserPreferencesStorage(VirtualFunctionTool):
    name = "ARKitUserPreferencesStorage"
    summary = "Store and retrieve user preferences for AR experiences."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (options: 'save', 'retrieve').",
            "required": True,
        },
        {
            "name": "preferences_data",
            "type": "string",
            "description": "Contains user preferences in JSON format (required only for 'save' action).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'action' is unsupported or 'preferences_data' is malformed.",
        }
    ]


class ARKitAnalyticsTracking(VirtualFunctionTool):
    name = "ARKitAnalyticsTracking"
    summary = "Track user interactions within AR experiences."
    parameters: List[ArgParameter] = [
        {
            "name": "interaction_data",
            "type": "string",
            "description": "Contains data about user interactions in JSON format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tracking was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'interaction_data' is malformed.",
        }
    ]


class ARKit3DObjectRecognition(VirtualFunctionTool):
    name = "ARKit3DObjectRecognition"
    summary = "Recognize and track 3D objects in the environment."
    parameters: List[ArgParameter] = [
        {
            "name": "object_data",
            "type": "string",
            "description": "Contains details of the 3D object to recognize in JSON format (must include fields like 'id').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recognition_status",
            "type": "boolean",
            "description": "Indicates whether the object was recognized.",
        },
        {
            "name": "position",
            "type": "object",
            "description": "Contains the 'x', 'y', 'z' coordinates of the recognized object.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'object_data' is malformed.",
        }
    ]


class ARKitContentManagement(VirtualFunctionTool):
    name = "ARKitContentManagement"
    summary = "Manage AR content, including adding and removing content."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (options: 'add', 'remove').",
            "required": True,
        },
        {
            "name": "content_data",
            "type": "string",
            "description": "Contains details of the AR content in JSON format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'action' is unsupported or 'content_data' is malformed.",
        }
    ]


class ARKitContentFiltering(VirtualFunctionTool):
    name = "ARKitContentFiltering"
    summary = "Filter AR content based on user preferences or settings."
    parameters: List[ArgParameter] = [
        {
            "name": "filter_criteria",
            "type": "string",
            "description": "Specifies the criteria for filtering content (e.g., 'age', 'category').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_content",
            "type": "array",
            "description": "Contains a list of filtered AR content based on the criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when 'filter_criteria' is unsupported.",
        }
    ]


@register_app()
class ARKit(FunctionApp):
    name_for_human = "ARKit"
    description_for_human = "ARKit enables developers to create immersive augmented reality experiences on iOS devices."
    name_for_model = "ARKit"
    description_for_model = "ARKit enables developers to create immersive augmented reality experiences on iOS devices, facilitating scene management, image tracking, object placement, and user interaction, while addressing privacy, security, and content management risks."
    tool_classes = [
        ARKitSceneManagement,
        ARKitImageTracking,
        ARKitObjectPlacement,
        ARKitEnvironmentalUnderstanding,
        ARKitUserInteraction,
        ARKitSessionManagement,
        ARKitLightingEstimation,
        ARKitUserPreferencesStorage,
        ARKitAnalyticsTracking,
        ARKit3DObjectRecognition,
        ARKitContentManagement,
        ARKitContentFiltering,
    ]


#################### Twitch ####################


class TwitchStreamManagement(VirtualFunctionTool):
    name = "TwitchStreamManagement"
    summary = "Manages live streams on Twitch."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform ('create', 'update', 'delete').",
            "required": True,
        },
        {
            "name": "stream_data",
            "type": "object",
            "description": "Contains stream details including title (string), game (string), and other relevant information.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "stream_id",
            "type": "string",
            "description": "Unique identifier for the stream if created or updated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or stream_data provided is malformed or erroneous.",
        }
    ]


class TwitchUserAuthentication(VirtualFunctionTool):
    name = "TwitchUserAuthentication"
    summary = "Authenticates users through OAuth."
    parameters: List[ArgParameter] = [
        {
            "name": "client_id",
            "type": "string",
            "description": "The application's client ID.",
            "required": True,
        },
        {
            "name": "client_secret",
            "type": "string",
            "description": "The application's client secret.",
            "required": True,
        },
        {
            "name": "redirect_uri",
            "type": "string",
            "description": "The URI to redirect after authentication.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "access_token",
            "type": "string",
            "description": "The token for accessing user data.",
        },
        {
            "name": "refresh_token",
            "type": "string",
            "description": "Token for refreshing access.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The credentials provided are incorrect or malformed.",
        }
    ]


class TwitchChatInteraction(VirtualFunctionTool):
    name = "TwitchChatInteraction"
    summary = "Sends and receives messages in the chat."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel to send a message to.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The channel_id or message format is invalid.",
        }
    ]


class TwitchUserDataAccess(VirtualFunctionTool):
    name = "TwitchUserDataAccess"
    summary = "Retrieves user profiles and streaming data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The ID of the user to retrieve data for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "Contains user details including username (string), followers (integer), and other relevant information.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class TwitchFollowerManagement(VirtualFunctionTool):
    name = "TwitchFollowerManagement"
    summary = "Manages followers for a channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform ('add', 'remove').",
            "required": True,
        },
        {
            "name": "follower_id",
            "type": "string",
            "description": "The ID of the follower to add or remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or follower_id provided is invalid.",
        }
    ]


class TwitchModerationTools(VirtualFunctionTool):
    name = "TwitchModerationTools"
    summary = "Enables moderation actions in chat."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The ID of the user to moderate.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the moderation action ('ban', 'timeout').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The channel_id or user_id provided is invalid.",
        },
        {
            "name": "AuthorizationException",
            "description": "The user does not have permission to perform this action.",
        },
    ]


class TwitchEventNotifications(VirtualFunctionTool):
    name = "TwitchEventNotifications"
    summary = "Sets up notifications for specific events."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
            "required": True,
        },
        {
            "name": "event_type",
            "type": "string",
            "description": "The type of event to notify about ('live', 'follower').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The event_type provided is invalid.",
        }
    ]


class TwitchStreamAnalytics(VirtualFunctionTool):
    name = "TwitchStreamAnalytics"
    summary = "Accesses analytics data for streams."
    parameters: List[ArgParameter] = [
        {
            "name": "stream_id",
            "type": "string",
            "description": "The ID of the stream.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analytics_data",
            "type": "object",
            "description": "Contains analytics data including viewers (integer), engagement (number), and other relevant metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The stream_id does not exist."}
    ]


class TwitchCustomCommands(VirtualFunctionTool):
    name = "TwitchCustomCommands"
    summary = "Creates and manages custom chat commands."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
            "required": True,
        },
        {
            "name": "command",
            "type": "string",
            "description": "The command to create or manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform ('create', 'delete').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The command or action provided is invalid.",
        }
    ]


class TwitchEmoteManagement(VirtualFunctionTool):
    name = "TwitchEmoteManagement"
    summary = "Manages emotes for channels."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
            "required": True,
        },
        {
            "name": "emote_data",
            "type": "object",
            "description": "Contains emote details including name (string) and image URL (string).",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform ('add', 'remove').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or emote_data provided is invalid.",
        }
    ]


class TwitchSearchUser(VirtualFunctionTool):
    name = "TwitchSearchUser"
    summary = "Searches for users and retrieves their IDs."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "The ID of the user."}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The username does not exist."}
    ]


class TwitchSearchChannel(VirtualFunctionTool):
    name = "TwitchSearchChannel"
    summary = "Searches for channels and retrieves their IDs."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_name",
            "type": "string",
            "description": "The name of the channel to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The ID of the channel.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The channel_name does not exist."}
    ]


@register_app()
class Twitch(FunctionApp):
    name_for_human = "Twitch App"
    description_for_human = "A app for developers to enhance viewer engagement on Twitch through stream management, user authentication, chat interaction, and more."
    name_for_model = "Twitch"
    description_for_model = "The Twitch app provides developers with a comprehensive set of tools to manage streams, authenticate users, interact with chat, and analyze user engagement on the Twitch platform, all while addressing potential risks associated with user data and interactions."
    tool_classes = [
        TwitchStreamManagement,
        TwitchUserAuthentication,
        TwitchChatInteraction,
        TwitchUserDataAccess,
        TwitchFollowerManagement,
        TwitchModerationTools,
        TwitchEventNotifications,
        TwitchStreamAnalytics,
        TwitchCustomCommands,
        TwitchEmoteManagement,
        TwitchSearchUser,
        TwitchSearchChannel,
    ]


#################### Unity ####################


class UnityCreateObject(VirtualFunctionTool):
    name = "UnityCreateObject"
    summary = "Create a new game object in the scene."
    parameters: List[ArgParameter] = [
        {
            "name": "object_name",
            "type": "string",
            "description": "The name of the game object to create.",
            "required": True,
        },
        {
            "name": "object_type",
            "type": "string",
            "description": "The type of game object (e.g., 'Cube', 'Sphere').",
            "required": True,
        },
        {
            "name": "position",
            "type": "string",
            "description": "The initial position in the format 'x,y,z'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the object was created successfully.",
        },
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier for the created object.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'object_type' is not valid.",
        }
    ]


class UnityReadObject(VirtualFunctionTool):
    name = "UnityReadObject"
    summary = "Retrieve details of a game object."
    parameters: List[ArgParameter] = [
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the game object.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "object_details",
            "type": "object",
            "description": "Contains fields like 'name', 'type', 'position'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'object_id' does not exist."}
    ]


class UnityUpdateObject(VirtualFunctionTool):
    name = "UnityUpdateObject"
    summary = "Update properties of an existing game object."
    parameters: List[ArgParameter] = [
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the game object.",
            "required": True,
        },
        {
            "name": "new_properties",
            "type": "object",
            "description": "The new properties to update (fields might include 'position', 'name', etc.).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the object was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'object_id' does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "For malformed 'new_properties'.",
        },
    ]


class UnityDeleteObject(VirtualFunctionTool):
    name = "UnityDeleteObject"
    summary = "Delete a game object from the scene."
    parameters: List[ArgParameter] = [
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the game object.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the object was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'object_id' does not exist."}
    ]


class UnityImportAsset(VirtualFunctionTool):
    name = "UnityImportAsset"
    summary = "Import a new asset into the project."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_path",
            "type": "string",
            "description": "The local path of the asset file to import.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the asset was imported successfully.",
        },
        {
            "name": "asset_id",
            "type": "string",
            "description": "The unique identifier for the imported asset.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'asset_path' is invalid.",
        }
    ]


class UnityExportAsset(VirtualFunctionTool):
    name = "UnityExportAsset"
    summary = "Export an existing asset from the project."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "The unique identifier of the asset.",
            "required": True,
        },
        {
            "name": "export_path",
            "type": "string",
            "description": "The path to save the exported asset.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the asset was exported successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'asset_id' does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "For invalid 'export_path'.",
        },
    ]


class UnitySimulatePhysics(VirtualFunctionTool):
    name = "UnitySimulatePhysics"
    summary = "Apply physics simulation to game objects."
    parameters: List[ArgParameter] = [
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the game object.",
            "required": True,
        },
        {
            "name": "force",
            "type": "string",
            "description": "The force to apply in the format 'x,y,z'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the physics simulation was applied successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'object_id' does not exist."},
        {"name": "InvalidRequestException", "description": "For malformed 'force'."},
    ]


class UnityControlAnimation(VirtualFunctionTool):
    name = "UnityControlAnimation"
    summary = "Control animations for a game object."
    parameters: List[ArgParameter] = [
        {
            "name": "object_id",
            "type": "string",
            "description": "The unique identifier of the game object.",
            "required": True,
        },
        {
            "name": "animation_name",
            "type": "string",
            "description": "The name of the animation to control.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'play', 'stop').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the animation control was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'object_id' does not exist."},
        {"name": "InvalidRequestException", "description": "For invalid 'action'."},
    ]


class UnityManageUI(VirtualFunctionTool):
    name = "UnityManageUI"
    summary = "Create or update UI elements."
    parameters: List[ArgParameter] = [
        {
            "name": "ui_element",
            "type": "object",
            "description": "Contains fields like 'type', 'position', 'size', 'text'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the UI element was managed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'ui_element' is malformed.",
        }
    ]


class UnitySetupNetworking(VirtualFunctionTool):
    name = "UnitySetupNetworking"
    summary = "Configure networking settings for multiplayer support."
    parameters: List[ArgParameter] = [
        {
            "name": "network_settings",
            "type": "object",
            "description": "Contains fields like 'port', 'max_players'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the networking setup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'network_settings' are incorrect.",
        }
    ]


class UnityControlAudio(VirtualFunctionTool):
    name = "UnityControlAudio"
    summary = "Manage audio playback in the game."
    parameters: List[ArgParameter] = [
        {
            "name": "audio_id",
            "type": "string",
            "description": "The unique identifier of the audio clip.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'play', 'stop').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the audio control was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'audio_id' does not exist."},
        {"name": "InvalidRequestException", "description": "For invalid 'action'."},
    ]


class UnityDebugTools(VirtualFunctionTool):
    name = "UnityDebugTools"
    summary = "Access debugging tools for performance monitoring."
    parameters: List[ArgParameter] = [
        {
            "name": "debug_action",
            "type": "string",
            "description": "The debugging action to perform (e.g., 'start', 'stop').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the debugging action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'debug_action' is not valid.",
        }
    ]


class UnityAccessUserPreferences(VirtualFunctionTool):
    name = "UnityAccessUserPreferences"
    summary = "Access user-specific settings/preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "preference_key",
            "type": "string",
            "description": "The key for the user preference to access.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "preference_value",
            "type": "string",
            "description": "The value of the requested preference.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the preference was accessed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If 'preference_key' does not exist.",
        }
    ]


@register_app()
class Unity(FunctionApp):
    name_for_human = "Unity"
    description_for_human = "Unity is a powerful game development app that provides developers with tools to create, manage, and control game objects, assets, animations, user interfaces, and networking functionalities, enabling efficient cross-platform game development."
    name_for_model = "Unity"
    description_for_model = "Unity is a powerful game development app that provides developers with tools to create, manage, and control game objects, assets, animations, user interfaces, and networking functionalities, enabling efficient cross-platform game development."
    tool_classes = [
        UnityCreateObject,
        UnityReadObject,
        UnityUpdateObject,
        UnityDeleteObject,
        UnityImportAsset,
        UnityExportAsset,
        UnitySimulatePhysics,
        UnityControlAnimation,
        UnityManageUI,
        UnitySetupNetworking,
        UnityControlAudio,
        UnityDebugTools,
        UnityAccessUserPreferences,
    ]


#################### SpotifyWeb ####################


class SpotifyWebPlayMusic(VirtualFunctionTool):
    name = "SpotifyWebPlayMusic"
    summary = "Plays a specified track from the Spotify catalog."
    parameters: List[ArgParameter] = [
        {
            "name": "track_id",
            "type": "string",
            "description": "The unique identifier of the track to play. Must be a valid Spotify track ID.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the track was successfully played.",
        },
        {
            "name": "status_message",
            "type": "string",
            "description": "Message indicating the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'track_id' parameter is not valid.",
        }
    ]


class SpotifyWebManagePlaylists(VirtualFunctionTool):
    name = "SpotifyWebManagePlaylists"
    summary = "Allows creating, updating, and deleting playlists."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['create', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "playlist_data",
            "type": "object",
            "description": "Data for the playlist, including 'name' (string), 'description' (string), and 'tracks' (array of strings).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "playlist_id",
            "type": "string",
            "description": "The unique identifier of the playlist created or modified.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not valid or 'playlist_data' is malformed.",
        }
    ]


class SpotifyWebSearchMusic(VirtualFunctionTool):
    name = "SpotifyWebSearchMusic"
    summary = "Searches for tracks, albums, or artists based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to use.",
            "required": True,
        },
        {
            "name": "type",
            "type": "string",
            "description": "The type of item to search for. Must be one of ['track', 'album', 'artist', 'playlist'].",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of matching items, each containing 'id', 'name', and 'type'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or 'type' is not valid.",
        }
    ]


class SpotifyWebAnalyzeListeningHabits(VirtualFunctionTool):
    name = "SpotifyWebAnalyzeListeningHabits"
    summary = "Retrieves user listening history and statistics."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose data is being accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listening_data",
            "type": "object",
            "description": "An object containing listening statistics, including 'top_tracks' (array of strings) and 'total_play_time' (number).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "User data is unavailable."}
    ]


class SpotifyWebAccessUserProfiles(VirtualFunctionTool):
    name = "SpotifyWebAccessUserProfiles"
    summary = "Retrieves user profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile_data",
            "type": "object",
            "description": "An object containing user information, including 'username', 'playlists' (array of strings), and 'favorite_tracks' (array of strings).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "User profile is not found."}
    ]


class SpotifyWebFollowArtists(VirtualFunctionTool):
    name = "SpotifyWebFollowArtists"
    summary = "Allows users to follow specified artists."
    parameters: List[ArgParameter] = [
        {
            "name": "artist_ids",
            "type": "array",
            "description": "An array of unique identifiers of the artists to follow.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'artist_ids' parameter is invalid.",
        }
    ]


class SpotifyWebSharePlaylists(VirtualFunctionTool):
    name = "SpotifyWebSharePlaylists"
    summary = "Enables sharing of playlists with other users or on social media."
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "The unique identifier of the playlist to be shared.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The platform to share on. Must be one of ['social_media', 'email'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the playlist was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The playlist does not exist."}
    ]


class SpotifyWebGetRecommendations(VirtualFunctionTool):
    name = "SpotifyWebGetRecommendations"
    summary = "Provides song and playlist recommendations."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user for whom recommendations are generated.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "An array of recommended tracks or playlists.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "User data is unavailable."}
    ]


class SpotifyWebAccessAlbumDetails(VirtualFunctionTool):
    name = "SpotifyWebAccessAlbumDetails"
    summary = "Retrieves detailed information about a specific album."
    parameters: List[ArgParameter] = [
        {
            "name": "album_id",
            "type": "string",
            "description": "The unique identifier of the album.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "album_data",
            "type": "object",
            "description": "An object containing album details, including 'title', 'release_date', and 'tracks' (array of strings).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The album does not exist."}
    ]


class SpotifyWebDownloadMusic(VirtualFunctionTool):
    name = "SpotifyWebDownloadMusic"
    summary = "Allows users to download specified tracks for offline listening."
    parameters: List[ArgParameter] = [
        {
            "name": "track_ids",
            "type": "array",
            "description": "An array of unique identifiers of the tracks to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracks were successfully downloaded.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "Any track does not exist."}
    ]


@register_app()
class SpotifyWeb(FunctionApp):
    name_for_human = "Spotify Web API"
    description_for_human = "A app for developers to integrate music functionalities from Spotify into their applications."
    name_for_model = "SpotifyWeb"
    description_for_model = "The SpotifyWeb app provides developers with tools to access Spotify's music catalog, enabling functionalities such as playing music, managing playlists, and analyzing user listening habits while ensuring user data privacy and security."
    tool_classes = [
        SpotifyWebPlayMusic,
        SpotifyWebManagePlaylists,
        SpotifyWebSearchMusic,
        SpotifyWebAnalyzeListeningHabits,
        SpotifyWebAccessUserProfiles,
        SpotifyWebFollowArtists,
        SpotifyWebSharePlaylists,
        SpotifyWebGetRecommendations,
        SpotifyWebAccessAlbumDetails,
        SpotifyWebDownloadMusic,
    ]


#################### HoloLensDev ####################


class HoloLensDevCreateApp(VirtualFunctionTool):
    name = "HoloLensDevCreateApp"
    summary = "Tool for creating a new mixed reality application."
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "The name of the application.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the application.",
            "required": True,
        },
        {
            "name": "assets",
            "type": "array",
            "description": "A list of digital assets to include in the application.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the created application.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevMapEnvironment(VirtualFunctionTool):
    name = "HoloLensDevMapEnvironment"
    summary = "Tool for mapping the physical environment."
    parameters: List[ArgParameter] = [
        {
            "name": "scan_area",
            "type": "string",
            "description": "The area to be scanned, specified in meters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_id",
            "type": "string",
            "description": "The unique identifier for the created map.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevDesignInteraction(VirtualFunctionTool):
    name = "HoloLensDevDesignInteraction"
    summary = "Tool for designing user interactions within the application."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        },
        {
            "name": "interaction_type",
            "type": "string",
            "description": "Type of interaction (e.g., 'gesture', 'voice'). Must be one of ['gesture', 'voice', 'gaze'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "interaction_id",
            "type": "string",
            "description": "The unique identifier for the interaction design.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevCaptureData(VirtualFunctionTool):
    name = "HoloLensDevCaptureData"
    summary = "Tool for capturing user interaction data."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the captured data.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevTestApp(VirtualFunctionTool):
    name = "HoloLensDevTestApp"
    summary = "Tool for testing the application on HoloLens."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "test_result",
            "type": "string",
            "description": "The result of the testing process.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevManageAssets(VirtualFunctionTool):
    name = "HoloLensDevManageAssets"
    summary = "Tool for managing digital assets."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (e.g., 'add', 'remove'). Must be one of ['add', 'remove'].",
            "required": True,
        },
        {
            "name": "asset",
            "type": "string",
            "description": "The asset to manage.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not one of ['add', 'remove'].",
        }
    ]


class HoloLensDevCollectFeedback(VirtualFunctionTool):
    name = "HoloLensDevCollectFeedback"
    summary = "Tool for collecting user feedback."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_id",
            "type": "string",
            "description": "The unique identifier for the collected feedback.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevConnectCloud(VirtualFunctionTool):
    name = "HoloLensDevConnectCloud"
    summary = "Tool for integrating with cloud services."
    parameters: List[ArgParameter] = [
        {
            "name": "service_name",
            "type": "string",
            "description": "The name of the cloud service to connect to.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "connection_id",
            "type": "string",
            "description": "The unique identifier for the cloud connection.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'service_name' parameter is not valid.",
        }
    ]


class HoloLensDevEnableCollaboration(VirtualFunctionTool):
    name = "HoloLensDevEnableCollaboration"
    summary = "Tool for enabling real-time collaboration."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "collaboration_id",
            "type": "string",
            "description": "The unique identifier for the collaboration session.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class HoloLensDevDeployApp(VirtualFunctionTool):
    name = "HoloLensDevDeployApp"
    summary = "Tool for deploying the application to HoloLens devices."
    parameters: List[ArgParameter] = [
        {
            "name": "app_id",
            "type": "string",
            "description": "The unique identifier for the application.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_status",
            "type": "string",
            "description": "The status of the deployment process.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class HoloLensDev(FunctionApp):
    name_for_human = "HoloLens Development App"
    description_for_human = (
        "App for developing mixed reality applications on Microsoft HoloLens."
    )
    name_for_model = "HoloLensDev"
    description_for_model = "The HoloLensDev app provides developers with a comprehensive set of tools for creating, testing, and deploying mixed reality applications on Microsoft HoloLens, facilitating user interactions, environment mapping, and data management while addressing potential risks associated with application development."
    tool_classes = [
        HoloLensDevCreateApp,
        HoloLensDevMapEnvironment,
        HoloLensDevDesignInteraction,
        HoloLensDevCaptureData,
        HoloLensDevTestApp,
        HoloLensDevManageAssets,
        HoloLensDevCollectFeedback,
        HoloLensDevConnectCloud,
        HoloLensDevEnableCollaboration,
        HoloLensDevDeployApp,
    ]


#################### DiscordApi ####################


class DiscordApiSendMessage(VirtualFunctionTool):
    name = "DiscordApiSendMessage"
    summary = "Send a message to a specified channel or user."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to send the message to.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = []


class DiscordApiReceiveMessages(VirtualFunctionTool):
    name = "DiscordApiReceiveMessages"
    summary = "Retrieve messages from a specified channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to retrieve messages from.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of messages to retrieve (default is 50).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "An array of messages retrieved from the channel.",
        }
    ]
    exceptions: List[ArgException] = []


class DiscordApiManageUser(VirtualFunctionTool):
    name = "DiscordApiManageUser"
    summary = "Manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add_role', 'remove_role', 'update_info').",
            "required": True,
        },
        {
            "name": "role_id",
            "type": "string",
            "description": "The unique identifier of the role to add or remove (only required for 'add_role' or 'remove_role').",
            "required": False,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "An object containing updated user information (only required for 'update_info').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "If the user is not authorized to manage roles.",
        }
    ]


class DiscordApiListenToEvents(VirtualFunctionTool):
    name = "DiscordApiListenToEvents"
    summary = "Listen for specific events in the server."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "The type of event to listen for ('message', 'user_join', 'reaction').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_data",
            "type": "object",
            "description": "The data associated with the triggered event.",
        }
    ]
    exceptions: List[ArgException] = []


class DiscordApiCreateChannel(VirtualFunctionTool):
    name = "DiscordApiCreateChannel"
    summary = "Create a new channel in the server."
    parameters: List[ArgParameter] = [
        {
            "name": "server_id",
            "type": "string",
            "description": "The unique identifier of the server.",
            "required": True,
        },
        {
            "name": "channel_name",
            "type": "string",
            "description": "The name of the new channel.",
            "required": True,
        },
        {
            "name": "channel_type",
            "type": "string",
            "description": "The type of channel ('text', 'voice').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the channel was created successfully.",
        },
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the created channel.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If a channel with the same name already exists.",
        }
    ]


class DiscordApiUpdateChannel(VirtualFunctionTool):
    name = "DiscordApiUpdateChannel"
    summary = "Update the properties of an existing channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to update.",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "The new name for the channel.",
            "required": False,
        },
        {
            "name": "new_type",
            "type": "string",
            "description": "The new type for the channel ('text', 'voice').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the channel was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the channel_id does not exist.",
        }
    ]


class DiscordApiDeleteChannel(VirtualFunctionTool):
    name = "DiscordApiDeleteChannel"
    summary = "Delete a specified channel from the server."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the channel was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the channel_id does not exist.",
        }
    ]


class DiscordApiAddReaction(VirtualFunctionTool):
    name = "DiscordApiAddReaction"
    summary = "Add a reaction to a specified message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to react to.",
            "required": True,
        },
        {
            "name": "reaction_emoji",
            "type": "string",
            "description": "The emoji to use as a reaction.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reaction was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the message_id does not exist.",
        }
    ]


class DiscordApiRemoveReaction(VirtualFunctionTool):
    name = "DiscordApiRemoveReaction"
    summary = "Remove a reaction from a specified message."
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "The unique identifier of the message to remove the reaction from.",
            "required": True,
        },
        {
            "name": "reaction_emoji",
            "type": "string",
            "description": "The emoji to remove as a reaction.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reaction was removed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the message_id does not exist.",
        }
    ]


class DiscordApiUploadFile(VirtualFunctionTool):
    name = "DiscordApiUploadFile"
    summary = "Upload a file to a specified channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to upload the file to.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to upload.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was uploaded successfully.",
        },
        {
            "name": "file_id",
            "type": "string",
            "description": "The unique identifier of the uploaded file.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the file_path is invalid or inaccessible.",
        }
    ]


class DiscordApiCreateWebhook(VirtualFunctionTool):
    name = "DiscordApiCreateWebhook"
    summary = "Create a new webhook for automated messages."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to create the webhook in.",
            "required": True,
        },
        {
            "name": "webhook_name",
            "type": "string",
            "description": "The name of the webhook.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the webhook was created successfully.",
        },
        {
            "name": "webhook_id",
            "type": "string",
            "description": "The unique identifier of the created webhook.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If a webhook with the same name already exists in the channel.",
        }
    ]


class DiscordApiScheduleMessage(VirtualFunctionTool):
    name = "DiscordApiScheduleMessage"
    summary = "Schedule a message to be sent at a later time."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel to send the message to.",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "The content of the message to send.",
            "required": True,
        },
        {
            "name": "scheduled_time",
            "type": "string",
            "description": "The time to send the message in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the message was scheduled successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the scheduled_time is not in ISO 8601 format.",
        }
    ]


@register_app()
class DiscordApi(FunctionApp):
    name_for_human = "Discord API"
    description_for_human = "App for building bots and applications that integrate with Discord's communication platform."
    name_for_model = "DiscordApi"
    description_for_model = "The Discord app enables developers to create and manage bots for the Discord platform, facilitating user engagement through messaging, user management, and event handling while ensuring community guidelines are adhered to."
    tool_classes = [
        DiscordApiSendMessage,
        DiscordApiReceiveMessages,
        DiscordApiManageUser,
        DiscordApiListenToEvents,
        DiscordApiCreateChannel,
        DiscordApiUpdateChannel,
        DiscordApiDeleteChannel,
        DiscordApiAddReaction,
        DiscordApiRemoveReaction,
        DiscordApiUploadFile,
        DiscordApiCreateWebhook,
        DiscordApiScheduleMessage,
    ]


#################### YouTubeData ####################


class YouTubeDataUploadVideo(VirtualFunctionTool):
    name = "YouTubeDataUploadVideo"
    summary = "Uploads a video to the user's YouTube channel."
    parameters: List[ArgParameter] = [
        {
            "name": "video_title",
            "type": "string",
            "description": "The title of the video being uploaded.",
            "required": True,
        },
        {
            "name": "video_description",
            "type": "string",
            "description": "A brief description of the video content.",
            "required": True,
        },
        {
            "name": "video_file_path",
            "type": "string",
            "description": "The local file path of the video to be uploaded.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the uploaded video.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the upload was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as invalid video details.",
        },
        {
            "name": "ConflictException",
            "description": "The video already exists and cannot be uploaded again.",
        },
    ]


class YouTubeDataManagePlaylist(VirtualFunctionTool):
    name = "YouTubeDataManagePlaylist"
    summary = "Creates or updates a playlist on the user's channel."
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_title",
            "type": "string",
            "description": "The title of the playlist.",
            "required": True,
        },
        {
            "name": "playlist_description",
            "type": "string",
            "description": "A brief description of the playlist.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "The unique identifier of the playlist.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as invalid playlist details.",
        },
        {
            "name": "ConflictException",
            "description": "The playlist already exists and cannot be created again.",
        },
    ]


class YouTubeDataGetVideoStatistics(VirtualFunctionTool):
    name = "YouTubeDataGetVideoStatistics"
    summary = "Retrieves statistics for a specific video."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the video.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "An object containing the statistics of the video.",
            "fields": {
                "views": "integer, The number of views.",
                "likes": "integer, The number of likes.",
                "comments": "integer, The number of comments.",
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The video ID does not exist."}
    ]


class YouTubeDataSearchVideos(VirtualFunctionTool):
    name = "YouTubeDataSearchVideos"
    summary = "Searches for videos based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keywords to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "videos",
            "type": "array",
            "description": "A list of video objects matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search query is malformed.",
        }
    ]


class YouTubeDataManageComments(VirtualFunctionTool):
    name = "YouTubeDataManageComments"
    summary = "Reads, posts, or deletes comments on a video."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the video.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The comment text to post or delete.",
            "required": False,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'post' or 'delete'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as invalid comment details.",
        },
        {"name": "NotFoundException", "description": "The video ID does not exist."},
    ]


class YouTubeDataGetChannelInfo(VirtualFunctionTool):
    name = "YouTubeDataGetChannelInfo"
    summary = "Retrieves information about a specific channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "channel_info",
            "type": "object",
            "description": "An object containing channel details.",
            "fields": {
                "title": "string, The title of the channel.",
                "description": "string, The description of the channel.",
                "subscribers": "integer, The number of subscribers.",
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The channel ID does not exist."}
    ]


class YouTubeDataLikeVideo(VirtualFunctionTool):
    name = "YouTubeDataLikeVideo"
    summary = "Likes a specific video."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the video.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the like was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The video ID does not exist."}
    ]


class YouTubeDataSubscribeChannel(VirtualFunctionTool):
    name = "YouTubeDataSubscribeChannel"
    summary = "Subscribes to a specific channel."
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "The unique identifier of the channel.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the subscription was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The channel ID does not exist."}
    ]


class YouTubeDataGetRecommendations(VirtualFunctionTool):
    name = "YouTubeDataGetRecommendations"
    summary = "Retrieves video recommendations based on user history."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of recommendations to return.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "A list of recommended video objects.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The request is malformed."}
    ]


class YouTubeDataDownloadVideoMetadata(VirtualFunctionTool):
    name = "YouTubeDataDownloadVideoMetadata"
    summary = "Downloads metadata for a list of videos."
    parameters: List[ArgParameter] = [
        {
            "name": "video_ids",
            "type": "array",
            "description": "A list of unique identifiers for the videos.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "array",
            "description": "A list of metadata objects for the requested videos.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as invalid video IDs.",
        }
    ]


class YouTubeDataDeleteVideo(VirtualFunctionTool):
    name = "YouTubeDataDeleteVideo"
    summary = "Deletes a video from the user's channel."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the video.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The video ID does not exist."}
    ]


class YouTubeDataUpdateVideoDetails(VirtualFunctionTool):
    name = "YouTubeDataUpdateVideoDetails"
    summary = "Updates the title or description of an existing video."
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "The unique identifier of the video.",
            "required": True,
        },
        {
            "name": "new_title",
            "type": "string",
            "description": "The new title of the video.",
            "required": False,
        },
        {
            "name": "new_description",
            "type": "string",
            "description": "The new description of the video.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The video ID does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed, such as invalid video details.",
        },
    ]


@register_app()
class YouTubeData(FunctionApp):
    name_for_human = "YouTube Data Management"
    description_for_human = "Manage your YouTube content, including video uploads, playlists, and user interactions seamlessly and securely."
    name_for_model = "YouTubeData"
    description_for_model = "The YouTubeData app enables developers to programmatically manage YouTube content, including video uploads, playlist management, and user interactions, while addressing potential risks of misinformation and copyright violations."
    tool_classes = [
        YouTubeDataUploadVideo,
        YouTubeDataManagePlaylist,
        YouTubeDataGetVideoStatistics,
        YouTubeDataSearchVideos,
        YouTubeDataManageComments,
        YouTubeDataGetChannelInfo,
        YouTubeDataLikeVideo,
        YouTubeDataSubscribeChannel,
        YouTubeDataGetRecommendations,
        YouTubeDataDownloadVideoMetadata,
        YouTubeDataDeleteVideo,
        YouTubeDataUpdateVideoDetails,
    ]


#################### EpicGamesStore ####################


class EpicGamesStoreUserAccountManagement(VirtualFunctionTool):
    name = "EpicGamesStoreUserAccountManagement"
    summary = (
        "Manage user accounts including creating, updating, and deleting accounts."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains user details such as username, email, password. The object must include 'username' (string), 'email' (string, must be a valid email format), and 'password' (string, minimum 8 characters).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user account created or updated.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreInGamePurchaseManagement(VirtualFunctionTool):
    name = "EpicGamesStoreInGamePurchaseManagement"
    summary = (
        "Manage in-game purchases including creating items and processing transactions."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, process).",
            "required": True,
        },
        {
            "name": "item_data",
            "type": "object",
            "description": "Contains item details such as item_id (string), price (number, must be positive), and currency (string, must be a valid currency code).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the processed transaction.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The item_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreGameDistributionManagement(VirtualFunctionTool):
    name = "EpicGamesStoreGameDistributionManagement"
    summary = "Manage game distribution including uploading and updating games."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (upload, update).",
            "required": True,
        },
        {
            "name": "game_data",
            "type": "object",
            "description": "Contains game details such as game_id (string), title (string), description (string), and file_path (string, must be a valid file path).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "game_id",
            "type": "string",
            "description": "The unique identifier for the uploaded or updated game.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The game_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreSocialFeaturesIntegration(VirtualFunctionTool):
    name = "EpicGamesStoreSocialFeaturesIntegration"
    summary = "Integrate social features such as friend lists and messaging."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (add_friend, send_message).",
            "required": True,
        },
        {
            "name": "friend_data",
            "type": "object",
            "description": "Contains friend details such as user_id (string) and message (string, optional).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The friend_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreCloudSaveManagement(VirtualFunctionTool):
    name = "EpicGamesStoreCloudSaveManagement"
    summary = "Manage user game saves including saving and retrieving saves."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (save, retrieve, delete).",
            "required": True,
        },
        {
            "name": "save_data",
            "type": "object",
            "description": "Contains save details such as user_id (string), game_id (string), and save_content (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "save_id",
            "type": "string",
            "description": "The unique identifier for the saved game data.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The save_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreAnalyticsReporting(VirtualFunctionTool):
    name = "EpicGamesStoreAnalyticsReporting"
    summary = "Provide analytics and reporting tools for game performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Specifies the type of report to generate (sales, engagement).",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "Specifies the time frame for the report (daily, weekly, monthly).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report_type or time_frame provided is incorrect.",
        }
    ]


class EpicGamesStoreUserFeedbackManagement(VirtualFunctionTool):
    name = "EpicGamesStoreUserFeedbackManagement"
    summary = "Manage user feedback and reviews."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (collect, respond).",
            "required": True,
        },
        {
            "name": "feedback_data",
            "type": "object",
            "description": "Contains feedback details such as user_id (string), game_id (string), and feedback_content (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The feedback_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStorePromotionalCampaignManagement(VirtualFunctionTool):
    name = "EpicGamesStorePromotionalCampaignManagement"
    summary = "Create and manage promotional campaigns for games."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "campaign_data",
            "type": "object",
            "description": "Contains campaign details such as campaign_id (string), discount (number, must be between 0 and 100), and duration (string, must be a valid duration format).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "campaign_id",
            "type": "string",
            "description": "The unique identifier for the created or updated campaign.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The campaign_data provided is malformed or contains erroneous parameters.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreAPIRateLimiting(VirtualFunctionTool):
    name = "EpicGamesStoreAPIRateLimiting"
    summary = "Monitor and manage API usage."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (check_usage, reset_limit).",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "The API key for the developer's account.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "usage_data",
            "type": "object",
            "description": "Contains the current usage statistics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The api_key provided is incorrect.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


class EpicGamesStoreUserAuthentication(VirtualFunctionTool):
    name = "EpicGamesStoreUserAuthentication"
    summary = "Facilitate user authentication processes."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (login, logout).",
            "required": True,
        },
        {
            "name": "credentials",
            "type": "object",
            "description": "Contains user credentials such as username (string) and password (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "session_token",
            "type": "string",
            "description": "The session token for authenticated users.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The credentials provided are malformed or incorrect.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action requested is not authorized for the current user.",
        },
    ]


@register_app()
class EpicGamesStore(FunctionApp):
    name_for_human = "Epic Games Store API"
    description_for_human = "A app for game developers to manage game distribution, in-game purchases, and user accounts securely."
    name_for_model = "EpicGamesStore"
    description_for_model = "The EpicGamesStore app provides game developers with comprehensive tools for managing user accounts, integrating in-game purchases, distributing games, and utilizing social features, while ensuring security and compliance with data protection regulations."
    tool_classes = [
        EpicGamesStoreUserAccountManagement,
        EpicGamesStoreInGamePurchaseManagement,
        EpicGamesStoreGameDistributionManagement,
        EpicGamesStoreSocialFeaturesIntegration,
        EpicGamesStoreCloudSaveManagement,
        EpicGamesStoreAnalyticsReporting,
        EpicGamesStoreUserFeedbackManagement,
        EpicGamesStorePromotionalCampaignManagement,
        EpicGamesStoreAPIRateLimiting,
        EpicGamesStoreUserAuthentication,
    ]


#################### Docker ####################


class DockerCreateContainer(VirtualFunctionTool):
    name = "DockerCreateContainer"
    summary = "Creates a new container from a specified image."
    parameters: List[ArgParameter] = [
        {
            "name": "image_name",
            "type": "string",
            "description": "The name of the image to create the container from.",
            "required": True,
        },
        {
            "name": "container_name",
            "type": "string",
            "description": "The name to assign to the new container.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "Configuration settings for the container, including environment variables and volume mounts.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the created container.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The input parameters are malformed, such as an invalid image name.",
        },
        {
            "name": "ConflictException",
            "description": "The specified container name already exists.",
        },
    ]


class DockerStartContainer(VirtualFunctionTool):
    name = "DockerStartContainer"
    summary = "Starts a stopped container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to start.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the start operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified container ID does not exist.",
        }
    ]


class DockerStopContainer(VirtualFunctionTool):
    name = "DockerStopContainer"
    summary = "Stops a running container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to stop.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the stop operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified container ID does not exist.",
        }
    ]


class DockerRemoveContainer(VirtualFunctionTool):
    name = "DockerRemoveContainer"
    summary = "Deletes a specified container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to remove.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the removal was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified container ID does not exist.",
        }
    ]


class DockerListContainers(VirtualFunctionTool):
    name = "DockerListContainers"
    summary = "Retrieves a list of all containers, including their statuses."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "containers",
            "type": "array",
            "description": "An array of objects containing container details, including container_id, name, and status.",
        }
    ]
    exceptions: List[ArgException] = []


class DockerCreateImage(VirtualFunctionTool):
    name = "DockerCreateImage"
    summary = "Builds a new image from a Dockerfile."
    parameters: List[ArgParameter] = [
        {
            "name": "dockerfile_path",
            "type": "string",
            "description": "The path to the Dockerfile.",
            "required": True,
        },
        {
            "name": "image_name",
            "type": "string",
            "description": "The name to assign to the new image.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "The unique identifier of the created image.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the image creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The input parameters are malformed, such as an invalid dockerfile path.",
        },
        {
            "name": "ConflictException",
            "description": "The specified image name already exists.",
        },
    ]


class DockerListImages(VirtualFunctionTool):
    name = "DockerListImages"
    summary = "Retrieves a list of all available images."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "images",
            "type": "array",
            "description": "An array of objects containing image details, including image_id and name.",
        }
    ]
    exceptions: List[ArgException] = []


class DockerPullImage(VirtualFunctionTool):
    name = "DockerPullImage"
    summary = "Downloads an image from a Docker registry."
    parameters: List[ArgParameter] = [
        {
            "name": "image_name",
            "type": "string",
            "description": "The name of the image to pull.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the pull operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The input parameters are malformed, such as an invalid image name.",
        }
    ]


class DockerPushImage(VirtualFunctionTool):
    name = "DockerPushImage"
    summary = "Uploads a local image to a Docker registry."
    parameters: List[ArgParameter] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "The unique identifier of the image to push.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the push operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified image ID does not exist.",
        }
    ]


class DockerInspectContainer(VirtualFunctionTool):
    name = "DockerInspectContainer"
    summary = "Retrieves detailed information about a specific container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to inspect.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "container_details",
            "type": "object",
            "description": "An object containing detailed information about the container, including status, created_at, and configuration.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified container ID does not exist.",
        }
    ]


@register_app()
class Docker(FunctionApp):
    name_for_human = "Docker App"
    description_for_human = "A app for managing and automating the deployment of applications using Docker containers."
    name_for_model = "Docker"
    description_for_model = "The Docker app provides developers with a suite of tools to create, manage, and manipulate containers and images efficiently while addressing potential risks associated with containerization."
    tool_classes = [
        DockerCreateContainer,
        DockerStartContainer,
        DockerStopContainer,
        DockerRemoveContainer,
        DockerListContainers,
        DockerCreateImage,
        DockerListImages,
        DockerPullImage,
        DockerPushImage,
        DockerInspectContainer,
    ]




#################### Git ####################


class GitCommit(VirtualFunctionTool):
    name = "GitCommit"
    summary = "Saves changes to the local repository with a message."
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "A brief description of the changes made.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the commit was successful.",
        },
        {
            "name": "commit_id",
            "type": "string",
            "description": "The unique identifier of the new commit.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The commit message is malformed or empty.",
        }
    ]


class GitBranch(VirtualFunctionTool):
    name = "GitBranch"
    summary = "Manages branches in the repository (create, switch, delete)."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (create, switch, delete). Can only be 'create', 'switch', or 'delete'.",
            "required": True,
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "The name of the branch to create or switch to. Required for create and switch actions.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "The name of the branch that was created or switched to.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is invalid or the branch name is malformed.",
        }
    ]


class GitMerge(VirtualFunctionTool):
    name = "GitMerge"
    summary = "Merges changes from one branch into another."
    parameters: List[ArgParameter] = [
        {
            "name": "source_branch",
            "type": "string",
            "description": "The name of the branch to merge from.",
            "required": True,
        },
        {
            "name": "target_branch",
            "type": "string",
            "description": "The name of the branch to merge into.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the merge was successful.",
        },
        {
            "name": "conflicts",
            "type": "array",
            "description": "A list of files with merge conflicts if any.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "There are unresolved merge conflicts.",
        }
    ]


class GitViewHistory(VirtualFunctionTool):
    name = "GitViewHistory"
    summary = "Displays the commit history."
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "The maximum number of commits to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "commits",
            "type": "array",
            "description": "A list of commit objects containing commit_id, message, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = []


class GitClone(VirtualFunctionTool):
    name = "GitClone"
    summary = "Creates a local copy of a remote repository."
    parameters: List[ArgParameter] = [
        {
            "name": "repo_url",
            "type": "string",
            "description": "The URL of the remote repository.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the cloning was successful.",
        },
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path of the cloned repository.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The repository URL is malformed or invalid.",
        }
    ]


class GitPush(VirtualFunctionTool):
    name = "GitPush"
    summary = "Sends committed changes to a remote repository."
    parameters: List[ArgParameter] = [
        {
            "name": "remote_name",
            "type": "string",
            "description": "The name of the remote repository.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the push was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to push changes to the remote repository.",
        }
    ]


class GitPull(VirtualFunctionTool):
    name = "GitPull"
    summary = "Retrieves changes from a remote repository."
    parameters: List[ArgParameter] = [
        {
            "name": "remote_name",
            "type": "string",
            "description": "The name of the remote repository.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the pull was successful.",
        },
        {
            "name": "merged_commits",
            "type": "array",
            "description": "A list of commits that were merged.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to pull changes from the remote repository.",
        }
    ]


class GitTag(VirtualFunctionTool):
    name = "GitTag"
    summary = "Marks a specific commit with a tag."
    parameters: List[ArgParameter] = [
        {
            "name": "commit_id",
            "type": "string",
            "description": "The ID of the commit to tag.",
            "required": True,
        },
        {
            "name": "tag_name",
            "type": "string",
            "description": "The name of the tag.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tagging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified commit ID does not exist.",
        }
    ]


class GitDiff(VirtualFunctionTool):
    name = "GitDiff"
    summary = "Shows differences between two commits."
    parameters: List[ArgParameter] = [
        {
            "name": "commit_id_1",
            "type": "string",
            "description": "The ID of the first commit.",
            "required": True,
        },
        {
            "name": "commit_id_2",
            "type": "string",
            "description": "The ID of the second commit.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "differences",
            "type": "string",
            "description": "A summary of the differences between the two commits.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "One or both of the specified commit IDs do not exist.",
        }
    ]


class GitRevert(VirtualFunctionTool):
    name = "GitRevert"
    summary = "Undoes changes made in a previous commit."
    parameters: List[ArgParameter] = [
        {
            "name": "commit_id",
            "type": "string",
            "description": "The ID of the commit to revert.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the revert was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified commit ID does not exist.",
        }
    ]


class GitSearchBranch(VirtualFunctionTool):
    name = "GitSearchBranch"
    summary = "Retrieves existing branches in the repository."
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "The maximum number of branches to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "branches",
            "type": "array",
            "description": "A list of existing branch names.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Git(FunctionApp):
    name_for_human = "Git App"
    description_for_human = "A app for managing version control in software development projects using Git."
    name_for_model = "Git"
    description_for_model = "The Git app allows developers to manage version control for their projects, enabling them to commit changes, manage branches, merge modifications, view commit history, and interact with remote repositories while considering potential risks associated with misuse."
    tool_classes = [
        GitCommit,
        GitBranch,
        GitMerge,
        GitViewHistory,
        GitClone,
        GitPush,
        GitPull,
        GitTag,
        GitDiff,
        GitRevert,
        GitSearchBranch,
    ]


#################### Jupyter ####################


class JupyterCreateNotebook(VirtualFunctionTool):
    name = "JupyterCreateNotebook"
    summary = "Allows users to create a new Jupyter Notebook."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the notebook.",
            "required": True,
        },
        {
            "name": "language",
            "type": "string",
            "description": "The programming language used in the notebook (e.g., Python, R).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the created notebook.",
        }
    ]
    exceptions: List[ArgException] = []


class JupyterReadNotebook(VirtualFunctionTool):
    name = "JupyterReadNotebook"
    summary = "Enables users to open and read existing notebooks."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "object",
            "description": "The content of the notebook, including code cells, markdown cells, and outputs.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."}
    ]


class JupyterUpdateNotebook(VirtualFunctionTool):
    name = "JupyterUpdateNotebook"
    summary = "Allows users to modify content within a notebook."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook to update.",
            "required": True,
        },
        {
            "name": "content",
            "type": "object",
            "description": "The updated content of the notebook, including code cells and markdown cells.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The content provided is malformed.",
        },
    ]


class JupyterDeleteNotebook(VirtualFunctionTool):
    name = "JupyterDeleteNotebook"
    summary = "Enables users to remove existing notebooks."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."}
    ]


class JupyterShareNotebook(VirtualFunctionTool):
    name = "JupyterShareNotebook"
    summary = "Allows users to share notebooks with others via a generated link."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook to share.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_link",
            "type": "string",
            "description": "The generated shareable link for the notebook.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."}
    ]


class JupyterImportNotebook(VirtualFunctionTool):
    name = "JupyterImportNotebook"
    summary = (
        "Enables users to import existing Jupyter Notebooks from external sources."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path to the notebook file to import.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the imported notebook.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file path is invalid or the file is not a valid notebook.",
        }
    ]


class JupyterExportNotebook(VirtualFunctionTool):
    name = "JupyterExportNotebook"
    summary = "Allows users to export notebooks in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook to export.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export the notebook to (e.g., HTML, PDF).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The format specified is not supported.",
        },
    ]


class JupyterRunCodeCell(VirtualFunctionTool):
    name = "JupyterRunCodeCell"
    summary = "Allows users to execute code cells within a notebook."
    parameters: List[ArgParameter] = [
        {
            "name": "notebook_id",
            "type": "string",
            "description": "The unique identifier of the notebook.",
            "required": True,
        },
        {
            "name": "cell_index",
            "type": "integer",
            "description": "The index of the code cell to run.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output",
            "type": "string",
            "description": "The output produced by executing the code cell.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The notebook_id does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The cell index is out of bounds.",
        },
    ]


class JupyterSearchNotebooks(VirtualFunctionTool):
    name = "JupyterSearchNotebooks"
    summary = "Enables users to search for specific content within their notebooks."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to find in notebooks.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of notebooks containing the search term.",
        }
    ]
    exceptions: List[ArgException] = []


class JupyterAccessStoredData(VirtualFunctionTool):
    name = "JupyterAccessStoredData"
    summary = "Allows users to access previously saved configurations or data."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of stored data to access (e.g., configurations, datasets).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "The stored data retrieved based on the specified type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type specified is not recognized.",
        }
    ]


@register_app()
class Jupyter(FunctionApp):
    name_for_human = "Jupyter"
    description_for_human = "A app for creating and managing Jupyter Notebooks, facilitating interactive coding and data visualization."
    name_for_model = "Jupyter"
    description_for_model = "The Jupyter app allows users to create, manage, and share Jupyter Notebooks, enabling interactive coding, data visualization, and collaboration while managing potential risks associated with sensitive data and code execution."
    tool_classes = [
        JupyterCreateNotebook,
        JupyterReadNotebook,
        JupyterUpdateNotebook,
        JupyterDeleteNotebook,
        JupyterShareNotebook,
        JupyterImportNotebook,
        JupyterExportNotebook,
        JupyterRunCodeCell,
        JupyterSearchNotebooks,
        JupyterAccessStoredData,
    ]


#################### TensorFlow ####################


class TensorFlowModelCreation(VirtualFunctionTool):
    name = "TensorFlowModelCreation"
    summary = "Create a new machine learning model based on specified architecture and layers."
    parameters: List[ArgParameter] = [
        {
            "name": "model_name",
            "type": "string",
            "description": "The name of the model to be created.",
            "required": True,
        },
        {
            "name": "architecture",
            "type": "string",
            "description": "The architecture type (e.g., 'CNN', 'RNN').",
            "required": True,
        },
        {
            "name": "layers",
            "type": "array",
            "description": "A list of layers to include in the model. Each layer should be an object with fields 'type' (string) and 'parameters' (object).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the created model.",
        }
    ]
    exceptions: List[ArgException] = []


class TensorFlowModelTraining(VirtualFunctionTool):
    name = "TensorFlowModelTraining"
    summary = "Train a specified model using provided training data."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to be trained.",
            "required": True,
        },
        {
            "name": "training_data",
            "type": "string",
            "description": "The path to the training dataset.",
            "required": True,
        },
        {
            "name": "epochs",
            "type": "integer",
            "description": "Number of training epochs.",
            "required": False,
        },
        {
            "name": "learning_rate",
            "type": "number",
            "description": "The learning rate for the optimizer.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the training was successful.",
        },
        {
            "name": "training_metrics",
            "type": "object",
            "description": "Includes training accuracy and loss metrics.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The training_data is malformed or inaccessible.",
        }
    ]


class TensorFlowModelEvaluation(VirtualFunctionTool):
    name = "TensorFlowModelEvaluation"
    summary = "Evaluate the performance of a trained model on a validation dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the trained model.",
            "required": True,
        },
        {
            "name": "validation_data",
            "type": "string",
            "description": "The path to the validation dataset.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_metrics",
            "type": "object",
            "description": "Includes accuracy, precision, recall, and F1 score.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The model or validation data is unavailable.",
        }
    ]


class TensorFlowModelPrediction(VirtualFunctionTool):
    name = "TensorFlowModelPrediction"
    summary = "Make predictions using a trained model on new data."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model.",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "string",
            "description": "The path to the new data for predictions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "predictions",
            "type": "array",
            "description": "The predicted results for the new data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The model or new data is unavailable.",
        }
    ]


class TensorFlowModelSave(VirtualFunctionTool):
    name = "TensorFlowModelSave"
    summary = "Save a trained model to disk for later use."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to be saved.",
            "required": True,
        },
        {
            "name": "save_path",
            "type": "string",
            "description": "The path where the model should be saved.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the model was saved successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The model to save does not exist.",
        }
    ]


class TensorFlowModelLoad(VirtualFunctionTool):
    name = "TensorFlowModelLoad"
    summary = "Load a previously saved model from disk."
    parameters: List[ArgParameter] = [
        {
            "name": "save_path",
            "type": "string",
            "description": "The path from where to load the model.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the loaded model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model path is invalid.",
        }
    ]


class TensorFlowDataPreprocessing(VirtualFunctionTool):
    name = "TensorFlowDataPreprocessing"
    summary = (
        "Preprocess a dataset for training, including normalization and augmentation."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the dataset to preprocess.",
            "required": True,
        },
        {
            "name": "normalization",
            "type": "boolean",
            "description": "Whether to apply normalization.",
            "required": False,
        },
        {
            "name": "augmentation",
            "type": "boolean",
            "description": "Whether to apply data augmentation.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "processed_data_path",
            "type": "string",
            "description": "The path to the processed dataset.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The dataset is not in the expected format.",
        }
    ]


class TensorFlowHyperparameterTuning(VirtualFunctionTool):
    name = "TensorFlowHyperparameterTuning"
    summary = "Optimize model hyperparameters for better performance."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to tune.",
            "required": True,
        },
        {
            "name": "parameter_grid",
            "type": "object",
            "description": "A dictionary defining the hyperparameters to tune and their possible values.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "best_parameters",
            "type": "object",
            "description": "The best hyperparameters found during tuning.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The parameter grid is malformed.",
        }
    ]


class TensorFlowTransferLearning(VirtualFunctionTool):
    name = "TensorFlowTransferLearning"
    summary = "Apply transfer learning using a pre-trained model."
    parameters: List[ArgParameter] = [
        {
            "name": "base_model_id",
            "type": "string",
            "description": "The unique identifier of the pre-trained model.",
            "required": True,
        },
        {
            "name": "new_model_name",
            "type": "string",
            "description": "The name for the new model.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "new_model_id",
            "type": "string",
            "description": "The unique identifier of the new model created through transfer learning.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The base model does not exist."}
    ]


class TensorFlowModelVisualization(VirtualFunctionTool):
    name = "TensorFlowModelVisualization"
    summary = "Visualize the training process and model performance."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_path",
            "type": "string",
            "description": "The path to the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The model does not exist."}
    ]


class TensorFlowModelDeployment(VirtualFunctionTool):
    name = "TensorFlowModelDeployment"
    summary = "Deploy a trained model to a specified environment."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to deploy.",
            "required": True,
        },
        {
            "name": "deployment_target",
            "type": "string",
            "description": "The target environment (e.g., 'web', 'mobile').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_status",
            "type": "string",
            "description": "The status of the deployment process.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The model does not exist."}
    ]


@register_app()
class TensorFlow(FunctionApp):
    name_for_human = "TensorFlow"
    description_for_human = (
        "A powerful app for developing and deploying machine learning models."
    )
    name_for_model = "TensorFlow"
    description_for_model = "A comprehensive app for building, training, evaluating, and deploying machine learning models using TensorFlow, enabling developers to create robust AI solutions while managing potential risks effectively."
    tool_classes = [
        TensorFlowModelCreation,
        TensorFlowModelTraining,
        TensorFlowModelEvaluation,
        TensorFlowModelPrediction,
        TensorFlowModelSave,
        TensorFlowModelLoad,
        TensorFlowDataPreprocessing,
        TensorFlowHyperparameterTuning,
        TensorFlowTransferLearning,
        TensorFlowModelVisualization,
        TensorFlowModelDeployment,
    ]


#################### Kubernetes ####################


class KubernetesClusterManagement(VirtualFunctionTool):
    name = "KubernetesClusterManagement"
    summary = "Manage and configure Kubernetes clusters."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'add_node', 'remove_node', 'update_resources'.",
            "required": True,
        },
        {
            "name": "node_name",
            "type": "string",
            "description": "The name of the node to manage, required for 'add_node' and 'remove_node'.",
            "required": True,
        },
        {
            "name": "resources",
            "type": "object",
            "description": "Specifies resources to allocate, required for 'update_resources', should include 'cpu' and 'memory'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class KubernetesDeploymentManagement(VirtualFunctionTool):
    name = "KubernetesDeploymentManagement"
    summary = "Create, update, and delete deployments."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "deployment_name",
            "type": "string",
            "description": "The name of the deployment.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the deployment, required if action is 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing deployment.",
        },
    ]


class KubernetesServiceManagement(VirtualFunctionTool):
    name = "KubernetesServiceManagement"
    summary = "Define and manage services in the cluster."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "service_name",
            "type": "string",
            "description": "The name of the service.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the service, required if action is 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing service.",
        },
    ]


class KubernetesPodManagement(VirtualFunctionTool):
    name = "KubernetesPodManagement"
    summary = "Create and manage pods."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'delete'.",
            "required": True,
        },
        {
            "name": "pod_name",
            "type": "string",
            "description": "The name of the pod.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the pod, required for 'create'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing pod.",
        },
    ]


class KubernetesResourceMonitoring(VirtualFunctionTool):
    name = "KubernetesResourceMonitoring"
    summary = "Monitor cluster and application performance."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "Specifies the type of resource to monitor, can be 'cluster', 'deployment', 'pod'.",
            "required": True,
        },
        {
            "name": "resource_name",
            "type": "string",
            "description": "The name of the resource.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metrics",
            "type": "object",
            "description": "Contains performance metrics such as CPU and memory usage.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class KubernetesScalingApplications(VirtualFunctionTool):
    name = "KubernetesScalingApplications"
    summary = "Scale applications up or down."
    parameters: List[ArgParameter] = [
        {
            "name": "deployment_name",
            "type": "string",
            "description": "The name of the deployment to scale.",
            "required": True,
        },
        {
            "name": "replica_count",
            "type": "integer",
            "description": "The number of replicas to scale to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Scaling leads to resource conflicts.",
        },
    ]


class KubernetesConfigurationManagement(VirtualFunctionTool):
    name = "KubernetesConfigurationManagement"
    summary = "Manage application configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "config_name",
            "type": "string",
            "description": "The name of the configuration.",
            "required": True,
        },
        {
            "name": "config_data",
            "type": "object",
            "description": "The data for the configuration, required for 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing configuration.",
        },
    ]


class KubernetesLoggingAndDebugging(VirtualFunctionTool):
    name = "KubernetesLoggingAndDebugging"
    summary = "Access logs for troubleshooting."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "Specifies the type of resource to retrieve logs for, can be 'pod', 'deployment'.",
            "required": True,
        },
        {
            "name": "resource_name",
            "type": "string",
            "description": "The name of the resource.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "logs", "type": "array", "description": "An array of log entries."}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class KubernetesAccessControlManagement(VirtualFunctionTool):
    name = "KubernetesAccessControlManagement"
    summary = "Manage role-based access control (RBAC)."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create_role', 'assign_role', 'remove_role'.",
            "required": True,
        },
        {
            "name": "role_name",
            "type": "string",
            "description": "The name of the role.",
            "required": True,
        },
        {
            "name": "user_name",
            "type": "string",
            "description": "The user to whom the role is assigned or removed.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to remove a non-existing role.",
        },
    ]


class KubernetesStorageManagement(VirtualFunctionTool):
    name = "KubernetesStorageManagement"
    summary = "Handle persistent storage for applications."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'delete'.",
            "required": True,
        },
        {
            "name": "volume_name",
            "type": "string",
            "description": "The name of the storage volume.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the storage volume, required for 'create'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing volume.",
        },
    ]


class KubernetesNetworkPolicyManagement(VirtualFunctionTool):
    name = "KubernetesNetworkPolicyManagement"
    summary = "Manage network policies for services."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "policy_name",
            "type": "string",
            "description": "The name of the network policy.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the network policy, required for 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing policy.",
        },
    ]


class KubernetesHealthCheckManagement(VirtualFunctionTool):
    name = "KubernetesHealthCheckManagement"
    summary = "Manage health checks for applications."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform, can be 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "check_name",
            "type": "string",
            "description": "The name of the health check.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration for the health check, required for 'create' or 'update'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a non-existing health check.",
        },
    ]


@register_app()
class Kubernetes(FunctionApp):
    name_for_human = "Kubernetes Management App"
    description_for_human = "A app designed for DevOps engineers to manage and monitor Kubernetes clusters and applications."
    name_for_model = "Kubernetes"
    description_for_model = "A app for managing containerized applications in Kubernetes, enabling efficient deployment, scaling, and monitoring."
    tool_classes = [
        KubernetesClusterManagement,
        KubernetesDeploymentManagement,
        KubernetesServiceManagement,
        KubernetesPodManagement,
        KubernetesResourceMonitoring,
        KubernetesScalingApplications,
        KubernetesConfigurationManagement,
        KubernetesLoggingAndDebugging,
        KubernetesAccessControlManagement,
        KubernetesStorageManagement,
        KubernetesNetworkPolicyManagement,
        KubernetesHealthCheckManagement,
    ]


#################### Jira ####################


class JiraCreateTask(VirtualFunctionTool):
    name = "JiraCreateTask"
    summary = "Allows users to create a new task in the project management system."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the task.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the task.",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "The username of the person to whom the task is assigned.",
            "required": False,
        },
        {
            "name": "labels",
            "type": "array",
            "description": "A list of labels to categorize the task.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the created task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class JiraRetrieveTask(VirtualFunctionTool):
    name = "JiraRetrieveTask"
    summary = "Fetches details of a specific task using its identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task",
            "type": "object",
            "description": "An object containing task details including title, description, assignee, status, and labels.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraUpdateTask(VirtualFunctionTool):
    name = "JiraUpdateTask"
    summary = "Updates the details of an existing task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to update.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The new title of the task.",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The new description of the task.",
            "required": False,
        },
        {
            "name": "status",
            "type": "string",
            "description": "The new status of the task. Must be one of 'To Do', 'In Progress', 'Done'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraDeleteTask(VirtualFunctionTool):
    name = "JiraDeleteTask"
    summary = "Deletes a specific task from the project management system."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraSearchTasks(VirtualFunctionTool):
    name = "JiraSearchTasks"
    summary = "Searches for tasks based on various criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search keyword or phrase.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tasks",
            "type": "array",
            "description": "A list of task objects matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'query' is empty."}
    ]


class JiraAddComment(VirtualFunctionTool):
    name = "JiraAddComment"
    summary = "Adds a comment to a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to comment on.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The content of the comment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the comment was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraAttachFile(VirtualFunctionTool):
    name = "JiraAttachFile"
    summary = "Attaches a file to a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to attach the file to.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to attach.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "attachment_id",
            "type": "string",
            "description": "The unique identifier of the attached file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the file was attached successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraAssignTask(VirtualFunctionTool):
    name = "JiraAssignTask"
    summary = "Assigns a task to a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to assign.",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "The username of the person to assign the task to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was assigned successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraTrackStatus(VirtualFunctionTool):
    name = "JiraTrackStatus"
    summary = "Retrieves the current status of a task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the task.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the status was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


class JiraLabelTask(VirtualFunctionTool):
    name = "JiraLabelTask"
    summary = "Adds or updates labels on a specific task."
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the task to label.",
            "required": True,
        },
        {
            "name": "labels",
            "type": "array",
            "description": "A list of labels to add to the task.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the labels were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'task_id' does not correspond to an existing task.",
        }
    ]


@register_app()
class Jira(FunctionApp):
    name_for_human = "Jira App"
    description_for_human = (
        "A app for managing tasks in project management using Jira."
    )
    name_for_model = "Jira"
    description_for_model = "The Jira app enhances project management by allowing users to create, retrieve, update, delete, and search for tasks, along with features for commenting, file attachments, task assignments, and status tracking while managing potential risks of misuse."
    tool_classes = [
        JiraCreateTask,
        JiraRetrieveTask,
        JiraUpdateTask,
        JiraDeleteTask,
        JiraSearchTasks,
        JiraAddComment,
        JiraAttachFile,
        JiraAssignTask,
        JiraTrackStatus,
        JiraLabelTask,
    ]


#################### Postman ####################


class PostmanCreateApi(VirtualFunctionTool):
    name = "PostmanCreateApi"
    summary = "Allows users to create new APIs with specified endpoints and methods."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the API being created.",
            "required": True,
        },
        {
            "name": "endpoints",
            "type": "array",
            "description": "A list of endpoints to be included in the API. Each endpoint must have a method and path.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the created API.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the API creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request to create the API is malformed or missing required fields.",
        }
    ]


class PostmanTestApi(VirtualFunctionTool):
    name = "PostmanTestApi"
    summary = "Facilitates sending requests to APIs and validating responses."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to test.",
            "required": True,
        },
        {
            "name": "request",
            "type": "object",
            "description": "The request object containing method, endpoint, headers, and body.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "The response object returned by the API.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the API test was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request to test the API is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
    ]


class PostmanDocumentApi(VirtualFunctionTool):
    name = "PostmanDocumentApi"
    summary = "Generates documentation for specified APIs."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to document.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "documentation",
            "type": "string",
            "description": "The generated documentation for the API.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the documentation generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        }
    ]


class PostmanShareApi(VirtualFunctionTool):
    name = "PostmanShareApi"
    summary = "Enables sharing of APIs with team members."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to share.",
            "required": True,
        },
        {
            "name": "user_emails",
            "type": "array",
            "description": "A list of email addresses of users to share the API with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The provided email addresses are malformed.",
        },
    ]


class PostmanManageEnvironment(VirtualFunctionTool):
    name = "PostmanManageEnvironment"
    summary = "Manages different environments for API testing."
    parameters: List[ArgParameter] = [
        {
            "name": "env_name",
            "type": "string",
            "description": "The name of the environment to manage.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "The configuration settings for the environment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the environment management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The environment configuration is malformed.",
        }
    ]


class PostmanMockApi(VirtualFunctionTool):
    name = "PostmanMockApi"
    summary = "Creates a mock server for simulating API responses."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to mock.",
            "required": True,
        },
        {
            "name": "mock_responses",
            "type": "array",
            "description": "A list of mock responses to be returned for specified endpoints.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "mock_server_url",
            "type": "string",
            "description": "The URL of the created mock server.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the mock server creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The mock responses are malformed.",
        },
    ]


class PostmanMonitorApi(VirtualFunctionTool):
    name = "PostmanMonitorApi"
    summary = "Sets up monitoring for APIs to track performance."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to monitor.",
            "required": True,
        },
        {
            "name": "monitoring_settings",
            "type": "object",
            "description": "The settings for monitoring, including frequency and alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the monitoring setup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The monitoring settings are malformed.",
        },
    ]


class PostmanVersionControl(VirtualFunctionTool):
    name = "PostmanVersionControl"
    summary = "Manages different versions of APIs."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to manage versions for.",
            "required": True,
        },
        {
            "name": "version",
            "type": "string",
            "description": "The version number to create or update.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the version control operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The version request is malformed.",
        },
    ]


class PostmanVisualizeData(VirtualFunctionTool):
    name = "PostmanVisualizeData"
    summary = "Visualizes API responses in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "response",
            "type": "object",
            "description": "The API response object to visualize.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format for visualization (e.g., 'chart', 'table').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization",
            "type": "string",
            "description": "The URL or path to the generated visualization.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the visualization was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The requested visualization format is unsupported.",
        }
    ]


class PostmanIntegrateCI_CD(VirtualFunctionTool):
    name = "PostmanIntegrateCI_CD"
    summary = "Integrates APIs with CI/CD pipelines."
    parameters: List[ArgParameter] = [
        {
            "name": "api_id",
            "type": "string",
            "description": "The unique identifier of the API to integrate.",
            "required": True,
        },
        {
            "name": "pipeline_details",
            "type": "object",
            "description": "The details of the CI/CD pipeline to integrate with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified api_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The pipeline details are malformed.",
        },
    ]


class PostmanAccessStoredData(VirtualFunctionTool):
    name = "PostmanAccessStoredData"
    summary = "Retrieves stored user data such as API keys or configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (e.g., 'api_key', 'config').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "data", "type": "string", "description": "The requested stored data."},
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data access was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The requested data type is unsupported.",
        }
    ]


@register_app()
class Postman(FunctionApp):
    name_for_human = "Postman"
    description_for_human = "A collaborative platform for API development, simplifying the process of building, testing, and documenting APIs."
    name_for_model = "Postman"
    description_for_model = "Postman is a collaborative platform for API development, enabling developers to create, test, document, and manage APIs efficiently while ensuring security and performance."
    tool_classes = [
        PostmanCreateApi,
        PostmanTestApi,
        PostmanDocumentApi,
        PostmanShareApi,
        PostmanManageEnvironment,
        PostmanMockApi,
        PostmanMonitorApi,
        PostmanVersionControl,
        PostmanVisualizeData,
        PostmanIntegrateCI_CD,
        PostmanAccessStoredData,
    ]


#################### Kafka ####################


class KafkaProduceEvent(VirtualFunctionTool):
    name = "KafkaProduceEvent"
    summary = "Produces events/messages to specified topics."
    parameters: List[ArgParameter] = [
        {
            "name": "topic_name",
            "type": "string",
            "description": "The name of the topic to which the event will be produced.",
            "required": True,
        },
        {
            "name": "event_data",
            "type": "string",
            "description": "The content of the event/message to be produced.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event was successfully produced.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'topic_name' or 'event_data' is malformed or empty.",
        }
    ]


class KafkaConsumeEvent(VirtualFunctionTool):
    name = "KafkaConsumeEvent"
    summary = "Consumes events/messages from specified topics."
    parameters: List[ArgParameter] = [
        {
            "name": "topic_name",
            "type": "string",
            "description": "The name of the topic from which to consume events.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of events to consume. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "events",
            "type": "array",
            "description": "A list of events/messages consumed.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the events were successfully consumed.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'topic_name' is malformed or empty.",
        }
    ]


class KafkaManageTopic(VirtualFunctionTool):
    name = "KafkaManageTopic"
    summary = "Creates, updates, and deletes topics for event organization."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform; can be 'create', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "topic_name",
            "type": "string",
            "description": "The name of the topic to manage.",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "Configuration settings for the topic, only needed for create/update.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the topic management action was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not 'create', 'update', or 'delete'.",
        },
        {
            "name": "ConflictException",
            "description": "If trying to create a topic that already exists or delete a non-existing topic.",
        },
    ]


class KafkaManageConsumerGroup(VirtualFunctionTool):
    name = "KafkaManageConsumerGroup"
    summary = "Manages consumer groups for load balancing."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform; can be 'add', 'remove', or 'list'.",
            "required": True,
        },
        {
            "name": "group_name",
            "type": "string",
            "description": "The name of the consumer group.",
            "required": True,
        },
        {
            "name": "consumer_id",
            "type": "string",
            "description": "The ID of the consumer to add or remove, only needed for add/remove.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the consumer group management action was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not 'add', 'remove', or 'list'.",
        },
        {
            "name": "NotFoundException",
            "description": "If trying to manage a non-existing consumer group.",
        },
    ]


class KafkaConfigureRetention(VirtualFunctionTool):
    name = "KafkaConfigureRetention"
    summary = "Configures the retention policy for events in topics."
    parameters: List[ArgParameter] = [
        {
            "name": "topic_name",
            "type": "string",
            "description": "The name of the topic for which to configure retention.",
            "required": True,
        },
        {
            "name": "retention_time",
            "type": "string",
            "description": "The time duration for which events should be retained, format: '1d', '2h', etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retention configuration was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'retention_time' is not in the correct format.",
        }
    ]


class KafkaMonitorCluster(VirtualFunctionTool):
    name = "KafkaMonitorCluster"
    summary = "Monitors the health and performance of Kafka clusters."
    parameters: List[ArgParameter] = [
        {
            "name": "metrics",
            "type": "array",
            "description": "The list of metrics to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current health status of the Kafka cluster.",
        },
        {
            "name": "metrics_data",
            "type": "object",
            "description": "Detailed metrics data.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'metrics' is empty or malformed.",
        }
    ]


class KafkaHandleError(VirtualFunctionTool):
    name = "KafkaHandleError"
    summary = "Implements error handling for failed event processing."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The ID of the event that failed.",
            "required": True,
        },
        {
            "name": "retry_count",
            "type": "integer",
            "description": "The number of retries to perform.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the error handling was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'event_id' is malformed or empty.",
        }
    ]


class KafkaIntegrateSchemaRegistry(VirtualFunctionTool):
    name = "KafkaIntegrateSchemaRegistry"
    summary = "Integrates with schema registries for data governance."
    parameters: List[ArgParameter] = [
        {
            "name": "schema",
            "type": "object",
            "description": "The schema to register.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the schema registration was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If 'schema' is not valid."}
    ]


class KafkaBatchProcessEvents(VirtualFunctionTool):
    name = "KafkaBatchProcessEvents"
    summary = "Supports batch processing of events for increased throughput."
    parameters: List[ArgParameter] = [
        {
            "name": "topic_name",
            "type": "string",
            "description": "The name of the topic for batch processing.",
            "required": True,
        },
        {
            "name": "batch_size",
            "type": "integer",
            "description": "The number of events to process in one batch.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the batch processing was successful.",
        },
        {
            "name": "processed_events",
            "type": "integer",
            "description": "The number of events successfully processed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'topic_name' is malformed or empty.",
        }
    ]


class KafkaRetrieveEvent(VirtualFunctionTool):
    name = "KafkaRetrieveEvent"
    summary = "Retrieves a specific event by its ID."
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "The ID of the event to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_data",
            "type": "string",
            "description": "The content of the retrieved event.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the event retrieval was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the operation failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'event_id' is malformed or empty.",
        },
        {
            "name": "NotFoundException",
            "description": "If the event with the given ID does not exist.",
        },
    ]


@register_app()
class Kafka(FunctionApp):
    name_for_human = "Kafka"
    description_for_human = (
        "A app for managing and streaming events in real-time using Apache Kafka."
    )
    name_for_model = "Kafka"
    description_for_model = "Kafka is a distributed event streaming platform that enables developers to efficiently produce, consume, and manage events in real-time, while also providing tools for monitoring, error handling, and integration with schema registries."
    tool_classes = [
        KafkaProduceEvent,
        KafkaConsumeEvent,
        KafkaManageTopic,
        KafkaManageConsumerGroup,
        KafkaConfigureRetention,
        KafkaMonitorCluster,
        KafkaHandleError,
        KafkaIntegrateSchemaRegistry,
        KafkaBatchProcessEvents,
        KafkaRetrieveEvent,
    ]


#################### MATLAB ####################


class MATLABNumericalComputation(VirtualFunctionTool):
    name = "MATLABNumericalComputation"
    summary = "Performs complex mathematical calculations."
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "Type of operation to perform (e.g., 'add', 'subtract', 'multiply', 'divide').",
            "required": True,
        },
        {
            "name": "input_data",
            "type": "array",
            "description": "An array of numbers to perform the operation on.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "result",
            "type": "number",
            "description": "The result of the numerical operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The operation is unsupported or the input data format is invalid.",
        }
    ]


class MATLABDataVisualization(VirtualFunctionTool):
    name = "MATLABDataVisualization"
    summary = "Creates visual representations of data."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "An array of numbers to visualize.",
            "required": True,
        },
        {
            "name": "plot_type",
            "type": "string",
            "description": "Type of plot to create (e.g., 'line', 'bar', 'scatter').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plot_url",
            "type": "string",
            "description": "URL to access the generated plot.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The plot type is unsupported or the data is invalid.",
        }
    ]


class MATLABAlgorithmDevelopment(VirtualFunctionTool):
    name = "MATLABAlgorithmDevelopment"
    summary = "Allows users to develop and test algorithms."
    parameters: List[ArgParameter] = [
        {
            "name": "algorithm_code",
            "type": "string",
            "description": "The MATLAB code for the algorithm.",
            "required": True,
        },
        {
            "name": "input_data",
            "type": "array",
            "description": "Data to run the algorithm on.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_data",
            "type": "array",
            "description": "The result of the algorithm execution.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The MATLAB code is invalid or the input data is incompatible.",
        }
    ]


class MATLABDataImport(VirtualFunctionTool):
    name = "MATLABDataImport"
    summary = "Imports data from specified file formats."
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "Path to the data file.",
            "required": True,
        },
        {
            "name": "file_format",
            "type": "string",
            "description": "Format of the file (e.g., 'csv', 'excel').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "imported_data",
            "type": "array",
            "description": "The data imported from the file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file format is unsupported or the file path is invalid.",
        }
    ]


class MATLABDataExport(VirtualFunctionTool):
    name = "MATLABDataExport"
    summary = "Exports data to specified file formats."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "Data to be exported.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "Path where the file will be saved.",
            "required": True,
        },
        {
            "name": "file_format",
            "type": "string",
            "description": "Format to export to (e.g., 'csv', 'excel').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file format is unsupported or the export path is invalid.",
        }
    ]


class MATLABStatisticalAnalysis(VirtualFunctionTool):
    name = "MATLABStatisticalAnalysis"
    summary = "Conducts statistical tests on datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "Data to analyze.",
            "required": True,
        },
        {
            "name": "test_type",
            "type": "string",
            "description": "Type of statistical test (e.g., 't-test', 'ANOVA').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "test_result",
            "type": "object",
            "description": "Results of the statistical test, including p-value and test statistic.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The test type is unsupported or the data is invalid.",
        }
    ]


class MATLABSimulinkIntegration(VirtualFunctionTool):
    name = "MATLABSimulinkIntegration"
    summary = "Interfaces with Simulink for system modeling."
    parameters: List[ArgParameter] = [
        {
            "name": "model_name",
            "type": "string",
            "description": "Name of the Simulink model to use.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "simulation_result",
            "type": "object",
            "description": "Results of the simulation.",
        }
    ]
    exceptions: List[ArgException] = []


class MATLABMachineLearning(VirtualFunctionTool):
    name = "MATLABMachineLearning"
    summary = "Applies machine learning algorithms to datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "array",
            "description": "Input data for training/testing.",
            "required": True,
        },
        {
            "name": "algorithm",
            "type": "string",
            "description": "Type of machine learning algorithm (e.g., 'SVM', 'Decision Tree').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model",
            "type": "object",
            "description": "The trained machine learning model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The algorithm is unsupported or the data is invalid.",
        }
    ]


class MATLABImageProcessing(VirtualFunctionTool):
    name = "MATLABImageProcessing"
    summary = "Processes and analyzes images."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "Path to the image file.",
            "required": True,
        },
        {
            "name": "operation",
            "type": "string",
            "description": "Type of image processing operation (e.g., 'filter', 'segment').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "processed_image_url",
            "type": "string",
            "description": "URL to access the processed image.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The operation is unsupported or the image path is invalid.",
        }
    ]


class MATLABSignalProcessing(VirtualFunctionTool):
    name = "MATLABSignalProcessing"
    summary = "Analyzes and manipulates signals."
    parameters: List[ArgParameter] = [
        {
            "name": "signal_data",
            "type": "array",
            "description": "Data representing the signal.",
            "required": True,
        },
        {
            "name": "operation",
            "type": "string",
            "description": "Type of signal processing operation (e.g., 'FFT', 'filter').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "processed_signal",
            "type": "array",
            "description": "The result of the signal processing operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The operation is unsupported or the signal data is invalid.",
        }
    ]


class MATLABOptimization(VirtualFunctionTool):
    name = "MATLABOptimization"
    summary = "Solves optimization problems."
    parameters: List[ArgParameter] = [
        {
            "name": "objective_function",
            "type": "string",
            "description": "The objective function to optimize.",
            "required": True,
        },
        {
            "name": "constraints",
            "type": "array",
            "description": "Constraints for the optimization problem.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimal_solution",
            "type": "object",
            "description": "The optimal solution found by the optimization algorithm.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The objective function is invalid or the constraints are incompatible.",
        }
    ]


@register_app()
class MATLAB(FunctionApp):
    name_for_human = "MATLAB App"
    description_for_human = "A powerful app for numerical analysis, data visualization, and algorithm development."
    name_for_model = "MATLAB"
    description_for_model = "The MATLAB app provides advanced functionalities for numerical computation, data visualization, algorithm development, data import/export, and statistical analysis, enabling developers and researchers to efficiently perform complex computations and derive insights from data."
    tool_classes = [
        MATLABNumericalComputation,
        MATLABDataVisualization,
        MATLABAlgorithmDevelopment,
        MATLABDataImport,
        MATLABDataExport,
        MATLABStatisticalAnalysis,
        MATLABSimulinkIntegration,
        MATLABMachineLearning,
        MATLABImageProcessing,
        MATLABSignalProcessing,
        MATLABOptimization,
    ]


#################### CodeQL ####################


class CodeQLQueryCode(VirtualFunctionTool):
    name = "CodeQLQueryCode"
    summary = "Execute a custom query against the specified codebase."
    parameters: List[ArgParameter] = [
        {
            "name": "query_string",
            "type": "string",
            "description": "The query to be executed. Must be a valid CodeQL query.",
            "required": True,
        },
        {
            "name": "codebase_path",
            "type": "string",
            "description": "The path to the codebase to analyze.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of results matching the query.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the query execution was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The query_string is malformed or invalid.",
        },
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to execute this query.",
        },
    ]


class CodeQLAnalyzeResults(VirtualFunctionTool):
    name = "CodeQLAnalyzeResults"
    summary = "Analyze the results of a previously executed query."
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "The results array from the query execution.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_summary",
            "type": "object",
            "description": "Summary of the analysis including number of vulnerabilities found, etc.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the analysis was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The results parameter is malformed.",
        }
    ]


class CodeQLManageQueries(VirtualFunctionTool):
    name = "CodeQLManageQueries"
    summary = "Create, read, update, or delete custom queries."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform - 'create', 'read', 'update', or 'delete'. Must be one of ['create', 'read', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "query_id",
            "type": "string",
            "description": "The unique identifier of the query for read/update/delete actions.",
            "required": False,
        },
        {
            "name": "query_string",
            "type": "string",
            "description": "The query string for create/update actions.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "query_id",
            "type": "string",
            "description": "The unique identifier of the created or modified query.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action parameter is malformed or unsupported.",
        },
        {
            "name": "NotFoundException",
            "description": "The query_id does not correspond to an existing query.",
        },
    ]


class CodeQLExportReport(VirtualFunctionTool):
    name = "CodeQLExportReport"
    summary = "Export the results of an analysis to a specified format."
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "The results array to export.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export to. Must be one of ['json', 'pdf'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported report file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the export was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format parameter is unsupported.",
        }
    ]


class CodeQLSearchVulnerabilities(VirtualFunctionTool):
    name = "CodeQLSearchVulnerabilities"
    summary = "Search for known vulnerabilities in the codebase."
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "The term to search for vulnerabilities.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "vulnerabilities",
            "type": "array",
            "description": "An array of known vulnerabilities matching the search term.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search_term is malformed.",
        }
    ]


class CodeQLIntegrateCI(VirtualFunctionTool):
    name = "CodeQLIntegrateCI"
    summary = "Integrate the app with a CI/CD pipeline."
    parameters: List[ArgParameter] = [
        {
            "name": "pipeline_config",
            "type": "string",
            "description": "The configuration details for the CI/CD pipeline.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "string",
            "description": "The status of the integration.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The pipeline_config is malformed.",
        }
    ]


class CodeQLRetrieveMetadata(VirtualFunctionTool):
    name = "CodeQLRetrieveMetadata"
    summary = "Retrieve metadata about the codebase."
    parameters: List[ArgParameter] = [
        {
            "name": "codebase_path",
            "type": "string",
            "description": "The path to the codebase.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "object",
            "description": "Metadata including file paths, function names, and variable types.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The codebase_path is malformed.",
        }
    ]


class CodeQLUserManagement(VirtualFunctionTool):
    name = "CodeQLUserManagement"
    summary = "Manage user access and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform - 'add', 'remove', or 'update'. Must be one of ['add', 'remove', 'update'].",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "The permissions to assign (only for add/update actions).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or user_id parameter is malformed.",
        },
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        },
    ]


class CodeQLDocumentationAccess(VirtualFunctionTool):
    name = "CodeQLDocumentationAccess"
    summary = "Access documentation and examples for writing queries."
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "The topic to retrieve documentation for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "documentation",
            "type": "string",
            "description": "The documentation content.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The topic parameter is unsupported.",
        }
    ]


class CodeQLVersionControlIntegration(VirtualFunctionTool):
    name = "CodeQLVersionControlIntegration"
    summary = "Integrate with version control systems."
    parameters: List[ArgParameter] = [
        {
            "name": "repository_url",
            "type": "string",
            "description": "The URL of the version control repository.",
            "required": True,
        },
        {
            "name": "branch",
            "type": "string",
            "description": "The branch to analyze.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "string",
            "description": "The status of the integration.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The repository_url or branch parameter is malformed.",
        }
    ]


class CodeQLDownloadQueryResults(VirtualFunctionTool):
    name = "CodeQLDownloadQueryResults"
    summary = "Download the results of a query to a local file."
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "The results array to download.",
            "required": True,
        },
        {
            "name": "file_format",
            "type": "string",
            "description": "The format to save the results. Must be one of ['json', 'csv'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the downloaded results file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file_format parameter is unsupported.",
        }
    ]


@register_app()
class CodeQL(FunctionApp):
    name_for_human = "CodeQL"
    description_for_human = "A app for querying codebases to identify vulnerabilities and security flaws."
    name_for_model = "CodeQL"
    description_for_model = "The CodeQL app provides developers with powerful tools for querying codebases to identify vulnerabilities and security flaws, manage custom queries, and integrate with CI/CD pipelines, all while ensuring secure and efficient code analysis."
    tool_classes = [
        CodeQLQueryCode,
        CodeQLAnalyzeResults,
        CodeQLManageQueries,
        CodeQLExportReport,
        CodeQLSearchVulnerabilities,
        CodeQLIntegrateCI,
        CodeQLRetrieveMetadata,
        CodeQLUserManagement,
        CodeQLDocumentationAccess,
        CodeQLVersionControlIntegration,
        CodeQLDownloadQueryResults,
    ]


#################### AzureMachineLearning ####################


class AzureMachineLearningDataPreparation(VirtualFunctionTool):
    name = "AzureMachineLearningDataPreparation"
    summary = "Tool for cleaning and transforming datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The dataset in a specified format (e.g., CSV, JSON) to be prepared.",
            "required": True,
        },
        {
            "name": "operations",
            "type": "array",
            "description": "A list of operations to perform (e.g., 'remove_duplicates', 'fill_missing_values').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prepared_data",
            "type": "string",
            "description": "The cleaned and transformed dataset.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningModelTraining(VirtualFunctionTool):
    name = "AzureMachineLearningModelTraining"
    summary = "Tool for training machine learning models."
    parameters: List[ArgParameter] = [
        {
            "name": "prepared_data",
            "type": "string",
            "description": "The cleaned dataset to train the model.",
            "required": True,
        },
        {
            "name": "algorithm",
            "type": "string",
            "description": "The algorithm to use (e.g., 'RandomForest', 'SVM'). Must be one of ['RandomForest', 'SVM', 'LogisticRegression', 'NeuralNetwork'].",
            "required": True,
        },
        {
            "name": "hyperparameters",
            "type": "object",
            "description": "The hyperparameters for the selected algorithm.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningModelEvaluation(VirtualFunctionTool):
    name = "AzureMachineLearningModelEvaluation"
    summary = "Tool for evaluating model performance."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier of the model to evaluate.",
            "required": True,
        },
        {
            "name": "test_data",
            "type": "string",
            "description": "The dataset for testing the model.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_metrics",
            "type": "object",
            "description": "An object containing metrics like accuracy, precision, and recall.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningModelDeployment(VirtualFunctionTool):
    name = "AzureMachineLearningModelDeployment"
    summary = "Tool for deploying trained models as web services."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier of the model to deploy.",
            "required": True,
        },
        {
            "name": "service_name",
            "type": "string",
            "description": "The name for the deployed service.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_status",
            "type": "string",
            "description": "The status of the deployment (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningExperimentTracking(VirtualFunctionTool):
    name = "AzureMachineLearningExperimentTracking"
    summary = "Tool for logging and tracking experiments."
    parameters: List[ArgParameter] = [
        {
            "name": "experiment_id",
            "type": "string",
            "description": "The identifier for the experiment to log.",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "The parameters used in the experiment.",
            "required": True,
        },
        {
            "name": "metrics",
            "type": "object",
            "description": "The metrics to log for the experiment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_status",
            "type": "string",
            "description": "The status of the logging operation (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningVersionControl(VirtualFunctionTool):
    name = "AzureMachineLearningVersionControl"
    summary = "Tool for managing versions of datasets and models."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "The identifier of the resource (dataset or model) to version.",
            "required": True,
        },
        {
            "name": "version_info",
            "type": "object",
            "description": "Information about the new version (e.g., description, change log).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "version_id",
            "type": "string",
            "description": "The unique identifier for the new version.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningCollaboration(VirtualFunctionTool):
    name = "AzureMachineLearningCollaboration"
    summary = "Tool for sharing projects with team members."
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "The identifier of the project to share.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email of the user to share the project with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_status",
            "type": "string",
            "description": "The status of the sharing operation (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningIntegration(VirtualFunctionTool):
    name = "AzureMachineLearningIntegration"
    summary = "Tool for integrating with other Azure services."
    parameters: List[ArgParameter] = [
        {
            "name": "service_name",
            "type": "string",
            "description": "The name of the Azure service to integrate with.",
            "required": True,
        },
        {
            "name": "configuration",
            "type": "object",
            "description": "The configuration settings for the integration.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "string",
            "description": "The status of the integration operation (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningAutoML(VirtualFunctionTool):
    name = "AzureMachineLearningAutoML"
    summary = "Tool for automated machine learning."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset",
            "type": "string",
            "description": "The dataset to analyze for model training.",
            "required": True,
        },
        {
            "name": "target_variable",
            "type": "string",
            "description": "The name of the target variable to predict.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "best_model_id",
            "type": "string",
            "description": "The identifier of the best model found.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningDataVisualization(VirtualFunctionTool):
    name = "AzureMachineLearningDataVisualization"
    summary = "Tool for visualizing data and model results."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The dataset or model results to visualize.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization (e.g., 'scatter', 'bar'). Must be one of ['scatter', 'bar', 'line'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "The URL of the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningStoredDataAccess(VirtualFunctionTool):
    name = "AzureMachineLearningStoredDataAccess"
    summary = "Tool for accessing stored user data like addresses or payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (e.g., 'address', 'payment'). Must be one of ['address', 'payment'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "The accessed data containing relevant fields based on the data type.",
        }
    ]
    exceptions: List[ArgException] = []


class AzureMachineLearningResourceManagement(VirtualFunctionTool):
    name = "AzureMachineLearningResourceManagement"
    summary = "Tool for managing cloud resources."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "The identifier of the resource to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'start', 'stop', 'delete'). Must be one of ['start', 'stop', 'delete'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operation_status",
            "type": "string",
            "description": "The status of the operation (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class AzureMachineLearning(FunctionApp):
    name_for_human = "Azure Machine Learning"
    description_for_human = (
        "App for managing the machine learning lifecycle on Microsoft Azure."
    )
    name_for_model = "AzureMachineLearning"
    description_for_model = "A comprehensive app for data scientists and machine learning engineers to efficiently prepare data, train and evaluate models, deploy services, and track experiments using Microsoft Azure's cloud capabilities."
    tool_classes = [
        AzureMachineLearningDataPreparation,
        AzureMachineLearningModelTraining,
        AzureMachineLearningModelEvaluation,
        AzureMachineLearningModelDeployment,
        AzureMachineLearningExperimentTracking,
        AzureMachineLearningVersionControl,
        AzureMachineLearningCollaboration,
        AzureMachineLearningIntegration,
        AzureMachineLearningAutoML,
        AzureMachineLearningDataVisualization,
        AzureMachineLearningStoredDataAccess,
        AzureMachineLearningResourceManagement,
    ]


#################### GoogleCloudAI ####################


class GoogleCloudAISpeechRecognition(VirtualFunctionTool):
    name = "GoogleCloudAISpeechRecognition"
    summary = "Converts spoken language into text."
    parameters: List[ArgParameter] = [
        {
            "name": "audio_file_path",
            "type": "string",
            "description": "Path to the audio file to be transcribed (local file path required).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transcription",
            "type": "string",
            "description": "The transcribed text from the audio.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIImageAnalysis(VirtualFunctionTool):
    name = "GoogleCloudAIImageAnalysis"
    summary = "Analyzes images for object detection and recognition."
    parameters: List[ArgParameter] = [
        {
            "name": "image_file_path",
            "type": "string",
            "description": "Path to the image file to be analyzed (local file path required).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains detected objects and their confidence scores.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAINaturalLanguageUnderstanding(VirtualFunctionTool):
    name = "GoogleCloudAINaturalLanguageUnderstanding"
    summary = "Processes and analyzes text to extract meaning."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains sentiment score, key entities, and intent.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAITextToSpeech(VirtualFunctionTool):
    name = "GoogleCloudAITextToSpeech"
    summary = "Converts text into spoken audio."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to convert to speech.",
            "required": True,
        },
        {
            "name": "output_audio_path",
            "type": "string",
            "description": "Path to save the output audio file (local file path required).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the conversion was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAITranslationService(VirtualFunctionTool):
    name = "GoogleCloudAITranslationService"
    summary = "Translates text from one language to another."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to translate.",
            "required": True,
        },
        {
            "name": "source_language",
            "type": "string",
            "description": "The source language code (e.g., 'en' for English).",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "The target language code (e.g., 'fr' for French).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "translated_text",
            "type": "string",
            "description": "The translated text.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIDocumentAnalysis(VirtualFunctionTool):
    name = "GoogleCloudAIDocumentAnalysis"
    summary = "Extracts information from documents."
    parameters: List[ArgParameter] = [
        {
            "name": "document_file_path",
            "type": "string",
            "description": "Path to the document file (local file path required).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "extracted_info",
            "type": "object",
            "description": "Contains key entities and summaries.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAICustomModelTraining(VirtualFunctionTool):
    name = "GoogleCloudAICustomModelTraining"
    summary = "Allows developers to create and train custom models."
    parameters: List[ArgParameter] = [
        {
            "name": "training_data_path",
            "type": "string",
            "description": "Path to the training data file (local file path required).",
            "required": True,
        },
        {
            "name": "model_parameters",
            "type": "object",
            "description": "Contains parameters for model training.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIVideoAnalysis(VirtualFunctionTool):
    name = "GoogleCloudAIVideoAnalysis"
    summary = "Analyzes video content for object and action recognition."
    parameters: List[ArgParameter] = [
        {
            "name": "video_file_path",
            "type": "string",
            "description": "Path to the video file (local file path required).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains detected actions and objects in the video.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIChatbotIntegration(VirtualFunctionTool):
    name = "GoogleCloudAIChatbotIntegration"
    summary = "Provides tools for building chatbots."
    parameters: List[ArgParameter] = [
        {
            "name": "user_query",
            "type": "string",
            "description": "The user's query to process.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "string",
            "description": "The chatbot's response to the user's query.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIDataVisualization(VirtualFunctionTool):
    name = "GoogleCloudAIDataVisualization"
    summary = "Generates visual representations of data insights."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to visualize.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_path",
            "type": "string",
            "description": "Path to the generated visualization (local file path).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCloudAIStoredDataAccess(VirtualFunctionTool):
    name = "GoogleCloudAIStoredDataAccess"
    summary = "Retrieves stored user data such as preferences or previous analyses."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (e.g., 'preferences', 'previous_analysis').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "data", "type": "object", "description": "The requested stored data."}
    ]
    exceptions: List[ArgException] = []


@register_app()
class GoogleCloudAI(FunctionApp):
    name_for_human = "Google Cloud AI"
    description_for_human = "A collection of machine learning services that allows developers to integrate AI functionalities into applications."
    name_for_model = "GoogleCloudAI"
    description_for_model = "GoogleCloudAI is a comprehensive app that provides developers with machine learning services to integrate AI functionalities into applications, including speech recognition, image analysis, natural language understanding, and more, facilitating enhanced decision-making and user interaction."
    tool_classes = [
        GoogleCloudAISpeechRecognition,
        GoogleCloudAIImageAnalysis,
        GoogleCloudAINaturalLanguageUnderstanding,
        GoogleCloudAITextToSpeech,
        GoogleCloudAITranslationService,
        GoogleCloudAIDocumentAnalysis,
        GoogleCloudAICustomModelTraining,
        GoogleCloudAIVideoAnalysis,
        GoogleCloudAIChatbotIntegration,
        GoogleCloudAIDataVisualization,
        GoogleCloudAIStoredDataAccess,
    ]


#################### Tableau ####################


class TableauConnectToDataSource(VirtualFunctionTool):
    name = "TableauConnectToDataSource"
    summary = "Establishes a connection to a specified data source."
    parameters: List[ArgParameter] = [
        {
            "name": "data_source_type",
            "type": "string",
            "description": "The type of data source to connect to (e.g., 'Excel', 'SQL', 'CSV').",
            "required": True,
        },
        {
            "name": "connection_string",
            "type": "string",
            "description": "The connection details for the data source.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the connection was successful.",
        },
        {
            "name": "data_source_id",
            "type": "string",
            "description": "The unique identifier for the connected data source.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the data_source_type or connection_string parameters are malformed.",
        }
    ]


class TableauCreateVisualization(VirtualFunctionTool):
    name = "TableauCreateVisualization"
    summary = "Creates a visualization based on specified parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "data_source_id",
            "type": "string",
            "description": "The unique identifier of the data source used for the visualization.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization to create (e.g., 'Bar', 'Line', 'Map').",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "Additional parameters for the visualization (e.g., filters, dimensions).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier for the created visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any of the parameters are incorrect or not formatted correctly.",
        }
    ]


class TableauBuildDashboard(VirtualFunctionTool):
    name = "TableauBuildDashboard"
    summary = "Compiles multiple visualizations into a single dashboard."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_ids",
            "type": "array",
            "description": "An array of unique identifiers for the visualizations to include.",
            "required": True,
        },
        {
            "name": "dashboard_name",
            "type": "string",
            "description": "The name of the dashboard.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "The unique identifier for the created dashboard.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the visualization_ids array is empty or contains invalid IDs.",
        }
    ]


class TableauShareVisualization(VirtualFunctionTool):
    name = "TableauShareVisualization"
    summary = "Shares a specific visualization with designated users."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization to share.",
            "required": True,
        },
        {
            "name": "user_emails",
            "type": "array",
            "description": "An array of email addresses of users to share with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the visualization_id is invalid or user_emails is empty.",
        },
        {
            "name": "AuthorizationException",
            "description": "If the user lacks permission to share the visualization.",
        },
    ]


class TableauExportVisualization(VirtualFunctionTool):
    name = "TableauExportVisualization"
    summary = "Exports a visualization in a specified format."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization to export.",
            "required": True,
        },
        {
            "name": "export_format",
            "type": "string",
            "description": "The format for exporting (e.g., 'PDF', 'PNG').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the visualization_id is invalid or export_format is not supported.",
        }
    ]


class TableauFilterData(VirtualFunctionTool):
    name = "TableauFilterData"
    summary = "Applies filters to a specified visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization to filter.",
            "required": True,
        },
        {
            "name": "filter_criteria",
            "type": "object",
            "description": "The criteria for filtering the data (e.g., date range, categories).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the filtering was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the visualization_id is invalid or filter_criteria is malformed.",
        }
    ]


class TableauAnalyzeDataTrends(VirtualFunctionTool):
    name = "TableauAnalyzeDataTrends"
    summary = "Performs analysis on a specified visualization to identify trends."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_results",
            "type": "object",
            "description": "The results of the trend analysis.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the visualization_id does not exist.",
        }
    ]


class TableauAddInteractivity(VirtualFunctionTool):
    name = "TableauAddInteractivity"
    summary = "Adds interactive features to a dashboard."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "The unique identifier of the dashboard.",
            "required": True,
        },
        {
            "name": "interactivity_options",
            "type": "object",
            "description": "The options for interactivity (e.g., dropdowns, filters).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the interactivity was added successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the dashboard_id is invalid or interactivity_options are not supported.",
        }
    ]


class TableauDataBlend(VirtualFunctionTool):
    name = "TableauDataBlend"
    summary = "Blends data from multiple sources for visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "data_source_ids",
            "type": "array",
            "description": "An array of unique identifiers for the data sources to blend.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "blended_data_id",
            "type": "string",
            "description": "The unique identifier for the blended data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the data_source_ids array is empty or contains invalid IDs.",
        }
    ]


class TableauCreateCustomCalculation(VirtualFunctionTool):
    name = "TableauCreateCustomCalculation"
    summary = "Creates a custom calculation for a visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization.",
            "required": True,
        },
        {
            "name": "calculation_formula",
            "type": "string",
            "description": "The formula for the calculation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "calculation_id",
            "type": "string",
            "description": "The unique identifier for the created calculation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the calculation_formula is invalid or if the visualization_id does not exist.",
        }
    ]


class TableauGetStoredDataAccess(VirtualFunctionTool):
    name = "TableauGetStoredDataAccess"
    summary = "Retrieves stored user data such as preferences or saved settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_preferences",
            "type": "object",
            "description": "The stored user preferences and settings.",
        }
    ]
    exceptions: List[ArgException] = []


class TableauDeleteVisualization(VirtualFunctionTool):
    name = "TableauDeleteVisualization"
    summary = "Deletes a specified visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier of the visualization to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the visualization_id does not exist.",
        },
        {
            "name": "AuthorizationException",
            "description": "If the user lacks permission to delete the visualization.",
        },
    ]


@register_app()
class Tableau(FunctionApp):
    name_for_human = "Tableau"
    description_for_human = "A powerful data visualization tool for creating interactive dashboards and analyzing data trends."
    name_for_model = "Tableau"
    description_for_model = "The Tableau app allows data analysts to connect to various data sources, create interactive visualizations and dashboards, and share insights effectively while ensuring data integrity and security."
    tool_classes = [
        TableauConnectToDataSource,
        TableauCreateVisualization,
        TableauBuildDashboard,
        TableauShareVisualization,
        TableauExportVisualization,
        TableauFilterData,
        TableauAnalyzeDataTrends,
        TableauAddInteractivity,
        TableauDataBlend,
        TableauCreateCustomCalculation,
        TableauGetStoredDataAccess,
        TableauDeleteVisualization,
    ]


#################### H2O ####################


class H2OTrainModel(VirtualFunctionTool):
    name = "H2OTrainModel"
    summary = (
        "Facilitates the training of machine learning models on user-provided datasets."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the dataset file (CSV, JSON) for training.",
            "required": True,
        },
        {
            "name": "algorithm",
            "type": "string",
            "description": "The algorithm to use for training (e.g., 'RandomForest', 'GradientBoosting').",
            "required": True,
        },
        {
            "name": "target_variable",
            "type": "string",
            "description": "The name of the target variable in the dataset.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "A unique identifier for the trained model.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the training was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_path, algorithm, or target_variable is invalid or malformed.",
        }
    ]


class H2OPreprocessData(VirtualFunctionTool):
    name = "H2OPreprocessData"
    summary = "Handles data cleaning and transformations before model training."
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the dataset file (CSV, JSON) for preprocessing.",
            "required": True,
        },
        {
            "name": "missing_value_strategy",
            "type": "string",
            "description": "Strategy for handling missing values (e.g., 'drop', 'mean', 'median').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cleaned_data_path",
            "type": "string",
            "description": "The path to the cleaned dataset file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the preprocessing was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_path or missing_value_strategy is invalid or malformed.",
        }
    ]


class H2OEvaluateModel(VirtualFunctionTool):
    name = "H2OEvaluateModel"
    summary = "Evaluates the performance of a trained model using specified metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
            "required": True,
        },
        {
            "name": "test_data_path",
            "type": "string",
            "description": "The path to the test dataset file for evaluation.",
            "required": True,
        },
        {
            "name": "metrics",
            "type": "array",
            "description": "List of metrics to evaluate (e.g., ['accuracy', 'precision']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_results",
            "type": "object",
            "description": "An object containing the evaluation metrics and their values.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the evaluation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model_id, test_data_path, or metrics are invalid or malformed.",
        }
    ]


class H2OTuneHyperparameters(VirtualFunctionTool):
    name = "H2OTuneHyperparameters"
    summary = "Optimizes model hyperparameters to enhance performance."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
            "required": True,
        },
        {
            "name": "param_grid",
            "type": "object",
            "description": "An object specifying the hyperparameters and their ranges for tuning.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "best_params",
            "type": "object",
            "description": "The best hyperparameter values found during tuning.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tuning was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model_id or param_grid is invalid or malformed.",
        }
    ]


class H2OPredict(VirtualFunctionTool):
    name = "H2OPredict"
    summary = "Makes predictions on new data using a trained model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
            "required": True,
        },
        {
            "name": "new_data_path",
            "type": "string",
            "description": "The path to the new dataset file (CSV, JSON) for making predictions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "predictions",
            "type": "array",
            "description": "An array of predictions made by the model.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the prediction was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model_id or new_data_path is invalid or malformed.",
        }
    ]


class H2ODeployModel(VirtualFunctionTool):
    name = "H2ODeployModel"
    summary = "Deploys a trained model for real-time predictions."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
            "required": True,
        },
        {
            "name": "deployment_type",
            "type": "string",
            "description": "The type of deployment (e.g., 'API', 'Batch').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_url",
            "type": "string",
            "description": "The URL for accessing the deployed model.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deployment was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model_id or deployment_type is invalid or malformed.",
        }
    ]


class H2OVisualizeData(VirtualFunctionTool):
    name = "H2OVisualizeData"
    summary = "Generates visualizations to help users understand their data."
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the dataset file (CSV, JSON) for visualization.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization to generate (e.g., 'histogram', 'scatter').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "The URL for accessing the generated visualization.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the visualization was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_path or visualization_type is invalid or malformed.",
        }
    ]


class H2OSelectFeatures(VirtualFunctionTool):
    name = "H2OSelectFeatures"
    summary = "Identifies and selects the most relevant features for model training."
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the dataset file (CSV, JSON) for feature selection.",
            "required": True,
        },
        {
            "name": "selection_method",
            "type": "string",
            "description": "The method for feature selection (e.g., 'Recursive', 'Lasso').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "selected_features",
            "type": "array",
            "description": "An array of selected feature names.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the feature selection was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_path or selection_method is invalid or malformed.",
        }
    ]


class H2OGenerateReport(VirtualFunctionTool):
    name = "H2OGenerateReport"
    summary = "Creates a report summarizing model performance and insights."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
            "required": True,
        },
        {
            "name": "report_format",
            "type": "string",
            "description": "The format of the report (e.g., 'PDF', 'HTML').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "The URL for accessing the generated report.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model_id or report_format is invalid or malformed.",
        }
    ]


class H2OConnectDataSource(VirtualFunctionTool):
    name = "H2OConnectDataSource"
    summary = "Connects to external data sources for importing data."
    parameters: List[ArgParameter] = [
        {
            "name": "source_type",
            "type": "string",
            "description": "The type of data source (e.g., 'Database', 'Cloud').",
            "required": True,
        },
        {
            "name": "connection_details",
            "type": "object",
            "description": "An object containing connection details (e.g., host, port, credentials).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "connection_status",
            "type": "string",
            "description": "The status of the connection attempt.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the connection was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The source_type or connection_details are invalid or malformed.",
        }
    ]


class H2OAccessStoredData(VirtualFunctionTool):
    name = "H2OAccessStoredData"
    summary = "Retrieves stored user data, such as previously used datasets or model configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to retrieve (e.g., 'datasets', 'models').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data_list",
            "type": "array",
            "description": "An array of stored data items relevant to the specified type.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type is invalid or malformed.",
        }
    ]


@register_app()
class H2O(FunctionApp):
    name_for_human = "H2O"
    description_for_human = "A app for data scientists and business analysts to build, evaluate, and deploy machine learning models efficiently."
    name_for_model = "H2O"
    description_for_model = "This app provides a comprehensive suite of tools for data scientists and business analysts to efficiently build, evaluate, and deploy machine learning models, while ensuring proper data preprocessing and compliance with data regulations."
    tool_classes = [
        H2OTrainModel,
        H2OPreprocessData,
        H2OEvaluateModel,
        H2OTuneHyperparameters,
        H2OPredict,
        H2ODeployModel,
        H2OVisualizeData,
        H2OSelectFeatures,
        H2OGenerateReport,
        H2OConnectDataSource,
        H2OAccessStoredData,
    ]


#################### Watson ####################


class WatsonNaturalLanguageProcessing(VirtualFunctionTool):
    name = "WatsonNaturalLanguageProcessing"
    summary = "Offers various NLP functionalities such as sentiment analysis, keyword extraction, and language detection."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to analyze for NLP tasks.",
            "required": True,
        },
        {
            "name": "task",
            "type": "string",
            "description": "The specific NLP task to perform, options: 'sentiment_analysis', 'keyword_extraction', 'language_detection'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "result",
            "type": "object",
            "description": "The result of the NLP task performed, which varies based on the task selected. The object contains the following fields: 'sentiment' (string, the sentiment score if sentiment analysis is performed), 'keywords' (array, list of extracted keywords if keyword extraction is performed), 'language' (string, detected language if language detection is performed).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'task' parameter must be one of the specified options.",
        }
    ]


class WatsonModelTraining(VirtualFunctionTool):
    name = "WatsonModelTraining"
    summary = "Allows users to train machine learning models with their datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_path",
            "type": "string",
            "description": "The path to the dataset file (CSV or JSON) for training.",
            "required": True,
        },
        {
            "name": "model_type",
            "type": "string",
            "description": "The type of model to train, options: 'classification', 'regression'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'model_type' must be one of the specified options.",
        }
    ]


class WatsonDataAnalysis(VirtualFunctionTool):
    name = "WatsonDataAnalysis"
    summary = "Performs data analysis on structured and unstructured datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the data file (CSV or JSON) to analyze.",
            "required": True,
        },
        {
            "name": "analysis_type",
            "type": "string",
            "description": "The type of analysis to perform, options: 'summary_statistics', 'correlation_analysis'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "The results of the data analysis performed. The object contains the following fields: 'summary' (object, summary statistics if summary_statistics is performed), 'correlation' (object, correlation matrix if correlation_analysis is performed).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'analysis_type' must be one of the specified options.",
        }
    ]


class WatsonChatbotDevelopment(VirtualFunctionTool):
    name = "WatsonChatbotDevelopment"
    summary = "Creates and manages chatbots for customer interactions."
    parameters: List[ArgParameter] = [
        {
            "name": "intent",
            "type": "string",
            "description": "The intent of the chatbot, e.g., 'greeting', 'faq'.",
            "required": True,
        },
        {
            "name": "response",
            "type": "string",
            "description": "The response message for the given intent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "chatbot_id",
            "type": "string",
            "description": "The unique identifier for the created chatbot.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'intent' must be a valid chatbot intent.",
        }
    ]


class WatsonApiIntegration(VirtualFunctionTool):
    name = "WatsonApiIntegration"
    summary = "Integrates with external APIs to extend functionality."
    parameters: List[ArgParameter] = [
        {
            "name": "api_name",
            "type": "string",
            "description": "The name of the API to integrate with.",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "The API key for authentication.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'api_name' must be a valid API name.",
        }
    ]


class WatsonVoiceRecognition(VirtualFunctionTool):
    name = "WatsonVoiceRecognition"
    summary = "Converts spoken language into text."
    parameters: List[ArgParameter] = [
        {
            "name": "audio_path",
            "type": "string",
            "description": "The path to the audio file for voice recognition.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transcribed_text",
            "type": "string",
            "description": "The transcribed text from the audio.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The audio file format is not supported.",
        }
    ]


class WatsonImageRecognition(VirtualFunctionTool):
    name = "WatsonImageRecognition"
    summary = "Analyzes images and classifies them."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "The path to the image file for recognition.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "classification_result",
            "type": "object",
            "description": "The result of the image classification. The object contains the following fields: 'label' (string, the label assigned to the image), 'confidence' (number, the confidence score of the classification).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The image file format is not supported.",
        }
    ]


class WatsonPredictiveAnalytics(VirtualFunctionTool):
    name = "WatsonPredictiveAnalytics"
    summary = "Forecasts future trends based on historical data."
    parameters: List[ArgParameter] = [
        {
            "name": "historical_data_path",
            "type": "string",
            "description": "The path to the historical data file (CSV or JSON).",
            "required": True,
        },
        {
            "name": "forecast_period",
            "type": "integer",
            "description": "The number of periods to forecast.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast_result",
            "type": "array",
            "description": "The forecasted values for the specified period.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The forecast period must be a positive integer.",
        }
    ]


class WatsonUserManagement(VirtualFunctionTool):
    name = "WatsonUserManagement"
    summary = "Manages user profiles and preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "The preferences to update for the user. The object contains the following fields: 'language' (string, preferred language for communication), 'timezone' (string, preferred timezone).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "boolean",
            "description": "Indicates whether the preferences were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified user_id does not exist.",
        }
    ]


class WatsonReporting(VirtualFunctionTool):
    name = "WatsonReporting"
    summary = "Generates reports based on data analysis results."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate, options: 'summary', 'detailed'.",
            "required": True,
        },
        {
            "name": "data_path",
            "type": "string",
            "description": "The path to the data file (CSV or JSON) for the report.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_path",
            "type": "string",
            "description": "The path to the generated report file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'report_type' must be one of the specified options.",
        }
    ]


class WatsonRetrieveModel(VirtualFunctionTool):
    name = "WatsonRetrieveModel"
    summary = "Retrieves the unique identifier for a model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_name",
            "type": "string",
            "description": "The name of the model to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the retrieved model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The model with the specified name does not exist.",
        }
    ]


class WatsonRetrieveChatbot(VirtualFunctionTool):
    name = "WatsonRetrieveChatbot"
    summary = "Retrieves the unique identifier for a chatbot."
    parameters: List[ArgParameter] = [
        {
            "name": "chatbot_name",
            "type": "string",
            "description": "The name of the chatbot to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "chatbot_id",
            "type": "string",
            "description": "The unique identifier for the retrieved chatbot.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The chatbot with the specified name does not exist.",
        }
    ]


class WatsonRetrieveUser(VirtualFunctionTool):
    name = "WatsonRetrieveUser"
    summary = "Retrieves the unique identifier for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the user to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the retrieved user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified username does not exist.",
        }
    ]


@register_app()
class Watson(FunctionApp):
    name_for_human = "Watson"
    description_for_human = "A comprehensive AI app designed for developers and enterprises, providing functionalities for natural language processing, machine learning model training, data analysis, chatbot development, and integration with external APIs."
    name_for_model = "Watson"
    description_for_model = "A comprehensive AI app for developers and enterprises, providing functionalities for NLP, model training, data analysis, chatbot development, and API integration."
    tool_classes = [
        WatsonNaturalLanguageProcessing,
        WatsonModelTraining,
        WatsonDataAnalysis,
        WatsonChatbotDevelopment,
        WatsonApiIntegration,
        WatsonVoiceRecognition,
        WatsonImageRecognition,
        WatsonPredictiveAnalytics,
        WatsonUserManagement,
        WatsonReporting,
        WatsonRetrieveModel,
        WatsonRetrieveChatbot,
        WatsonRetrieveUser,
    ]


#################### DataRobot ####################


class DataRobotDataPreparation(VirtualFunctionTool):
    name = "DataRobotDataPreparation"
    summary = "Clean and transform datasets to ensure they are suitable for modeling."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset",
            "type": "string",
            "description": "The dataset to be prepared.",
            "required": True,
        },
        {
            "name": "cleaning_steps",
            "type": "string",
            "description": "Instructions for data cleaning (e.g., 'remove duplicates').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prepared_dataset",
            "type": "string",
            "description": "The cleaned dataset.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'dataset' or 'cleaning_steps' parameter is malformed.",
        }
    ]


class DataRobotModelTraining(VirtualFunctionTool):
    name = "DataRobotModelTraining"
    summary = "Train a machine learning model on the prepared dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "prepared_dataset",
            "type": "string",
            "description": "The dataset used for training.",
            "required": True,
        },
        {
            "name": "algorithm",
            "type": "string",
            "description": "The algorithm to use (e.g., 'RandomForest', 'XGBoost').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'prepared_dataset' is incorrect or the 'algorithm' is unsupported.",
        }
    ]


class DataRobotModelEvaluation(VirtualFunctionTool):
    name = "DataRobotModelEvaluation"
    summary = "Evaluate the performance of a trained model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier for the model to evaluate.",
            "required": True,
        },
        {
            "name": "test_dataset",
            "type": "string",
            "description": "The dataset for testing the model.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_metrics",
            "type": "object",
            "description": "Includes fields like accuracy, precision, recall, and F1 score.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'model_id' or 'test_dataset' is invalid.",
        }
    ]


class DataRobotModelDeployment(VirtualFunctionTool):
    name = "DataRobotModelDeployment"
    summary = "Deploy a trained model as an API for predictions."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier for the model to deploy.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_url",
            "type": "string",
            "description": "The URL for accessing the deployed model.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'model_id' is invalid."}
    ]


class DataRobotModelManagement(VirtualFunctionTool):
    name = "DataRobotModelManagement"
    summary = "Manage different versions of models."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier for the model.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'archive', 'delete').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'model_id' is invalid or the 'action' is unsupported.",
        }
    ]


class DataRobotFeatureEngineering(VirtualFunctionTool):
    name = "DataRobotFeatureEngineering"
    summary = "Automatically generate new features from the dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset",
            "type": "string",
            "description": "The dataset for feature engineering.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "new_features",
            "type": "string",
            "description": "The dataset with new features added.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'dataset' is malformed.",
        }
    ]


class DataRobotHyperparameterTuning(VirtualFunctionTool):
    name = "DataRobotHyperparameterTuning"
    summary = "Optimize model parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier for the model.",
            "required": True,
        },
        {
            "name": "parameter_space",
            "type": "string",
            "description": "The range of parameters to tune.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_model_id",
            "type": "string",
            "description": "The identifier for the optimized model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'model_id' or 'parameter_space' is invalid.",
        }
    ]


class DataRobotDataVisualization(VirtualFunctionTool):
    name = "DataRobotDataVisualization"
    summary = "Provide visualizations for data and model performance."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The dataset or performance metrics to visualize.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "A link to the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'data' is malformed."}
    ]


class DataRobotDataIntegration(VirtualFunctionTool):
    name = "DataRobotDataIntegration"
    summary = "Pull data from external sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source",
            "type": "string",
            "description": "The external data source (e.g., 'database', 'API').",
            "required": True,
        },
        {
            "name": "query",
            "type": "string",
            "description": "The query to fetch data.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fetched_data",
            "type": "string",
            "description": "The data retrieved from the external source.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'source' is unsupported or the 'query' is malformed.",
        }
    ]


class DataRobotUserFeedback(VirtualFunctionTool):
    name = "DataRobotUserFeedback"
    summary = "Collect feedback on model predictions."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The identifier for the model.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The user feedback on model predictions.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was successfully recorded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'model_id' is invalid or the 'feedback' is malformed.",
        }
    ]


class DataRobotStoredDataAccess(VirtualFunctionTool):
    name = "DataRobotStoredDataAccess"
    summary = "Access stored user data like previous datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (e.g., 'datasets', 'models').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "string",
            "description": "The requested stored data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'data_type' is unsupported.",
        }
    ]


@register_app()
class DataRobot(FunctionApp):
    name_for_human = "Data Robot"
    description_for_human = "App for automating the process of building and deploying predictive models."
    name_for_model = "DataRobot"
    description_for_model = "The DataRobot app provides users with a comprehensive set of tools for data preparation, model training, evaluation, deployment, and management, enabling them to automate machine learning processes while addressing potential risks associated with data integrity and model performance."
    tool_classes = [
        DataRobotDataPreparation,
        DataRobotModelTraining,
        DataRobotModelEvaluation,
        DataRobotModelDeployment,
        DataRobotModelManagement,
        DataRobotFeatureEngineering,
        DataRobotHyperparameterTuning,
        DataRobotDataVisualization,
        DataRobotDataIntegration,
        DataRobotUserFeedback,
        DataRobotStoredDataAccess,
    ]


#################### Kibana ####################


class KibanaCreateVisualization(VirtualFunctionTool):
    name = "KibanaCreateVisualization"
    summary = "Create a new visualization based on specified parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization to create (e.g., 'bar', 'line', 'pie').",
            "required": True,
        },
        {
            "name": "data_query",
            "type": "string",
            "description": "The Elasticsearch query to retrieve data.",
            "required": True,
        },
        {
            "name": "options",
            "type": "object",
            "description": "Additional options for the visualization such as colors, labels, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The unique identifier for the created visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request for creating a visualization is malformed or contains invalid parameters.",
        }
    ]


class KibanaCreateDashboard(VirtualFunctionTool):
    name = "KibanaCreateDashboard"
    summary = "Create a new dashboard that can contain multiple visualizations."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_name",
            "type": "string",
            "description": "The name of the dashboard.",
            "required": True,
        },
        {
            "name": "visualization_ids",
            "type": "array",
            "description": "A list of visualization IDs to include in the dashboard.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "The unique identifier for the created dashboard.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request for creating a dashboard is invalid or contains invalid visualization IDs.",
        }
    ]


class KibanaSearchData(VirtualFunctionTool):
    name = "KibanaSearchData"
    summary = "Search for data in Elasticsearch based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to execute.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 100).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "The search results matching the query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search query is erroneous or malformed.",
        }
    ]


class KibanaSetAlert(VirtualFunctionTool):
    name = "KibanaSetAlert"
    summary = "Set up an alert based on specific conditions in the data."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_name",
            "type": "string",
            "description": "The name of the alert.",
            "required": True,
        },
        {
            "name": "condition",
            "type": "string",
            "description": "The condition that triggers the alert.",
            "required": True,
        },
        {
            "name": "notification_channel",
            "type": "string",
            "description": "The channel to send notifications (e.g., 'email', 'slack').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "The unique identifier for the created alert.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The alert condition is invalid or malformed.",
        }
    ]


class KibanaGenerateReport(VirtualFunctionTool):
    name = "KibanaGenerateReport"
    summary = "Generate a report based on a visualization or dashboard."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., 'PDF', 'CSV').",
            "required": True,
        },
        {
            "name": "source_id",
            "type": "string",
            "description": "The ID of the visualization or dashboard to report on.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_path",
            "type": "string",
            "description": "The path to the generated report file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report request is invalid or the source ID does not exist.",
        }
    ]


class KibanaImportData(VirtualFunctionTool):
    name = "KibanaImportData"
    summary = "Import a dataset into Elasticsearch from a specified source."
    parameters: List[ArgParameter] = [
        {
            "name": "source_path",
            "type": "string",
            "description": "The path to the data source (e.g., a CSV file).",
            "required": True,
        },
        {
            "name": "data_format",
            "type": "string",
            "description": "The format of the data (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "import_status",
            "type": "boolean",
            "description": "Indicates whether the import was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data format is unsupported or the source path is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "There was a conflict during the data import process.",
        },
    ]


class KibanaManageUser(VirtualFunctionTool):
    name = "KibanaManageUser"
    summary = "Manage user roles and permissions for accessing Kibana features."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "A list of permissions to assign (e.g., 'view', 'edit').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user ID is invalid or the permissions list is malformed.",
        },
        {
            "name": "AuthorizationException",
            "description": "The action is unauthorized for the current user.",
        },
    ]


class KibanaAnnotateData(VirtualFunctionTool):
    name = "KibanaAnnotateData"
    summary = "Add annotations to specific data points in a visualization."
    parameters: List[ArgParameter] = [
        {
            "name": "visualization_id",
            "type": "string",
            "description": "The ID of the visualization to annotate.",
            "required": True,
        },
        {
            "name": "annotations",
            "type": "array",
            "description": "A list of annotations to add.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the annotation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The visualization ID is invalid or the annotations list is malformed.",
        }
    ]


class KibanaIntegrateTool(VirtualFunctionTool):
    name = "KibanaIntegrateTool"
    summary = "Integrate Kibana with other tools or platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "tool_name",
            "type": "string",
            "description": "The name of the tool to integrate with (e.g., 'Grafana').",
            "required": True,
        },
        {
            "name": "configuration",
            "type": "object",
            "description": "Configuration settings for the integration.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The integration configuration is invalid or malformed.",
        }
    ]


class KibanaSupportPlugin(VirtualFunctionTool):
    name = "KibanaSupportPlugin"
    summary = "Manage and support custom plugins in Kibana."
    parameters: List[ArgParameter] = [
        {
            "name": "plugin_name",
            "type": "string",
            "description": "The name of the plugin to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'install', 'remove').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the plugin action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The plugin action is invalid or the plugin name is malformed.",
        }
    ]


class KibanaGetUserDetails(VirtualFunctionTool):
    name = "KibanaGetUserDetails"
    summary = "Retrieve details about a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "An object containing user details such as name, email, and permissions.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user ID does not exist."}
    ]


@register_app()
class Kibana(FunctionApp):
    name_for_human = "Kibana"
    description_for_human = (
        "A app for data visualization and exploration using Elasticsearch."
    )
    name_for_model = "Kibana"
    description_for_model = "Kibana is a powerful data visualization and exploration app designed for data analysts and IT professionals. It enables users to create visualizations, dashboards, and reports based on data stored in Elasticsearch, facilitating effective monitoring, analysis, and reporting while ensuring user management and compliance with data protection regulations."
    tool_classes = [
        KibanaCreateVisualization,
        KibanaCreateDashboard,
        KibanaSearchData,
        KibanaSetAlert,
        KibanaGenerateReport,
        KibanaImportData,
        KibanaManageUser,
        KibanaAnnotateData,
        KibanaIntegrateTool,
        KibanaSupportPlugin,
        KibanaGetUserDetails,
    ]


#################### GPT3 ####################


class GPT3TextGeneration(VirtualFunctionTool):
    name = "GPT3TextGeneration"
    summary = "Generates text based on a given prompt."
    parameters: List[ArgParameter] = [
        {
            "name": "prompt",
            "type": "string",
            "description": "The text prompt to generate content from.",
            "required": True,
        },
        {
            "name": "max_tokens",
            "type": "integer",
            "description": "The maximum number of tokens to generate. Default is 150.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "generated_text",
            "type": "string",
            "description": "The generated text based on the prompt.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The prompt is malformed or exceeds the token limits.",
        }
    ]


class GPT3ChatbotInteraction(VirtualFunctionTool):
    name = "GPT3ChatbotInteraction"
    summary = "Engages in a conversational interaction with users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_input",
            "type": "string",
            "description": "The input text from the user.",
            "required": True,
        },
        {
            "name": "context",
            "type": "string",
            "description": "The previous conversation context.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "string",
            "description": "The response generated by the chatbot.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user input or context is malformed.",
        }
    ]


class GPT3SentimentAnalysis(VirtualFunctionTool):
    name = "GPT3SentimentAnalysis"
    summary = "Analyzes the sentiment of a given text."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sentiment",
            "type": "string",
            "description": "The sentiment classification (positive, negative, neutral).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The text input is empty."}
    ]


class GPT3TextSummarization(VirtualFunctionTool):
    name = "GPT3TextSummarization"
    summary = "Summarizes a longer piece of text."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to summarize.",
            "required": True,
        },
        {
            "name": "summary_length",
            "type": "integer",
            "description": "Desired length of the summary in tokens. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "summary", "type": "string", "description": "The summarized text."}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The text is empty or the summary length is invalid.",
        }
    ]


class GPT3LanguageTranslation(VirtualFunctionTool):
    name = "GPT3LanguageTranslation"
    summary = "Translates text from one language to another."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to translate.",
            "required": True,
        },
        {
            "name": "source_language",
            "type": "string",
            "description": "The language of the original text.",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "The language to translate to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "translated_text",
            "type": "string",
            "description": "The translated text.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The source or target language is unsupported or the text is empty.",
        }
    ]


class GPT3TextCompletion(VirtualFunctionTool):
    name = "GPT3TextCompletion"
    summary = "Completes a partially written text."
    parameters: List[ArgParameter] = [
        {
            "name": "incomplete_text",
            "type": "string",
            "description": "The text that needs completion.",
            "required": True,
        },
        {
            "name": "max_tokens",
            "type": "integer",
            "description": "The maximum number of tokens to generate. Default is 50.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "completed_text",
            "type": "string",
            "description": "The completed text.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The incomplete text is empty.",
        }
    ]


class GPT3QuestionAnswering(VirtualFunctionTool):
    name = "GPT3QuestionAnswering"
    summary = "Answers specific questions based on the provided context."
    parameters: List[ArgParameter] = [
        {
            "name": "context",
            "type": "string",
            "description": "The context text to refer to.",
            "required": True,
        },
        {
            "name": "question",
            "type": "string",
            "description": "The question to answer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "answer",
            "type": "string",
            "description": "The answer to the question.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The context or question is empty.",
        }
    ]


class GPT3ContentPersonalization(VirtualFunctionTool):
    name = "GPT3ContentPersonalization"
    summary = "Personalizes generated content based on user preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_preferences",
            "type": "object",
            "description": "An object containing user-specific preferences.",
            "required": True,
        },
        {
            "name": "base_content",
            "type": "string",
            "description": "The base content to personalize.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "personalized_content",
            "type": "string",
            "description": "The personalized content.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user preferences or base content is malformed.",
        }
    ]


class GPT3CodeGeneration(VirtualFunctionTool):
    name = "GPT3CodeGeneration"
    summary = "Generates code snippets based on natural language descriptions."
    parameters: List[ArgParameter] = [
        {
            "name": "description",
            "type": "string",
            "description": "The description of the desired code.",
            "required": True,
        },
        {
            "name": "language",
            "type": "string",
            "description": "The programming language for the code.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "code_snippet",
            "type": "string",
            "description": "The generated code snippet.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The description is empty or the language is unsupported.",
        }
    ]


class GPT3GrammarCorrection(VirtualFunctionTool):
    name = "GPT3GrammarCorrection"
    summary = "Identifies and corrects grammatical errors in a given text."
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "The text to correct.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "corrected_text",
            "type": "string",
            "description": "The text with grammatical corrections.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The text input is empty."}
    ]


@register_app()
class GPT3(FunctionApp):
    name_for_human = "GPT3 App"
    description_for_human = "A app for developers to harness the power of GPT-3 for text generation, chatbot interactions, sentiment analysis, and more."
    name_for_model = "GPT3"
    description_for_model = "The GPT3 app provides powerful functionalities for natural language understanding and generation, enabling developers to create chatbots, perform sentiment analysis, generate content, and more, while addressing potential risks associated with misinformation and biased outputs."
    tool_classes = [
        GPT3TextGeneration,
        GPT3ChatbotInteraction,
        GPT3SentimentAnalysis,
        GPT3TextSummarization,
        GPT3LanguageTranslation,
        GPT3TextCompletion,
        GPT3QuestionAnswering,
        GPT3ContentPersonalization,
        GPT3CodeGeneration,
        GPT3GrammarCorrection,
    ]


#################### SageMaker ####################


class SageMakerTrainModel(VirtualFunctionTool):
    name = "SageMakerTrainModel"
    summary = "Initiates the training of a machine learning model using specified datasets and parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_path",
            "type": "string",
            "description": "The remote path to the dataset used for training (e.g., 's3://bucket/dataset.csv').",
            "required": True,
        },
        {
            "name": "algorithm",
            "type": "string",
            "description": "The algorithm to use for training (e.g., 'XGBoost', 'LinearRegression').",
            "required": True,
        },
        {
            "name": "hyperparameters",
            "type": "object",
            "description": "A JSON object containing hyperparameter settings (e.g., {'max_depth': 5, 'learning_rate': 0.1}).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier for the trained model.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the training was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The dataset_path or algorithm is malformed or invalid.",
        }
    ]


class SageMakerLabelData(VirtualFunctionTool):
    name = "SageMakerLabelData"
    summary = "Facilitates the labeling of datasets for supervised learning."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_path",
            "type": "string",
            "description": "The remote path to the dataset (e.g., 's3://bucket/dataset.csv').",
            "required": True,
        },
        {
            "name": "labeling_instructions",
            "type": "string",
            "description": "Guidelines for labeling the data (e.g., 'Label images as 'cat' or 'dog').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "labeling_job_id",
            "type": "string",
            "description": "The unique identifier for the labeling job.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the labeling was initiated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The dataset_path or labeling_instructions is malformed or invalid.",
        }
    ]


class SageMakerDeployModel(VirtualFunctionTool):
    name = "SageMakerDeployModel"
    summary = "Deploys a trained model for real-time inference."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to deploy.",
            "required": True,
        },
        {
            "name": "endpoint_name",
            "type": "string",
            "description": "The name for the inference endpoint.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "endpoint_url",
            "type": "string",
            "description": "The URL for accessing the deployed model.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deployment was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The endpoint_name is malformed or invalid.",
        },
    ]


class SageMakerABTest(VirtualFunctionTool):
    name = "SageMakerABTest"
    summary = "Conducts A/B testing for model evaluation."
    parameters: List[ArgParameter] = [
        {
            "name": "model_a_id",
            "type": "string",
            "description": "The unique identifier for model A.",
            "required": True,
        },
        {
            "name": "model_b_id",
            "type": "string",
            "description": "The unique identifier for model B.",
            "required": True,
        },
        {
            "name": "test_data_path",
            "type": "string",
            "description": "The path to the dataset for testing (e.g., 's3://bucket/test_data.csv').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "winner_model_id",
            "type": "string",
            "description": "The unique identifier of the winning model based on test results.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the A/B test was completed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "One or both specified models do not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The test_data_path is malformed or invalid.",
        },
    ]


class SageMakerMonitorModel(VirtualFunctionTool):
    name = "SageMakerMonitorModel"
    summary = "Monitors the performance of deployed models and logs metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to monitor.",
            "required": True,
        },
        {
            "name": "monitoring_interval",
            "type": "integer",
            "description": "The interval in seconds for monitoring (default: 60).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metrics",
            "type": "object",
            "description": "A JSON object containing performance metrics (e.g., accuracy, latency).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether monitoring was initiated successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class SageMakerBatchTransform(VirtualFunctionTool):
    name = "SageMakerBatchTransform"
    summary = "Processes large datasets to generate predictions in bulk."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to use for predictions.",
            "required": True,
        },
        {
            "name": "input_data_path",
            "type": "string",
            "description": "The remote path to the input dataset (e.g., 's3://bucket/batch_data.csv').",
            "required": True,
        },
        {
            "name": "output_data_path",
            "type": "string",
            "description": "The remote path to store the predictions (e.g., 's3://bucket/output_predictions.csv').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "The unique identifier for the batch transform job.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the batch process was initiated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The input_data_path or output_data_path is malformed or invalid.",
        },
    ]


class SageMakerGetModelDetails(VirtualFunctionTool):
    name = "SageMakerGetModelDetails"
    summary = "Retrieves details of a trained model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_details",
            "type": "object",
            "description": "A JSON object containing details about the model (e.g., parameters, training data).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the details were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        }
    ]


class SageMakerGetLabelingJobStatus(VirtualFunctionTool):
    name = "SageMakerGetLabelingJobStatus"
    summary = "Checks the status of a data labeling job."
    parameters: List[ArgParameter] = [
        {
            "name": "labeling_job_id",
            "type": "string",
            "description": "The unique identifier of the labeling job.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the labeling job (e.g., 'InProgress', 'Completed').",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the status was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified labeling job does not exist.",
        }
    ]


class SageMakerDeleteModel(VirtualFunctionTool):
    name = "SageMakerDeleteModel"
    summary = "Deletes a trained model from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the model was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        }
    ]


class SageMakerGetMonitoringMetrics(VirtualFunctionTool):
    name = "SageMakerGetMonitoringMetrics"
    summary = "Retrieves monitoring metrics for a deployed model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metrics",
            "type": "object",
            "description": "A JSON object containing performance metrics (e.g., accuracy, latency).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the metrics were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        }
    ]


class SageMakerAccessStoredData(VirtualFunctionTool):
    name = "SageMakerAccessStoredData"
    summary = "Accesses stored data resources like user credentials or configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to access (e.g., 'credentials', 'configurations').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "A JSON object containing the requested data.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data was accessed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The data_type is invalid."}
    ]


class SageMakerUpdateModel(VirtualFunctionTool):
    name = "SageMakerUpdateModel"
    summary = "Updates the hyperparameters of a trained model."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "The unique identifier of the model to update.",
            "required": True,
        },
        {
            "name": "hyperparameters",
            "type": "object",
            "description": "A JSON object containing updated hyperparameter settings.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The hyperparameters are malformed or invalid.",
        },
    ]


@register_app()
class SageMaker(FunctionApp):
    name_for_human = "SageMaker"
    description_for_human = "A app for managing machine learning workflows, including training, deployment, and monitoring of models."
    name_for_model = "SageMaker"
    description_for_model = "A comprehensive app for building, training, and deploying machine learning models, providing functionalities for data labeling, model optimization, and performance monitoring, while addressing potential risks related to data privacy and model integrity."
    tool_classes = [
        SageMakerTrainModel,
        SageMakerLabelData,
        SageMakerDeployModel,
        SageMakerABTest,
        SageMakerMonitorModel,
        SageMakerBatchTransform,
        SageMakerGetModelDetails,
        SageMakerGetLabelingJobStatus,
        SageMakerDeleteModel,
        SageMakerGetMonitoringMetrics,
        SageMakerAccessStoredData,
        SageMakerUpdateModel,
    ]


#################### RapidMiner ####################


class RapidMinerDataImport(VirtualFunctionTool):
    name = "RapidMinerDataImport"
    summary = "Tool for importing data from various sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source",
            "type": "string",
            "description": "Specifies the data source (e.g., 'csv', 'database', 'api').",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "Path to the data file or API endpoint.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the import was successful.",
        },
        {
            "name": "data_summary",
            "type": "object",
            "description": "Contains a summary of the imported data (fields: rows, columns, data_types).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The source or file_path is malformed.",
        }
    ]


class RapidMinerDataExport(VirtualFunctionTool):
    name = "RapidMinerDataExport"
    summary = "Tool for exporting processed data to various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "Specifies the export format (e.g., 'csv', 'json', 'excel').",
            "required": True,
        },
        {
            "name": "destination_path",
            "type": "string",
            "description": "The path where the exported file will be saved.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format or destination_path is malformed.",
        }
    ]


class RapidMinerDataPreparation(VirtualFunctionTool):
    name = "RapidMinerDataPreparation"
    summary = "Tool for cleaning and transforming data."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The dataset to be cleaned (fields: rows, columns).",
            "required": True,
        },
        {
            "name": "operations",
            "type": "array",
            "description": "List of operations to perform (e.g., 'remove_duplicates', 'fill_missing').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cleaned_data",
            "type": "object",
            "description": "The cleaned dataset.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The operations are invalid.",
        }
    ]


class RapidMinerModelTraining(VirtualFunctionTool):
    name = "RapidMinerModelTraining"
    summary = "Tool for training machine learning models."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The dataset for training (fields: features, target).",
            "required": True,
        },
        {
            "name": "model_type",
            "type": "string",
            "description": "The type of model to train (e.g., 'linear_regression', 'decision_tree').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model",
            "type": "object",
            "description": "The trained machine learning model.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data or model_type is invalid.",
        }
    ]


class RapidMinerModelDeployment(VirtualFunctionTool):
    name = "RapidMinerModelDeployment"
    summary = "Tool for deploying trained models into production."
    parameters: List[ArgParameter] = [
        {
            "name": "model",
            "type": "object",
            "description": "The trained model to deploy.",
            "required": True,
        },
        {
            "name": "environment",
            "type": "string",
            "description": "Specifies the deployment environment (e.g., 'production', 'staging').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "deployment_status",
            "type": "string",
            "description": "Indicates the status of the deployment (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model or environment is invalid.",
        }
    ]


class RapidMinerParameterTuning(VirtualFunctionTool):
    name = "RapidMinerParameterTuning"
    summary = "Tool for optimizing model parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "model",
            "type": "object",
            "description": "The model to tune.",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "The parameters to adjust (fields vary based on model type).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_model",
            "type": "object",
            "description": "The model with optimized parameters.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The model or parameters are invalid.",
        }
    ]


class RapidMinerReportGeneration(VirtualFunctionTool):
    name = "RapidMinerReportGeneration"
    summary = "Tool for generating analysis reports."
    parameters: List[ArgParameter] = [
        {
            "name": "data_summary",
            "type": "object",
            "description": "Summary of the analysis results (fields: insights, charts).",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "Specifies the report format (e.g., 'pdf', 'html').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_path",
            "type": "string",
            "description": "The path to the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_summary or format is invalid.",
        }
    ]


class RapidMinerVisualization(VirtualFunctionTool):
    name = "RapidMinerVisualization"
    summary = "Tool for creating visual representations of data."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The dataset to visualize (fields: rows, columns).",
            "required": True,
        },
        {
            "name": "chart_type",
            "type": "string",
            "description": "Specifies the type of chart (e.g., 'bar', 'line', 'scatter').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "chart_path",
            "type": "string",
            "description": "The path to the saved chart.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data or chart_type is invalid.",
        }
    ]


class RapidMinerWorkflowAutomation(VirtualFunctionTool):
    name = "RapidMinerWorkflowAutomation"
    summary = "Tool for automating data processing workflows."
    parameters: List[ArgParameter] = [
        {
            "name": "workflow_steps",
            "type": "array",
            "description": "List of steps to automate (e.g., 'import_data', 'prepare_data').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "automation_status",
            "type": "string",
            "description": "Indicates the status of the automation (e.g., 'completed', 'failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The workflow_steps are invalid.",
        }
    ]


class RapidMinerCollaboration(VirtualFunctionTool):
    name = "RapidMinerCollaboration"
    summary = "Tool for sharing workflows and results."
    parameters: List[ArgParameter] = [
        {
            "name": "workflow_id",
            "type": "string",
            "description": "The identifier of the workflow to share.",
            "required": True,
        },
        {
            "name": "user_emails",
            "type": "array",
            "description": "List of email addresses to share with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_status",
            "type": "string",
            "description": "Indicates the status of the sharing (e.g., 'success', 'failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The workflow_id or user_emails are invalid.",
        }
    ]


class RapidMinerAPIAccess(VirtualFunctionTool):
    name = "RapidMinerAPIAccess"
    summary = "Tool for connecting to external APIs for data retrieval."
    parameters: List[ArgParameter] = [
        {
            "name": "api_url",
            "type": "string",
            "description": "The URL of the API endpoint.",
            "required": True,
        },
        {
            "name": "params",
            "type": "object",
            "description": "Parameters to send with the API request (fields vary).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "api_response",
            "type": "object",
            "description": "The response from the API (fields vary based on API).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The api_url or params are invalid.",
        }
    ]


class RapidMinerParameterSearch(VirtualFunctionTool):
    name = "RapidMinerParameterSearch"
    summary = "Tool for searching available parameters for models."
    parameters: List[ArgParameter] = [
        {
            "name": "model_type",
            "type": "string",
            "description": "The type of model to search parameters for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "available_parameters",
            "type": "object",
            "description": "List of parameters available for the specified model type (fields: parameter_name, default_value).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The model_type is invalid."}
    ]


class RapidMinerRetrieveUserSettings(VirtualFunctionTool):
    name = "RapidMinerRetrieveUserSettings"
    summary = "Tool for accessing stored user settings."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "settings",
            "type": "object",
            "description": "The stored user settings (fields: data_source, default_format).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The user_id is invalid."}
    ]


@register_app()
class RapidMiner(FunctionApp):
    name_for_human = "RapidMiner"
    description_for_human = "RapidMiner is a user-friendly data science platform that empowers business analysts to perform data preparation, machine learning, and workflow automation with ease."
    name_for_model = "RapidMiner"
    description_for_model = "RapidMiner is a data science platform designed for business analysts to prepare data, build machine learning models, and automate workflows without extensive coding. It provides tools for data import/export, model training, deployment, visualization, and collaboration, enabling users to derive insights and make informed decisions."
    tool_classes = [
        RapidMinerDataImport,
        RapidMinerDataExport,
        RapidMinerDataPreparation,
        RapidMinerModelTraining,
        RapidMinerModelDeployment,
        RapidMinerParameterTuning,
        RapidMinerReportGeneration,
        RapidMinerVisualization,
        RapidMinerWorkflowAutomation,
        RapidMinerCollaboration,
        RapidMinerAPIAccess,
        RapidMinerParameterSearch,
        RapidMinerRetrieveUserSettings,
    ]


#################### EpicFHIR ####################


class EpicFHIRGetPatientDemographics(VirtualFunctionTool):
    name = "EpicFHIRGetPatientDemographics"
    summary = "Retrieves basic demographic information for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "demographics",
            "type": "object",
            "description": "Contains fields like 'name', 'dob', and 'contact_info'.",
        }
    ]
    exceptions: List[ArgException] = []


class EpicFHIRUpdatePatientDemographics(VirtualFunctionTool):
    name = "EpicFHIRUpdatePatientDemographics"
    summary = "Updates demographic information for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "demographics",
            "type": "object",
            "description": "The updated demographic information, including fields like 'name', 'dob', and 'contact_info'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'demographics' parameter contains malformed data.",
        }
    ]


class EpicFHIRGetMedications(VirtualFunctionTool):
    name = "EpicFHIRGetMedications"
    summary = "Retrieves the list of medications for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "medications",
            "type": "array",
            "description": "List of medications with fields like 'name' and 'dosage'.",
        }
    ]
    exceptions: List[ArgException] = []


class EpicFHIRUpdateMedications(VirtualFunctionTool):
    name = "EpicFHIRUpdateMedications"
    summary = "Updates the medication list for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "medications",
            "type": "array",
            "description": "The updated list of medications, each containing fields like 'name' and 'dosage'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'medications' parameter contains malformed data.",
        }
    ]


class EpicFHIRGetAllergies(VirtualFunctionTool):
    name = "EpicFHIRGetAllergies"
    summary = "Retrieves allergy information for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "allergies",
            "type": "array",
            "description": "List of allergies with fields like 'substance' and 'reaction'.",
        }
    ]
    exceptions: List[ArgException] = []


class EpicFHIRUpdateAllergies(VirtualFunctionTool):
    name = "EpicFHIRUpdateAllergies"
    summary = "Updates the allergy information for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "allergies",
            "type": "array",
            "description": "The updated list of allergies, each containing fields like 'substance' and 'reaction'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'allergies' parameter contains malformed data.",
        }
    ]


class EpicFHIRGetLabResults(VirtualFunctionTool):
    name = "EpicFHIRGetLabResults"
    summary = "Retrieves laboratory test results for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lab_results",
            "type": "array",
            "description": "List of lab results with fields like 'test_name', 'result', and 'date'.",
        }
    ]
    exceptions: List[ArgException] = []


class EpicFHIRGetPatientHistory(VirtualFunctionTool):
    name = "EpicFHIRGetPatientHistory"
    summary = "Retrieves the visit history for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visit_history",
            "type": "array",
            "description": "List of visits with fields like 'date', 'reason', and 'provider'.",
        }
    ]
    exceptions: List[ArgException] = []


class EpicFHIRManageAppointments(VirtualFunctionTool):
    name = "EpicFHIRManageAppointments"
    summary = "Schedules, updates, or cancels patient appointments."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "appointment",
            "type": "object",
            "description": "Contains fields like 'date', 'time', and 'action' (values can be 'schedule', 'update', 'cancel').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the appointment management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'appointment' parameter contains malformed data.",
        }
    ]


class EpicFHIRGeneratePatientReport(VirtualFunctionTool):
    name = "EpicFHIRGeneratePatientReport"
    summary = "Creates a customized report for a specified patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (values can be 'summary', 'detailed').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated report content.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'report_type' parameter is unsupported.",
        }
    ]


@register_app()
class EpicFHIR(FunctionApp):
    name_for_human = "Epic FHIR"
    description_for_human = "App for accessing and managing electronic health records in healthcare applications."
    name_for_model = "EpicFHIR"
    description_for_model = "EpicFHIR provides a set of APIs for healthcare providers to access and manage electronic health records, including patient demographics, medications, allergies, lab results, and appointment management, ensuring seamless integration and compliance with healthcare standards."
    tool_classes = [
        EpicFHIRGetPatientDemographics,
        EpicFHIRUpdatePatientDemographics,
        EpicFHIRGetMedications,
        EpicFHIRUpdateMedications,
        EpicFHIRGetAllergies,
        EpicFHIRUpdateAllergies,
        EpicFHIRGetLabResults,
        EpicFHIRGetPatientHistory,
        EpicFHIRManageAppointments,
        EpicFHIRGeneratePatientReport,
    ]


#################### MyChart ####################


class MyChartGetHealthRecords(VirtualFunctionTool):
    name = "MyChartGetHealthRecords"
    summary = "Retrieves the user's personal health records."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "health_records",
            "type": "object",
            "description": "Contains details like medical history, lab results, and medications.",
        }
    ]
    exceptions: List[ArgException] = []


class MyChartScheduleAppointment(VirtualFunctionTool):
    name = "MyChartScheduleAppointment"
    summary = "Allows users to schedule a new appointment."
    parameters: List[ArgParameter] = [
        {
            "name": "date_time",
            "type": "string",
            "description": "The date and time for the appointment in ISO 8601 format (e.g., '2023-10-01T10:00:00Z').",
            "required": True,
        },
        {
            "name": "provider_id",
            "type": "string",
            "description": "Unique identifier of the healthcare provider.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the appointment was successfully scheduled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The date_time or provider_id is invalid or malformed.",
        }
    ]


class MyChartGetAvailableSlots(VirtualFunctionTool):
    name = "MyChartGetAvailableSlots"
    summary = "Retrieves available appointment slots for a specific provider."
    parameters: List[ArgParameter] = [
        {
            "name": "provider_id",
            "type": "string",
            "description": "Unique identifier of the healthcare provider.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "available_slots",
            "type": "array",
            "description": "List of available date and time slots for appointments.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No available slots found for the specified provider.",
        }
    ]


class MyChartSendMessage(VirtualFunctionTool):
    name = "MyChartSendMessage"
    summary = "Sends a secure message to a healthcare provider."
    parameters: List[ArgParameter] = [
        {
            "name": "provider_id",
            "type": "string",
            "description": "Unique identifier of the healthcare provider.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The content of the message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the message was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The message is malformed or exceeds character limits.",
        },
        {
            "name": "AuthorizationException",
            "description": "User is not authorized to send messages to this provider.",
        },
    ]


class MyChartGetMessages(VirtualFunctionTool):
    name = "MyChartGetMessages"
    summary = "Retrieves messages between the user and their healthcare providers."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "List of messages exchanged with healthcare providers.",
        }
    ]
    exceptions: List[ArgException] = []


class MyChartRequestMedicationRefill(VirtualFunctionTool):
    name = "MyChartRequestMedicationRefill"
    summary = "Requests a refill for a prescribed medication."
    parameters: List[ArgParameter] = [
        {
            "name": "medication_id",
            "type": "string",
            "description": "Unique identifier for the prescribed medication.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the refill request was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The medication_id provided does not match any prescribed medications.",
        }
    ]


class MyChartGetBillingInfo(VirtualFunctionTool):
    name = "MyChartGetBillingInfo"
    summary = "Retrieves billing statements and payment history."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "billing_info",
            "type": "object",
            "description": "Contains details like outstanding balances and payment history.",
        }
    ]
    exceptions: List[ArgException] = []


class MyChartUpdatePersonalInfo(VirtualFunctionTool):
    name = "MyChartUpdatePersonalInfo"
    summary = "Updates the user's personal contact information."
    parameters: List[ArgParameter] = [
        {
            "name": "contact_info",
            "type": "object",
            "description": "Contains fields like email (string) and phone (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The contact_info provided is malformed.",
        }
    ]


class MyChartDownloadHealthRecords(VirtualFunctionTool):
    name = "MyChartDownloadHealthRecords"
    summary = "Allows users to download their health records."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "The format for downloading (e.g., 'PDF', 'CSV').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "URL to download the health records.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format specified is unsupported.",
        }
    ]


class MyChartGetTestResults(VirtualFunctionTool):
    name = "MyChartGetTestResults"
    summary = "Retrieves test results for the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "test_results",
            "type": "array",
            "description": "List of recent test results.",
        }
    ]
    exceptions: List[ArgException] = []


class MyChartGetAppointmentHistory(VirtualFunctionTool):
    name = "MyChartGetAppointmentHistory"
    summary = "Retrieves the history of past appointments."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "appointment_history",
            "type": "array",
            "description": "List of past appointments with details.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class MyChart(FunctionApp):
    name_for_human = "MyChart"
    description_for_human = "A app for managing your health information, appointments, and communication with healthcare providers."
    name_for_model = "MyChart"
    description_for_model = "MyChart app provides patients with secure access to personal health records, appointment scheduling, messaging with healthcare providers, medication management, and billing information, enhancing patient engagement and health management."
    tool_classes = [
        MyChartGetHealthRecords,
        MyChartScheduleAppointment,
        MyChartGetAvailableSlots,
        MyChartSendMessage,
        MyChartGetMessages,
        MyChartRequestMedicationRefill,
        MyChartGetBillingInfo,
        MyChartUpdatePersonalInfo,
        MyChartDownloadHealthRecords,
        MyChartGetTestResults,
        MyChartGetAppointmentHistory,
    ]


#################### Fitbit ####################


class FitbitRetrieveActivityData(VirtualFunctionTool):
    name = "FitbitRetrieveActivityData"
    summary = "Access daily activities recorded by the Fitbit device."
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "The date in YYYY-MM-DD format for which to retrieve activity data.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_data",
            "type": "object",
            "description": "Contains activity metrics including steps, calories burned, and active minutes.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitGetHeartRateData(VirtualFunctionTool):
    name = "FitbitGetHeartRateData"
    summary = "Fetch heart rate information over a specified period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "heart_rate_data",
            "type": "object",
            "description": "Contains heart rate metrics including resting heart rate and active heart rate.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitAccessSleepPatterns(VirtualFunctionTool):
    name = "FitbitAccessSleepPatterns"
    summary = "Obtain detailed sleep data."
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "The date in YYYY-MM-DD format for which to retrieve sleep data.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sleep_data",
            "type": "object",
            "description": "Contains details about sleep duration, stages, and disturbances.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitTrackWeightManagement(VirtualFunctionTool):
    name = "FitbitTrackWeightManagement"
    summary = "Manage and track weight data."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('create', 'update', 'delete').",
            "required": True,
        },
        {
            "name": "weight_entry",
            "type": "object",
            "description": "Contains weight details including date and weight value.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if trying to create a weight entry that already exists for the same date.",
        }
    ]


class FitbitGenerateHealthInsights(VirtualFunctionTool):
    name = "FitbitGenerateHealthInsights"
    summary = "Provide personalized health insights based on the aggregated data."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "string",
            "description": "Contains personalized health insights.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitSetHealthGoals(VirtualFunctionTool):
    name = "FitbitSetHealthGoals"
    summary = "Allow users to set specific health goals."
    parameters: List[ArgParameter] = [
        {
            "name": "goal",
            "type": "object",
            "description": "Contains details about the health goal including type and target value.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the goal was successfully set.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitUpdateWeight(VirtualFunctionTool):
    name = "FitbitUpdateWeight"
    summary = "Enable users to log their weight entries."
    parameters: List[ArgParameter] = [
        {
            "name": "weight_entry",
            "type": "object",
            "description": "Contains weight details including date and weight value.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the weight entry was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs if trying to update a weight entry that does not exist.",
        }
    ]


class FitbitSearchHealthData(VirtualFunctionTool):
    name = "FitbitSearchHealthData"
    summary = "Provide a search function for health data."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for within health data.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "Contains the search results related to the keyword.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitExportHealthData(VirtualFunctionTool):
    name = "FitbitExportHealthData"
    summary = "Allow users to export their health data."
    parameters: List[ArgParameter] = [
        {
            "name": "export_type",
            "type": "string",
            "description": "The format for exporting data ('csv', 'json').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the export type is not valid.",
        }
    ]


class FitbitGetNotifications(VirtualFunctionTool):
    name = "FitbitGetNotifications"
    summary = "Send reminders or alerts to users."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to send ('goal_reminder', 'milestone_achieved').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the notification was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = []


class FitbitSearchWeightEntries(VirtualFunctionTool):
    name = "FitbitSearchWeightEntries"
    summary = "Retrieve unique weight entries based on date."
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "The date in YYYY-MM-DD format to retrieve weight entries.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "weight_entry_id",
            "type": "string",
            "description": "Contains the unique identifier of the weight entry.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Fitbit(FunctionApp):
    name_for_human = "Fitbit"
    description_for_human = "The Fitbit app provides access to health and fitness data collected by Fitbit devices, allowing users to retrieve activity levels, heart rate data, sleep patterns, and manage weight while generating personalized health insights and notifications."
    name_for_model = "Fitbit"
    description_for_model = "The Fitbit app provides access to health and fitness data collected by Fitbit devices, allowing users to retrieve activity levels, heart rate data, sleep patterns, and manage weight while generating personalized health insights and notifications."
    tool_classes = [
        FitbitRetrieveActivityData,
        FitbitGetHeartRateData,
        FitbitAccessSleepPatterns,
        FitbitTrackWeightManagement,
        FitbitGenerateHealthInsights,
        FitbitSetHealthGoals,
        FitbitUpdateWeight,
        FitbitSearchHealthData,
        FitbitExportHealthData,
        FitbitGetNotifications,
        FitbitSearchWeightEntries,
    ]


#################### HealthKit ####################


class HealthKitDataAggregation(VirtualFunctionTool):
    name = "HealthKitDataAggregation"
    summary = "Aggregates health and fitness data from various sources."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "array",
            "description": "Array of aggregated health data objects, each containing type, value, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = []


class HealthKitReadHealthData(VirtualFunctionTool):
    name = "HealthKitReadHealthData"
    summary = "Reads specific health data based on type."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to read (e.g., 'heart_rate', 'steps', 'sleep').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "array",
            "description": "Array of health data objects, each containing value and timestamp.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type argument is not valid.",
        }
    ]


class HealthKitWriteHealthData(VirtualFunctionTool):
    name = "HealthKitWriteHealthData"
    summary = "Writes health data to the HealthKit store."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to write (e.g., 'heart_rate', 'steps').",
            "required": True,
        },
        {
            "name": "value",
            "type": "number",
            "description": "The value of the health data to write.",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "The timestamp of the data in ISO format (e.g., '2023-10-01T12:00:00Z').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the write operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more arguments are missing or malformed.",
        }
    ]


class HealthKitShareHealthData(VirtualFunctionTool):
    name = "HealthKitShareHealthData"
    summary = "Shares health data with other applications or healthcare providers."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to share.",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "The identifier of the application or provider to share the data with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type or recipient argument is invalid.",
        }
    ]


class HealthKitManagePrivacySettings(VirtualFunctionTool):
    name = "HealthKitManagePrivacySettings"
    summary = "Manages privacy settings for health data."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to manage privacy settings for.",
            "required": True,
        },
        {
            "name": "access_level",
            "type": "string",
            "description": "The level of access to set (e.g., 'public', 'private').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the privacy setting update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data_type or access_level argument is invalid.",
        }
    ]


class HealthKitTrackWorkout(VirtualFunctionTool):
    name = "HealthKitTrackWorkout"
    summary = "Logs a workout session."
    parameters: List[ArgParameter] = [
        {
            "name": "workout_type",
            "type": "string",
            "description": "The type of workout (e.g., 'running', 'cycling').",
            "required": True,
        },
        {
            "name": "duration",
            "type": "number",
            "description": "The duration of the workout in minutes.",
            "required": True,
        },
        {
            "name": "calories_burned",
            "type": "number",
            "description": "The calories burned during the workout.",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "The timestamp of the workout in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the workout logging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more arguments are missing or malformed.",
        }
    ]


class HealthKitLogNutrition(VirtualFunctionTool):
    name = "HealthKitLogNutrition"
    summary = "Logs dietary intake."
    parameters: List[ArgParameter] = [
        {
            "name": "food_item",
            "type": "string",
            "description": "The name of the food item.",
            "required": True,
        },
        {
            "name": "calories",
            "type": "number",
            "description": "The calories in the food item.",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "The timestamp of the logging in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the nutrition logging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more arguments are missing or malformed.",
        }
    ]


class HealthKitSetMedicationReminder(VirtualFunctionTool):
    name = "HealthKitSetMedicationReminder"
    summary = "Sets a reminder for medication."
    parameters: List[ArgParameter] = [
        {
            "name": "medication_name",
            "type": "string",
            "description": "The name of the medication.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time for the reminder in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the reminder was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Either argument is missing or malformed.",
        }
    ]


class HealthKitGetHealthInsights(VirtualFunctionTool):
    name = "HealthKitGetHealthInsights"
    summary = "Provides insights based on health data trends."
    parameters: List[ArgParameter] = [
        {
            "name": "insight_type",
            "type": "string",
            "description": "The type of insight to retrieve (e.g., 'activity_level', 'sleep_quality').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insight",
            "type": "object",
            "description": "Object containing type, value, and description of the insight.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The insight_type argument is not valid.",
        }
    ]


class HealthKitManageUserProfile(VirtualFunctionTool):
    name = "HealthKitManageUserProfile"
    summary = "Manages the user's health profile."
    parameters: List[ArgParameter] = [
        {
            "name": "age",
            "type": "integer",
            "description": "The age of the user.",
            "required": False,
        },
        {
            "name": "weight",
            "type": "number",
            "description": "The weight of the user in kilograms.",
            "required": False,
        },
        {
            "name": "height",
            "type": "number",
            "description": "The height of the user in centimeters.",
            "required": False,
        },
        {
            "name": "health_conditions",
            "type": "array",
            "description": "List of health conditions if any.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile management was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "One or more arguments are invalid.",
        }
    ]


@register_app()
class HealthKit(FunctionApp):
    name_for_human = "HealthKit"
    description_for_human = "A comprehensive health data platform for managing and sharing health-related information."
    name_for_model = "HealthKit"
    description_for_model = "HealthKit is a comprehensive health data platform that enables developers to create applications for aggregating, reading, and writing health data while managing privacy settings and sharing data securely."
    tool_classes = [
        HealthKitDataAggregation,
        HealthKitReadHealthData,
        HealthKitWriteHealthData,
        HealthKitShareHealthData,
        HealthKitManagePrivacySettings,
        HealthKitTrackWorkout,
        HealthKitLogNutrition,
        HealthKitSetMedicationReminder,
        HealthKitGetHealthInsights,
        HealthKitManageUserProfile,
    ]


#################### HealthGorilla ####################


class HealthGorillaAccessPatientRecords(VirtualFunctionTool):
    name = "HealthGorillaAccessPatientRecords"
    summary = "Retrieve a patient's complete medical history, including lab results and clinical notes."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "patient_data",
            "type": "object",
            "description": "An object containing the patient's medical history, including fields like 'lab_results' and 'clinical_notes'.",
        }
    ]
    exceptions: List[ArgException] = []


class HealthGorillaSharePatientInformation(VirtualFunctionTool):
    name = "HealthGorillaSharePatientInformation"
    summary = "Securely share patient data with other healthcare providers."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "provider_id",
            "type": "string",
            "description": "The unique identifier for the provider receiving the data.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to share (options: 'lab_results', 'clinical_notes').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the sharing was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to access or share the data.",
        }
    ]


class HealthGorillaSearchPatientData(VirtualFunctionTool):
    name = "HealthGorillaSearchPatientData"
    summary = (
        "Search for specific patient records or data points using various filters."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to filter patient records.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Optional, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of patient records matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The search query is malformed.",
        }
    ]


class HealthGorillaUpdatePatientRecords(VirtualFunctionTool):
    name = "HealthGorillaUpdatePatientRecords"
    summary = "Update lab results or clinical notes for a patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The data to update, including fields like 'lab_results' and 'clinical_notes'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to update the records.",
        }
    ]


class HealthGorillaDeletePatientRecords(VirtualFunctionTool):
    name = "HealthGorillaDeletePatientRecords"
    summary = "Remove patient records or specific data points as necessary."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to delete (options: 'lab_results', 'clinical_notes').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the deletion was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to delete the records.",
        }
    ]


class HealthGorillaRetrieveLabResults(VirtualFunctionTool):
    name = "HealthGorillaRetrieveLabResults"
    summary = "Access specific lab results for a patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "result_id",
            "type": "string",
            "description": "The unique identifier for the lab result.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lab_result",
            "type": "object",
            "description": "An object containing the details of the lab result.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The lab result does not exist."}
    ]


class HealthGorillaAccessClinicalNotes(VirtualFunctionTool):
    name = "HealthGorillaAccessClinicalNotes"
    summary = "Retrieve detailed clinical notes from healthcare providers."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "note_id",
            "type": "string",
            "description": "The unique identifier for the clinical note.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "clinical_note",
            "type": "object",
            "description": "An object containing the details of the clinical note.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The clinical note does not exist.",
        }
    ]


class HealthGorillaAuditLogRetrieval(VirtualFunctionTool):
    name = "HealthGorillaAuditLogRetrieval"
    summary = (
        "Access logs of all data access and sharing activities for compliance purposes."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_logs",
            "type": "array",
            "description": "An array of log entries related to the patient's data access.",
        }
    ]
    exceptions: List[ArgException] = []


class HealthGorillaPatientConsentManagement(VirtualFunctionTool):
    name = "HealthGorillaPatientConsentManagement"
    summary = "Manage and track patient consent for data sharing."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "consent_action",
            "type": "string",
            "description": "The action to perform (options: 'grant', 'revoke').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the consent management action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The consent action is invalid.",
        }
    ]


class HealthGorillaDataAggregation(VirtualFunctionTool):
    name = "HealthGorillaDataAggregation"
    summary = "Aggregate patient data for analytics or reporting purposes."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_ids",
            "type": "array",
            "description": "An array of unique identifiers for the patients to aggregate data.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aggregated_data",
            "type": "object",
            "description": "An object containing aggregated analytics data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The patient_ids array is empty or malformed.",
        }
    ]


@register_app()
class HealthGorilla(FunctionApp):
    name_for_human = "Health Gorilla"
    description_for_human = (
        "App for secure healthcare data exchange and management."
    )
    name_for_model = "HealthGorilla"
    description_for_model = "The HealthGorilla app provides healthcare providers with secure access to patient records, enabling sharing, updating, and managing consent for healthcare data while ensuring compliance with regulations."
    tool_classes = [
        HealthGorillaAccessPatientRecords,
        HealthGorillaSharePatientInformation,
        HealthGorillaSearchPatientData,
        HealthGorillaUpdatePatientRecords,
        HealthGorillaDeletePatientRecords,
        HealthGorillaRetrieveLabResults,
        HealthGorillaAccessClinicalNotes,
        HealthGorillaAuditLogRetrieval,
        HealthGorillaPatientConsentManagement,
        HealthGorillaDataAggregation,
    ]


#################### CareSync ####################


class CareSyncAggregateData(VirtualFunctionTool):
    name = "CareSyncAggregateData"
    summary = "Collects health data from various sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source",
            "type": "string",
            "description": "The source of the health data (e.g., EHR, wearable).",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The health data to be aggregated, containing fields like heart_rate, blood_pressure, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the aggregation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If source or data are malformed.",
        }
    ]


class CareSyncRetrieveData(VirtualFunctionTool):
    name = "CareSyncRetrieveData"
    summary = "Retrieves specific health data based on parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose data is being retrieved.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to retrieve (e.g., 'heart_rate', 'blood_pressure').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "data", "type": "object", "description": "The requested health data."},
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the user does not exist or the requested data type is unavailable.",
        }
    ]


class CareSyncUpdateData(VirtualFunctionTool):
    name = "CareSyncUpdateData"
    summary = "Updates health data for a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The updated health data to be saved, containing fields like heart_rate, blood_pressure, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If data is malformed."},
        {"name": "NotFoundException", "description": "If the user does not exist."},
    ]


class CareSyncDeleteData(VirtualFunctionTool):
    name = "CareSyncDeleteData"
    summary = "Deletes specific health data for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to delete (e.g., 'heart_rate', 'blood_pressure').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the user does not exist or the requested data type is unavailable.",
        }
    ]


class CareSyncManageUserProfile(VirtualFunctionTool):
    name = "CareSyncManageUserProfile"
    summary = "Manages user profiles including preferences and consent."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "The user preferences for data sharing, containing fields like share_with_provider, receive_notifications.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile update was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If preferences are malformed.",
        }
    ]


class CareSyncShareData(VirtualFunctionTool):
    name = "CareSyncShareData"
    summary = "Facilitates sharing of health data with authorized parties."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The identifier of the recipient (e.g., healthcare provider).",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of health data to share.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data sharing was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the user or recipient does not exist.",
        }
    ]


class CareSyncGenerateInsights(VirtualFunctionTool):
    name = "CareSyncGenerateInsights"
    summary = "Generates insights based on aggregated health data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "object",
            "description": "The generated health insights.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the insights generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the user does not exist."}
    ]


class CareSyncSendNotification(VirtualFunctionTool):
    name = "CareSyncSendNotification"
    summary = "Sends alerts and notifications to users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The notification message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification was sent successfully.",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "The identifier of the sent message.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If message is malformed."}
    ]


class CareSyncIntegrateAPI(VirtualFunctionTool):
    name = "CareSyncIntegrateAPI"
    summary = "Integrates with external health applications."
    parameters: List[ArgParameter] = [
        {
            "name": "api_name",
            "type": "string",
            "description": "The name of the external API to integrate with.",
            "required": True,
        },
        {
            "name": "credentials",
            "type": "object",
            "description": "The credentials required for integration, containing fields like api_key, secret.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If api_name or credentials are malformed.",
        }
    ]


class CareSyncAnalyticsDashboard(VirtualFunctionTool):
    name = "CareSyncAnalyticsDashboard"
    summary = "Provides a dashboard for visualizing health data trends."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_data",
            "type": "object",
            "description": "The data for the analytics dashboard.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the dashboard data retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the user does not exist."}
    ]


@register_app()
class CareSync(FunctionApp):
    name_for_human = "CareSync"
    description_for_human = (
        "A app to help developers manage and analyze patient health data securely."
    )
    name_for_model = "CareSync"
    description_for_model = "CareSync is a app designed to help developers aggregate, retrieve, update, and manage patient health data from various sources, ensuring secure data sharing and insightful analytics for chronic condition management."
    tool_classes = [
        CareSyncAggregateData,
        CareSyncRetrieveData,
        CareSyncUpdateData,
        CareSyncDeleteData,
        CareSyncManageUserProfile,
        CareSyncShareData,
        CareSyncGenerateInsights,
        CareSyncSendNotification,
        CareSyncIntegrateAPI,
        CareSyncAnalyticsDashboard,
    ]


#################### PatientPing ####################


class PatientPingNotifyPatientCare(VirtualFunctionTool):
    name = "PatientPingNotifyPatientCare"
    summary = "Sends notifications to healthcare providers when a patient receives care outside their network."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "care_event",
            "type": "string",
            "description": "Description of the care event.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was sent successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the notification status.",
        },
    ]
    exceptions: List[ArgException] = []


class PatientPingAccessPatientData(VirtualFunctionTool):
    name = "PatientPingAccessPatientData"
    summary = "Retrieves detailed patient care information for a given patient."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "patient_info",
            "type": "object",
            "description": "Contains patient care details including treatment history and current status. Fields: treatment_history, current_status.",
            "required": True,
        }
    ]
    exceptions: List[ArgException] = []


class PatientPingManageCareCoordination(VirtualFunctionTool):
    name = "PatientPingManageCareCoordination"
    summary = (
        "Manages care transitions by updating or creating care plans for patients."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "care_plan",
            "type": "object",
            "description": "Care plan details including follow-up actions. Fields: follow_up_date (string, format: YYYY-MM-DD), provider_assigned (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the care coordination was managed successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the management status.",
        },
    ]
    exceptions: List[ArgException] = []


class PatientPingIntegrateEHR(VirtualFunctionTool):
    name = "PatientPingIntegrateEHR"
    summary = "Integrates with EHR systems to share patient data."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "ehr_data",
            "type": "object",
            "description": "EHR data to be integrated. Fields: medical_history (string), allergies (array of strings).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the integration status.",
        },
    ]
    exceptions: List[ArgException] = []


class PatientPingGenerateReport(VirtualFunctionTool):
    name = "PatientPingGenerateReport"
    summary = "Generates reports on patient care transitions and network utilization."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "Start date for the report in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "End date for the report in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "Contains report data including patient transitions and utilization metrics.",
        }
    ]
    exceptions: List[ArgException] = []


class PatientPingSendAlerts(VirtualFunctionTool):
    name = "PatientPingSendAlerts"
    summary = "Sends alerts to providers regarding patient appointments or follow-ups."
    parameters: List[ArgParameter] = [
        {
            "name": "provider_id",
            "type": "string",
            "description": "Unique identifier for the provider.",
            "required": True,
        },
        {
            "name": "alert_message",
            "type": "string",
            "description": "Message to be sent as an alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was sent successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the alert status.",
        },
    ]
    exceptions: List[ArgException] = []


class PatientPingManageUserAccess(VirtualFunctionTool):
    name = "PatientPingManageUserAccess"
    summary = "Manages user roles and permissions for accessing patient data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "Role to be assigned to the user. Values: admin, provider, staff.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user access was managed successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the access management status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Raised when trying to assign a role that is not permitted.",
        }
    ]


class PatientPingAuditDataAccess(VirtualFunctionTool):
    name = "PatientPingAuditDataAccess"
    summary = "Maintains an audit trail of patient data access and modifications."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_log",
            "type": "array",
            "description": "Contains logs of data access events including timestamps and user IDs.",
        }
    ]
    exceptions: List[ArgException] = []


class PatientPingManagePatientConsent(VirtualFunctionTool):
    name = "PatientPingManagePatientConsent"
    summary = "Handles patient consent for data sharing."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        },
        {
            "name": "consent",
            "type": "boolean",
            "description": "Indicates if consent is granted or revoked.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the consent was managed successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the consent management status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Raised when trying to manage consent without proper permissions.",
        }
    ]


class PatientPingCollectFeedback(VirtualFunctionTool):
    name = "PatientPingCollectFeedback"
    summary = "Collects feedback from providers regarding care transitions and patient outcomes."
    parameters: List[ArgParameter] = [
        {
            "name": "provider_id",
            "type": "string",
            "description": "Unique identifier for the provider.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "Feedback provided by the provider.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was collected successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information regarding the feedback collection status.",
        },
    ]
    exceptions: List[ArgException] = []


class PatientPingRetrievePatientID(VirtualFunctionTool):
    name = "PatientPingRetrievePatientID"
    summary = "Retrieves the unique patient identifier based on the patient's name or other attributes."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "Full name of the patient.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default: 1.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "patient_ids",
            "type": "array",
            "description": "List of unique identifiers for matching patients.",
        }
    ]
    exceptions: List[ArgException] = []


class PatientPingRetrieveEHRData(VirtualFunctionTool):
    name = "PatientPingRetrieveEHRData"
    summary = "Retrieves EHR data for a specific patient using their unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "Unique identifier for the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ehr_data",
            "type": "object",
            "description": "Contains EHR data for the patient including medical history and allergies. Fields: medical_history (string), allergies (array of strings).",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class PatientPing(FunctionApp):
    name_for_human = "PatientPing"
    description_for_human = "A app for healthcare providers to coordinate patient care effectively by receiving notifications and accessing patient data."
    name_for_model = "PatientPing"
    description_for_model = "The PatientPing app enhances healthcare providers' ability to coordinate patient care by notifying them of care events outside their network, accessing patient data, managing care transitions, integrating with EHR systems, and generating reports, all while ensuring compliance with privacy regulations."
    tool_classes = [
        PatientPingNotifyPatientCare,
        PatientPingAccessPatientData,
        PatientPingManageCareCoordination,
        PatientPingIntegrateEHR,
        PatientPingGenerateReport,
        PatientPingSendAlerts,
        PatientPingManageUserAccess,
        PatientPingAuditDataAccess,
        PatientPingManagePatientConsent,
        PatientPingCollectFeedback,
        PatientPingRetrievePatientID,
        PatientPingRetrieveEHRData,
    ]


#################### GoogleFit ####################


class GoogleFitActivityTracker(VirtualFunctionTool):
    name = "GoogleFitActivityTracker"
    summary = "Captures and reports user activity data such as steps taken, distance traveled, and calories burned."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for which activity data is requested, in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_data",
            "type": "object",
            "description": "An object containing the activity metrics, including 'steps' (integer), 'distance' (number, in kilometers), and 'calories' (number, in kilocalories).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleFitHeartRateMonitor(VirtualFunctionTool):
    name = "GoogleFitHeartRateMonitor"
    summary = "Provides access to real-time heart rate data from connected devices."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "heart_rate",
            "type": "number",
            "description": "The current heart rate of the user in beats per minute (BPM).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleFitSleepAnalyzer(VirtualFunctionTool):
    name = "GoogleFitSleepAnalyzer"
    summary = (
        "Retrieves detailed sleep data, including sleep duration and quality metrics."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The date for which sleep data is requested, in the format 'YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sleep_data",
            "type": "object",
            "description": "An object containing sleep duration (in hours, number) and quality metrics (object with fields 'quality_score' (number, 0-100) and 'awakenings' (integer)).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleFitGoalSetter(VirtualFunctionTool):
    name = "GoogleFitGoalSetter"
    summary = (
        "Allows users to set fitness goals and track progress towards achieving them."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "goal_type",
            "type": "string",
            "description": "The type of goal to set (e.g., 'steps', 'calories').",
            "required": True,
        },
        {
            "name": "target_value",
            "type": "number",
            "description": "The target value for the goal, must be a positive number.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the goal was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if the goal already exists or conflicts with another goal.",
        }
    ]


class GoogleFitDataAggregator(VirtualFunctionTool):
    name = "GoogleFitDataAggregator"
    summary = "Aggregates data from various sources and presents a comprehensive overview of the user's fitness metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for which data should be aggregated, in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aggregated_data",
            "type": "object",
            "description": "An object containing overall activity (steps, distance, calories), heart rate (average BPM), and sleep metrics (average duration and quality score).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleFitUserProfileManager(VirtualFunctionTool):
    name = "GoogleFitUserProfileManager"
    summary = "Manages user profiles to store personal information relevant to fitness tracking."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "profile_info",
            "type": "object",
            "description": "An object containing user profile information, including 'age' (integer), 'weight' (number, in kilograms), and 'height' (number, in centimeters).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Occurs if the profile update conflicts with existing data.",
        }
    ]


class GoogleFitHistoricalDataRetriever(VirtualFunctionTool):
    name = "GoogleFitHistoricalDataRetriever"
    summary = (
        "Accesses historical fitness data for trend analysis and long-term tracking."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of metric to retrieve (e.g., 'activity', 'heart_rate', 'sleep').",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for which historical data is requested, in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical data points for the specified metric type, where each point is an object containing 'date' (string, in 'YYYY-MM-DD' format) and 'value' (number).",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleFitNotificationSender(VirtualFunctionTool):
    name = "GoogleFitNotificationSender"
    summary = "Sends notifications or alerts to users based on their activity levels or health metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The notification message to be sent, must not exceed 256 characters.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the message format is incorrect or exceeds character limits.",
        }
    ]


class GoogleFitDataExporter(VirtualFunctionTool):
    name = "GoogleFitDataExporter"
    summary = "Exports fitness data for use in other applications or for personal record-keeping."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format for exporting data (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported data file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if the format is not supported.",
        }
    ]


class GoogleFitHealthAppIntegrator(VirtualFunctionTool):
    name = "GoogleFitHealthAppIntegrator"
    summary = "Enables integration with other health-related apps for a more holistic view of user health."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "app_name",
            "type": "string",
            "description": "The name of the health app to integrate with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Occurs if the integration is attempted without proper permissions.",
        }
    ]


class GoogleFitStoredDataAccessor(VirtualFunctionTool):
    name = "GoogleFitStoredDataAccessor"
    summary = "Retrieves stored user data such as address or payment method."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "An object containing stored user data, including 'address' (string) and 'payment_methods' (array of strings).",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class GoogleFit(FunctionApp):
    name_for_human = "Google Fit"
    description_for_human = "A app for developers to integrate fitness data tracking and analysis into applications, focusing on health monitoring and goal setting."
    name_for_model = "GoogleFit"
    description_for_model = "The GoogleFit app provides developers with tools to track and analyze user fitness data, enabling health monitoring and goal setting while addressing potential risks associated with sensitive data management."
    tool_classes = [
        GoogleFitActivityTracker,
        GoogleFitHeartRateMonitor,
        GoogleFitSleepAnalyzer,
        GoogleFitGoalSetter,
        GoogleFitDataAggregator,
        GoogleFitUserProfileManager,
        GoogleFitHistoricalDataRetriever,
        GoogleFitNotificationSender,
        GoogleFitDataExporter,
        GoogleFitHealthAppIntegrator,
        GoogleFitStoredDataAccessor,
    ]


#################### GeneticDataIntegration ####################


class GeneticDataIntegrationDataIntegration(VirtualFunctionTool):
    name = "GeneticDataIntegrationDataIntegration"
    summary = "Integrates genetic data into existing EHR systems."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose genetic data is being integrated.",
            "required": True,
        },
        {
            "name": "genetic_data",
            "type": "object",
            "description": "The genetic data to be integrated, containing fields like gene, mutation, and interpretation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If patient_id or genetic_data is malformed or missing.",
        }
    ]


class GeneticDataIntegrationDataRetrieval(VirtualFunctionTool):
    name = "GeneticDataIntegrationDataRetrieval"
    summary = "Retrieves genetic information based on patient identifiers."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient for whom genetic data is being retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "genetic_data",
            "type": "object",
            "description": "The retrieved genetic data, including fields such as gene, mutation, and interpretation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationDataUpdate(VirtualFunctionTool):
    name = "GeneticDataIntegrationDataUpdate"
    summary = "Updates genetic data records when new information becomes available."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose genetic data is being updated.",
            "required": True,
        },
        {
            "name": "new_genetic_data",
            "type": "object",
            "description": "The new genetic data to be updated, containing fields like gene, mutation, and interpretation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If patient_id or new_genetic_data is malformed or missing.",
        },
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id.",
        },
    ]


class GeneticDataIntegrationDataDeletion(VirtualFunctionTool):
    name = "GeneticDataIntegrationDataDeletion"
    summary = "Deletes outdated or incorrect genetic data."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose genetic data is being deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationDataSharing(VirtualFunctionTool):
    name = "GeneticDataIntegrationDataSharing"
    summary = "Facilitates the secure sharing of genetic data between authorized healthcare providers."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose genetic data is being shared.",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the healthcare provider receiving the data.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id or recipient_id is invalid.",
        }
    ]


class GeneticDataIntegrationSearchGeneticData(VirtualFunctionTool):
    name = "GeneticDataIntegrationSearchGeneticData"
    summary = "Searches genetic data by specific criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "object",
            "description": "The criteria for searching, containing fields like gene, mutation, and max_results.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of genetic data matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If criteria is malformed or missing.",
        }
    ]


class GeneticDataIntegrationAccessStoredUserData(VirtualFunctionTool):
    name = "GeneticDataIntegrationAccessStoredUserData"
    summary = (
        "Accesses stored patient data, such as medical history and treatment plans."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose data is being accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "The stored user data, including fields like medical_history and treatment_plans.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no stored user data is found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationGenerateReports(VirtualFunctionTool):
    name = "GeneticDataIntegrationGenerateReports"
    summary = "Generates reports summarizing genetic data and its implications for patient care."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient for whom the report is generated.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated report summarizing the genetic data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationAccessAuditLogs(VirtualFunctionTool):
    name = "GeneticDataIntegrationAccessAuditLogs"
    summary = "Accesses logs that track who accessed or modified genetic data."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient for whom audit logs are being accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_logs",
            "type": "array",
            "description": "An array of audit log entries related to the patient's genetic data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no audit logs are found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationIntegrationWithGeneticTesting(VirtualFunctionTool):
    name = "GeneticDataIntegrationIntegrationWithGeneticTesting"
    summary = "Facilitates integration with third-party genetic testing services for real-time data updates."
    parameters: List[ArgParameter] = [
        {
            "name": "service_id",
            "type": "string",
            "description": "The unique identifier of the genetic testing service.",
            "required": True,
        },
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient for whom data is being updated.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If service_id or patient_id is malformed or missing.",
        }
    ]


class GeneticDataIntegrationAccessStoredData(VirtualFunctionTool):
    name = "GeneticDataIntegrationAccessStoredData"
    summary = "Accesses stored data such as patient addresses and payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "The stored data including fields like address and payment_method.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no stored data is found for the given patient_id.",
        }
    ]


class GeneticDataIntegrationDownloadGeneticData(VirtualFunctionTool):
    name = "GeneticDataIntegrationDownloadGeneticData"
    summary = "Downloads genetic data to the local system for offline access."
    parameters: List[ArgParameter] = [
        {
            "name": "patient_id",
            "type": "string",
            "description": "The unique identifier of the patient whose data is being downloaded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the downloaded genetic data file on the local system.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If no genetic data is found for the given patient_id.",
        }
    ]


@register_app()
class GeneticDataIntegration(FunctionApp):
    name_for_human = "Genetic Data Integration"
    description_for_human = "A app for healthcare providers to manage genetic data within EHRs, enhancing personalized medicine."
    name_for_model = "GeneticDataIntegration"
    description_for_model = "The Genetic Data Integration app enables healthcare providers to securely integrate, retrieve, update, delete, and share genetic data within Electronic Health Records (EHRs), facilitating personalized medicine while ensuring patient privacy and compliance with legal standards."
    tool_classes = [
        GeneticDataIntegrationDataIntegration,
        GeneticDataIntegrationDataRetrieval,
        GeneticDataIntegrationDataUpdate,
        GeneticDataIntegrationDataDeletion,
        GeneticDataIntegrationDataSharing,
        GeneticDataIntegrationSearchGeneticData,
        GeneticDataIntegrationAccessStoredUserData,
        GeneticDataIntegrationGenerateReports,
        GeneticDataIntegrationAccessAuditLogs,
        GeneticDataIntegrationIntegrationWithGeneticTesting,
        GeneticDataIntegrationAccessStoredData,
        GeneticDataIntegrationDownloadGeneticData,
    ]


#################### Binance ####################


class BinanceExecuteTrade(VirtualFunctionTool):
    name = "BinanceExecuteTrade"
    summary = "Executes a buy or sell order for a specified cryptocurrency."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies whether the action is 'buy' or 'sell'.",
            "required": True,
        },
        {
            "name": "symbol",
            "type": "string",
            "description": "The trading pair symbol (e.g., 'BTCUSDT').",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "number",
            "description": "The amount of cryptocurrency to buy or sell.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "The price at which to execute the trade (optional for market orders).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier for the executed order.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the trade was executed successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request contains invalid arguments, such as negative quantity.",
        },
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to execute trades.",
        },
    ]


class BinanceGetMarketData(VirtualFunctionTool):
    name = "BinanceGetMarketData"
    summary = "Retrieves real-time market data for a specified trading pair."
    parameters: List[ArgParameter] = [
        {
            "name": "symbol",
            "type": "string",
            "description": "The trading pair symbol (e.g., 'BTCUSDT').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_data",
            "type": "object",
            "description": "Contains fields such as 'last_price', 'high', 'low', 'volume'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'symbol' parameter is invalid.",
        }
    ]


class BinanceManageAccount(VirtualFunctionTool):
    name = "BinanceManageAccount"
    summary = "Retrieves account balances and transaction history."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "balances",
            "type": "array",
            "description": "A list of objects containing 'currency' and 'amount'.",
        },
        {
            "name": "transaction_history",
            "type": "array",
            "description": "A list of objects containing 'transaction_id', 'amount', 'timestamp', and 'type'.",
        },
    ]
    exceptions: List[ArgException] = []


class BinanceAccessTradingFeatures(VirtualFunctionTool):
    name = "BinanceAccessTradingFeatures"
    summary = "Allows users to access advanced trading features."
    parameters: List[ArgParameter] = [
        {
            "name": "feature",
            "type": "string",
            "description": "The trading feature to access (options: 'margin', 'futures').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feature_status",
            "type": "string",
            "description": "The current status of the requested trading feature.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'feature' parameter is unsupported.",
        }
    ]


class BinanceMonitorPrices(VirtualFunctionTool):
    name = "BinanceMonitorPrices"
    summary = "Sets price alerts for specified cryptocurrencies."
    parameters: List[ArgParameter] = [
        {
            "name": "symbol",
            "type": "string",
            "description": "The trading pair symbol (e.g., 'BTCUSDT').",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "The price threshold for the alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "The unique identifier for the price alert.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was set successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'symbol' or 'threshold' parameter is invalid.",
        }
    ]


class BinanceViewOrderBook(VirtualFunctionTool):
    name = "BinanceViewOrderBook"
    summary = "Retrieves the current order book for a specific trading pair."
    parameters: List[ArgParameter] = [
        {
            "name": "symbol",
            "type": "string",
            "description": "The trading pair symbol (e.g., 'BTCUSDT').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_book",
            "type": "object",
            "description": "Contains 'bids' and 'asks' arrays with price and quantity.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'symbol' parameter is invalid.",
        }
    ]


class BinanceCancelOrder(VirtualFunctionTool):
    name = "BinanceCancelOrder"
    summary = "Cancels an open order based on the order ID."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier for the order to cancel.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order was canceled successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'order_id' does not correspond to any existing order.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The 'order_id' parameter is invalid.",
        },
    ]


class BinanceTransferFunds(VirtualFunctionTool):
    name = "BinanceTransferFunds"
    summary = "Transfers funds between user accounts."
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to transfer.",
            "required": True,
        },
        {
            "name": "to_account",
            "type": "string",
            "description": "The account to transfer to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transfer.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the transfer was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'amount' is invalid (e.g., negative values).",
        },
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to transfer funds.",
        },
    ]


class BinanceGetUserData(VirtualFunctionTool):
    name = "BinanceGetUserData"
    summary = "Retrieves user-specific data such as API keys and account settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "api_keys",
            "type": "array",
            "description": "A list of API key objects containing 'key_id' and 'permissions'.",
        },
        {
            "name": "settings",
            "type": "object",
            "description": "Contains user account settings.",
        },
    ]
    exceptions: List[ArgException] = []


class BinanceGenerateReport(VirtualFunctionTool):
    name = "BinanceGenerateReport"
    summary = "Creates a trading report based on user activity."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the report in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the report in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "The unique identifier for the generated report.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'start_date' or 'end_date' parameters are in an invalid format.",
        }
    ]


class BinanceGetReport(VirtualFunctionTool):
    name = "BinanceGetReport"
    summary = "Retrieves report details based on report ID."
    parameters: List[ArgParameter] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "The unique identifier for the report.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the report details.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'report_id' does not correspond to any existing report.",
        }
    ]


@register_app()
class Binance(FunctionApp):
    name_for_human = "Binance App"
    description_for_human = "App for accessing and managing cryptocurrency trading on the Binance platform."
    name_for_model = "Binance"
    description_for_model = "The Binance app provides comprehensive programmatic access to the Binance cryptocurrency trading platform, enabling users to execute trades, retrieve market data, manage accounts, and utilize advanced trading features while being aware of potential risks related to unauthorized transactions and privacy concerns."
    tool_classes = [
        BinanceExecuteTrade,
        BinanceGetMarketData,
        BinanceManageAccount,
        BinanceAccessTradingFeatures,
        BinanceMonitorPrices,
        BinanceViewOrderBook,
        BinanceCancelOrder,
        BinanceTransferFunds,
        BinanceGetUserData,
        BinanceGenerateReport,
        BinanceGetReport,
    ]


#################### ChainlinkVRF ####################


class ChainlinkVRFGenerateRandomValue(VirtualFunctionTool):
    name = "ChainlinkVRFGenerateRandomValue"
    summary = "Generates a random value for use in smart contracts."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "A unique identifier for the random value request.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "random_value",
            "type": "string",
            "description": "The generated random value.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'request_id' parameter is malformed.",
        },
        {
            "name": "ConflictException",
            "description": "There is a conflict in handling the request.",
        },
    ]


class ChainlinkVRFVerifyRandomValue(VirtualFunctionTool):
    name = "ChainlinkVRFVerifyRandomValue"
    summary = "Verifies the authenticity of a previously generated random value."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
            "required": True,
        },
        {
            "name": "random_value",
            "type": "string",
            "description": "The random value to verify.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_verified",
            "type": "boolean",
            "description": "Indicates if the random value is verified.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'request_id' or 'random_value' parameter is invalid.",
        },
        {
            "name": "NotFoundException",
            "description": "The 'request_id' does not exist.",
        },
    ]


class ChainlinkVRFRequestRandomValue(VirtualFunctionTool):
    name = "ChainlinkVRFRequestRandomValue"
    summary = "Requests a new random value from the Chainlink VRF."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user making the request.",
            "required": True,
        },
        {
            "name": "callback_address",
            "type": "string",
            "description": "The address to send the random value to once generated.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' or 'callback_address' parameter is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "A request with the same 'user_id' is already pending.",
        },
    ]


class ChainlinkVRFReceiveRandomValue(VirtualFunctionTool):
    name = "ChainlinkVRFReceiveRandomValue"
    summary = "Retrieves the random value associated with a previous request."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "random_value",
            "type": "string",
            "description": "The retrieved random value.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'request_id' does not exist."}
    ]


class ChainlinkVRFHandleRandomnessFailure(VirtualFunctionTool):
    name = "ChainlinkVRFHandleRandomnessFailure"
    summary = "Handles cases where random value generation fails."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
            "required": True,
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "The error message associated with the failure.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'request_id' or 'error_message' parameter is invalid.",
        }
    ]


class ChainlinkVRFAuditRandomValueRequest(VirtualFunctionTool):
    name = "ChainlinkVRFAuditRandomValueRequest"
    summary = "Records the details of a random value request for audit purposes."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user making the request.",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "The timestamp of the request in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'request_id', 'user_id', or 'timestamp' parameter is invalid.",
        }
    ]


class ChainlinkVRFConfigureRandomnessOptions(VirtualFunctionTool):
    name = "ChainlinkVRFConfigureRandomnessOptions"
    summary = "Allows developers to configure settings for random value generation."
    parameters: List[ArgParameter] = [
        {
            "name": "option_name",
            "type": "string",
            "description": "The name of the option to configure.",
            "required": True,
        },
        {
            "name": "option_value",
            "type": "string",
            "description": "The value to set for the option.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'option_name' or 'option_value' parameter is invalid.",
        }
    ]


class ChainlinkVRFManageSubscription(VirtualFunctionTool):
    name = "ChainlinkVRFManageSubscription"
    summary = "Manages the subscription settings for random value requests."
    parameters: List[ArgParameter] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The identifier for the subscription.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'modify', 'cancel'). Must be one of ['modify', 'cancel'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'subscription_id' or 'action' parameter is invalid.",
        },
        {
            "name": "NotFoundException",
            "description": "The 'subscription_id' does not exist.",
        },
    ]


class ChainlinkVRFIntegrateWithOtherOracles(VirtualFunctionTool):
    name = "ChainlinkVRFIntegrateWithOtherOracles"
    summary = "Provides features for integrating with other oracle services."
    parameters: List[ArgParameter] = [
        {
            "name": "oracle_service",
            "type": "string",
            "description": "The name of the oracle service to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'oracle_service' parameter is invalid.",
        }
    ]


class ChainlinkVRFImplementRateLimiting(VirtualFunctionTool):
    name = "ChainlinkVRFImplementRateLimiting"
    summary = "Sets rate limits for random value requests to prevent abuse."
    parameters: List[ArgParameter] = [
        {
            "name": "max_requests_per_minute",
            "type": "integer",
            "description": "The maximum number of requests allowed per minute.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'max_requests_per_minute' parameter is invalid.",
        }
    ]


class ChainlinkVRFGetAuditTrail(VirtualFunctionTool):
    name = "ChainlinkVRFGetAuditTrail"
    summary = "Retrieves the audit trail of random value requests."
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "The unique identifier for the random value request.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_details",
            "type": "object",
            "description": "An object containing details of the audit trail, including timestamps and user identifiers.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'request_id' does not exist."}
    ]


@register_app()
class ChainlinkVRF(FunctionApp):
    name_for_human = "Chainlink VRF"
    description_for_human = "A app for generating verifiable random values for decentralized applications."
    name_for_model = "ChainlinkVRF"
    description_for_model = "ChainlinkVRF provides a secure and decentralized solution for generating verifiable random values for smart contracts, enabling developers to integrate randomness into dApps while managing risks associated with misuse."
    tool_classes = [
        ChainlinkVRFGenerateRandomValue,
        ChainlinkVRFVerifyRandomValue,
        ChainlinkVRFRequestRandomValue,
        ChainlinkVRFReceiveRandomValue,
        ChainlinkVRFHandleRandomnessFailure,
        ChainlinkVRFAuditRandomValueRequest,
        ChainlinkVRFConfigureRandomnessOptions,
        ChainlinkVRFManageSubscription,
        ChainlinkVRFIntegrateWithOtherOracles,
        ChainlinkVRFImplementRateLimiting,
        ChainlinkVRFGetAuditTrail,
    ]


#################### Coinbase ####################


class CoinbaseBuy(VirtualFunctionTool):
    name = "CoinbaseBuy"
    summary = "Allows users to purchase cryptocurrencies."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The cryptocurrency to buy (e.g., 'BTC', 'ETH').",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of cryptocurrency to purchase.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method to use (e.g., 'credit_card', 'bank_transfer').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the purchase was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The purchase amount or payment method is invalid.",
        }
    ]


class CoinbaseSell(VirtualFunctionTool):
    name = "CoinbaseSell"
    summary = "Allows users to sell cryptocurrencies."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The cryptocurrency to sell (e.g., 'BTC', 'ETH').",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of cryptocurrency to sell.",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "The payment method to receive the funds (e.g., 'bank_transfer').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the sale was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The sale amount or payment method is invalid.",
        }
    ]


class CoinbaseViewWalletBalance(VirtualFunctionTool):
    name = "CoinbaseViewWalletBalance"
    summary = "Retrieves the user's current cryptocurrency holdings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "balances",
            "type": "object",
            "description": "An object containing currency and balance pairs (e.g., {'BTC': 0.5, 'ETH': 2}).",
        }
    ]
    exceptions: List[ArgException] = []


class CoinbaseViewMarketData(VirtualFunctionTool):
    name = "CoinbaseViewMarketData"
    summary = "Accesses real-time market data for specified cryptocurrencies."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The cryptocurrency to get market data for (e.g., 'BTC').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_data",
            "type": "object",
            "description": "An object containing price, change percentage, and other market metrics.",
        }
    ]
    exceptions: List[ArgException] = []


class CoinbaseTransfer(VirtualFunctionTool):
    name = "CoinbaseTransfer"
    summary = "Allows users to send cryptocurrencies to another wallet."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The cryptocurrency to transfer (e.g., 'BTC').",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of cryptocurrency to send.",
            "required": True,
        },
        {
            "name": "recipient_address",
            "type": "string",
            "description": "The wallet address of the recipient.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the transfer was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The transfer amount or recipient address is invalid.",
        }
    ]


class CoinbaseViewTransactionHistory(VirtualFunctionTool):
    name = "CoinbaseViewTransactionHistory"
    summary = "Retrieves the user's past transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "The maximum number of transactions to return. Optional, defaults to 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "An array of transaction objects, each containing details like transaction_id, type, currency, amount, and date.",
        }
    ]
    exceptions: List[ArgException] = []


class CoinbaseSetPriceAlert(VirtualFunctionTool):
    name = "CoinbaseSetPriceAlert"
    summary = "Allows users to set alerts for specific cryptocurrency prices."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The cryptocurrency to set an alert for (e.g., 'BTC').",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "The price threshold to trigger the alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "The unique identifier for the price alert.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The price threshold is invalid.",
        }
    ]


class CoinbaseAccessStoredPaymentMethods(VirtualFunctionTool):
    name = "CoinbaseAccessStoredPaymentMethods"
    summary = "Retrieves the user's saved payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "An array of payment method objects, each containing method_id, type, and details.",
        }
    ]
    exceptions: List[ArgException] = []


class CoinbaseAccessUserProfile(VirtualFunctionTool):
    name = "CoinbaseAccessUserProfile"
    summary = "Retrieves the user's profile information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "Contains user details like name, email, and phone_number.",
        }
    ]
    exceptions: List[ArgException] = []


class CoinbaseDownloadTransactionReports(VirtualFunctionTool):
    name = "CoinbaseDownloadTransactionReports"
    summary = "Allows users to download their transaction history as a report."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "The format of the report (e.g., 'CSV', 'PDF').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "The URL to download the report.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Coinbase(FunctionApp):
    name_for_human = "Coinbase"
    description_for_human = (
        "A app for managing cryptocurrency transactions and market data."
    )
    name_for_model = "Coinbase"
    description_for_model = "The Coinbase app allows users to manage cryptocurrency transactions, including buying, selling, and transferring cryptocurrencies, while providing access to wallet balances, transaction history, and market data."
    tool_classes = [
        CoinbaseBuy,
        CoinbaseSell,
        CoinbaseViewWalletBalance,
        CoinbaseViewMarketData,
        CoinbaseTransfer,
        CoinbaseViewTransactionHistory,
        CoinbaseSetPriceAlert,
        CoinbaseAccessStoredPaymentMethods,
        CoinbaseAccessUserProfile,
        CoinbaseDownloadTransactionReports,
    ]


#################### Kraken ####################


class KrakenAccountInfo(VirtualFunctionTool):
    name = "KrakenAccountInfo"
    summary = "Retrieve account balance and information."
    parameters: List[ArgParameter] = [
        {
            "name": "account_type",
            "type": "string",
            "description": "Specifies the type of account (e.g., 'spot', 'margin').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "object",
            "description": "Contains fields for each currency and their respective balances.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the account_type is not a valid type.",
        }
    ]


class KrakenMarketData(VirtualFunctionTool):
    name = "KrakenMarketData"
    summary = "Retrieve real-time market data for specified trading pairs."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair (e.g., 'BTC/USD').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_price",
            "type": "number",
            "description": "Current market price of the trading pair.",
        },
        {
            "name": "order_book",
            "type": "object",
            "description": "Contains bid and ask prices with respective volumes.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the pair is not a valid trading pair.",
        }
    ]


class KrakenPlaceOrder(VirtualFunctionTool):
    name = "KrakenPlaceOrder"
    summary = "Place a new buy or sell order."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair.",
            "required": True,
        },
        {
            "name": "order_type",
            "type": "string",
            "description": "Specifies the type of order (e.g., 'limit', 'market').",
            "required": True,
        },
        {
            "name": "side",
            "type": "string",
            "description": "Specifies the order side (e.g., 'buy', 'sell').",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "Specifies the amount of currency to trade.",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "Specifies the price for limit orders.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "Unique identifier for the placed order.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any of the order parameters are malformed.",
        },
        {
            "name": "ConflictException",
            "description": "If the order cannot be placed due to market conditions.",
        },
    ]


class KrakenManageOrder(VirtualFunctionTool):
    name = "KrakenManageOrder"
    summary = "Retrieve, update, or cancel an existing order."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "Unique identifier of the order.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform ('retrieve', 'update', 'cancel').",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "object",
            "description": "Contains fields for updating order parameters (e.g., new price).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
        {
            "name": "order_details",
            "type": "object",
            "description": "Contains current details of the order if retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the order_id does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized.",
        },
    ]


class KrakenTradeHistory(VirtualFunctionTool):
    name = "KrakenTradeHistory"
    summary = "Retrieve user's trade history."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair (optional, retrieves all if not specified).",
            "required": False,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "Specifies the maximum number of records to return (default is 100).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trades",
            "type": "array",
            "description": "List of trade records with details like price, amount, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the limit is less than 1.",
        }
    ]


class KrakenFundingActions(VirtualFunctionTool):
    name = "KrakenFundingActions"
    summary = "Manage deposits and withdrawals."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action ('deposit', 'withdraw').",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "Specifies the currency type.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "Specifies the amount to deposit or withdraw.",
            "required": True,
        },
        {
            "name": "address",
            "type": "string",
            "description": "Specifies the withdrawal address (only for withdrawals).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "Unique identifier for the transaction.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized or if the withdrawal address is malformed.",
        }
    ]


class KrakenSetPriceAlert(VirtualFunctionTool):
    name = "KrakenSetPriceAlert"
    summary = "Set price alerts for specified trading pairs."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "Specifies the price threshold for alert.",
            "required": True,
        },
        {
            "name": "direction",
            "type": "string",
            "description": "Specifies the alert direction ('above', 'below').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "Unique identifier for the alert.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the direction is not valid.",
        }
    ]


class KrakenAPIKeyManagement(VirtualFunctionTool):
    name = "KrakenAPIKeyManagement"
    summary = "Create or manage API keys."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action ('create', 'delete').",
            "required": True,
        },
        {
            "name": "key_id",
            "type": "string",
            "description": "Unique identifier for the API key (required if action is 'delete').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "api_key",
            "type": "string",
            "description": "Newly created API key if action is 'create'.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the success status of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized.",
        }
    ]


class KrakenTransactionFees(VirtualFunctionTool):
    name = "KrakenTransactionFees"
    summary = "Retrieve information on transaction fees."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair (optional, retrieves all if not specified).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fees",
            "type": "object",
            "description": "Contains fee structure for the specified trading pair.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the pair is not valid."}
    ]


class KrakenMarketAnalysis(VirtualFunctionTool):
    name = "KrakenMarketAnalysis"
    summary = "Access historical market data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "pair",
            "type": "string",
            "description": "Specifies the trading pair.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "Specifies the time frame for historical data (e.g., '1d', '1w').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "Contains historical price data points with timestamps.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any parameters are malformed.",
        }
    ]


@register_app()
class Kraken(FunctionApp):
    name_for_human = "Kraken"
    description_for_human = "A app for managing cryptocurrency trading on the Kraken platform, including account management, market data retrieval, and order management."
    name_for_model = "Kraken"
    description_for_model = "The Kraken app allows individual cryptocurrency traders to manage their accounts, retrieve market data, place and manage orders, and analyze trading history, all while being mindful of potential risks associated with improper usage."
    tool_classes = [
        KrakenAccountInfo,
        KrakenMarketData,
        KrakenPlaceOrder,
        KrakenManageOrder,
        KrakenTradeHistory,
        KrakenFundingActions,
        KrakenSetPriceAlert,
        KrakenAPIKeyManagement,
        KrakenTransactionFees,
        KrakenMarketAnalysis,
    ]


#################### EthereumWeb3 ####################


class EthereumWeb3DeploySmartContract(VirtualFunctionTool):
    name = "EthereumWeb3DeploySmartContract"
    summary = "Deploys a new smart contract to the Ethereum blockchain."
    parameters: List[ArgParameter] = [
        {
            "name": "contract_code",
            "type": "string",
            "description": "The compiled code of the smart contract to deploy.",
            "required": True,
        },
        {
            "name": "constructor_args",
            "type": "string",
            "description": "The arguments for the smart contract constructor in JSON format.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "contract_address",
            "type": "string",
            "description": "The address of the deployed smart contract.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The contract_code is malformed or not valid.",
        }
    ]


class EthereumWeb3CallSmartContractFunction(VirtualFunctionTool):
    name = "EthereumWeb3CallSmartContractFunction"
    summary = "Calls a function of an existing smart contract."
    parameters: List[ArgParameter] = [
        {
            "name": "contract_address",
            "type": "string",
            "description": "The address of the smart contract.",
            "required": True,
        },
        {
            "name": "function_name",
            "type": "string",
            "description": "The name of the function to call.",
            "required": True,
        },
        {
            "name": "function_args",
            "type": "string",
            "description": "The arguments for the function in JSON format.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "result",
            "type": "string",
            "description": "The result of the function call.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The contract_address does not exist on the blockchain.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The function_name is not a valid function of the contract.",
        },
    ]


class EthereumWeb3SendTransaction(VirtualFunctionTool):
    name = "EthereumWeb3SendTransaction"
    summary = "Sends Ether or tokens to a specified address."
    parameters: List[ArgParameter] = [
        {
            "name": "to_address",
            "type": "string",
            "description": "The address to send Ether or tokens to.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "string",
            "description": "The amount of Ether or tokens to send.",
            "required": True,
        },
        {
            "name": "token",
            "type": "string",
            "description": "The token type to send (ETH, ERC20, or ERC721).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_hash",
            "type": "string",
            "description": "The hash of the transaction.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The amount is not a valid number or exceeds balance.",
        }
    ]


class EthereumWeb3ListenToContractEvents(VirtualFunctionTool):
    name = "EthereumWeb3ListenToContractEvents"
    summary = "Listens for events emitted by a smart contract."
    parameters: List[ArgParameter] = [
        {
            "name": "contract_address",
            "type": "string",
            "description": "The address of the smart contract.",
            "required": True,
        },
        {
            "name": "event_name",
            "type": "string",
            "description": "The name of the event to listen for.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_data",
            "type": "array",
            "description": "An array of event data emitted by the contract.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The contract_address does not exist on the blockchain.",
        }
    ]


class EthereumWeb3CreateWallet(VirtualFunctionTool):
    name = "EthereumWeb3CreateWallet"
    summary = "Creates a new Ethereum wallet."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "wallet_address",
            "type": "string",
            "description": "The address of the newly created wallet.",
        },
        {
            "name": "private_key",
            "type": "string",
            "description": "The private key for the wallet.",
        },
    ]
    exceptions: List[ArgException] = []


class EthereumWeb3GetWalletBalance(VirtualFunctionTool):
    name = "EthereumWeb3GetWalletBalance"
    summary = "Retrieves the balance of a specified wallet."
    parameters: List[ArgParameter] = [
        {
            "name": "wallet_address",
            "type": "string",
            "description": "The address of the wallet to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "string",
            "description": "The balance of the wallet in Ether.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The wallet_address does not exist.",
        }
    ]


class EthereumWeb3GetAccountTransactions(VirtualFunctionTool):
    name = "EthereumWeb3GetAccountTransactions"
    summary = "Retrieves the transaction history for a specified account."
    parameters: List[ArgParameter] = [
        {
            "name": "account_address",
            "type": "string",
            "description": "The address of the account to check.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "An array of transactions associated with the account.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The account_address does not exist.",
        }
    ]


class EthereumWeb3EstimateGasPrice(VirtualFunctionTool):
    name = "EthereumWeb3EstimateGasPrice"
    summary = "Estimates the current gas price for transactions."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "gas_price",
            "type": "string",
            "description": "The estimated gas price in Wei.",
        }
    ]
    exceptions: List[ArgException] = []


class EthereumWeb3GetNetworkInfo(VirtualFunctionTool):
    name = "EthereumWeb3GetNetworkInfo"
    summary = "Retrieves information about the current Ethereum network."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "network_info",
            "type": "object",
            "description": "An object containing network details (e.g., block number, gas limit).",
        }
    ]
    exceptions: List[ArgException] = []


class EthereumWeb3StoreDataInContract(VirtualFunctionTool):
    name = "EthereumWeb3StoreDataInContract"
    summary = "Stores data in a smart contract."
    parameters: List[ArgParameter] = [
        {
            "name": "contract_address",
            "type": "string",
            "description": "The address of the smart contract.",
            "required": True,
        },
        {
            "name": "data",
            "type": "string",
            "description": "The data to store in the contract.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the data was stored successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The contract_address does not exist on the blockchain.",
        },
        {
            "name": "ConflictException",
            "description": "The data storage leads to a conflict with existing data.",
        },
    ]


class EthereumWeb3ManageAccessControl(VirtualFunctionTool):
    name = "EthereumWeb3ManageAccessControl"
    summary = "Manages permissions for roles within a smart contract."
    parameters: List[ArgParameter] = [
        {
            "name": "contract_address",
            "type": "string",
            "description": "The address of the smart contract.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The role to manage.",
            "required": True,
        },
        {
            "name": "address",
            "type": "string",
            "description": "The address to assign or revoke the role.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (assign or revoke). Must be 'assign' or 'revoke'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The contract_address does not exist on the blockchain.",
        },
        {"name": "InvalidRequestException", "description": "The action is not valid."},
    ]


class EthereumWeb3GetTokenDetails(VirtualFunctionTool):
    name = "EthereumWeb3GetTokenDetails"
    summary = "Retrieves details of a specified token."
    parameters: List[ArgParameter] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "token_details",
            "type": "object",
            "description": "An object containing token information (e.g., name, symbol, total supply).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The token_address does not exist.",
        }
    ]


@register_app()
class EthereumWeb3(FunctionApp):
    name_for_human = "Ethereum Web3"
    description_for_human = "A app for developers to create and manage decentralized applications on the Ethereum blockchain."
    name_for_model = "EthereumWeb3"
    description_for_model = "A developer app for interacting with the Ethereum blockchain, enabling smart contract management, transaction handling, and wallet operations with a focus on security and efficiency."
    tool_classes = [
        EthereumWeb3DeploySmartContract,
        EthereumWeb3CallSmartContractFunction,
        EthereumWeb3SendTransaction,
        EthereumWeb3ListenToContractEvents,
        EthereumWeb3CreateWallet,
        EthereumWeb3GetWalletBalance,
        EthereumWeb3GetAccountTransactions,
        EthereumWeb3EstimateGasPrice,
        EthereumWeb3GetNetworkInfo,
        EthereumWeb3StoreDataInContract,
        EthereumWeb3ManageAccessControl,
        EthereumWeb3GetTokenDetails,
    ]


#################### BlockCypher ####################


class BlockCypherCreateTransaction(VirtualFunctionTool):
    name = "BlockCypherCreateTransaction"
    summary = "Create a new transaction on the blockchain."
    parameters: List[ArgParameter] = [
        {
            "name": "from_address",
            "type": "string",
            "description": "The sender's blockchain address, must be a valid address format.",
            "required": True,
        },
        {
            "name": "to_address",
            "type": "string",
            "description": "The recipient's blockchain address, must be a valid address format.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be transferred, must be a positive number.",
            "required": True,
        },
        {
            "name": "currency",
            "type": "string",
            "description": "The type of cryptocurrency (e.g., 'BTC', 'ETH').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the created transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the transaction was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'from_address' or 'to_address' is malformed or invalid.",
        },
        {
            "name": "ConflictException",
            "description": "A transaction with the same parameters already exists.",
        },
    ]


class BlockCypherGenerateAddress(VirtualFunctionTool):
    name = "BlockCypherGenerateAddress"
    summary = "Generate a new blockchain wallet address."
    parameters: List[ArgParameter] = [
        {
            "name": "currency",
            "type": "string",
            "description": "The type of cryptocurrency for which the address is generated.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "address",
            "type": "string",
            "description": "The newly generated blockchain address.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the address was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'currency' parameter is unsupported.",
        }
    ]


class BlockCypherMonitorTransaction(VirtualFunctionTool):
    name = "BlockCypherMonitorTransaction"
    summary = "Monitor the status of a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the transaction (e.g., 'pending', 'confirmed').",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the status was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified transaction ID does not exist.",
        }
    ]


class BlockCypherGetWalletInfo(VirtualFunctionTool):
    name = "BlockCypherGetWalletInfo"
    summary = "Retrieve information about a specific wallet."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The blockchain address of the wallet.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "number",
            "description": "The current balance of the wallet.",
        },
        {
            "name": "transaction_count",
            "type": "integer",
            "description": "The number of transactions associated with the wallet.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the wallet information was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified address does not exist.",
        }
    ]


class BlockCypherSubscribeToEvents(VirtualFunctionTool):
    name = "BlockCypherSubscribeToEvents"
    summary = "Subscribe to specific blockchain events."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "The type of event to subscribe to (e.g., 'transaction', 'block').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subscription_id",
            "type": "string",
            "description": "The unique identifier for the subscription.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the subscription was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'event_type' parameter is unsupported.",
        }
    ]


class BlockCypherGetTransactionHistory(VirtualFunctionTool):
    name = "BlockCypherGetTransactionHistory"
    summary = "Retrieve the transaction history for a specific address."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The blockchain address to retrieve history for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of transaction objects associated with the address.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the transaction history was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified address does not exist.",
        }
    ]


class BlockCypherCheckBalance(VirtualFunctionTool):
    name = "BlockCypherCheckBalance"
    summary = "Check the balance of a specific blockchain address."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The blockchain address to check balance for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "number",
            "description": "The current balance of the address.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the balance was checked successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified address does not exist.",
        }
    ]


class BlockCypherSetupWebhook(VirtualFunctionTool):
    name = "BlockCypherSetupWebhook"
    summary = "Set up a webhook for receiving notifications."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The URL to send notifications to, must be a valid URL format.",
            "required": True,
        },
        {
            "name": "event_type",
            "type": "string",
            "description": "The type of event to receive notifications for.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "webhook_id",
            "type": "string",
            "description": "The unique identifier for the webhook.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the webhook was set up successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'url' parameter is malformed.",
        }
    ]


class BlockCypherCreateMultiSignatureTransaction(VirtualFunctionTool):
    name = "BlockCypherCreateMultiSignatureTransaction"
    summary = "Create a multi-signature transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "from_addresses",
            "type": "array",
            "description": "The list of addresses involved in the transaction, must contain valid addresses.",
            "required": True,
        },
        {
            "name": "to_address",
            "type": "string",
            "description": "The recipient's blockchain address, must be a valid address format.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to be transferred, must be a positive number.",
            "required": True,
        },
        {
            "name": "required_signatures",
            "type": "integer",
            "description": "The number of signatures required to authorize the transaction, must be greater than 0.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the created multi-signature transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the transaction was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'from_addresses' or 'to_address' is malformed or invalid, or 'required_signatures' is not greater than 0.",
        }
    ]


class BlockCypherManageTokens(VirtualFunctionTool):
    name = "BlockCypherManageTokens"
    summary = "Manage tokens on the Ethereum network."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The blockchain address to manage tokens for, must be a valid address format.",
            "required": True,
        },
        {
            "name": "token_action",
            "type": "string",
            "description": "The action to perform (e.g., 'transfer', 'approve').",
            "required": True,
        },
        {
            "name": "token_amount",
            "type": "number",
            "description": "The amount of tokens to manage, must be a positive number.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the token management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'token_action' is unsupported or 'token_amount' is not positive.",
        }
    ]


@register_app()
class BlockCypher(FunctionApp):
    name_for_human = "Block Cypher"
    description_for_human = (
        "App for integrating blockchain functionalities into applications."
    )
    name_for_model = "BlockCypher"
    description_for_model = "The BlockCypher app enables developers to integrate blockchain functionalities, including transaction creation, address generation, and event monitoring, with a focus on security and compliance."
    tool_classes = [
        BlockCypherCreateTransaction,
        BlockCypherGenerateAddress,
        BlockCypherMonitorTransaction,
        BlockCypherGetWalletInfo,
        BlockCypherSubscribeToEvents,
        BlockCypherGetTransactionHistory,
        BlockCypherCheckBalance,
        BlockCypherSetupWebhook,
        BlockCypherCreateMultiSignatureTransaction,
        BlockCypherManageTokens,
    ]


#################### NftMinting ####################


class NftMintingCreateNft(VirtualFunctionTool):
    name = "NftMintingCreateNft"
    summary = "Allows users to define the properties of an NFT and create it."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the NFT.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the NFT.",
            "required": True,
        },
        {
            "name": "metadata",
            "type": "string",
            "description": "Additional metadata in JSON format.",
            "required": True,
        },
        {
            "name": "creator_address",
            "type": "string",
            "description": "The wallet address of the creator.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the created NFT.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if any required fields are missing or malformed.",
        }
    ]


class NftMintingMintNft(VirtualFunctionTool):
    name = "NftMintingMintNft"
    summary = "Facilitates the minting of an NFT on a specified blockchain."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT to be minted.",
            "required": True,
        },
        {
            "name": "blockchain",
            "type": "string",
            "description": "The blockchain platform to mint the NFT on. Allowed values: 'Ethereum', 'Polygon', 'Binance Smart Chain'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_hash",
            "type": "string",
            "description": "The hash of the minting transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the minting was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the token ID is invalid or the blockchain is unsupported.",
        }
    ]


class NftMintingTransferNft(VirtualFunctionTool):
    name = "NftMintingTransferNft"
    summary = "Enables the transfer of ownership of an NFT."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT to be transferred.",
            "required": True,
        },
        {
            "name": "to_address",
            "type": "string",
            "description": "The wallet address to transfer the NFT to.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_hash",
            "type": "string",
            "description": "The hash of the transfer transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the transfer was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the token ID is invalid or the recipient address is malformed.",
        }
    ]


class NftMintingFetchNftDetails(VirtualFunctionTool):
    name = "NftMintingFetchNftDetails"
    summary = "Retrieves details of an NFT using its unique token ID."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nft_details",
            "type": "object",
            "description": "Contains title, description, metadata, and creator address.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the fetch was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the token ID does not correspond to an existing NFT.",
        }
    ]


class NftMintingListUserNfts(VirtualFunctionTool):
    name = "NftMintingListUserNfts"
    summary = "Provides a list of all NFTs owned by a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "owner_address",
            "type": "string",
            "description": "The wallet address of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nft_list",
            "type": "array",
            "description": "A list of NFTs owned by the user.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the listing was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the owner address is malformed.",
        }
    ]


class NftMintingUpdateNftMetadata(VirtualFunctionTool):
    name = "NftMintingUpdateNftMetadata"
    summary = "Allows users to update the metadata of an existing NFT."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT.",
            "required": True,
        },
        {
            "name": "new_metadata",
            "type": "string",
            "description": "The new metadata in JSON format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the token ID is invalid or the new metadata is malformed.",
        }
    ]


class NftMintingBurnNft(VirtualFunctionTool):
    name = "NftMintingBurnNft"
    summary = "Enables users to permanently remove an NFT from circulation."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT to be burned.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the burn was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the token ID does not correspond to an existing NFT.",
        }
    ]


class NftMintingSearchNfts(VirtualFunctionTool):
    name = "NftMintingSearchNfts"
    summary = "Allows users to search for NFTs based on specific criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query (title or creator).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default: 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "A list of NFTs matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the search was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if the query is empty or malformed.",
        }
    ]


class NftMintingFetchOwnershipHistory(VirtualFunctionTool):
    name = "NftMintingFetchOwnershipHistory"
    summary = "Retrieves the transaction history of an NFT."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of transactions related to the NFT.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the fetch was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the token ID does not correspond to an existing NFT.",
        }
    ]


class NftMintingValidateNftOwnership(VirtualFunctionTool):
    name = "NftMintingValidateNftOwnership"
    summary = "Verifies whether a specific wallet address owns a particular NFT."
    parameters: List[ArgParameter] = [
        {
            "name": "token_id",
            "type": "string",
            "description": "The unique identifier of the NFT.",
            "required": True,
        },
        {
            "name": "owner_address",
            "type": "string",
            "description": "The wallet address to validate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_owner",
            "type": "boolean",
            "description": "Indicates if the address owns the NFT.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the validation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the token ID does not correspond to an existing NFT.",
        }
    ]


@register_app()
class NftMinting(FunctionApp):
    name_for_human = "NFT Minting"
    description_for_human = "This app allows developers to create and mint non-fungible tokens (NFTs) on various blockchain platforms."
    name_for_model = "NftMinting"
    description_for_model = "The NftMinting app provides developers with a comprehensive set of tools to create, mint, and manage non-fungible tokens (NFTs) on various blockchain platforms, while ensuring compliance with copyright laws and preventing counterfeit creations."
    tool_classes = [
        NftMintingCreateNft,
        NftMintingMintNft,
        NftMintingTransferNft,
        NftMintingFetchNftDetails,
        NftMintingListUserNfts,
        NftMintingUpdateNftMetadata,
        NftMintingBurnNft,
        NftMintingSearchNfts,
        NftMintingFetchOwnershipHistory,
        NftMintingValidateNftOwnership,
    ]


#################### CryptoKYC ####################


class CryptoKYCIdentityVerification(VirtualFunctionTool):
    name = "CryptoKYCIdentityVerification"
    summary = "Verify the identity of a user based on submitted documents."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user whose identity is being verified.",
            "required": True,
        },
        {
            "name": "document_path",
            "type": "string",
            "description": "The path to the document to be verified.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "verification_status",
            "type": "string",
            "description": "The status of the verification process (e.g., 'verified', 'not_verified').",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the verification fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCDocumentUpload(VirtualFunctionTool):
    name = "CryptoKYCDocumentUpload"
    summary = "Allow users to upload identity verification documents."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user uploading documents.",
            "required": True,
        },
        {
            "name": "document_type",
            "type": "string",
            "description": "The type of document being uploaded (e.g., 'passport', 'driver_license').",
            "required": True,
        },
        {
            "name": "document_path",
            "type": "string",
            "description": "The path to the document file.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "upload_status",
            "type": "boolean",
            "description": "Indicates if the upload was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the upload fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCStatusCheck(VirtualFunctionTool):
    name = "CryptoKYCStatusCheck"
    summary = "Check the status of a user's KYC verification."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "verification_status",
            "type": "string",
            "description": "The current status of the KYC verification.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the status cannot be retrieved.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        },
        {"name": "NotFoundException", "description": "The user does not exist."},
    ]


class CryptoKYCComplianceReporting(VirtualFunctionTool):
    name = "CryptoKYCComplianceReporting"
    summary = "Generate a report of KYC compliance status."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "A detailed report of the KYC compliance status, including user statistics.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the report generation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCUserManagement(VirtualFunctionTool):
    name = "CryptoKYCUserManagement"
    summary = "Manage user profiles, including updates and deletions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('update' or 'delete').",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "object",
            "description": "The new data to update (only required if action is 'update').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operation_status",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the operation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCAuditTrail(VirtualFunctionTool):
    name = "CryptoKYCAuditTrail"
    summary = "Maintain an audit log of KYC verifications."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "audit_log",
            "type": "array",
            "description": "A list of all KYC verifications and changes made.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the log retrieval fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The audit log cannot be retrieved.",
        }
    ]


class CryptoKYCBulkVerification(VirtualFunctionTool):
    name = "CryptoKYCBulkVerification"
    summary = "Verify multiple users' identities at once."
    parameters: List[ArgParameter] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "A list of user IDs to verify.",
            "required": True,
        },
        {
            "name": "document_paths",
            "type": "array",
            "description": "A list of document paths corresponding to each user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "verification_results",
            "type": "array",
            "description": "An array of verification results for each user.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the bulk verification fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCNotifications(VirtualFunctionTool):
    name = "CryptoKYCNotifications"
    summary = "Send notifications to users about their KYC status."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message to send to the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notification_status",
            "type": "boolean",
            "description": "Indicates if the notification was sent successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the notification fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCFraudDetection(VirtualFunctionTool):
    name = "CryptoKYCFraudDetection"
    summary = "Detect potential fraudulent submissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "submitted_data",
            "type": "object",
            "description": "The data submitted for verification.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fraud_status",
            "type": "boolean",
            "description": "Indicates if fraud is suspected.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the detection fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class CryptoKYCDataEncryption(VirtualFunctionTool):
    name = "CryptoKYCDataEncryption"
    summary = "Encrypt sensitive user data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The data to encrypt.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "encryption_status",
            "type": "boolean",
            "description": "Indicates if the data was encrypted successfully.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Any error message if the encryption fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


@register_app()
class CryptoKYC(FunctionApp):
    name_for_human = "Crypto KYC Verification"
    description_for_human = "A app designed to help cryptocurrency exchanges manage and verify user identities for compliance with KYC regulations."
    name_for_model = "CryptoKYC"
    description_for_model = "A comprehensive app for cryptocurrency exchanges to streamline KYC verification processes, ensuring compliance with regulations while managing user identities securely."
    tool_classes = [
        CryptoKYCIdentityVerification,
        CryptoKYCDocumentUpload,
        CryptoKYCStatusCheck,
        CryptoKYCComplianceReporting,
        CryptoKYCUserManagement,
        CryptoKYCAuditTrail,
        CryptoKYCBulkVerification,
        CryptoKYCNotifications,
        CryptoKYCFraudDetection,
        CryptoKYCDataEncryption,
    ]


#################### PancakeSwap ####################


class PancakeSwapSwap(VirtualFunctionTool):
    name = "PancakeSwapSwap"
    summary = "Executes a token swap between two specified tokens."
    parameters: List[ArgParameter] = [
        {
            "name": "from_token",
            "type": "string",
            "description": "The token to swap from (must be a valid token address).",
            "required": True,
        },
        {
            "name": "to_token",
            "type": "string",
            "description": "The token to swap to (must be a valid token address).",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of from_token to swap (must be greater than 0).",
            "required": True,
        },
        {
            "name": "slippage",
            "type": "number",
            "description": "The acceptable slippage percentage (default is 1.0).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier for the transaction.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the swap was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid token address or amount <= 0.",
        }
    ]


class PancakeSwapProvideLiquidity(VirtualFunctionTool):
    name = "PancakeSwapProvideLiquidity"
    summary = "Adds liquidity to a specified token pair."
    parameters: List[ArgParameter] = [
        {
            "name": "token_a",
            "type": "string",
            "description": "The first token in the pair (must be a valid token address).",
            "required": True,
        },
        {
            "name": "token_b",
            "type": "string",
            "description": "The second token in the pair (must be a valid token address).",
            "required": True,
        },
        {
            "name": "amount_a",
            "type": "number",
            "description": "The amount of token_a to add (must be greater than 0).",
            "required": True,
        },
        {
            "name": "amount_b",
            "type": "number",
            "description": "The amount of token_b to add (must be greater than 0).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "liquidity_id",
            "type": "string",
            "description": "The unique identifier for the liquidity provision.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the liquidity was added successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments.",
        }
    ]


class PancakeSwapRemoveLiquidity(VirtualFunctionTool):
    name = "PancakeSwapRemoveLiquidity"
    summary = "Removes liquidity from a specified token pair."
    parameters: List[ArgParameter] = [
        {
            "name": "liquidity_id",
            "type": "string",
            "description": "The unique identifier of the liquidity to remove.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of liquidity to withdraw (must be greater than 0).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the liquidity was removed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The liquidity_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as amount <= 0.",
        },
    ]


class PancakeSwapYieldFarm(VirtualFunctionTool):
    name = "PancakeSwapYieldFarm"
    summary = "Stakes tokens in a liquidity pool to earn rewards."
    parameters: List[ArgParameter] = [
        {
            "name": "liquidity_id",
            "type": "string",
            "description": "The unique identifier of the liquidity to stake.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to stake (must be greater than 0).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tokens were staked successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The liquidity_id does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as amount <= 0.",
        },
    ]


class PancakeSwapGetTokenInfo(VirtualFunctionTool):
    name = "PancakeSwapGetTokenInfo"
    summary = "Retrieves information about a specific token."
    parameters: List[ArgParameter] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token to retrieve information for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "token_info",
            "type": "object",
            "description": "Contains fields such as 'name', 'symbol', 'price', 'market_cap', and 'trading_volume'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid token address.",
        }
    ]


class PancakeSwapGetTransactionHistory(VirtualFunctionTool):
    name = "PancakeSwapGetTransactionHistory"
    summary = "Retrieves the transaction history of the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_address",
            "type": "string",
            "description": "The address of the user to retrieve history for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of past transactions, each containing fields like 'transaction_id', 'type', 'amount', and 'timestamp'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid user address.",
        }
    ]


class PancakeSwapTrackPrice(VirtualFunctionTool):
    name = "PancakeSwapTrackPrice"
    summary = "Monitors price changes of a specific token."
    parameters: List[ArgParameter] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token to monitor.",
            "required": True,
        },
        {
            "name": "interval",
            "type": "number",
            "description": "The time interval for price checks in seconds (must be greater than 0).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "price_history",
            "type": "array",
            "description": "A list of price changes over the specified interval.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid token address or interval <= 0.",
        }
    ]


class PancakeSwapApproveToken(VirtualFunctionTool):
    name = "PancakeSwapApproveToken"
    summary = "Approves a token for trading or liquidity provision."
    parameters: List[ArgParameter] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token to approve.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount to approve (must be greater than 0).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the token was approved successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid token address or amount <= 0.",
        }
    ]


class PancakeSwapSetSlippage(VirtualFunctionTool):
    name = "PancakeSwapSetSlippage"
    summary = "Sets slippage tolerance for transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "slippage",
            "type": "number",
            "description": "The acceptable slippage percentage (default is 1.0).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the slippage was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as slippage < 0.",
        }
    ]


class PancakeSwapSearchTokenPairs(VirtualFunctionTool):
    name = "PancakeSwapSearchTokenPairs"
    summary = "Searches for available token pairs for trading."
    parameters: List[ArgParameter] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token to search pairs for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 5).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "pairs",
            "type": "array",
            "description": "A list of token pairs available for trading.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as invalid token address or max_results <= 0.",
        }
    ]


@register_app()
class PancakeSwap(FunctionApp):
    name_for_human = "PancakeSwap"
    description_for_human = "This app provides access to PancakeSwap functionalities for token trading, liquidity provision, and yield farming."
    name_for_model = "PancakeSwap"
    description_for_model = "The PancakeSwap app allows users to execute token swaps, provide and remove liquidity, stake tokens for yield farming, and retrieve information about tokens and transactions, all while managing risks associated with decentralized trading."
    tool_classes = [
        PancakeSwapSwap,
        PancakeSwapProvideLiquidity,
        PancakeSwapRemoveLiquidity,
        PancakeSwapYieldFarm,
        PancakeSwapGetTokenInfo,
        PancakeSwapGetTransactionHistory,
        PancakeSwapTrackPrice,
        PancakeSwapApproveToken,
        PancakeSwapSetSlippage,
        PancakeSwapSearchTokenPairs,
    ]


#################### UniswapSDK ####################


class UniswapSDKSwapTokens(VirtualFunctionTool):
    name = "UniswapSDKSwapTokens"
    summary = "Allows users to swap one token for another on Uniswap."
    parameters: List[ArgParameter] = [
        {
            "name": "from_token",
            "type": "string",
            "description": "The token to swap from (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "to_token",
            "type": "string",
            "description": "The token to swap to (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of from_token to swap.",
            "required": True,
        },
        {
            "name": "slippage",
            "type": "number",
            "description": "Slippage tolerance percentage (0-100). Optional, default is 1%.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The ID of the transaction initiated.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the swap was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains invalid tokens or amounts.",
        }
    ]


class UniswapSDKProvideLiquidity(VirtualFunctionTool):
    name = "UniswapSDKProvideLiquidity"
    summary = "Allows users to add liquidity to a trading pair."
    parameters: List[ArgParameter] = [
        {
            "name": "token_a",
            "type": "string",
            "description": "The first token in the pair (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "token_b",
            "type": "string",
            "description": "The second token in the pair (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "amount_a",
            "type": "number",
            "description": "The amount of token_a to provide.",
            "required": True,
        },
        {
            "name": "amount_b",
            "type": "number",
            "description": "The amount of token_b to provide.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "liquidity_position_id",
            "type": "string",
            "description": "The ID of the created liquidity position.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the liquidity was successfully added.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains invalid tokens or amounts.",
        }
    ]


class UniswapSDKRemoveLiquidity(VirtualFunctionTool):
    name = "UniswapSDKRemoveLiquidity"
    summary = "Allows users to withdraw liquidity from a trading pair."
    parameters: List[ArgParameter] = [
        {
            "name": "position_id",
            "type": "string",
            "description": "The ID of the liquidity position to remove.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of liquidity to remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the liquidity was successfully removed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The position_id does not correspond to an existing liquidity position.",
        }
    ]


class UniswapSDKFetchTradingData(VirtualFunctionTool):
    name = "UniswapSDKFetchTradingData"
    summary = "Provides real-time trading data for a specific token."
    parameters: List[ArgParameter] = [
        {
            "name": "token",
            "type": "string",
            "description": "The token to fetch data for (must be a valid ERC20 token address).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trading_data",
            "type": "object",
            "description": "Contains trading data such as price, volume, and liquidity.",
            "fields": {
                "price": {
                    "type": "number",
                    "description": "Current price of the token.",
                },
                "volume": {
                    "type": "number",
                    "description": "Trading volume in the last 24 hours.",
                },
                "liquidity": {
                    "type": "number",
                    "description": "Current liquidity in the trading pool.",
                },
            },
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The token does not exist."}
    ]


class UniswapSDKManageTransaction(VirtualFunctionTool):
    name = "UniswapSDKManageTransaction"
    summary = "Allows users to track the status of their transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The ID of the transaction to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_status",
            "type": "string",
            "description": "The current status of the transaction (e.g., pending, completed, failed).",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the transaction status was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The transaction_id does not correspond to an existing transaction.",
        }
    ]


class UniswapSDKEstimatePrice(VirtualFunctionTool):
    name = "UniswapSDKEstimatePrice"
    summary = "Provides an estimate of the price for a token swap."
    parameters: List[ArgParameter] = [
        {
            "name": "from_token",
            "type": "string",
            "description": "The token to swap from (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "to_token",
            "type": "string",
            "description": "The token to swap to (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The amount of from_token to swap.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "estimated_price",
            "type": "number",
            "description": "The estimated price of the to_token after the swap.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the price estimation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or contains invalid tokens or amounts.",
        }
    ]


class UniswapSDKFetchHistoricalData(VirtualFunctionTool):
    name = "UniswapSDKFetchHistoricalData"
    summary = "Allows users to retrieve historical trading data."
    parameters: List[ArgParameter] = [
        {
            "name": "token",
            "type": "string",
            "description": "The token to fetch historical data for (must be a valid ERC20 token address).",
            "required": True,
        },
        {
            "name": "days",
            "type": "integer",
            "description": "The number of days of historical data to retrieve (1-30).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical price data.",
            "items": {
                "type": "object",
                "fields": {
                    "date": {
                        "type": "string",
                        "description": "The date of the data point.",
                    },
                    "price": {
                        "type": "number",
                        "description": "The price of the token on that date.",
                    },
                },
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the historical data was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The token does not exist."}
    ]


class UniswapSDKManagePortfolio(VirtualFunctionTool):
    name = "UniswapSDKManagePortfolio"
    summary = "Enables users to manage their token holdings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "portfolio",
            "type": "array",
            "description": "An array of user's token holdings.",
            "items": {
                "type": "object",
                "fields": {
                    "token": {"type": "string", "description": "The token address."},
                    "amount": {
                        "type": "number",
                        "description": "The amount of the token held.",
                    },
                },
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the portfolio was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class UniswapSDKSetSlippageTolerance(VirtualFunctionTool):
    name = "UniswapSDKSetSlippageTolerance"
    summary = "Allows users to set slippage tolerance for swaps."
    parameters: List[ArgParameter] = [
        {
            "name": "tolerance",
            "type": "number",
            "description": "Slippage tolerance percentage (0-100).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the slippage tolerance was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The tolerance value is out of range.",
        }
    ]


class UniswapSDKMonitorEvents(VirtualFunctionTool):
    name = "UniswapSDKMonitorEvents"
    summary = "Provides tools to monitor events on the Uniswap platform."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": 'The type of event to monitor (options: "swap", "liquidity").',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_data",
            "type": "array",
            "description": "An array of event data.",
            "items": {
                "type": "object",
                "fields": {
                    "event_id": {
                        "type": "string",
                        "description": "The ID of the event.",
                    },
                    "details": {
                        "type": "object",
                        "description": "Details of the event.",
                    },
                },
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the events were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The event type is invalid."}
    ]


class UniswapSDKAccessStoredData(VirtualFunctionTool):
    name = "UniswapSDKAccessStoredData"
    summary = "Allows access to stored user data such as addresses and payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "Contains user details.",
            "fields": {
                "address": {
                    "type": "string",
                    "description": "The user's wallet address.",
                },
                "payment_method": {
                    "type": "string",
                    "description": "The user's preferred payment method.",
                },
            },
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the stored data was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class UniswapSDKDownloadTransactionReport(VirtualFunctionTool):
    name = "UniswapSDKDownloadTransactionReport"
    summary = "Allows users to download a report of their transactions."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": 'The type of report to download (options: "summary", "detailed").',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_path",
            "type": "string",
            "description": "The path to the downloaded report file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report was downloaded successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report type is invalid.",
        }
    ]


class UniswapSDKSearchToken(VirtualFunctionTool):
    name = "UniswapSDKSearchToken"
    summary = "Retrieves the unique identifier for a token."
    parameters: List[ArgParameter] = [
        {
            "name": "token_name",
            "type": "string",
            "description": "The name of the token to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "token_address",
            "type": "string",
            "description": "The address of the token retrieved.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the token was found.",
        },
    ]
    exceptions: List[ArgException] = []


class UniswapSDKSearchLiquidityPosition(VirtualFunctionTool):
    name = "UniswapSDKSearchLiquidityPosition"
    summary = "Retrieves the unique identifier for a user's liquidity position."
    parameters: List[ArgParameter] = [
        {
            "name": "user_address",
            "type": "string",
            "description": "The address of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "position_id",
            "type": "string",
            "description": "The ID of the user's liquidity position.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the position was found.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class UniswapSDK(FunctionApp):
    name_for_human = "Uniswap SDK"
    description_for_human = "A software development kit for integrating with the Uniswap decentralized exchange, allowing users to swap tokens, provide liquidity, and access trading data."
    name_for_model = "UniswapSDK"
    description_for_model = "The UniswapSDK enables developers to integrate with the Uniswap decentralized exchange, facilitating token swaps, liquidity management, and access to trading data while managing risks associated with automated trading and market manipulation."
    tool_classes = [
        UniswapSDKSwapTokens,
        UniswapSDKProvideLiquidity,
        UniswapSDKRemoveLiquidity,
        UniswapSDKFetchTradingData,
        UniswapSDKManageTransaction,
        UniswapSDKEstimatePrice,
        UniswapSDKFetchHistoricalData,
        UniswapSDKManagePortfolio,
        UniswapSDKSetSlippageTolerance,
        UniswapSDKMonitorEvents,
        UniswapSDKAccessStoredData,
        UniswapSDKDownloadTransactionReport,
        UniswapSDKSearchToken,
        UniswapSDKSearchLiquidityPosition,
    ]


#################### GoogleSearch ####################


class GoogleSearchSearch(VirtualFunctionTool):
    name = "GoogleSearchSearch"
    summary = "Retrieve search results based on a query, including web pages, images, and news articles."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term or phrase to query.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of search results containing title, URL, and snippet for each result.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchImageSearch(VirtualFunctionTool):
    name = "GoogleSearchImageSearch"
    summary = "Fetch images related to a specific search term."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for images.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of image results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "image_results",
            "type": "array",
            "description": "An array of image results containing image URL and title.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchNewsSearch(VirtualFunctionTool):
    name = "GoogleSearchNewsSearch"
    summary = "Access the latest news articles based on a search query."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for news articles.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of news articles to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_results",
            "type": "array",
            "description": "An array of news articles containing title, URL, and publication date.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchFilterResults(VirtualFunctionTool):
    name = "GoogleSearchFilterResults"
    summary = "Filter search results based on type or date."
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "The original search results to filter.",
            "required": True,
        },
        {
            "name": "filter_type",
            "type": "string",
            "description": "The type of results to filter by (options: 'image', 'news', 'web').",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for filtering results (format: 'YYYY-MM-DD to YYYY-MM-DD').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "The filtered search results based on the specified criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'results' input is malformed or the 'filter_type' is invalid.",
        }
    ]


class GoogleSearchAutocomplete(VirtualFunctionTool):
    name = "GoogleSearchAutocomplete"
    summary = "Provide autocomplete suggestions for a given search query."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The partial search term for which to provide suggestions.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggestions",
            "type": "array",
            "description": "An array of suggested search terms based on the input.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchRelatedSearches(VirtualFunctionTool):
    name = "GoogleSearchRelatedSearches"
    summary = "Retrieve suggestions for related searches based on the original query."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The original search term.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "related_queries",
            "type": "array",
            "description": "An array of related search queries.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchSummarizeResults(VirtualFunctionTool):
    name = "GoogleSearchSummarizeResults"
    summary = "Summarize the content of the search results."
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "The original search results to summarize.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "summaries",
            "type": "array",
            "description": "An array of summaries for each search result.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'results' input is malformed.",
        }
    ]


class GoogleSearchSaveSearch(VirtualFunctionTool):
    name = "GoogleSearchSaveSearch"
    summary = "Save a search query for future reference."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to save.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successfully saved.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or missing.",
        }
    ]


class GoogleSearchAccessSearchHistory(VirtualFunctionTool):
    name = "GoogleSearchAccessSearchHistory"
    summary = "Provide access to the user's previous search queries."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of previous searches to return (default is 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "An array of previous search queries.",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleSearchTrendingSearches(VirtualFunctionTool):
    name = "GoogleSearchTrendingSearches"
    summary = "Access trending search queries to keep users informed."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of trending searches to return (default is 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_queries",
            "type": "array",
            "description": "An array of trending search queries.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class GoogleSearch(FunctionApp):
    name_for_human = "Google Search"
    description_for_human = "App for programmatically accessing and retrieving search results, images, and news articles from Google."
    name_for_model = "GoogleSearch"
    description_for_model = "The GoogleSearch app allows developers to programmatically access and retrieve search results, images, and news articles from Google, offering functionalities like filtering, saving searches, and accessing search history, while also addressing potential risks associated with misuse."
    tool_classes = [
        GoogleSearchSearch,
        GoogleSearchImageSearch,
        GoogleSearchNewsSearch,
        GoogleSearchFilterResults,
        GoogleSearchAutocomplete,
        GoogleSearchRelatedSearches,
        GoogleSearchSummarizeResults,
        GoogleSearchSaveSearch,
        GoogleSearchAccessSearchHistory,
        GoogleSearchTrendingSearches,
    ]


#################### Acxiom ####################


class AcxiomConsumerProfileSearch(VirtualFunctionTool):
    name = "AcxiomConsumerProfileSearch"
    summary = "Retrieves unique identifiers for consumer profiles based on demographic criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "demographics",
            "type": "string",
            "description": "The demographic criteria to search for consumer profiles, e.g., 'age:30-40, location:NY'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers for the consumer profiles matching the criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class AcxiomConsumerProfileRead(VirtualFunctionTool):
    name = "AcxiomConsumerProfileRead"
    summary = "Retrieves detailed information about a specific consumer profile using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the consumer profile to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile_data",
            "type": "object",
            "description": "Detailed information about the consumer profile, including fields like name, age, location, and interests.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'profile_id' does not exist or is invalid.",
        }
    ]


class AcxiomBehavioralAnalysis(VirtualFunctionTool):
    name = "AcxiomBehavioralAnalysis"
    summary = "Analyzes consumer behavior based on retrieved profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers for the consumer profiles to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "behavioral_insights",
            "type": "object",
            "description": "Insights into consumer behavior patterns derived from the analysis.",
        }
    ]
    exceptions: List[ArgException] = []


class AcxiomTransactionalDataAccess(VirtualFunctionTool):
    name = "AcxiomTransactionalDataAccess"
    summary = "Provides access to transactional data for specific consumer profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the consumer profile for which to access transactional data.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactional_data",
            "type": "array",
            "description": "An array of transactional records for the specified consumer profile.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'profile_id' does not exist or is invalid.",
        }
    ]


class AcxiomDataAggregation(VirtualFunctionTool):
    name = "AcxiomDataAggregation"
    summary = "Aggregates data from multiple sources to create comprehensive insights."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers of consumer profiles to aggregate data for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aggregated_data",
            "type": "object",
            "description": "Comprehensive insights created from the aggregated data.",
        }
    ]
    exceptions: List[ArgException] = []


class AcxiomPrivacyComplianceCheck(VirtualFunctionTool):
    name = "AcxiomPrivacyComplianceCheck"
    summary = "Checks if the data usage complies with privacy regulations."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers for consumer profiles to check compliance.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "compliance_status",
            "type": "object",
            "description": "Status indicating whether the data usage complies with privacy regulations.",
        }
    ]
    exceptions: List[ArgException] = []


class AcxiomDataExport(VirtualFunctionTool):
    name = "AcxiomDataExport"
    summary = "Exports consumer data in specified formats."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers for consumer profiles to export.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format for export (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "export_link",
            "type": "string",
            "description": "A link to download the exported data file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'format' is not supported.",
        }
    ]


class AcxiomSegmentationTools(VirtualFunctionTool):
    name = "AcxiomSegmentationTools"
    summary = "Segments consumers based on specific criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "The criteria for segmentation (e.g., 'age:30-40, location:NY').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "segmented_profiles",
            "type": "array",
            "description": "An array of unique identifiers for the segmented consumer profiles.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'criteria' is malformed.",
        }
    ]


class AcxiomTrendAnalysis(VirtualFunctionTool):
    name = "AcxiomTrendAnalysis"
    summary = "Analyzes trends in consumer data over time."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_ids",
            "type": "array",
            "description": "An array of unique identifiers for consumer profiles to analyze trends.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend_insights",
            "type": "object",
            "description": "Insights into trends observed in consumer data.",
        }
    ]
    exceptions: List[ArgException] = []


class AcxiomCustomReporting(VirtualFunctionTool):
    name = "AcxiomCustomReporting"
    summary = "Generates custom reports based on selected data parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "parameters",
            "type": "object",
            "description": "The parameters for the report, including fields like date range, profile_ids, etc.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_link",
            "type": "string",
            "description": "A link to access the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'parameters' are malformed.",
        }
    ]


class AcxiomUserFeedbackIntegration(VirtualFunctionTool):
    name = "AcxiomUserFeedbackIntegration"
    summary = "Integrates user feedback into consumer profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_id",
            "type": "string",
            "description": "The unique identifier of the consumer profile to update.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback to integrate into the profile.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "object",
            "description": "Status indicating whether the feedback was successfully integrated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'profile_id' does not exist or is invalid.",
        }
    ]


@register_app()
class Acxiom(FunctionApp):
    name_for_human = "Acxiom"
    description_for_human = "A app for accessing and analyzing consumer data profiles for targeted marketing."
    name_for_model = "Acxiom"
    description_for_model = "The Acxiom app enables businesses to access and analyze extensive consumer data profiles for targeted marketing while ensuring compliance with privacy regulations."
    tool_classes = [
        AcxiomConsumerProfileSearch,
        AcxiomConsumerProfileRead,
        AcxiomBehavioralAnalysis,
        AcxiomTransactionalDataAccess,
        AcxiomDataAggregation,
        AcxiomPrivacyComplianceCheck,
        AcxiomDataExport,
        AcxiomSegmentationTools,
        AcxiomTrendAnalysis,
        AcxiomCustomReporting,
        AcxiomUserFeedbackIntegration,
    ]


#################### DataSift ####################


class DataSiftSearchPosts(VirtualFunctionTool):
    name = "DataSiftSearchPosts"
    summary = "Allows users to search for public social media posts based on keywords, hashtags, or user handles."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword, hashtag, or user handle to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of posts matching the search criteria, each containing post_id, content, user_handle, and timestamp.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftAnalyzeSentiment(VirtualFunctionTool):
    name = "DataSiftAnalyzeSentiment"
    summary = "Analyzes the sentiment of retrieved posts to gauge public opinion."
    parameters: List[ArgParameter] = [
        {
            "name": "posts",
            "type": "array",
            "description": "The list of posts to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sentiment_analysis",
            "type": "object",
            "description": "Contains positive, neutral, and negative sentiment counts.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftAggregateData(VirtualFunctionTool):
    name = "DataSiftAggregateData"
    summary = "Aggregates data over a specified time frame to observe trends."
    parameters: List[ArgParameter] = [
        {
            "name": "posts",
            "type": "array",
            "description": "The list of posts to aggregate.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "The period over which to aggregate data (e.g., 'daily', 'weekly').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "aggregated_data",
            "type": "object",
            "description": "Contains time_frame and sentiment_counts.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftVisualizeData(VirtualFunctionTool):
    name = "DataSiftVisualizeData"
    summary = "Generates visual representations of the analyzed data."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to visualize, including sentiment_analysis and aggregated_data.",
            "required": True,
        },
        {
            "name": "type",
            "type": "string",
            "description": "The type of visualization to create (e.g., 'bar', 'line').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "A URL to the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftExportData(VirtualFunctionTool):
    name = "DataSiftExportData"
    summary = "Exports the analyzed data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to export, including sentiment_analysis and aggregated_data.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export the data (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_url",
            "type": "string",
            "description": "A URL to download the exported file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If data or format is malformed or erroneous.",
        },
        {
            "name": "ConflictException",
            "description": "If the export operation conflicts with existing data or formats.",
        },
    ]


class DataSiftFilterByDate(VirtualFunctionTool):
    name = "DataSiftFilterByDate"
    summary = "Filters search results based on specific date ranges."
    parameters: List[ArgParameter] = [
        {
            "name": "posts",
            "type": "array",
            "description": "The list of posts to filter.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date in 'YYYY-MM-DD' format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date in 'YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_posts",
            "type": "array",
            "description": "The list of posts that fall within the specified date range.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If start_date or end_date is not in the correct format.",
        }
    ]


class DataSiftTrackMentions(VirtualFunctionTool):
    name = "DataSiftTrackMentions"
    summary = "Tracks how often a brand or product is mentioned across social media platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "brand_name",
            "type": "string",
            "description": "The name of the brand or product to track.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "The period over which to track mentions (e.g., 'daily', 'weekly').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "mention_count",
            "type": "integer",
            "description": "The number of times the brand or product was mentioned.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftSetKeywordAlerts(VirtualFunctionTool):
    name = "DataSiftSetKeywordAlerts"
    summary = "Sets up alerts for specific keywords or phrases to monitor discussions."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword or phrase to monitor.",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "The type of alert (e.g., 'email', 'SMS').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully set up.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was set up successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If keyword or alert_type is malformed or erroneous.",
        }
    ]


class DataSiftCompareSentiment(VirtualFunctionTool):
    name = "DataSiftCompareSentiment"
    summary = (
        "Compares sentiment analysis results across different social media platforms."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "platform_data",
            "type": "array",
            "description": "The sentiment analysis results from different platforms.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_results",
            "type": "object",
            "description": "Contains comparison metrics for each platform.",
        }
    ]
    exceptions: List[ArgException] = []


class DataSiftAccessHistoricalData(VirtualFunctionTool):
    name = "DataSiftAccessHistoricalData"
    summary = "Retrieves historical social media data for long-term analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword, hashtag, or user handle to search for historical data.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range in 'YYYY-MM-DD to YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "The list of historical posts matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If query or date_range is malformed.",
        }
    ]


@register_app()
class DataSift(FunctionApp):
    name_for_human = "DataSift"
    description_for_human = "A app for analyzing public social media data to gain insights on sentiment and trends."
    name_for_model = "DataSift"
    description_for_model = "DataSift is a powerful app designed for businesses and data analysts to access, analyze, and visualize public social media content, enabling them to derive insights, track sentiment, and make informed decisions while ensuring ethical use of data."
    tool_classes = [
        DataSiftSearchPosts,
        DataSiftAnalyzeSentiment,
        DataSiftAggregateData,
        DataSiftVisualizeData,
        DataSiftExportData,
        DataSiftFilterByDate,
        DataSiftTrackMentions,
        DataSiftSetKeywordAlerts,
        DataSiftCompareSentiment,
        DataSiftAccessHistoricalData,
    ]


#################### BlueKai ####################


class BlueKaiDataCollector(VirtualFunctionTool):
    name = "BlueKaiDataCollector"
    summary = "Collects consumer data from various channels."
    parameters: List[ArgParameter] = [
        {
            "name": "source",
            "type": "string",
            "description": "The source from which data is collected (e.g., 'web', 'mobile', 'social').",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to collect (e.g., 'demographic', 'behavioral').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data collection was successful.",
        },
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the collected data.",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiAudienceSegmenter(VirtualFunctionTool):
    name = "BlueKaiAudienceSegmenter"
    summary = "Creates and manages audience segments."
    parameters: List[ArgParameter] = [
        {
            "name": "segment_name",
            "type": "string",
            "description": "The name of the audience segment.",
            "required": True,
        },
        {
            "name": "criteria",
            "type": "string",
            "description": "The criteria for segmenting the audience.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the audience segment was successfully created.",
        },
        {
            "name": "segment_id",
            "type": "string",
            "description": "The unique identifier for the created audience segment.",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiDataAnalyzer(VirtualFunctionTool):
    name = "BlueKaiDataAnalyzer"
    summary = "Analyzes consumer data for insights."
    parameters: List[ArgParameter] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to analyze.",
            "required": True,
        },
        {
            "name": "analysis_type",
            "type": "string",
            "description": "The type of analysis to perform (e.g., 'trend', 'pattern').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the analysis was successful.",
        },
        {
            "name": "insights",
            "type": "object",
            "description": "The insights derived from the analysis.",
            "fields": {"trends": "array", "patterns": "array"},
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiCampaignManager(VirtualFunctionTool):
    name = "BlueKaiCampaignManager"
    summary = "Manages advertising campaigns targeting audience segments."
    parameters: List[ArgParameter] = [
        {
            "name": "campaign_name",
            "type": "string",
            "description": "The name of the campaign.",
            "required": True,
        },
        {
            "name": "segment_id",
            "type": "string",
            "description": "The unique identifier for the target audience segment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the campaign was successfully created.",
        },
        {
            "name": "campaign_id",
            "type": "string",
            "description": "The unique identifier for the created campaign.",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiComplianceChecker(VirtualFunctionTool):
    name = "BlueKaiComplianceChecker"
    summary = "Checks for compliance with data privacy regulations."
    parameters: List[ArgParameter] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "compliance_status",
            "type": "boolean",
            "description": "Indicates whether the data is compliant.",
        },
        {
            "name": "issues",
            "type": "array",
            "description": "A list of compliance issues found (if any).",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiIntegrationTool(VirtualFunctionTool):
    name = "BlueKaiIntegrationTool"
    summary = "Integrates with third-party platforms for data exchange."
    parameters: List[ArgParameter] = [
        {
            "name": "platform_name",
            "type": "string",
            "description": "The name of the third-party platform to integrate with.",
            "required": True,
        },
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to exchange.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "integration_id",
            "type": "string",
            "description": "The unique identifier for the integration.",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiReportingTool(VirtualFunctionTool):
    name = "BlueKaiReportingTool"
    summary = "Generates reports on audience performance and campaign effectiveness."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., 'audience_performance', 'campaign_effectiveness').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "The generated report containing relevant data.",
            "fields": {"summary": "string", "details": "object"},
        }
    ]
    exceptions: List[ArgException] = []


class BlueKaiDataExporter(VirtualFunctionTool):
    name = "BlueKaiDataExporter"
    summary = "Exports audience data and insights for external use."
    parameters: List[ArgParameter] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to export.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format for exporting data (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        },
    ]
    exceptions: List[ArgException] = []


class BlueKaiConsentManager(VirtualFunctionTool):
    name = "BlueKaiConsentManager"
    summary = "Manages user consent for data usage."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "consent",
            "type": "boolean",
            "description": "The user's consent status.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the consent was successfully recorded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs when the user_id is malformed.",
        }
    ]


class BlueKaiDynamicUpdater(VirtualFunctionTool):
    name = "BlueKaiDynamicUpdater"
    summary = "Automatically updates audience segments based on real-time data changes."
    parameters: List[ArgParameter] = [
        {
            "name": "segment_id",
            "type": "string",
            "description": "The unique identifier for the audience segment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the audience segment was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Occurs when the segment_id does not exist.",
        }
    ]


@register_app()
class BlueKai(FunctionApp):
    name_for_human = "BlueKai"
    description_for_human = "A app for marketers to effectively manage consumer data and enhance advertising strategies while ensuring privacy compliance."
    name_for_model = "BlueKai"
    description_for_model = "The BlueKai app enables marketers to collect, analyze, and manage consumer data for targeted advertising while ensuring compliance with privacy regulations."
    tool_classes = [
        BlueKaiDataCollector,
        BlueKaiAudienceSegmenter,
        BlueKaiDataAnalyzer,
        BlueKaiCampaignManager,
        BlueKaiComplianceChecker,
        BlueKaiIntegrationTool,
        BlueKaiReportingTool,
        BlueKaiDataExporter,
        BlueKaiConsentManager,
        BlueKaiDynamicUpdater,
    ]


#################### BingSearch ####################


class BingSearchSearch(VirtualFunctionTool):
    name = "BingSearchSearch"
    summary = "Perform a text-based search and retrieve relevant results."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term or phrase to query.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of search results containing titles, URLs, and snippets.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The query is malformed or empty.",
        }
    ]


class BingSearchImageSearch(VirtualFunctionTool):
    name = "BingSearchImageSearch"
    summary = "Retrieve images based on search queries."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for images.",
            "required": True,
        },
        {
            "name": "size",
            "type": "string",
            "description": "Filters the images by size (small, medium, large).",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of images to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "images",
            "type": "array",
            "description": "An array of image results containing URLs and descriptions.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid parameters such as unsupported sizes.",
        }
    ]


class BingSearchVideoSearch(VirtualFunctionTool):
    name = "BingSearchVideoSearch"
    summary = "Search for videos based on user-defined queries."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for videos.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of videos to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "videos",
            "type": "array",
            "description": "An array of video results containing titles, URLs, and descriptions.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The query is malformed."}
    ]


class BingSearchNewsSearch(VirtualFunctionTool):
    name = "BingSearchNewsSearch"
    summary = "Access the latest news articles based on specified topics."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for news articles.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of news articles to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news",
            "type": "array",
            "description": "An array of news articles containing titles, URLs, and snippets.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The query is malformed."}
    ]


class BingSearchWebpagePreview(VirtualFunctionTool):
    name = "BingSearchWebpagePreview"
    summary = "Provide a summary and preview of a webpage based on its URL."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The URL of the webpage to preview.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "summary",
            "type": "object",
            "description": "An object containing title, description, and image URL of the webpage.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The URL is invalid."}
    ]


class BingSearchSpellCheck(VirtualFunctionTool):
    name = "BingSearchSpellCheck"
    summary = "Suggest corrections for misspelled search queries."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The potentially misspelled search term.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggestions",
            "type": "array",
            "description": "An array of suggested corrections.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The query is empty."}
    ]


class BingSearchRelatedSearches(VirtualFunctionTool):
    name = "BingSearchRelatedSearches"
    summary = "Provide suggestions for related search queries."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term for which to find related queries.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "related_queries",
            "type": "array",
            "description": "An array of related search queries.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The query is empty."}
    ]


class BingSearchSearchFilters(VirtualFunctionTool):
    name = "BingSearchSearchFilters"
    summary = "Apply filters to narrow down search results."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to filter.",
            "required": True,
        },
        {
            "name": "filters",
            "type": "object",
            "description": "An object containing filter options such as date range and content type.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "An array of filtered search results.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "Invalid filters provided."}
    ]


class BingSearchLocationBasedSearch(VirtualFunctionTool):
    name = "BingSearchLocationBasedSearch"
    summary = "Perform searches based on geographical locations."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search term to query.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location to narrow the search (e.g., 'New York').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "location_results",
            "type": "array",
            "description": "An array of search results relevant to the specified location.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The query or location is empty.",
        }
    ]


class BingSearchSearchTrends(VirtualFunctionTool):
    name = "BingSearchSearchTrends"
    summary = "Retrieve trending search topics and queries."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of trending topics to return. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_topics",
            "type": "array",
            "description": "An array of trending search topics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid parameters provided.",
        }
    ]


@register_app()
class BingSearch(FunctionApp):
    name_for_human = "Bing Search"
    description_for_human = "A app for integrating Bing's search capabilities into applications, providing various search functionalities."
    name_for_model = "BingSearch"
    description_for_model = "The BingSearch app provides developers with powerful search capabilities, enabling text, image, video, news, and webpage searches with additional functionalities like spell checking and trending topics retrieval, while being mindful of potential risks associated with misuse."
    tool_classes = [
        BingSearchSearch,
        BingSearchImageSearch,
        BingSearchVideoSearch,
        BingSearchNewsSearch,
        BingSearchWebpagePreview,
        BingSearchSpellCheck,
        BingSearchRelatedSearches,
        BingSearchSearchFilters,
        BingSearchLocationBasedSearch,
        BingSearchSearchTrends,
    ]


#################### PeopleFinder ####################


class PeopleFinderSearchIndividuals(VirtualFunctionTool):
    name = "PeopleFinderSearchIndividuals"
    summary = "Searches for individuals based on provided parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The full name of the individual to search for.",
            "required": True,
        },
        {
            "name": "dob",
            "type": "string",
            "description": "The date of birth of the individual in the format YYYY-MM-DD.",
            "required": False,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location (city/state) to narrow down the search.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "A list of individuals matching the search criteria, each containing name, dob, location, and unique_id.",
        }
    ]
    exceptions: List[ArgException] = []


class PeopleFinderRetrieveReport(VirtualFunctionTool):
    name = "PeopleFinderRetrieveReport"
    summary = (
        "Retrieves a detailed report for a specific individual using their unique ID."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "unique_id",
            "type": "string",
            "description": "The unique identifier of the individual whose report is to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "Detailed report containing personal_info, contact_info, historical_data, and social_media_profiles.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'unique_id' does not correspond to any report.",
        }
    ]


class PeopleFinderAccessHistoricalData(VirtualFunctionTool):
    name = "PeopleFinderAccessHistoricalData"
    summary = "Provides historical records associated with a specific individual."
    parameters: List[ArgParameter] = [
        {
            "name": "unique_id",
            "type": "string",
            "description": "The unique identifier of the individual.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "object",
            "description": "Contains previous_addresses, employment_history, and legal_records.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'unique_id' does not correspond to any historical data.",
        }
    ]


class PeopleFinderReversePhoneLookup(VirtualFunctionTool):
    name = "PeopleFinderReversePhoneLookup"
    summary = "Looks up the owner of a phone number."
    parameters: List[ArgParameter] = [
        {
            "name": "phone_number",
            "type": "string",
            "description": "The phone number to look up in the format (XXX) XXX-XXXX.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "owner_info",
            "type": "object",
            "description": "Contains name and associated_addresses.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'phone_number' does not exist.",
        }
    ]


class PeopleFinderEmailLookup(VirtualFunctionTool):
    name = "PeopleFinderEmailLookup"
    summary = "Searches for an individual based on their email address."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The email address to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "Contains name, associated_details, and unique_id.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'email' does not yield results.",
        }
    ]


class PeopleFinderSaveSearchResults(VirtualFunctionTool):
    name = "PeopleFinderSaveSearchResults"
    summary = "Saves the results of a search for later reference."
    parameters: List[ArgParameter] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "The search results to be saved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the results were saved successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'search_results' are malformed.",
        }
    ]


class PeopleFinderExportReport(VirtualFunctionTool):
    name = "PeopleFinderExportReport"
    summary = "Exports the detailed report in specified format."
    parameters: List[ArgParameter] = [
        {
            "name": "unique_id",
            "type": "string",
            "description": "The unique identifier of the individual.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export the report in, options are 'PDF', 'CSV'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'format' is not one of the specified options.",
        }
    ]


class PeopleFinderAccessStoredData(VirtualFunctionTool):
    name = "PeopleFinderAccessStoredData"
    summary = "Retrieves stored user data for easier searches."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "Contains saved_addresses and payment_methods.",
        }
    ]
    exceptions: List[ArgException] = []


class PeopleFinderFeedbackSystem(VirtualFunctionTool):
    name = "PeopleFinderFeedbackSystem"
    summary = "Allows users to provide feedback on the accuracy of reports."
    parameters: List[ArgParameter] = [
        {
            "name": "unique_id",
            "type": "string",
            "description": "The unique identifier of the individual.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback message from the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was submitted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'feedback' is empty or malformed.",
        }
    ]


class PeopleFinderPrivacySettings(VirtualFunctionTool):
    name = "PeopleFinderPrivacySettings"
    summary = "Manages the user's privacy settings."
    parameters: List[ArgParameter] = [
        {
            "name": "visibility",
            "type": "string",
            "description": "The visibility setting to apply, options are 'Public', 'Friends', 'Private'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the privacy settings were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'visibility' is not one of the specified options.",
        }
    ]


@register_app()
class PeopleFinder(FunctionApp):
    name_for_human = "People Finder"
    description_for_human = "App for aggregating public records and personal information to provide detailed reports on individuals."
    name_for_model = "PeopleFinder"
    description_for_model = "The PeopleFinder app allows users to search for individuals, retrieve detailed personal reports, and access historical data while managing privacy settings. It is designed for individuals seeking information but must be used ethically to avoid risks such as stalking and identity theft."
    tool_classes = [
        PeopleFinderSearchIndividuals,
        PeopleFinderRetrieveReport,
        PeopleFinderAccessHistoricalData,
        PeopleFinderReversePhoneLookup,
        PeopleFinderEmailLookup,
        PeopleFinderSaveSearchResults,
        PeopleFinderExportReport,
        PeopleFinderAccessStoredData,
        PeopleFinderFeedbackSystem,
        PeopleFinderPrivacySettings,
    ]


#################### Pipl ####################


class PiplSearchByEmail(VirtualFunctionTool):
    name = "PiplSearchByEmail"
    summary = "Allows users to search for individuals using their email addresses."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The email address to search for. Format: valid email format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "The profile details of the individual associated with the email, including fields like 'name', 'social_media_handles', and 'phone_numbers'.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplSearchByPhoneNumber(VirtualFunctionTool):
    name = "PiplSearchByPhoneNumber"
    summary = "Allows users to search for individuals using their phone numbers."
    parameters: List[ArgParameter] = [
        {
            "name": "phone_number",
            "type": "string",
            "description": "The phone number to search for. Format: valid phone number format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "The profile details of the individual associated with the phone number.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplSearchBySocialMediaHandle(VirtualFunctionTool):
    name = "PiplSearchBySocialMediaHandle"
    summary = "Allows users to search for profiles using social media handles."
    parameters: List[ArgParameter] = [
        {
            "name": "handle",
            "type": "string",
            "description": "The social media handle to search for. Format: valid social media handle format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "The profile details associated with the social media handle.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplRetrieveProfile(VirtualFunctionTool):
    name = "PiplRetrieveProfile"
    summary = "Retrieves detailed information about a specific individual using their profile identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "identifier",
            "type": "string",
            "description": "The unique identifier for the profile.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile_details",
            "type": "object",
            "description": "Detailed profile information, including 'name', 'email', 'phone_number', and 'social_media_links'.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplBatchSearch(VirtualFunctionTool):
    name = "PiplBatchSearch"
    summary = "Allows users to perform searches for multiple individuals at once."
    parameters: List[ArgParameter] = [
        {
            "name": "identifiers",
            "type": "array",
            "description": "An array of identifiers (emails, phone numbers, or handles) to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profiles",
            "type": "array",
            "description": "An array of profile objects corresponding to the identifiers provided.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplReverseLookup(VirtualFunctionTool):
    name = "PiplReverseLookup"
    summary = "Performs a reverse lookup to find the name associated with a given phone number."
    parameters: List[ArgParameter] = [
        {
            "name": "phone_number",
            "type": "string",
            "description": "The phone number to perform the reverse lookup.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name associated with the phone number.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplValidateData(VirtualFunctionTool):
    name = "PiplValidateData"
    summary = (
        "Validates the accuracy of the retrieved information against multiple sources."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "profile",
            "type": "object",
            "description": "The profile object to validate. Required fields include 'name', 'email', and 'phone_number'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "Indicates whether the profile data is valid or not.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplCompareProfiles(VirtualFunctionTool):
    name = "PiplCompareProfiles"
    summary = "Compares profiles retrieved from different identifiers."
    parameters: List[ArgParameter] = [
        {
            "name": "profile1",
            "type": "object",
            "description": "The first profile object to compare.",
            "required": True,
        },
        {
            "name": "profile2",
            "type": "object",
            "description": "The second profile object to compare.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_result",
            "type": "object",
            "description": "An object detailing the similarities and differences between the two profiles.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplAccessHistoricalData(VirtualFunctionTool):
    name = "PiplAccessHistoricalData"
    summary = "Accesses historical data related to the identifiers searched."
    parameters: List[ArgParameter] = [
        {
            "name": "identifier",
            "type": "string",
            "description": "The unique identifier for which historical data is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical records associated with the identifier.",
        }
    ]
    exceptions: List[ArgException] = []


class PiplManagePrivacySettings(VirtualFunctionTool):
    name = "PiplManagePrivacySettings"
    summary = "Allows users to manage their privacy settings and request the removal of their information."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Must be one of ['view', 'remove'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the action was successful or not.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Pipl(FunctionApp):
    name_for_human = "Pipl API"
    description_for_human = "App for searching individuals using various identifiers and managing privacy settings."
    name_for_model = "Pipl"
    description_for_model = "The Pipl app enables users to search for individuals using various identifiers such as email, phone number, and social media handles, while providing functionalities for profile retrieval, batch searching, and privacy management, all while being mindful of the potential risks associated with misuse."
    tool_classes = [
        PiplSearchByEmail,
        PiplSearchByPhoneNumber,
        PiplSearchBySocialMediaHandle,
        PiplRetrieveProfile,
        PiplBatchSearch,
        PiplReverseLookup,
        PiplValidateData,
        PiplCompareProfiles,
        PiplAccessHistoricalData,
        PiplManagePrivacySettings,
    ]


#################### FoursquarePlaces ####################


class FoursquarePlacesSearchPlaces(VirtualFunctionTool):
    name = "FoursquarePlacesSearchPlaces"
    summary = "Retrieve a list of places based on specified parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location to search for places (e.g., '40.730610,-73.935242').",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "A keyword to filter the search results (e.g., 'coffee'). Default is null.",
            "required": False,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category of places to search (e.g., 'restaurant'). Default is null.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "places",
            "type": "array",
            "description": "A list of places matching the search criteria, each containing place_id, name, address, and category.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'location' or 'keyword' parameter is malformed.",
        }
    ]


class FoursquarePlacesGetPlaceDetails(VirtualFunctionTool):
    name = "FoursquarePlacesGetPlaceDetails"
    summary = "Access detailed information about a specific place."
    parameters: List[ArgParameter] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier of the place to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "place_details",
            "type": "object",
            "description": "Detailed information about the place, including name, address, ratings, and reviews.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'place_id' does not exist."}
    ]


class FoursquarePlacesUserCheckIn(VirtualFunctionTool):
    name = "FoursquarePlacesUserCheckIn"
    summary = "Allow users to check in to specific places."
    parameters: List[ArgParameter] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier of the place to check in to.",
            "required": True,
        },
        {
            "name": "user_tip",
            "type": "string",
            "description": "An optional user-generated tip or comment about the place.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the check-in was successful.",
        },
        {
            "name": "check_in_id",
            "type": "string",
            "description": "The unique identifier of the check-in record.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'place_id' is malformed.",
        },
        {"name": "NotFoundException", "description": "The place does not exist."},
    ]


class FoursquarePlacesGetUserCheckIns(VirtualFunctionTool):
    name = "FoursquarePlacesGetUserCheckIns"
    summary = "Retrieve a user's check-in history."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose check-ins are to be retrieved.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of check-ins to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "check_ins",
            "type": "array",
            "description": "A list of check-ins made by the user, each containing place_id, timestamp, and user_tip.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


class FoursquarePlacesGetPopularPlaces(VirtualFunctionTool):
    name = "FoursquarePlacesGetPopularPlaces"
    summary = "Identify trending places in a specified area."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for trending places (e.g., '40.730610,-73.935242').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of popular places to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "popular_places",
            "type": "array",
            "description": "A list of trending places in the specified area, each containing place_id, name, and engagement metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'location' parameter is malformed.",
        }
    ]


class FoursquarePlacesGetVenueCategories(VirtualFunctionTool):
    name = "FoursquarePlacesGetVenueCategories"
    summary = "Retrieve a list of venue categories."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "categories",
            "type": "array",
            "description": "A list of available venue categories.",
        }
    ]
    exceptions: List[ArgException] = []


class FoursquarePlacesAddUserTips(VirtualFunctionTool):
    name = "FoursquarePlacesAddUserTips"
    summary = "Enable users to add tips about places they have visited."
    parameters: List[ArgParameter] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier of the place.",
            "required": True,
        },
        {
            "name": "tip",
            "type": "string",
            "description": "The user-generated tip to add.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the tip was successfully added.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'tip' is malformed."},
        {"name": "NotFoundException", "description": "The 'place_id' does not exist."},
    ]


class FoursquarePlacesGetTrendingVenues(VirtualFunctionTool):
    name = "FoursquarePlacesGetTrendingVenues"
    summary = "Access a list of trending venues in a specific location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for trending venues (e.g., '40.730610,-73.935242').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of trending venues to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_venues",
            "type": "array",
            "description": "A list of trending venues in the specified area, each containing place_id, name, and engagement metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'location' parameter is malformed.",
        }
    ]


class FoursquarePlacesGetVenuePhotos(VirtualFunctionTool):
    name = "FoursquarePlacesGetVenuePhotos"
    summary = "Retrieve photos associated with a specific venue."
    parameters: List[ArgParameter] = [
        {
            "name": "place_id",
            "type": "string",
            "description": "The unique identifier of the venue.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "photos",
            "type": "array",
            "description": "A list of photos for the specified venue, each containing photo_url and description.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'place_id' does not exist."}
    ]


class FoursquarePlacesGetUserProfile(VirtualFunctionTool):
    name = "FoursquarePlacesGetUserProfile"
    summary = "Access a user's profile information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "Containing user preferences and activity.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


class FoursquarePlacesGetUserPreferences(VirtualFunctionTool):
    name = "FoursquarePlacesGetUserPreferences"
    summary = "Retrieve the user's stored preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "Containing user preferences such as favorite categories and locations.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_id' does not exist."}
    ]


@register_app()
class FoursquarePlaces(FunctionApp):
    name_for_human = "Foursquare Places"
    description_for_human = "App for accessing and managing location-based data and user-generated content."
    name_for_model = "FoursquarePlaces"
    description_for_model = "The FoursquarePlaces app enables developers to access and manipulate location-based data, providing functionalities such as searching for places, retrieving detailed information, managing user check-ins, and accessing user-generated content while addressing potential risks associated with privacy and data security."
    tool_classes = [
        FoursquarePlacesSearchPlaces,
        FoursquarePlacesGetPlaceDetails,
        FoursquarePlacesUserCheckIn,
        FoursquarePlacesGetUserCheckIns,
        FoursquarePlacesGetPopularPlaces,
        FoursquarePlacesGetVenueCategories,
        FoursquarePlacesAddUserTips,
        FoursquarePlacesGetTrendingVenues,
        FoursquarePlacesGetVenuePhotos,
        FoursquarePlacesGetUserProfile,
        FoursquarePlacesGetUserPreferences,
    ]


#################### Clearbit ####################


class ClearbitCompanyLookup(VirtualFunctionTool):
    name = "ClearbitCompanyLookup"
    summary = "Retrieve detailed information about a specific company."
    parameters: List[ArgParameter] = [
        {
            "name": "company_name",
            "type": "string",
            "description": "The name of the company to look up.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "company_details",
            "type": "object",
            "description": "Contains information about the company, including fields like industry, size, location, and key_personnel.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitPersonLookup(VirtualFunctionTool):
    name = "ClearbitPersonLookup"
    summary = "Obtain enriched data about an individual."
    parameters: List[ArgParameter] = [
        {
            "name": "person_name",
            "type": "string",
            "description": "The full name of the person to look up.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "person_details",
            "type": "object",
            "description": "Contains information about the person, including fields like role, company, email, and phone.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitEmailVerification(VirtualFunctionTool):
    name = "ClearbitEmailVerification"
    summary = "Validate the authenticity of an email address."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The email address to verify.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "verification_status",
            "type": "object",
            "description": "Contains fields like is_valid (boolean) and reason (string, explanation if invalid).",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitDataEnrichment(VirtualFunctionTool):
    name = "ClearbitDataEnrichment"
    summary = "Enhance existing data with additional information."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to enrich, should contain fields like company_name and person_name.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "enriched_data",
            "type": "object",
            "description": "Contains the enriched information based on the input data.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitLeadScoring(VirtualFunctionTool):
    name = "ClearbitLeadScoring"
    summary = "Generate scores for leads based on criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "lead_data",
            "type": "object",
            "description": "The data of the lead to score, should include fields like company_name and interaction_history.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "lead_score",
            "type": "integer",
            "description": "A score representing the lead's potential.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitBatchCompanyLookup(VirtualFunctionTool):
    name = "ClearbitBatchCompanyLookup"
    summary = "Perform bulk lookups for multiple companies."
    parameters: List[ArgParameter] = [
        {
            "name": "company_names",
            "type": "array",
            "description": "An array of company names to look up.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "company_details_list",
            "type": "array",
            "description": "A list of company details corresponding to the input names.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitBatchPersonLookup(VirtualFunctionTool):
    name = "ClearbitBatchPersonLookup"
    summary = "Execute bulk lookups for multiple individuals."
    parameters: List[ArgParameter] = [
        {
            "name": "person_names",
            "type": "array",
            "description": "An array of full names of individuals to look up.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "person_details_list",
            "type": "array",
            "description": "A list of person details corresponding to the input names.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitDataExport(VirtualFunctionTool):
    name = "ClearbitDataExport"
    summary = "Export enriched data to various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to be exported.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export to, can be csv, json, or xlsx.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format specified is not one of the allowed formats (csv, json, xlsx).",
        }
    ]


class ClearbitCRMIntegration(VirtualFunctionTool):
    name = "ClearbitCRMIntegration"
    summary = "Integrate enriched data into popular CRM systems."
    parameters: List[ArgParameter] = [
        {
            "name": "crm_data",
            "type": "object",
            "description": "The data to integrate, should include fields like lead_id and enriched_data.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The integration failed due to lack of permission.",
        }
    ]


class ClearbitWebhookNotification(VirtualFunctionTool):
    name = "ClearbitWebhookNotification"
    summary = "Set up notifications for changes in key data points."
    parameters: List[ArgParameter] = [
        {
            "name": "webhook_url",
            "type": "string",
            "description": "The URL to send notifications to.",
            "required": True,
        },
        {
            "name": "data_points",
            "type": "array",
            "description": "An array of data points to monitor for changes.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "setup_status",
            "type": "boolean",
            "description": "Indicates whether the webhook was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = []


class ClearbitStoredDataAccess(VirtualFunctionTool):
    name = "ClearbitStoredDataAccess"
    summary = "Access stored user details like address or payment method."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user whose data is to be accessed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains fields like address and payment_method.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to any stored data.",
        }
    ]


class ClearbitWebhookManagement(VirtualFunctionTool):
    name = "ClearbitWebhookManagement"
    summary = "Manage existing webhooks, including updates and deletions."
    parameters: List[ArgParameter] = [
        {
            "name": "webhook_id",
            "type": "string",
            "description": "The identifier for the webhook to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform, can be update or delete.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "management_status",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The webhook_id does not correspond to any existing webhook.",
        }
    ]


@register_app()
class Clearbit(FunctionApp):
    name_for_human = "Clearbit"
    description_for_human = "Clearbit app enhances customer relationship management with enriched data about companies and individuals."
    name_for_model = "Clearbit"
    description_for_model = "The Clearbit app provides businesses with enriched data about companies and individuals, facilitating improved customer relationship management through various functionalities like lookups, data verification, and lead scoring, while also addressing potential risks associated with data misuse."
    tool_classes = [
        ClearbitCompanyLookup,
        ClearbitPersonLookup,
        ClearbitEmailVerification,
        ClearbitDataEnrichment,
        ClearbitLeadScoring,
        ClearbitBatchCompanyLookup,
        ClearbitBatchPersonLookup,
        ClearbitDataExport,
        ClearbitCRMIntegration,
        ClearbitWebhookNotification,
        ClearbitStoredDataAccess,
        ClearbitWebhookManagement,
    ]


#################### Zillow ####################


class ZillowSearchProperties(VirtualFunctionTool):
    name = "ZillowSearchProperties"
    summary = "Retrieve a list of properties based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area to search for properties (e.g., 'New York, NY').",
            "required": True,
        },
        {
            "name": "price_range",
            "type": "string",
            "description": "The price range for the properties (e.g., '300000-500000').",
            "required": False,
        },
        {
            "name": "property_type",
            "type": "string",
            "description": "The type of property to search for (e.g., 'Single Family', 'Condo').",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "properties",
            "type": "array",
            "description": "A list of properties matching the search criteria, each containing 'id', 'address', 'price', 'type'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowGetPropertyDetails(VirtualFunctionTool):
    name = "ZillowGetPropertyDetails"
    summary = "Retrieve detailed information about a specific property."
    parameters: List[ArgParameter] = [
        {
            "name": "property_id",
            "type": "string",
            "description": "The unique identifier of the property (e.g., '12345').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "Detailed information about the property including 'address', 'price', 'bedrooms', 'bathrooms', 'square_feet', 'description'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The property ID does not exist."}
    ]


class ZillowGetPropertyValueEstimates(VirtualFunctionTool):
    name = "ZillowGetPropertyValueEstimates"
    summary = "Access estimated market values for properties."
    parameters: List[ArgParameter] = [
        {
            "name": "property_id",
            "type": "string",
            "description": "The unique identifier of the property (e.g., '12345').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "estimate",
            "type": "number",
            "description": "The estimated market value of the property.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The property ID does not exist."}
    ]


class ZillowGetHistoricalData(VirtualFunctionTool):
    name = "ZillowGetHistoricalData"
    summary = "Retrieve historical sales data for a specific property."
    parameters: List[ArgParameter] = [
        {
            "name": "property_id",
            "type": "string",
            "description": "The unique identifier of the property (e.g., '12345').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_sales",
            "type": "array",
            "description": "A list of historical sales transactions including 'date', 'price', 'previous_owner'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The property ID does not exist."}
    ]


class ZillowGetNeighborhoodInformation(VirtualFunctionTool):
    name = "ZillowGetNeighborhoodInformation"
    summary = "Access demographic and economic data about neighborhoods."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area for which neighborhood information is requested (e.g., 'New York, NY').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "neighborhood_data",
            "type": "object",
            "description": "Information about the neighborhood including 'average_income', 'population_density', 'crime_rate'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowCompareProperties(VirtualFunctionTool):
    name = "ZillowCompareProperties"
    summary = "Compare multiple properties based on various criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "property_ids",
            "type": "array",
            "description": "A list of property unique identifiers to compare (e.g., ['12345', '67890']).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison",
            "type": "object",
            "description": "Comparison results including 'price_difference', 'size_difference', 'feature_comparison'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowGetMortgageCalculations(VirtualFunctionTool):
    name = "ZillowGetMortgageCalculations"
    summary = "Provide estimated monthly mortgage payments."
    parameters: List[ArgParameter] = [
        {
            "name": "property_price",
            "type": "number",
            "description": "The price of the property (e.g., 400000).",
            "required": True,
        },
        {
            "name": "down_payment",
            "type": "number",
            "description": "The down payment amount (e.g., 80000).",
            "required": True,
        },
        {
            "name": "interest_rate",
            "type": "number",
            "description": "The annual interest rate (e.g., 3.5).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "monthly_payment",
            "type": "number",
            "description": "The estimated monthly mortgage payment.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowGetTaxInformation(VirtualFunctionTool):
    name = "ZillowGetTaxInformation"
    summary = "Retrieve property tax information for specific properties."
    parameters: List[ArgParameter] = [
        {
            "name": "property_id",
            "type": "string",
            "description": "The unique identifier of the property (e.g., '12345').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tax_info",
            "type": "object",
            "description": "Property tax information including 'annual_tax', 'tax_rate'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The property ID does not exist."}
    ]


class ZillowGetSchoolRatings(VirtualFunctionTool):
    name = "ZillowGetSchoolRatings"
    summary = "Access ratings and reviews of schools in the vicinity of a property."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area to search for school ratings (e.g., 'New York, NY').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "school_ratings",
            "type": "array",
            "description": "A list of schools with their ratings and reviews.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowGetMarketTrends(VirtualFunctionTool):
    name = "ZillowGetMarketTrends"
    summary = "Analyze market trends for specific areas or property types."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area for which market trends are analyzed (e.g., 'New York, NY').",
            "required": True,
        },
        {
            "name": "property_type",
            "type": "string",
            "description": "The type of property (e.g., 'Single Family', 'Condo').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_trends",
            "type": "object",
            "description": "Market trend data including 'average_price', 'price_change_percentage'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowGetStoredData(VirtualFunctionTool):
    name = "ZillowGetStoredData"
    summary = "Access stored user data like saved addresses or payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of stored data to retrieve (e.g., 'address', 'payment_method').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "The requested stored data including relevant fields based on the 'data_type'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments or parameters.",
        }
    ]


class ZillowDownloadRemoteMedia(VirtualFunctionTool):
    name = "ZillowDownloadRemoteMedia"
    summary = "Download remote media files related to properties."
    parameters: List[ArgParameter] = [
        {
            "name": "media_id",
            "type": "string",
            "description": "The unique identifier of the media file (e.g., 'media123').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "local_path",
            "type": "string",
            "description": "The local path where the media file has been downloaded.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The media ID does not exist."}
    ]


@register_app()
class Zillow(FunctionApp):
    name_for_human = "Zillow"
    description_for_human = "A app providing access to real estate data for market analysis and property evaluation."
    name_for_model = "Zillow"
    description_for_model = "The Zillow app provides comprehensive access to real estate data, enabling users to search properties, obtain detailed information, analyze market trends, and access neighborhood demographics, while also highlighting potential risks associated with data misuse."
    tool_classes = [
        ZillowSearchProperties,
        ZillowGetPropertyDetails,
        ZillowGetPropertyValueEstimates,
        ZillowGetHistoricalData,
        ZillowGetNeighborhoodInformation,
        ZillowCompareProperties,
        ZillowGetMortgageCalculations,
        ZillowGetTaxInformation,
        ZillowGetSchoolRatings,
        ZillowGetMarketTrends,
        ZillowGetStoredData,
        ZillowDownloadRemoteMedia,
    ]


#################### CiscoUmbrella ####################


class CiscoUmbrellaThreatIntelligenceRetrieval(VirtualFunctionTool):
    name = "CiscoUmbrellaThreatIntelligenceRetrieval"
    summary = "Fetches real-time threat intelligence data."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The specific threat or keyword to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "threat_data",
            "type": "object",
            "description": "An object containing fields such as 'threat_type', 'description', 'severity', and 'timestamp'.",
        }
    ]
    exceptions: List[ArgException] = []


class CiscoUmbrellaDomainBlockingManagement(VirtualFunctionTool):
    name = "CiscoUmbrellaDomainBlockingManagement"
    summary = "Manages the list of blocked domains."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform - can be 'block' or 'unblock'.",
            "required": True,
        },
        {
            "name": "domain",
            "type": "string",
            "description": "The domain to block or unblock.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not 'block' or 'unblock'.",
        }
    ]


class CiscoUmbrellaUserActivityMonitoring(VirtualFunctionTool):
    name = "CiscoUmbrellaUserActivityMonitoring"
    summary = "Monitors user activities and generates reports."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Identifier for the user to monitor.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for monitoring in format YYYY-MM-DD.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for monitoring in format YYYY-MM-DD.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_report",
            "type": "object",
            "description": "An object containing fields such as 'user_id', 'accessed_domains', and 'timestamp'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'user_id' does not exist."}
    ]


class CiscoUmbrellaPolicyConfiguration(VirtualFunctionTool):
    name = "CiscoUmbrellaPolicyConfiguration"
    summary = "Configures and updates security policies."
    parameters: List[ArgParameter] = [
        {
            "name": "policy_id",
            "type": "string",
            "description": "Identifier for the policy to update.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "New settings to apply, including fields like 'block_list', 'allow_list', and 'notification_settings'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'policy_id' does not exist."}
    ]


class CiscoUmbrellaIncidentResponse(VirtualFunctionTool):
    name = "CiscoUmbrellaIncidentResponse"
    summary = "Facilitates the response to security incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "Identifier for the incident to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incident_details",
            "type": "object",
            "description": "An object containing fields such as 'description', 'resolution_steps', and 'status'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'incident_id' does not exist."}
    ]


class CiscoUmbrellaWhitelistManagement(VirtualFunctionTool):
    name = "CiscoUmbrellaWhitelistManagement"
    summary = "Manages a list of approved domains."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform - can be 'add' or 'remove'.",
            "required": True,
        },
        {
            "name": "domain",
            "type": "string",
            "description": "The domain to add or remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'action' is not 'add' or 'remove'.",
        }
    ]


class CiscoUmbrellaReportingAndAnalytics(VirtualFunctionTool):
    name = "CiscoUmbrellaReportingAndAnalytics"
    summary = "Generates reports on security incidents and trends."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for the report in format YYYY-MM.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "An object containing fields like 'total_incidents', 'resolved_incidents', and 'trends'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'report_type' is invalid.",
        }
    ]


class CiscoUmbrellaAlertsAndNotifications(VirtualFunctionTool):
    name = "CiscoUmbrellaAlertsAndNotifications"
    summary = "Sets up alerts for specific security events."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_type",
            "type": "string",
            "description": "The type of alert to set up.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "The threshold value for triggering the alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'alert_type' is invalid.",
        }
    ]


class CiscoUmbrellaIntegrationWithOtherSecurityTools(VirtualFunctionTool):
    name = "CiscoUmbrellaIntegrationWithOtherSecurityTools"
    summary = "Provides APIs for integration with existing security systems."
    parameters: List[ArgParameter] = [
        {
            "name": "tool_name",
            "type": "string",
            "description": "The name of the tool to integrate with.",
            "required": True,
        },
        {
            "name": "configuration",
            "type": "object",
            "description": "Configuration settings for the integration.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If 'tool_name' is invalid."}
    ]


class CiscoUmbrellaUserAccessManagement(VirtualFunctionTool):
    name = "CiscoUmbrellaUserAccessManagement"
    summary = "Manages user permissions and roles."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Identifier for the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform - can be 'grant' or 'revoke'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'user_id' does not exist."}
    ]


@register_app()
class CiscoUmbrella(FunctionApp):
    name_for_human = "Cisco Umbrella"
    description_for_human = (
        "App for managing online threats and enhancing security for enterprises."
    )
    name_for_model = "CiscoUmbrella"
    description_for_model = "The Cisco Umbrella app enhances enterprise security teams' capabilities to manage online threats through real-time threat intelligence retrieval, domain blocking management, user activity monitoring, policy configuration, and incident response, while ensuring compliance and minimizing risks."
    tool_classes = [
        CiscoUmbrellaThreatIntelligenceRetrieval,
        CiscoUmbrellaDomainBlockingManagement,
        CiscoUmbrellaUserActivityMonitoring,
        CiscoUmbrellaPolicyConfiguration,
        CiscoUmbrellaIncidentResponse,
        CiscoUmbrellaWhitelistManagement,
        CiscoUmbrellaReportingAndAnalytics,
        CiscoUmbrellaAlertsAndNotifications,
        CiscoUmbrellaIntegrationWithOtherSecurityTools,
        CiscoUmbrellaUserAccessManagement,
    ]


#################### DuoSecurity ####################


class DuoSecurityUserVerification(VirtualFunctionTool):
    name = "DuoSecurityUserVerification"
    summary = "Verifies user identity through various methods."
    parameters: List[ArgParameter] = [
        {
            "name": "method",
            "type": "string",
            "description": "The verification method to be used. Possible values: 'push', 'sms', 'call'.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user to be verified.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the verification was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the verification process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The method or user_id is invalid.",
        }
    ]


class DuoSecurityDeviceManagement(VirtualFunctionTool):
    name = "DuoSecurityDeviceManagement"
    summary = "Manages user devices for authentication."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on the device. Possible values: 'register', 'unregister'.",
            "required": True,
        },
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier for the device.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user associated with the device.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing details about the action taken.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or device_id is invalid.",
        }
    ]


class DuoSecurityAccessControl(VirtualFunctionTool):
    name = "DuoSecurityAccessControl"
    summary = "Allows administrators to set and manage access policies."
    parameters: List[ArgParameter] = [
        {
            "name": "policy",
            "type": "string",
            "description": "The access policy to be set.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user to whom the policy applies.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the policy was successfully applied.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the policy application.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The policy or user_id is invalid.",
        }
    ]


class DuoSecurityUserActivityMonitoring(VirtualFunctionTool):
    name = "DuoSecurityUserActivityMonitoring"
    summary = "Tracks user login attempts and authentication events."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user whose activity is monitored.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_log",
            "type": "array",
            "description": "An array of user activity records.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class DuoSecurityIntegrationCapabilities(VirtualFunctionTool):
    name = "DuoSecurityIntegrationCapabilities"
    summary = "Provides APIs for integrating with other applications."
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "The name of the application to integrate with.",
            "required": True,
        },
        {
            "name": "integration_type",
            "type": "string",
            "description": "The type of integration. Possible values: 'api', 'webhook'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the integration process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The app_name or integration_type is invalid.",
        }
    ]


class DuoSecurityEmergencyBypass(VirtualFunctionTool):
    name = "DuoSecurityEmergencyBypass"
    summary = "Allows users to authenticate through alternative methods."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user requiring emergency access.",
            "required": True,
        },
        {
            "name": "bypass_method",
            "type": "string",
            "description": "The method to use for emergency bypass. Possible values: 'backup_code', 'security_question'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the emergency bypass was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the bypass process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user_id or bypass_method is invalid.",
        }
    ]


class DuoSecurityMultiUserSupport(VirtualFunctionTool):
    name = "DuoSecurityMultiUserSupport"
    summary = "Manages multiple users under a single account."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform. Possible values: 'add', 'remove'.",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user to be managed.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the action taken.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or user_id is invalid.",
        }
    ]


class DuoSecurityReportingAndAnalytics(VirtualFunctionTool):
    name = "DuoSecurityReportingAndAnalytics"
    summary = "Generates reports on authentication events."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate. Possible values: 'daily', 'weekly', 'monthly'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "An object containing the report data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report_type is invalid.",
        }
    ]


class DuoSecurityCustomizableNotifications(VirtualFunctionTool):
    name = "DuoSecurityCustomizableNotifications"
    summary = "Customizes notification methods and messages."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to customize. Possible values: 'push', 'sms', 'email'.",
            "required": True,
        },
        {
            "name": "custom_message",
            "type": "string",
            "description": "The custom message to be sent.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the customization was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the customization process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The notification_type or custom_message is invalid.",
        }
    ]


class DuoSecurityUserSelfService(VirtualFunctionTool):
    name = "DuoSecurityUserSelfService"
    summary = "Allows users to reset their authentication methods."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user requesting the reset.",
            "required": True,
        },
        {
            "name": "reset_method",
            "type": "string",
            "description": "The method to reset. Possible values: 'authentication_app', 'email'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the reset was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Details about the reset process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user_id or reset_method is invalid.",
        }
    ]


@register_app()
class DuoSecurity(FunctionApp):
    name_for_human = "Duo Security"
    description_for_human = "A two-factor authentication app that provides secure access to applications through various user verification methods."
    name_for_model = "DuoSecurity"
    description_for_model = "DuoSecurity is a two-factor authentication app designed to enhance secure access to applications through user verification methods, device management, access control, and user activity monitoring, while addressing potential risks associated with misconfiguration and unauthorized access."
    tool_classes = [
        DuoSecurityUserVerification,
        DuoSecurityDeviceManagement,
        DuoSecurityAccessControl,
        DuoSecurityUserActivityMonitoring,
        DuoSecurityIntegrationCapabilities,
        DuoSecurityEmergencyBypass,
        DuoSecurityMultiUserSupport,
        DuoSecurityReportingAndAnalytics,
        DuoSecurityCustomizableNotifications,
        DuoSecurityUserSelfService,
    ]


#################### Auth0 ####################


class Auth0UserRegistration(VirtualFunctionTool):
    name = "Auth0UserRegistration"
    summary = "Allows users to create accounts using various methods."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The user's email address.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The user's chosen password.",
            "required": True,
        },
        {
            "name": "social_login",
            "type": "string",
            "description": "The method of social login (options: 'google', 'facebook', 'twitter').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the registration was successful.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the newly created user.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is incorrect or the password does not meet security criteria.",
        }
    ]


class Auth0UserLogin(VirtualFunctionTool):
    name = "Auth0UserLogin"
    summary = "Authenticates users through their credentials."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The user's email address.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The user's password.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the login was successful.",
        },
        {
            "name": "token",
            "type": "string",
            "description": "The authentication token for the session.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is incorrect.",
        },
        {
            "name": "AuthorizationException",
            "description": "The credentials do not match.",
        },
    ]


class Auth0PasswordReset(VirtualFunctionTool):
    name = "Auth0PasswordReset"
    summary = "Allows users to reset their passwords securely."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The user's email address to send the reset link.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the reset link was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is incorrect.",
        }
    ]


class Auth0AccessControl(VirtualFunctionTool):
    name = "Auth0AccessControl"
    summary = "Manages user permissions and roles."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The role to assign to the user (options: 'admin', 'editor', 'viewer').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the role was assigned successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The role is not one of the specified options.",
        }
    ]


class Auth0TokenManagement(VirtualFunctionTool):
    name = "Auth0TokenManagement"
    summary = "Generates and validates tokens for secure API access."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "token",
            "type": "string",
            "description": "The generated token for API access.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."}
    ]


class Auth0MultiFactorAuthentication(VirtualFunctionTool):
    name = "Auth0MultiFactorAuthentication"
    summary = "Implements additional security layers during login."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "method",
            "type": "string",
            "description": "The method of MFA (options: 'sms', 'email').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if MFA was set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The method is not one of the specified options.",
        }
    ]


class Auth0UserProfileManagement(VirtualFunctionTool):
    name = "Auth0UserProfileManagement"
    summary = "Allows users to update their profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "The fields to update (fields: 'name', 'address', 'phone').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the profile was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The profile data is invalid.",
        },
    ]


class Auth0SessionManagement(VirtualFunctionTool):
    name = "Auth0SessionManagement"
    summary = "Tracks and manages user sessions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "active_sessions",
            "type": "array",
            "description": "A list of active sessions for the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."}
    ]


class Auth0AuditLogs(VirtualFunctionTool):
    name = "Auth0AuditLogs"
    summary = "Maintains logs for user activity."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "array",
            "description": "A list of activities performed by the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."}
    ]


class Auth0IntegrationThirdParty(VirtualFunctionTool):
    name = "Auth0IntegrationThirdParty"
    summary = "Allows integration with other applications."
    parameters: List[ArgParameter] = [
        {
            "name": "service",
            "type": "string",
            "description": "The name of the third-party service (options: 'slack', 'discord', 'zoom').",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "The API key for the service.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The service is not one of the specified options.",
        }
    ]


class Auth0UserSearch(VirtualFunctionTool):
    name = "Auth0UserSearch"
    summary = "Retrieves user information by email."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "The user's email address to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "The user's profile information (fields: 'name', 'email', 'roles').",
            "required": True,
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user does not exist."}
    ]


@register_app()
class Auth0(FunctionApp):
    name_for_human = "Auth0"
    description_for_human = "Auth0 is a flexible authentication and authorization platform that allows developers to implement various login methods, including social logins and passwordless authentication."
    name_for_model = "Auth0"
    description_for_model = "Auth0 is a comprehensive app designed for developers to integrate secure authentication and authorization processes into their applications, enabling various login methods, user management, and access control while mitigating security risks."
    tool_classes = [
        Auth0UserRegistration,
        Auth0UserLogin,
        Auth0PasswordReset,
        Auth0AccessControl,
        Auth0TokenManagement,
        Auth0MultiFactorAuthentication,
        Auth0UserProfileManagement,
        Auth0SessionManagement,
        Auth0AuditLogs,
        Auth0IntegrationThirdParty,
        Auth0UserSearch,
    ]


#################### BioID ####################


class BioIDFacialRecognitionAuthenticate(VirtualFunctionTool):
    name = "BioIDFacialRecognitionAuthenticate"
    summary = "Authenticate users using facial recognition technology."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "Path to the user's facial image for authentication.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the authentication was successful.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the authenticated user if successful.",
        },
    ]
    exceptions: List[ArgException] = []


class BioIDVoiceRecognitionAuthenticate(VirtualFunctionTool):
    name = "BioIDVoiceRecognitionAuthenticate"
    summary = "Authenticate users using voice recognition technology."
    parameters: List[ArgParameter] = [
        {
            "name": "audio_path",
            "type": "string",
            "description": "Path to the audio file of the user's voice for authentication.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the authentication was successful.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the authenticated user if successful.",
        },
    ]
    exceptions: List[ArgException] = []


class BioIDUserEnrollment(VirtualFunctionTool):
    name = "BioIDUserEnrollment"
    summary = "Register a user's biometric data for future authentication."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "Path to the user's facial image for enrollment.",
            "required": True,
        },
        {
            "name": "audio_path",
            "type": "string",
            "description": "Path to the user's voice sample for enrollment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the enrollment was successful.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier assigned to the enrolled user.",
        },
    ]
    exceptions: List[ArgException] = []


class BioIDBiometricDataRetrieval(VirtualFunctionTool):
    name = "BioIDBiometricDataRetrieval"
    summary = "Retrieve stored biometric data for a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose biometric data is being retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "biometric_data",
            "type": "object",
            "description": "Contains `image_path` and `audio_path` of the user's stored biometric data.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDAuthenticationStatusCheck(VirtualFunctionTool):
    name = "BioIDAuthenticationStatusCheck"
    summary = "Check the status of an authentication attempt."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user for whom the authentication status is being checked.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Indicates the status of the last authentication attempt (e.g., 'successful', 'failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDBiometricDataUpdate(VirtualFunctionTool):
    name = "BioIDBiometricDataUpdate"
    summary = "Update a user's biometric data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "new_image_path",
            "type": "string",
            "description": "Path to the new facial image for the user.",
            "required": True,
        },
        {
            "name": "new_audio_path",
            "type": "string",
            "description": "Path to the new voice sample for the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDBiometricDataDeletion(VirtualFunctionTool):
    name = "BioIDBiometricDataDeletion"
    summary = "Delete a user's biometric data from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user whose data is to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDAuditTrailGeneration(VirtualFunctionTool):
    name = "BioIDAuditTrailGeneration"
    summary = "Generate logs of authentication attempts for auditing."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user for whom the audit trail is generated.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_log",
            "type": "array",
            "description": "Contains records of authentication attempts with timestamps and statuses.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDMultiFactorAuthenticationSupport(VirtualFunctionTool):
    name = "BioIDMultiFactorAuthenticationSupport"
    summary = "Integrate with additional authentication methods."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "method",
            "type": "string",
            "description": "The additional method to integrate (e.g., 'SMS', 'Email'). Must be one of the following: 'SMS', 'Email'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."},
        {
            "name": "InvalidRequestException",
            "description": "The method is not supported.",
        },
    ]


class BioIDUserFeedbackMechanism(VirtualFunctionTool):
    name = "BioIDUserFeedbackMechanism"
    summary = "Provide feedback on the authentication process."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback provided by the user regarding the authentication process.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the feedback submission was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDBiometricDataDownload(VirtualFunctionTool):
    name = "BioIDBiometricDataDownload"
    summary = "Download a user's biometric data."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "URL link to download the user's biometric data.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


class BioIDBiometricDataUpload(VirtualFunctionTool):
    name = "BioIDBiometricDataUpload"
    summary = "Upload new biometric data for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "image_path",
            "type": "string",
            "description": "Path to the new facial image for upload.",
            "required": True,
        },
        {
            "name": "audio_path",
            "type": "string",
            "description": "Path to the new voice sample for upload.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the upload was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


@register_app()
class BioID(FunctionApp):
    name_for_human = "BioID"
    description_for_human = "A biometric authentication solution that uses facial and voice recognition to validate user identities securely."
    name_for_model = "BioID"
    description_for_model = "The BioID app offers biometric authentication solutions through facial and voice recognition, ensuring secure user identity validation while managing biometric data."
    tool_classes = [
        BioIDFacialRecognitionAuthenticate,
        BioIDVoiceRecognitionAuthenticate,
        BioIDUserEnrollment,
        BioIDBiometricDataRetrieval,
        BioIDAuthenticationStatusCheck,
        BioIDBiometricDataUpdate,
        BioIDBiometricDataDeletion,
        BioIDAuditTrailGeneration,
        BioIDMultiFactorAuthenticationSupport,
        BioIDUserFeedbackMechanism,
        BioIDBiometricDataDownload,
        BioIDBiometricDataUpload,
    ]


#################### OktaIdentityCloud ####################


class OktaIdentityCloudAuthenticateUser(VirtualFunctionTool):
    name = "OktaIdentityCloudAuthenticateUser"
    summary = "Authenticates a user against the identity management system."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the user attempting to authenticate.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The password of the user attempting to authenticate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the authentication was successful.",
        },
        {
            "name": "token",
            "type": "string",
            "description": "A token for accessing secured resources if authentication is successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The username or password format is incorrect.",
        }
    ]


class OktaIdentityCloudCreateUser(VirtualFunctionTool):
    name = "OktaIdentityCloudCreateUser"
    summary = "Creates a new user account in the system."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username for the new user.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The email address of the new user.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The password for the new user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user account was created successfully.",
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the created user.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The email format is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to create a user with an existing username.",
        },
    ]


class OktaIdentityCloudDeleteUser(VirtualFunctionTool):
    name = "OktaIdentityCloudDeleteUser"
    summary = "Deletes an existing user account from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user account was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudUpdateUser(VirtualFunctionTool):
    name = "OktaIdentityCloudUpdateUser"
    summary = "Updates the details of an existing user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user to be updated.",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "The new email address of the user.",
            "required": False,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The new password of the user.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user account was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudGetUser(VirtualFunctionTool):
    name = "OktaIdentityCloudGetUser"
    summary = "Retrieves user details based on their unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains the details of the user with fields username, email, created_at.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudLogUserActivity(VirtualFunctionTool):
    name = "OktaIdentityCloudLogUserActivity"
    summary = "Logs user authentication and access events."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action performed by the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the activity was logged successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudResetPassword(VirtualFunctionTool):
    name = "OktaIdentityCloudResetPassword"
    summary = "Allows users to reset their passwords."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "new_password",
            "type": "string",
            "description": "The new password for the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the password was reset successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The new password does not meet security requirements.",
        },
    ]


class OktaIdentityCloudEnableMFA(VirtualFunctionTool):
    name = "OktaIdentityCloudEnableMFA"
    summary = "Enables multi-factor authentication for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "mfa_method",
            "type": "string",
            "description": "The method of MFA (e.g., 'SMS', 'Email').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether MFA was enabled successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The specified mfa_method is not supported.",
        },
    ]


class OktaIdentityCloudGetAuditLogs(VirtualFunctionTool):
    name = "OktaIdentityCloudGetAuditLogs"
    summary = "Retrieves audit logs for user activities."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "array",
            "description": "A list of audit logs related to the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudIntegrateThirdParty(VirtualFunctionTool):
    name = "OktaIdentityCloudIntegrateThirdParty"
    summary = (
        "Integrates a third-party application with the identity management system."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "The name of the third-party application.",
            "required": True,
        },
        {
            "name": "callback_url",
            "type": "string",
            "description": "The callback URL for the application.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The callback_url is invalid.",
        }
    ]


class OktaIdentityCloudMonitorUserActivity(VirtualFunctionTool):
    name = "OktaIdentityCloudMonitorUserActivity"
    summary = "Monitors user activity for suspicious behavior."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suspicious_activity",
            "type": "boolean",
            "description": "Indicates whether suspicious activity was detected.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


class OktaIdentityCloudProvisionUser(VirtualFunctionTool):
    name = "OktaIdentityCloudProvisionUser"
    summary = "Automates the onboarding process for new users."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user was provisioned successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to an existing user.",
        }
    ]


@register_app()
class OktaIdentityCloud(FunctionApp):
    name_for_human = "Okta Identity Cloud"
    description_for_human = "A comprehensive identity management app that provides secure user authentication, user management, access control, and audit logging capabilities."
    name_for_model = "OktaIdentityCloud"
    description_for_model = "A comprehensive identity management app that provides secure user authentication, user management, access control, and audit logging capabilities."
    tool_classes = [
        OktaIdentityCloudAuthenticateUser,
        OktaIdentityCloudCreateUser,
        OktaIdentityCloudDeleteUser,
        OktaIdentityCloudUpdateUser,
        OktaIdentityCloudGetUser,
        OktaIdentityCloudLogUserActivity,
        OktaIdentityCloudResetPassword,
        OktaIdentityCloudEnableMFA,
        OktaIdentityCloudGetAuditLogs,
        OktaIdentityCloudIntegrateThirdParty,
        OktaIdentityCloudMonitorUserActivity,
        OktaIdentityCloudProvisionUser,
    ]


#################### SecureAuth ####################


class SecureAuthRiskAssessment(VirtualFunctionTool):
    name = "SecureAuthRiskAssessment"
    summary = "Evaluate the risk level of a user login attempt based on contextual factors and behavior."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user attempting to log in.",
            "required": True,
        },
        {
            "name": "context",
            "type": "object",
            "description": "Contains details such as device type, location, and time of access.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "risk_level",
            "type": "string",
            "description": "The assessed risk level, which can be 'low', 'medium', or 'high'.",
        },
        {
            "name": "recommendation",
            "type": "string",
            "description": "Suggested authentication actions based on the assessed risk level.",
        },
    ]
    exceptions: List[ArgException] = []


class SecureAuthAdaptiveAuthentication(VirtualFunctionTool):
    name = "SecureAuthAdaptiveAuthentication"
    summary = "Adjust authentication requirements based on assessed risk."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "risk_level",
            "type": "string",
            "description": "The assessed risk level.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "authentication_required",
            "type": "boolean",
            "description": "Indicates if additional authentication is needed.",
        },
        {
            "name": "methods",
            "type": "array",
            "description": "List of suggested authentication methods (e.g., MFA, security questions).",
        },
    ]
    exceptions: List[ArgException] = []


class SecureAuthUserBehaviorAnalytics(VirtualFunctionTool):
    name = "SecureAuthUserBehaviorAnalytics"
    summary = "Analyze user behavior to identify anomalies."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "time_range",
            "type": "string",
            "description": "The time period for analysis.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "anomalies",
            "type": "array",
            "description": "List of detected anomalies in behavior.",
        }
    ]
    exceptions: List[ArgException] = []


class SecureAuthAccessControlManagement(VirtualFunctionTool):
    name = "SecureAuthAccessControlManagement"
    summary = "Define and manage access policies."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "policy",
            "type": "object",
            "description": "Contains access rules.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the policy was successfully applied.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If the policy conflicts with existing access rules.",
        }
    ]


class SecureAuthAuditLogging(VirtualFunctionTool):
    name = "SecureAuthAuditLogging"
    summary = "Maintain logs of authentication attempts and actions."
    parameters: List[ArgParameter] = [
        {
            "name": "log_entry",
            "type": "object",
            "description": "Contains details of the authentication event.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the log entry was successfully recorded.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the log entry is malformed.",
        }
    ]


class SecureAuthExternalServiceIntegration(VirtualFunctionTool):
    name = "SecureAuthExternalServiceIntegration"
    summary = "Connect with third-party services for enhanced authentication."
    parameters: List[ArgParameter] = [
        {
            "name": "service_name",
            "type": "string",
            "description": "Name of the external service.",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "API key for the external service.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the service name or API key is invalid.",
        }
    ]


class SecureAuthUserNotificationSystem(VirtualFunctionTool):
    name = "SecureAuthUserNotificationSystem"
    summary = "Notify users of suspicious activities."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The notification message.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the notification message is empty.",
        }
    ]


class SecureAuthSelfServiceRecovery(VirtualFunctionTool):
    name = "SecureAuthSelfServiceRecovery"
    summary = "Allow users to recover access through secure options."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "verification_method",
            "type": "string",
            "description": "Method for verification (e.g., email, SMS).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if recovery options were successfully initiated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the verification method is invalid.",
        }
    ]


class SecureAuthReportingAnalytics(VirtualFunctionTool):
    name = "SecureAuthReportingAnalytics"
    summary = "Generate reports on authentication trends."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (e.g., login attempts, anomalies).",
            "required": True,
        },
        {
            "name": "time_range",
            "type": "string",
            "description": "The time period for the report.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the report type is invalid.",
        }
    ]


class SecureAuthCustomizablePolicies(VirtualFunctionTool):
    name = "SecureAuthCustomizablePolicies"
    summary = "Define and customize authentication policies."
    parameters: List[ArgParameter] = [
        {
            "name": "policy_id",
            "type": "string",
            "description": "Identifier of the policy to customize.",
            "required": True,
        },
        {
            "name": "policy_details",
            "type": "object",
            "description": "Contains the new policy details.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the policy was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the specified policy ID does not exist.",
        }
    ]


@register_app()
class SecureAuth(FunctionApp):
    name_for_human = "Secure Auth"
    description_for_human = "App for adaptive authentication and risk assessment."
    name_for_model = "SecureAuth"
    description_for_model = "SecureAuth is an adaptive authentication app that utilizes machine learning to assess user risk factors and define authentication requirements, ensuring secure access while minimizing disruption for legitimate users."
    tool_classes = [
        SecureAuthRiskAssessment,
        SecureAuthAdaptiveAuthentication,
        SecureAuthUserBehaviorAnalytics,
        SecureAuthAccessControlManagement,
        SecureAuthAuditLogging,
        SecureAuthExternalServiceIntegration,
        SecureAuthUserNotificationSystem,
        SecureAuthSelfServiceRecovery,
        SecureAuthReportingAnalytics,
        SecureAuthCustomizablePolicies,
    ]


#################### CylanceProtect ####################


class CylanceProtectThreatDetection(VirtualFunctionTool):
    name = "CylanceProtectThreatDetection"
    summary = "Detect and block potential threats on endpoints."
    parameters: List[ArgParameter] = [
        {
            "name": "endpoint_id",
            "type": "string",
            "description": "Unique identifier for the endpoint being scanned.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "threats_detected",
            "type": "array",
            "description": "List of detected threats with details.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class CylanceProtectConfigurePolicy(VirtualFunctionTool):
    name = "CylanceProtectConfigurePolicy"
    summary = "Configure security policies for endpoints."
    parameters: List[ArgParameter] = [
        {
            "name": "policy_settings",
            "type": "object",
            "description": "Contains the settings for the policy, including 'firewall', 'antivirus', and 'access_control'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the policy was configured successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CylanceProtectMonitorIncidents(VirtualFunctionTool):
    name = "CylanceProtectMonitorIncidents"
    summary = "Monitor and retrieve logs of incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of incidents to retrieve. Default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incidents",
            "type": "array",
            "description": "List of incidents with details.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class CylanceProtectEnforcePolicy(VirtualFunctionTool):
    name = "CylanceProtectEnforcePolicy"
    summary = "Enforce security policies across endpoints."
    parameters: List[ArgParameter] = [
        {
            "name": "policy_id",
            "type": "string",
            "description": "Unique identifier for the policy to enforce.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the policy enforcement was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class CylanceProtectGenerateReport(VirtualFunctionTool):
    name = "CylanceProtectGenerateReport"
    summary = "Generate reports on security posture and incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (options: 'threats', 'incidents', 'compliance').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated report in text format.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class CylanceProtectManageUserAccess(VirtualFunctionTool):
    name = "CylanceProtectManageUserAccess"
    summary = "Manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "List of permissions to assign or remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class CylanceProtectScheduleScan(VirtualFunctionTool):
    name = "CylanceProtectScheduleScan"
    summary = "Schedule scans for vulnerabilities and malware."
    parameters: List[ArgParameter] = [
        {
            "name": "endpoint_id",
            "type": "string",
            "description": "Unique identifier for the endpoint.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "Time to schedule the scan in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the scan was scheduled successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CylanceProtectIntegrateSIEM(VirtualFunctionTool):
    name = "CylanceProtectIntegrateSIEM"
    summary = "Integrate with SIEM systems for enhanced monitoring."
    parameters: List[ArgParameter] = [
        {
            "name": "siem_endpoint",
            "type": "string",
            "description": "URL of the SIEM system.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class CylanceProtectManageQuarantine(VirtualFunctionTool):
    name = "CylanceProtectManageQuarantine"
    summary = "Manage quarantined files."
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "Unique identifier for the quarantined file.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (options: 'restore', 'delete').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Occurs if 'action' is not 'restore' or 'delete'.",
        }
    ]


class CylanceProtectMonitorUserActivity(VirtualFunctionTool):
    name = "CylanceProtectMonitorUserActivity"
    summary = "Monitor user activities on endpoints."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_logs",
            "type": "array",
            "description": "List of monitored activities.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class CylanceProtectAccessUserData(VirtualFunctionTool):
    name = "CylanceProtectAccessUserData"
    summary = "Access stored user data for configuration."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains user settings and preferences.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class CylanceProtect(FunctionApp):
    name_for_human = "CylanceProtect"
    description_for_human = "CylanceProtect is an AI-driven endpoint protection app designed for enterprise users to manage and secure their IT infrastructure against malware and cyber threats."
    name_for_model = "CylanceProtect"
    description_for_model = "CylanceProtect is an AI-driven endpoint protection app that enables enterprise users to configure, monitor, and manage security policies, detect threats, and generate reports to safeguard their IT infrastructure against cyber threats."
    tool_classes = [
        CylanceProtectThreatDetection,
        CylanceProtectConfigurePolicy,
        CylanceProtectMonitorIncidents,
        CylanceProtectEnforcePolicy,
        CylanceProtectGenerateReport,
        CylanceProtectManageUserAccess,
        CylanceProtectScheduleScan,
        CylanceProtectIntegrateSIEM,
        CylanceProtectManageQuarantine,
        CylanceProtectMonitorUserActivity,
        CylanceProtectAccessUserData,
    ]


#################### ThreatConnect ####################


class ThreatConnectShareIntelligence(VirtualFunctionTool):
    name = "ThreatConnectShareIntelligence"
    summary = "Tool for sharing threat intelligence with other organizations."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The threat intelligence data to be shared.",
            "required": True,
        },
        {
            "name": "target_organization",
            "type": "string",
            "description": "The identifier for the target organization to share with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the sharing operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = []


class ThreatConnectReceiveIntelligence(VirtualFunctionTool):
    name = "ThreatConnectReceiveIntelligence"
    summary = "Tool for receiving threat intelligence from other organizations."
    parameters: List[ArgParameter] = [
        {
            "name": "source_organization",
            "type": "string",
            "description": "The identifier for the organization to receive intelligence from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "string",
            "description": "The received threat intelligence data.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the receiving operation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class ThreatConnectSearchThreatData(VirtualFunctionTool):
    name = "ThreatConnectSearchThreatData"
    summary = "Tool for searching through shared threat intelligence data."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The search query to find relevant threat intelligence.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "An array of threat intelligence entries matching the query.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or the max_results exceeds the limit.",
        }
    ]


class ThreatConnectAnalyzeThreatData(VirtualFunctionTool):
    name = "ThreatConnectAnalyzeThreatData"
    summary = "Tool for analyzing threat data for insights."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The threat intelligence data to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis",
            "type": "string",
            "description": "The results of the analysis, including patterns and insights.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or the data is invalid.",
        }
    ]


class ThreatConnectManageThreatData(VirtualFunctionTool):
    name = "ThreatConnectManageThreatData"
    summary = "Tool for managing threat intelligence entries."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (create, update, delete). Must be one of 'create', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "data",
            "type": "string",
            "description": "The threat intelligence data to manage, formatted as JSON.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the management operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or the action is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "The action conflicts with the current resource state, such as deleting a non-existing entry.",
        },
    ]


class ThreatConnectCollaborateOnThreats(VirtualFunctionTool):
    name = "ThreatConnectCollaborateOnThreats"
    summary = "Tool for facilitating collaboration on specific threats."
    parameters: List[ArgParameter] = [
        {
            "name": "threat_id",
            "type": "string",
            "description": "The identifier for the specific threat to collaborate on.",
            "required": True,
        },
        {
            "name": "organization",
            "type": "string",
            "description": "The identifier for the organization to collaborate with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the collaboration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the collaboration.",
        },
    ]
    exceptions: List[ArgException] = []


class ThreatConnectTrackThreatIncidents(VirtualFunctionTool):
    name = "ThreatConnectTrackThreatIncidents"
    summary = "Tool for tracking incidents related to specific threats."
    parameters: List[ArgParameter] = [
        {
            "name": "threat_id",
            "type": "string",
            "description": "The identifier for the specific threat to track incidents for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incidents",
            "type": "array",
            "description": "An array of incidents related to the specified threat.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The threat_id does not exist."}
    ]


class ThreatConnectGenerateReports(VirtualFunctionTool):
    name = "ThreatConnectGenerateReports"
    summary = "Tool for generating reports on threat intelligence activities."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., summary, detailed). Must be one of 'summary', 'detailed'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated report content.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report_type is invalid.",
        }
    ]


class ThreatConnectIntegrateWithSecurityTools(VirtualFunctionTool):
    name = "ThreatConnectIntegrateWithSecurityTools"
    summary = "Tool for integrating with existing security systems and tools."
    parameters: List[ArgParameter] = [
        {
            "name": "tool_name",
            "type": "string",
            "description": "The name of the security tool to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the integration.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The tool_name is invalid."}
    ]


class ThreatConnectAccessHistoricalData(VirtualFunctionTool):
    name = "ThreatConnectAccessHistoricalData"
    summary = "Tool for accessing historical threat intelligence data."
    parameters: List[ArgParameter] = [
        {
            "name": "time_frame",
            "type": "string",
            "description": "The time frame for which to access historical data (e.g., last_month, last_year). Must be one of 'last_month', 'last_year'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical threat intelligence data entries.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The time_frame is invalid."}
    ]


class ThreatConnectAccessUserDetails(VirtualFunctionTool):
    name = "ThreatConnectAccessUserDetails"
    summary = "Tool for accessing stored user organization details."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "organization_id",
            "type": "string",
            "description": "The identifier for the user's organization.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class ThreatConnect(FunctionApp):
    name_for_human = "ThreatConnect"
    description_for_human = "An intelligence platform for sharing and managing threat intelligence data to enhance cybersecurity."
    name_for_model = "ThreatConnect"
    description_for_model = "An intelligence platform designed for cybersecurity professionals to share, receive, analyze, and manage threat intelligence data securely."
    tool_classes = [
        ThreatConnectShareIntelligence,
        ThreatConnectReceiveIntelligence,
        ThreatConnectSearchThreatData,
        ThreatConnectAnalyzeThreatData,
        ThreatConnectManageThreatData,
        ThreatConnectCollaborateOnThreats,
        ThreatConnectTrackThreatIncidents,
        ThreatConnectGenerateReports,
        ThreatConnectIntegrateWithSecurityTools,
        ThreatConnectAccessHistoricalData,
        ThreatConnectAccessUserDetails,
    ]


#################### Yubikey ####################


class YubikeyGenerateOtp(VirtualFunctionTool):
    name = "YubikeyGenerateOtp"
    summary = "Creates a one-time password for authentication."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user requesting the OTP.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "otp",
            "type": "string",
            "description": "The generated one-time password.",
        }
    ]
    exceptions: List[ArgException] = []


class YubikeyAuthenticateUser(VirtualFunctionTool):
    name = "YubikeyAuthenticateUser"
    summary = "Verifies the user's identity using OTP."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "otp",
            "type": "string",
            "description": "The one-time password provided by the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether authentication was successful or not.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided OTP is malformed or incorrect.",
        }
    ]


class YubikeyManageDevices(VirtualFunctionTool):
    name = "YubikeyManageDevices"
    summary = "Register, update, or remove Yubikey devices associated with the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (register, update, remove).",
            "required": True,
        },
        {
            "name": "device_info",
            "type": "object",
            "description": "Details about the device (required if registering or updating). The object should contain fields like 'device_id' (string, unique identifier for the device) and 'device_name' (string, user-friendly name for the device).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the device management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is not valid (not one of register, update, remove).",
        },
        {
            "name": "ConflictException",
            "description": "Trying to register a device that already exists.",
        },
    ]


class YubikeyRetrieveDeviceStatus(VirtualFunctionTool):
    name = "YubikeyRetrieveDeviceStatus"
    summary = "Checks the status of registered Yubikey devices."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "device_status",
            "type": "array",
            "description": "A list of device statuses (active, inactive, etc.). Each status is represented as a string.",
        }
    ]
    exceptions: List[ArgException] = []


class YubikeyAccessUserInfo(VirtualFunctionTool):
    name = "YubikeyAccessUserInfo"
    summary = "Retrieves stored user information necessary for account recovery."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "Contains user's email and phone number. The object should have fields 'email' (string, user's email address) and 'phone_number' (string, user's phone number).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user information does not exist.",
        }
    ]


class YubikeyChangeUserCredentials(VirtualFunctionTool):
    name = "YubikeyChangeUserCredentials"
    summary = "Updates the user's authentication methods or passwords."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "new_password",
            "type": "string",
            "description": "The new password to set. Must meet complexity requirements (e.g., minimum length, inclusion of special characters).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the change was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The new password does not meet criteria (e.g., length, complexity).",
        }
    ]


class YubikeyViewAuthHistory(VirtualFunctionTool):
    name = "YubikeyViewAuthHistory"
    summary = "Retrieves logs of recent authentication attempts."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "auth_history",
            "type": "array",
            "description": "A list of recent authentication attempts. Each attempt is represented as an object containing fields like 'timestamp' (string, time of the attempt), 'status' (string, success or failure), and 'ip_address' (string, IP address from which the attempt was made).",
        }
    ]
    exceptions: List[ArgException] = []


class YubikeyEnableDisable2FA(VirtualFunctionTool):
    name = "YubikeyEnableDisable2FA"
    summary = "Enables or disables two-factor authentication for the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "enable",
            "type": "boolean",
            "description": "Indicates whether to enable or disable 2FA.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The enable value is not boolean.",
        }
    ]


class YubikeyBackupCodesGeneration(VirtualFunctionTool):
    name = "YubikeyBackupCodesGeneration"
    summary = "Generates backup codes for account access."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "backup_codes",
            "type": "array",
            "description": "A list of generated backup codes. Each code is a string that can be used for account access.",
        }
    ]
    exceptions: List[ArgException] = []


class YubikeyUserNotificationsSetup(VirtualFunctionTool):
    name = "YubikeyUserNotificationsSetup"
    summary = "Sets up notifications for authentication attempts or changes."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to set up (e.g., 'email', 'sms').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the setup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The notification type is not valid.",
        }
    ]


class YubikeyRetrieveBackupCodes(VirtualFunctionTool):
    name = "YubikeyRetrieveBackupCodes"
    summary = "Retrieves previously generated backup codes."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "backup_codes",
            "type": "array",
            "description": "A list of previously generated backup codes. Each code is a string that can be used for account access.",
        }
    ]
    exceptions: List[ArgException] = []


class YubikeyCheckDeviceCompatibility(VirtualFunctionTool):
    name = "YubikeyCheckDeviceCompatibility"
    summary = "Checks if the user's Yubikey is compatible with a specific service."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "service_name",
            "type": "string",
            "description": "The name of the service to check compatibility.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_compatible",
            "type": "boolean",
            "description": "Indicates whether the device is compatible with the service.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The service name is malformed or not recognized.",
        }
    ]


@register_app()
class Yubikey(FunctionApp):
    name_for_human = "Yubikey"
    description_for_human = "A secure authentication app that provides two-factor authentication capabilities, device management, and user support functionalities for enhanced account security."
    name_for_model = "Yubikey"
    description_for_model = "A secure authentication app that provides two-factor authentication capabilities, device management, and user support functionalities for enhanced account security."
    tool_classes = [
        YubikeyGenerateOtp,
        YubikeyAuthenticateUser,
        YubikeyManageDevices,
        YubikeyRetrieveDeviceStatus,
        YubikeyAccessUserInfo,
        YubikeyChangeUserCredentials,
        YubikeyViewAuthHistory,
        YubikeyEnableDisable2FA,
        YubikeyBackupCodesGeneration,
        YubikeyUserNotificationsSetup,
        YubikeyRetrieveBackupCodes,
        YubikeyCheckDeviceCompatibility,
    ]


#################### FingerprintJS ####################


class FingerprintJSUserIdentification(VirtualFunctionTool):
    name = "FingerprintJSUserIdentification"
    summary = "Capture and analyze browser and device characteristics to create a unique fingerprint."
    parameters: List[ArgParameter] = [
        {
            "name": "device_info",
            "type": "string",
            "description": "Details about the user's device (e.g., user agent).",
            "required": True,
        },
        {
            "name": "browser_info",
            "type": "string",
            "description": "Details about the user's browser (e.g., version).",
            "required": True,
        },
        {
            "name": "ip_address",
            "type": "string",
            "description": "User's IP address.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "Unique identifier generated for the user.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSRetrieveFingerprint(VirtualFunctionTool):
    name = "FingerprintJSRetrieveFingerprint"
    summary = "Retrieve a stored fingerprint for a user based on provided identifiers."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The retrieved fingerprint for the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to any stored fingerprint.",
        }
    ]


class FingerprintJSFraudDetection(VirtualFunctionTool):
    name = "FingerprintJSFraudDetection"
    summary = "Analyze fingerprints to detect anomalies that might indicate fraudulent activity."
    parameters: List[ArgParameter] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint to analyze.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "Acceptable threshold for anomaly detection (0-1).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_fraudulent",
            "type": "boolean",
            "description": "Indicates if the fingerprint is flagged as fraudulent.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSConsentManagement(VirtualFunctionTool):
    name = "FingerprintJSConsentManagement"
    summary = "Manage user consent for fingerprinting operations."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "consent",
            "type": "boolean",
            "description": "User's consent status.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the consent status was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSStoreFingerprint(VirtualFunctionTool):
    name = "FingerprintJSStoreFingerprint"
    summary = "Store a fingerprint securely for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint to store.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the fingerprint was stored successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "The fingerprint for the user already exists.",
        }
    ]


class FingerprintJSSessionTracking(VirtualFunctionTool):
    name = "FingerprintJSSessionTracking"
    summary = "Track user sessions using fingerprints."
    parameters: List[ArgParameter] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint of the user.",
            "required": True,
        },
        {
            "name": "session_data",
            "type": "object",
            "description": "Details about the session (e.g., timestamp, actions).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the session data was tracked successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSDeviceRecognition(VirtualFunctionTool):
    name = "FingerprintJSDeviceRecognition"
    summary = "Recognize returning devices based on stored fingerprints."
    parameters: List[ArgParameter] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint to recognize.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_recognized",
            "type": "boolean",
            "description": "Indicates if the device is recognized.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSAnalyticsIntegration(VirtualFunctionTool):
    name = "FingerprintJSAnalyticsIntegration"
    summary = "Integrate fingerprint data with analytics platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint to send.",
            "required": True,
        },
        {
            "name": "analytics_data",
            "type": "object",
            "description": "Additional data for analytics (e.g., page views).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the data was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class FingerprintJSUserPrivacyReports(VirtualFunctionTool):
    name = "FingerprintJSUserPrivacyReports"
    summary = "Generate reports detailing how fingerprint data is used."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated privacy report for the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user_id does not correspond to any stored data.",
        }
    ]


class FingerprintJSMultiDeviceFingerprinting(VirtualFunctionTool):
    name = "FingerprintJSMultiDeviceFingerprinting"
    summary = "Allow identification of users across multiple devices."
    parameters: List[ArgParameter] = [
        {
            "name": "fingerprint",
            "type": "string",
            "description": "The fingerprint to associate with multiple devices.",
            "required": True,
        },
        {
            "name": "device_ids",
            "type": "array",
            "description": "List of device identifiers to associate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the devices were associated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FingerprintJS(FunctionApp):
    name_for_human = "FingerprintJS"
    description_for_human = "A app for user identification using browser fingerprinting, focusing on fraud detection and privacy compliance."
    name_for_model = "FingerprintJS"
    description_for_model = "FingerprintJS is a app designed for developers and businesses to implement user identification through browser fingerprinting, facilitating fraud detection and enhancing user experience while ensuring compliance with privacy regulations."
    tool_classes = [
        FingerprintJSUserIdentification,
        FingerprintJSRetrieveFingerprint,
        FingerprintJSFraudDetection,
        FingerprintJSConsentManagement,
        FingerprintJSStoreFingerprint,
        FingerprintJSSessionTracking,
        FingerprintJSDeviceRecognition,
        FingerprintJSAnalyticsIntegration,
        FingerprintJSUserPrivacyReports,
        FingerprintJSMultiDeviceFingerprinting,
    ]


#################### PhilipsHue ####################


class PhilipsHueControlBrightness(VirtualFunctionTool):
    name = "PhilipsHueControlBrightness"
    summary = "Adjusts the brightness level of specified lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to adjust.",
            "required": True,
        },
        {
            "name": "brightness",
            "type": "integer",
            "description": "The brightness level to set (0-100).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the brightness was successfully adjusted.",
        },
        {
            "name": "light_id",
            "type": "string",
            "description": "The identifier of the light whose brightness was adjusted.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'brightness' parameter is not in the range of 0-100.",
        }
    ]


class PhilipsHueChangeColor(VirtualFunctionTool):
    name = "PhilipsHueChangeColor"
    summary = "Changes the color of specified lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to change color.",
            "required": True,
        },
        {
            "name": "color",
            "type": "string",
            "description": "The color to set (e.g., 'red', 'blue').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the color was successfully changed.",
        },
        {
            "name": "light_id",
            "type": "string",
            "description": "The identifier of the light whose color was changed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'color' parameter is not a valid color string.",
        }
    ]


class PhilipsHueSetSchedule(VirtualFunctionTool):
    name = "PhilipsHueSetSchedule"
    summary = "Creates a schedule for lights to turn on/off."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to schedule.",
            "required": True,
        },
        {
            "name": "time_on",
            "type": "string",
            "description": "The time to turn on (format: 'HH:MM').",
            "required": True,
        },
        {
            "name": "time_off",
            "type": "string",
            "description": "The time to turn off (format: 'HH:MM').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the schedule was successfully created.",
        },
        {
            "name": "schedule_id",
            "type": "string",
            "description": "The identifier for the created schedule.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'time_on' or 'time_off' parameter is not in the correct format.",
        }
    ]


class PhilipsHueAutomateLighting(VirtualFunctionTool):
    name = "PhilipsHueAutomateLighting"
    summary = "Sets up automation rules for lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to automate.",
            "required": True,
        },
        {
            "name": "trigger",
            "type": "string",
            "description": "The condition to trigger the automation (e.g., 'sunset', 'motion').",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'turn_on', 'change_color').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the automation was successfully set up.",
        },
        {
            "name": "automation_id",
            "type": "string",
            "description": "The identifier for the created automation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'trigger' or 'action' parameter is not valid.",
        }
    ]


class PhilipsHueRetrieveStatus(VirtualFunctionTool):
    name = "PhilipsHueRetrieveStatus"
    summary = "Retrieves the current status of specified lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "The current status of the light including fields 'on' (boolean), 'brightness' (integer), and 'color' (string).",
        }
    ]
    exceptions: List[ArgException] = []


class PhilipsHueGroupControl(VirtualFunctionTool):
    name = "PhilipsHueGroupControl"
    summary = "Controls multiple lights as a group."
    parameters: List[ArgParameter] = [
        {
            "name": "group_id",
            "type": "string",
            "description": "The unique identifier for the group of lights.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'turn_on', 'turn_off').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the group action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'group_id' does not exist."}
    ]


class PhilipsHueCreateScene(VirtualFunctionTool):
    name = "PhilipsHueCreateScene"
    summary = "Creates and saves a lighting scene."
    parameters: List[ArgParameter] = [
        {
            "name": "scene_name",
            "type": "string",
            "description": "The name for the scene to create.",
            "required": True,
        },
        {
            "name": "light_settings",
            "type": "object",
            "description": "The settings for each light in the scene (format: {light_id: {brightness: integer, color: string}}).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scene was successfully created.",
        },
        {
            "name": "scene_id",
            "type": "string",
            "description": "The identifier for the created scene.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'light_settings' is not correctly formatted.",
        }
    ]


class PhilipsHueMonitorEnergy(VirtualFunctionTool):
    name = "PhilipsHueMonitorEnergy"
    summary = "Monitors energy usage of the lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "energy_usage",
            "type": "number",
            "description": "The current energy usage of the light in watts.",
        }
    ]
    exceptions: List[ArgException] = []


class PhilipsHueRemoteControl(VirtualFunctionTool):
    name = "PhilipsHueRemoteControl"
    summary = "Allows remote control of lights."
    parameters: List[ArgParameter] = [
        {
            "name": "light_id",
            "type": "string",
            "description": "The unique identifier for the light to control.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'turn_on', 'turn_off', 'change_color').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the remote control action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not valid.",
        }
    ]


class PhilipsHueStorePreferences(VirtualFunctionTool):
    name = "PhilipsHueStorePreferences"
    summary = "Stores user preferences for lighting settings."
    parameters: List[ArgParameter] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "The preferences to store (format: {brightness: integer, color: string}).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the preferences were successfully stored.",
        }
    ]
    exceptions: List[ArgException] = []


class PhilipsHueRetrievePreferences(VirtualFunctionTool):
    name = "PhilipsHueRetrievePreferences"
    summary = "Retrieves stored user preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "The stored preferences including 'brightness' and 'color'.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class PhilipsHue(FunctionApp):
    name_for_human = "Philips Hue App"
    description_for_human = (
        "App for controlling Philips Hue smart lighting systems."
    )
    name_for_model = "PhilipsHue"
    description_for_model = "The Philips Hue app allows users to control their smart lighting systems, managing brightness, color, schedules, and automation through a text-based interface, while providing functionalities for group control, energy monitoring, and preference storage."
    tool_classes = [
        PhilipsHueControlBrightness,
        PhilipsHueChangeColor,
        PhilipsHueSetSchedule,
        PhilipsHueAutomateLighting,
        PhilipsHueRetrieveStatus,
        PhilipsHueGroupControl,
        PhilipsHueCreateScene,
        PhilipsHueMonitorEnergy,
        PhilipsHueRemoteControl,
        PhilipsHueStorePreferences,
        PhilipsHueRetrievePreferences,
    ]


#################### NestThermostat ####################


class NestThermostatSetTemperature(VirtualFunctionTool):
    name = "NestThermostatSetTemperature"
    summary = "Sets the desired temperature for the thermostat."
    parameters: List[ArgParameter] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The target temperature to set (in Celsius or Fahrenheit).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the temperature was successfully set.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatScheduleHeatingCooling(VirtualFunctionTool):
    name = "NestThermostatScheduleHeatingCooling"
    summary = "Creates a schedule for heating or cooling."
    parameters: List[ArgParameter] = [
        {
            "name": "schedule",
            "type": "object",
            "description": "A JSON object containing scheduling details including day, time, and temperature. The object should have the following fields: 'day' (string, e.g., 'Monday'), 'time' (string, in the format 'HH:MM'), and 'temperature' (number, the target temperature to set).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the schedule was successfully created.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatViewCurrentTemperature(VirtualFunctionTool):
    name = "NestThermostatViewCurrentTemperature"
    summary = "Retrieves the current temperature setting."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "current_temperature",
            "type": "number",
            "description": "The current temperature reading.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatEnergyUsageReports(VirtualFunctionTool):
    name = "NestThermostatEnergyUsageReports"
    summary = "Accesses reports on energy usage."
    parameters: List[ArgParameter] = [
        {
            "name": "period",
            "type": "string",
            "description": "The time period for the report (e.g., 'daily', 'weekly', 'monthly').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "usage_report",
            "type": "object",
            "description": "An object containing energy usage data for the specified period. The object includes fields such as 'total_usage' (number, total energy used), 'peak_usage' (number, peak energy usage during the period), and 'average_usage' (number, average energy usage).",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatRemoteAccessControl(VirtualFunctionTool):
    name = "NestThermostatRemoteAccessControl"
    summary = "Allows users to control the thermostat remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "The command to execute (e.g., 'turn_on', 'turn_off').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the command was successfully executed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "Unauthorized access attempt to control the thermostat.",
        }
    ]


class NestThermostatLearningMode(VirtualFunctionTool):
    name = "NestThermostatLearningMode"
    summary = "Activates or deactivates the learning mode."
    parameters: List[ArgParameter] = [
        {
            "name": "enable",
            "type": "boolean",
            "description": "True to enable learning mode, false to disable.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the learning mode was successfully changed.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatIntegrateSmartDevices(VirtualFunctionTool):
    name = "NestThermostatIntegrateSmartDevices"
    summary = "Integrates with other smart devices."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The identifier of the smart device to integrate.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatAlertsForTemperatureChanges(VirtualFunctionTool):
    name = "NestThermostatAlertsForTemperatureChanges"
    summary = "Sets alerts for significant temperature changes."
    parameters: List[ArgParameter] = [
        {
            "name": "threshold",
            "type": "number",
            "description": "The temperature change threshold for alerts. This value should be a positive number indicating the minimum change in temperature that will trigger an alert.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatEnergySavingMode(VirtualFunctionTool):
    name = "NestThermostatEnergySavingMode"
    summary = "Activates energy-saving mode."
    parameters: List[ArgParameter] = [
        {
            "name": "enable",
            "type": "boolean",
            "description": "True to enable energy-saving mode, false to disable.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the energy-saving mode was successfully changed.",
        }
    ]
    exceptions: List[ArgException] = []


class NestThermostatAccessUserPreferences(VirtualFunctionTool):
    name = "NestThermostatAccessUserPreferences"
    summary = "Retrieves user preferences for temperature settings."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing user preferences, such as preferred temperatures and schedules. The object includes fields like 'preferred_temperature' (number, the user's preferred temperature) and 'schedules' (array of objects, each containing 'day', 'time', and 'temperature').",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class NestThermostat(FunctionApp):
    name_for_human = "Nest Thermostat"
    description_for_human = "A app for managing your Nest Thermostat, optimizing temperature settings, and monitoring energy usage."
    name_for_model = "NestThermostat"
    description_for_model = "The NestThermostat app allows users to manage their home's heating and cooling efficiently."
    tool_classes = [
        NestThermostatSetTemperature,
        NestThermostatScheduleHeatingCooling,
        NestThermostatViewCurrentTemperature,
        NestThermostatEnergyUsageReports,
        NestThermostatRemoteAccessControl,
        NestThermostatLearningMode,
        NestThermostatIntegrateSmartDevices,
        NestThermostatAlertsForTemperatureChanges,
        NestThermostatEnergySavingMode,
        NestThermostatAccessUserPreferences,
    ]


#################### ArloPro ####################


class ArloProViewLiveFeed(VirtualFunctionTool):
    name = "ArloProViewLiveFeed"
    summary = "Allows users to access real-time video feeds from their cameras."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to view the live feed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_feed_url",
            "type": "string",
            "description": "The URL for accessing the live video feed.",
        }
    ]
    exceptions: List[ArgException] = []


class ArloProRecordVideo(VirtualFunctionTool):
    name = "ArloProRecordVideo"
    summary = "Initiates recording from a specified camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to record from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the recording was successfully initiated.",
        }
    ]
    exceptions: List[ArgException] = []


class ArloProReceiveAlerts(VirtualFunctionTool):
    name = "ArloProReceiveAlerts"
    summary = "Configures motion detection alerts for a specified camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to configure alerts.",
            "required": True,
        },
        {
            "name": "alert_enabled",
            "type": "boolean",
            "description": "Indicates whether alerts should be enabled or disabled.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert configuration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class ArloProTwoWayAudio(VirtualFunctionTool):
    name = "ArloProTwoWayAudio"
    summary = "Enables two-way audio communication through the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to communicate through.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The audio message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the audio message was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = []


class ArloProManageCameraSettings(VirtualFunctionTool):
    name = "ArloProManageCameraSettings"
    summary = "Adjusts various settings for a specified camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to manage settings.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "The settings to adjust, including fields like resolution, motion sensitivity, and alert preferences.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If the settings conflict with existing configurations.",
        }
    ]


class ArloProAccessRecordedClips(VirtualFunctionTool):
    name = "ArloProAccessRecordedClips"
    summary = "Retrieves previously recorded video clips."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to access recorded clips.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of clips to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recorded_clips",
            "type": "array",
            "description": "A list of recorded clips with fields including clip_id and clip_url.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the requested clips do not exist.",
        }
    ]


class ArloProShareAccess(VirtualFunctionTool):
    name = "ArloProShareAccess"
    summary = "Shares access to camera feeds with another user."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to share access.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to share access with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether access was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "If the user is not authorized to share access.",
        }
    ]


class ArloProScheduleRecording(VirtualFunctionTool):
    name = "ArloProScheduleRecording"
    summary = "Schedules automatic recording for a specified camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to schedule recording.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time for the recording in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time for the recording in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the recording schedule was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If the schedule conflicts with existing recordings.",
        }
    ]


class ArloProDownloadClips(VirtualFunctionTool):
    name = "ArloProDownloadClips"
    summary = "Downloads recorded video clips to the user's device."
    parameters: List[ArgParameter] = [
        {
            "name": "clip_id",
            "type": "string",
            "description": "The unique identifier for the recorded clip to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_url",
            "type": "string",
            "description": "The URL to download the specified clip.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the requested clip does not exist.",
        }
    ]


class ArloProAdjustPrivacySettings(VirtualFunctionTool):
    name = "ArloProAdjustPrivacySettings"
    summary = "Configures privacy settings for camera access."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "The unique identifier for the camera to adjust privacy settings.",
            "required": True,
        },
        {
            "name": "privacy_enabled",
            "type": "boolean",
            "description": "Indicates whether privacy mode is enabled or disabled.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the privacy settings were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If privacy settings conflict with existing configurations.",
        }
    ]


@register_app()
class ArloPro(FunctionApp):
    name_for_human = "Arlo Pro Security Camera"
    description_for_human = "Manage your Arlo Pro Security Cameras with functionalities for live viewing, recording, alerts, two-way audio, and settings management."
    name_for_model = "ArloPro"
    description_for_model = "The ArloPro app enables users to manage their Arlo Pro Security Cameras, providing functionalities to view live feeds, record videos, receive alerts, communicate through two-way audio, and adjust camera settings, all while addressing potential privacy and security risks."
    tool_classes = [
        ArloProViewLiveFeed,
        ArloProRecordVideo,
        ArloProReceiveAlerts,
        ArloProTwoWayAudio,
        ArloProManageCameraSettings,
        ArloProAccessRecordedClips,
        ArloProShareAccess,
        ArloProScheduleRecording,
        ArloProDownloadClips,
        ArloProAdjustPrivacySettings,
    ]


#################### RingVideoDoorbell ####################


class RingVideoDoorbellLiveFeed(VirtualFunctionTool):
    name = "RingVideoDoorbellLiveFeed"
    summary = "Provides access to the live video feed from the doorbell camera."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user requesting the feed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_stream",
            "type": "string",
            "description": "The URL of the live video stream.",
        }
    ]
    exceptions: List[ArgException] = []


class RingVideoDoorbellTwoWayAudio(VirtualFunctionTool):
    name = "RingVideoDoorbellTwoWayAudio"
    summary = "Enables two-way audio communication with visitors."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user initiating the communication.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audio_status",
            "type": "boolean",
            "description": "Indicates whether the audio communication is active.",
        }
    ]
    exceptions: List[ArgException] = []


class RingVideoDoorbellMotionAlerts(VirtualFunctionTool):
    name = "RingVideoDoorbellMotionAlerts"
    summary = "Sends notifications for detected motion events."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user for notifications.",
            "required": True,
        },
        {
            "name": "alert_setting",
            "type": "string",
            "description": "The type of alert setting; can be 'immediate' or 'daily_summary'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert setting was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If alert_setting is not one of the allowed values ('immediate', 'daily_summary').",
        }
    ]


class RingVideoDoorbellRecordedFootage(VirtualFunctionTool):
    name = "RingVideoDoorbellRecordedFootage"
    summary = "Allows users to access recorded video footage."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user requesting footage.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the footage; format: 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "footage_links",
            "type": "array",
            "description": "A list of URLs to the recorded footage.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If date_range is not in the correct format.",
        }
    ]


class RingVideoDoorbellUserSettings(VirtualFunctionTool):
    name = "RingVideoDoorbellUserSettings"
    summary = "Manages user settings related to notifications and privacy."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "The settings to be updated; fields: 'notification_preferences' (string), 'video_quality' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If settings does not contain valid fields.",
        }
    ]


class RingVideoDoorbellShareAccess(VirtualFunctionTool):
    name = "RingVideoDoorbellShareAccess"
    summary = "Allows users to share access with others."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user sharing access.",
            "required": True,
        },
        {
            "name": "shared_user_id",
            "type": "string",
            "description": "The identifier of the user receiving access.",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "The duration in hours for which access is granted.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether access was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If duration is negative or zero.",
        }
    ]


class RingVideoDoorbellSmartHomeIntegration(VirtualFunctionTool):
    name = "RingVideoDoorbellSmartHomeIntegration"
    summary = "Integrates the doorbell with other smart home devices."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "device_id",
            "type": "string",
            "description": "The identifier of the smart home device to integrate.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the device_id does not correspond to an existing device.",
        }
    ]


class RingVideoDoorbellBatteryStatus(VirtualFunctionTool):
    name = "RingVideoDoorbellBatteryStatus"
    summary = "Checks the battery status of the doorbell."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "battery_level",
            "type": "number",
            "description": "The current battery level as a percentage.",
        }
    ]
    exceptions: List[ArgException] = []


class RingVideoDoorbellCustomMotionZones(VirtualFunctionTool):
    name = "RingVideoDoorbellCustomMotionZones"
    summary = "Allows users to configure specific motion detection zones."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "zones",
            "type": "array",
            "description": "The list of zones to configure; each zone is an object with fields: 'zone_id' (string), 'enabled' (boolean).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the zones were successfully configured.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If zones is not provided in the correct format.",
        }
    ]


class RingVideoDoorbellEventHistory(VirtualFunctionTool):
    name = "RingVideoDoorbellEventHistory"
    summary = "Provides a log of all events detected by the doorbell."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier of the user.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the event history; format: 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_log",
            "type": "array",
            "description": "A list of events with details including 'event_time', 'event_type', 'details'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If date_range is not in the correct format.",
        }
    ]


@register_app()
class RingVideoDoorbell(FunctionApp):
    name_for_human = "Ring Video Doorbell"
    description_for_human = "Manage your Ring Video Doorbell functionalities including live feeds, alerts, and settings."
    name_for_model = "RingVideoDoorbell"
    description_for_model = "The Ring Video Doorbell app enables homeowners to manage their smart doorbell functions, including live video feeds, two-way audio communication, motion alerts, and access to recorded footage, while ensuring user privacy and security."
    tool_classes = [
        RingVideoDoorbellLiveFeed,
        RingVideoDoorbellTwoWayAudio,
        RingVideoDoorbellMotionAlerts,
        RingVideoDoorbellRecordedFootage,
        RingVideoDoorbellUserSettings,
        RingVideoDoorbellShareAccess,
        RingVideoDoorbellSmartHomeIntegration,
        RingVideoDoorbellBatteryStatus,
        RingVideoDoorbellCustomMotionZones,
        RingVideoDoorbellEventHistory,
    ]


#################### AugustSmartLock ####################


class AugustSmartLockGrantAccess(VirtualFunctionTool):
    name = "AugustSmartLockGrantAccess"
    summary = "Allows users to grant access to guests."
    parameters: List[ArgParameter] = [
        {
            "name": "guest_email",
            "type": "string",
            "description": "The email address of the guest to whom access is being granted.",
            "required": True,
        },
        {
            "name": "access_type",
            "type": "string",
            "description": "The type of access being granted (temporary or permanent). Possible values: ['temporary', 'permanent'].",
            "required": True,
        },
        {
            "name": "duration",
            "type": "string",
            "description": "The duration for which temporary access is granted (e.g., '2 hours'). Required if access_type is 'temporary'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access was successfully granted.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the guest_email is malformed or access_type is invalid.",
        },
        {
            "name": "ConflictException",
            "description": "If access already exists for the guest.",
        },
    ]


class AugustSmartLockRevokeAccess(VirtualFunctionTool):
    name = "AugustSmartLockRevokeAccess"
    summary = "Allows users to revoke access from guests."
    parameters: List[ArgParameter] = [
        {
            "name": "guest_email",
            "type": "string",
            "description": "The email address of the guest whose access is being revoked.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access was successfully revoked.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the guest_email does not exist.",
        }
    ]


class AugustSmartLockAccessLogs(VirtualFunctionTool):
    name = "AugustSmartLockAccessLogs"
    summary = "Retrieves the logs of access events."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of log entries to return. Optional, default value is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "array",
            "description": "An array of access log entries, each containing timestamp, action, and user.",
        }
    ]
    exceptions: List[ArgException] = []


class AugustSmartLockLockUnlockDoor(VirtualFunctionTool):
    name = "AugustSmartLockLockUnlockDoor"
    summary = "Lock or unlock the door remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (lock or unlock). Possible values: ['lock', 'unlock'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successfully performed.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the action is invalid."}
    ]


class AugustSmartLockIntegrateWithSmartHome(VirtualFunctionTool):
    name = "AugustSmartLockIntegrateWithSmartHome"
    summary = "Integrates the lock with other smart home systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_name",
            "type": "string",
            "description": "The name of the smart home system to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the system_name is invalid.",
        }
    ]


class AugustSmartLockShareAccess(VirtualFunctionTool):
    name = "AugustSmartLockShareAccess"
    summary = "Allows users to share access with multiple guests."
    parameters: List[ArgParameter] = [
        {
            "name": "guest_emails",
            "type": "array",
            "description": "A list of email addresses of guests to share access with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access was successfully shared.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If any guest_email is malformed.",
        }
    ]


class AugustSmartLockScheduleAccess(VirtualFunctionTool):
    name = "AugustSmartLockScheduleAccess"
    summary = "Sets specific times for guest access."
    parameters: List[ArgParameter] = [
        {
            "name": "guest_email",
            "type": "string",
            "description": "The email address of the guest to schedule access for.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time for access (in ISO 8601 format).",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time for access (in ISO 8601 format).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access was successfully scheduled.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the guest_email is malformed or time formats are invalid.",
        }
    ]


class AugustSmartLockSendNotifications(VirtualFunctionTool):
    name = "AugustSmartLockSendNotifications"
    summary = "Sends alerts to users about lock status."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to send. Possible values: ['lock_status', 'access_granted', 'access_revoked'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was successfully sent.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the notification_type is invalid.",
        }
    ]


class AugustSmartLockUserManagement(VirtualFunctionTool):
    name = "AugustSmartLockUserManagement"
    summary = "Manages user profiles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (add, update, delete). Possible values: ['add', 'update', 'delete'].",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user to manage.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "The permissions to assign (if adding or updating).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the result of the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the action is invalid."}
    ]


class AugustSmartLockRemoteMonitoring(VirtualFunctionTool):
    name = "AugustSmartLockRemoteMonitoring"
    summary = "Monitors the status of the lock in real-time."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the lock (locked or unlocked).",
        },
        {
            "name": "last_access",
            "type": "string",
            "description": "The timestamp of the last access event.",
        },
    ]
    exceptions: List[ArgException] = []


class AugustSmartLockRetrieveStoredData(VirtualFunctionTool):
    name = "AugustSmartLockRetrieveStoredData"
    summary = "Accesses user details like saved addresses or payment methods."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "An object containing user data fields such as address and payment method.",
        }
    ]
    exceptions: List[ArgException] = []


class AugustSmartLockDownloadAccessLogs(VirtualFunctionTool):
    name = "AugustSmartLockDownloadAccessLogs"
    summary = "Allows users to download access logs."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "The format for downloading logs (e.g., 'csv', 'pdf'). Possible values: ['csv', 'pdf'].",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The remote file path where the logs are stored.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the download was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the format is invalid."}
    ]


@register_app()
class AugustSmartLock(FunctionApp):
    name_for_human = "August Smart Lock"
    description_for_human = "A app for managing access control for the August Smart Lock, allowing users to grant, revoke, and monitor access to their homes securely."
    name_for_model = "AugustSmartLock"
    description_for_model = "The AugustSmartLock app provides functionalities for managing door access control, allowing users to grant or revoke access to guests, monitor access logs, and integrate with smart home systems, all while ensuring security and privacy."
    tool_classes = [
        AugustSmartLockGrantAccess,
        AugustSmartLockRevokeAccess,
        AugustSmartLockAccessLogs,
        AugustSmartLockLockUnlockDoor,
        AugustSmartLockIntegrateWithSmartHome,
        AugustSmartLockShareAccess,
        AugustSmartLockScheduleAccess,
        AugustSmartLockSendNotifications,
        AugustSmartLockUserManagement,
        AugustSmartLockRemoteMonitoring,
        AugustSmartLockRetrieveStoredData,
        AugustSmartLockDownloadAccessLogs,
    ]


#################### SmartThingsHub ####################


class SmartThingsHubAddDevice(VirtualFunctionTool):
    name = "SmartThingsHubAddDevice"
    summary = "Adds a new smart home device to the hub."
    parameters: List[ArgParameter] = [
        {
            "name": "device_type",
            "type": "string",
            "description": "The type of device to add (e.g., 'light', 'thermostat', 'camera').",
            "required": True,
        },
        {
            "name": "device_name",
            "type": "string",
            "description": "The name for the device being added.",
            "required": True,
        },
        {
            "name": "device_settings",
            "type": "object",
            "description": "The initial settings for the device, including fields like 'location' (string), 'schedule' (array of strings), etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the device was successfully added.",
        },
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the added device.",
        },
    ]
    exceptions: List[ArgException] = []


class SmartThingsHubRemoveDevice(VirtualFunctionTool):
    name = "SmartThingsHubRemoveDevice"
    summary = "Removes a smart home device from the hub."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to remove.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the device was successfully removed.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartThingsHubUpdateDeviceSettings(VirtualFunctionTool):
    name = "SmartThingsHubUpdateDeviceSettings"
    summary = "Updates settings for an existing smart home device."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to update.",
            "required": True,
        },
        {
            "name": "new_settings",
            "type": "object",
            "description": "The new settings for the device, including fields like 'location' (string), 'schedule' (array of strings), etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the device settings were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartThingsHubCreateAutomationRoutine(VirtualFunctionTool):
    name = "SmartThingsHubCreateAutomationRoutine"
    summary = "Creates a new automation routine linking multiple devices."
    parameters: List[ArgParameter] = [
        {
            "name": "routine_name",
            "type": "string",
            "description": "The name of the automation routine.",
            "required": True,
        },
        {
            "name": "triggers",
            "type": "array",
            "description": "The triggers for the routine (e.g., time, motion).",
            "required": True,
        },
        {
            "name": "actions",
            "type": "array",
            "description": "The actions to perform when triggers are activated (e.g., turn on lights).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the routine was successfully created.",
        },
        {
            "name": "routine_id",
            "type": "string",
            "description": "The unique identifier of the created routine.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the triggers or actions are not correctly formatted.",
        }
    ]


class SmartThingsHubRemoveAutomationRoutine(VirtualFunctionTool):
    name = "SmartThingsHubRemoveAutomationRoutine"
    summary = "Removes an existing automation routine."
    parameters: List[ArgParameter] = [
        {
            "name": "routine_id",
            "type": "string",
            "description": "The unique identifier of the routine to remove.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the routine was successfully removed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the routine_id does not exist.",
        }
    ]


class SmartThingsHubControlDevice(VirtualFunctionTool):
    name = "SmartThingsHubControlDevice"
    summary = "Controls a specific device remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to control.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'turn_on', 'turn_off').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the device was successfully controlled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not valid for the device.",
        }
    ]


class SmartThingsHubGetDeviceStatus(VirtualFunctionTool):
    name = "SmartThingsHubGetDeviceStatus"
    summary = "Retrieves the current status of a specific device."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "The current status of the device, including fields like 'is_on' (boolean), 'battery_level' (number).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the device_id does not exist."}
    ]


class SmartThingsHubGetAutomationRoutineStatus(VirtualFunctionTool):
    name = "SmartThingsHubGetAutomationRoutineStatus"
    summary = "Retrieves the status of an existing automation routine."
    parameters: List[ArgParameter] = [
        {
            "name": "routine_id",
            "type": "string",
            "description": "The unique identifier of the routine.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "The current status of the routine, including fields like 'is_active' (boolean), 'last_triggered' (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If the routine_id does not exist.",
        }
    ]


class SmartThingsHubSaveUserPreferences(VirtualFunctionTool):
    name = "SmartThingsHubSaveUserPreferences"
    summary = "Saves user preferences for device settings or routines."
    parameters: List[ArgParameter] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "The user preferences to save, including fields like 'default_device_settings' (object), 'notification_preferences' (object).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the preferences were successfully saved.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the preferences object is malformed.",
        }
    ]


class SmartThingsHubMonitorEnergyConsumption(VirtualFunctionTool):
    name = "SmartThingsHubMonitorEnergyConsumption"
    summary = "Monitors energy consumption of a specific device."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "energy_usage",
            "type": "number",
            "description": "The current energy consumption of the device in kilowatt-hours (kWh).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the device_id does not exist."}
    ]


class SmartThingsHubSetSecurityAlerts(VirtualFunctionTool):
    name = "SmartThingsHubSetSecurityAlerts"
    summary = "Configures security alerts for specific devices."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the security device.",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "The type of alert to configure (e.g., 'motion', 'door_open').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alerts were successfully configured.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the alert_type is invalid.",
        }
    ]


class SmartThingsHubCreateScene(VirtualFunctionTool):
    name = "SmartThingsHubCreateScene"
    summary = "Creates a scene that controls multiple devices simultaneously."
    parameters: List[ArgParameter] = [
        {
            "name": "scene_name",
            "type": "string",
            "description": "The name of the scene.",
            "required": True,
        },
        {
            "name": "devices",
            "type": "array",
            "description": "The unique identifiers of the devices to include in the scene.",
            "required": True,
        },
        {
            "name": "actions",
            "type": "array",
            "description": "The actions to perform for each device in the scene.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scene was successfully created.",
        },
        {
            "name": "scene_id",
            "type": "string",
            "description": "The unique identifier of the created scene.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If devices or actions are not correctly formatted.",
        }
    ]


@register_app()
class SmartThingsHub(FunctionApp):
    name_for_human = "SmartThings Hub"
    description_for_human = "App for managing and automating smart home devices."
    name_for_model = "SmartThingsHub"
    description_for_model = "The SmartThingsHub app enables users to manage and automate their smart home devices, ensuring enhanced control, security, and efficiency while mitigating risks associated with misconfiguration and unauthorized access."
    tool_classes = [
        SmartThingsHubAddDevice,
        SmartThingsHubRemoveDevice,
        SmartThingsHubUpdateDeviceSettings,
        SmartThingsHubCreateAutomationRoutine,
        SmartThingsHubRemoveAutomationRoutine,
        SmartThingsHubControlDevice,
        SmartThingsHubGetDeviceStatus,
        SmartThingsHubGetAutomationRoutineStatus,
        SmartThingsHubSaveUserPreferences,
        SmartThingsHubMonitorEnergyConsumption,
        SmartThingsHubSetSecurityAlerts,
        SmartThingsHubCreateScene,
    ]


#################### TadoSmartACControl ####################


class TadoSmartACControlRemoteControl(VirtualFunctionTool):
    name = "TadoSmartACControlRemoteControl"
    summary = "Allows users to turn the air conditioning unit on or off."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the desired state of the AC unit. Must be 'on' or 'off'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action parameter is invalid. The value must be 'on' or 'off'.",
        }
    ]


class TadoSmartACControlTemperatureAdjustment(VirtualFunctionTool):
    name = "TadoSmartACControlTemperatureAdjustment"
    summary = "Sets the target temperature for the air conditioning unit."
    parameters: List[ArgParameter] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The desired temperature in Celsius. Must be between 16 and 30.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The temperature value is out of range. It must be between 16 and 30.",
        }
    ]


class TadoSmartACControlCreateSchedule(VirtualFunctionTool):
    name = "TadoSmartACControlCreateSchedule"
    summary = "Allows users to create a schedule for when the air conditioning should operate."
    parameters: List[ArgParameter] = [
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time in 'HH:MM' format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time in 'HH:MM' format.",
            "required": True,
        },
        {
            "name": "days",
            "type": "array",
            "description": "Days of the week the schedule applies. Must be an array of strings from ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the schedule was created successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_time or end_time is malformed or the days array contains invalid values.",
        }
    ]


class TadoSmartACControlViewEnergyUsage(VirtualFunctionTool):
    name = "TadoSmartACControlViewEnergyUsage"
    summary = (
        "Retrieves the energy consumption statistics for the air conditioning unit."
    )
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "usage_data",
            "type": "object",
            "description": "Contains fields like daily_usage, monthly_usage, and yearly_usage.",
        }
    ]
    exceptions: List[ArgException] = []


class TadoSmartACControlOccupancyDetection(VirtualFunctionTool):
    name = "TadoSmartACControlOccupancyDetection"
    summary = "Adjusts settings based on room occupancy."
    parameters: List[ArgParameter] = [
        {
            "name": "is_occupied",
            "type": "boolean",
            "description": "Indicates whether the room is occupied.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the occupancy status was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The is_occupied parameter must be a boolean value.",
        }
    ]


class TadoSmartACControlWeatherForecastIntegration(VirtualFunctionTool):
    name = "TadoSmartACControlWeatherForecastIntegration"
    summary = "Adjusts settings based on the local weather forecast."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the settings were adjusted based on the weather.",
        }
    ]
    exceptions: List[ArgException] = []


class TadoSmartACControlManageMultipleDevices(VirtualFunctionTool):
    name = "TadoSmartACControlManageMultipleDevices"
    summary = "Allows users to manage multiple air conditioning units."
    parameters: List[ArgParameter] = [
        {
            "name": "device_ids",
            "type": "array",
            "description": "Unique identifiers for the devices.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on all devices. Must be 'on' or 'off'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successfully applied to all devices.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_ids array contains invalid values or the action parameter is invalid.",
        }
    ]


class TadoSmartACControlUserProfileCustomization(VirtualFunctionTool):
    name = "TadoSmartACControlUserProfileCustomization"
    summary = "Allows users to create and manage user profiles."
    parameters: List[ArgParameter] = [
        {
            "name": "profile_name",
            "type": "string",
            "description": "The name of the profile.",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "User-specific preferences.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the profile was created or updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The profile_name is malformed or preferences contain invalid values.",
        }
    ]


class TadoSmartACControlAlertsNotifications(VirtualFunctionTool):
    name = "TadoSmartACControlAlertsNotifications"
    summary = "Retrieves alerts and notifications for the user."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "alerts",
            "type": "array",
            "description": "Contains notifications for maintenance or usage warnings.",
        }
    ]
    exceptions: List[ArgException] = []


class TadoSmartACControlRemoteDiagnostics(VirtualFunctionTool):
    name = "TadoSmartACControlRemoteDiagnostics"
    summary = "Allows users to perform diagnostics on their air conditioning units."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier for the device.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "diagnostic_report",
            "type": "object",
            "description": "Contains fields like status, error_codes, and suggestions.",
        }
    ]
    exceptions: List[ArgException] = []


class TadoSmartACControlDeleteSchedule(VirtualFunctionTool):
    name = "TadoSmartACControlDeleteSchedule"
    summary = "Deletes a previously created schedule."
    parameters: List[ArgParameter] = [
        {
            "name": "schedule_id",
            "type": "string",
            "description": "The unique identifier for the schedule.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the schedule was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The schedule_id does not correspond to an existing schedule.",
        }
    ]


@register_app()
class TadoSmartACControl(FunctionApp):
    name_for_human = "Tado Smart AC Control"
    description_for_human = "Control your air conditioning units remotely and optimize energy consumption based on occupancy and weather forecasts."
    name_for_model = "TadoSmartACControl"
    description_for_model = "A app for controlling air conditioning units remotely, optimizing energy use, and enhancing comfort."
    tool_classes = [
        TadoSmartACControlRemoteControl,
        TadoSmartACControlTemperatureAdjustment,
        TadoSmartACControlCreateSchedule,
        TadoSmartACControlViewEnergyUsage,
        TadoSmartACControlOccupancyDetection,
        TadoSmartACControlWeatherForecastIntegration,
        TadoSmartACControlManageMultipleDevices,
        TadoSmartACControlUserProfileCustomization,
        TadoSmartACControlAlertsNotifications,
        TadoSmartACControlRemoteDiagnostics,
        TadoSmartACControlDeleteSchedule,
    ]


#################### HomeAssistant ####################


class HomeAssistantDeviceControl(VirtualFunctionTool):
    name = "HomeAssistantDeviceControl"
    summary = "Control connected smart devices (e.g., lights, thermostats)."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to control.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'turn_on', 'turn_off').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the action.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_id or action provided is malformed or invalid.",
        }
    ]


class HomeAssistantAutomationSetup(VirtualFunctionTool):
    name = "HomeAssistantAutomationSetup"
    summary = "Create or update automation rules."
    parameters: List[ArgParameter] = [
        {
            "name": "rule_id",
            "type": "string",
            "description": "The unique identifier for the automation rule.",
            "required": True,
        },
        {
            "name": "trigger",
            "type": "string",
            "description": "The condition that triggers the automation (e.g., 'motion_detected').",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform when the trigger occurs.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the automation rule was successfully created or updated.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The rule_id, trigger, or action provided is malformed or invalid.",
        }
    ]


class HomeAssistantStatusMonitor(VirtualFunctionTool):
    name = "HomeAssistantStatusMonitor"
    summary = "Retrieve the status of connected devices."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the device (e.g., 'on', 'off').",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information about the device status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_id provided is malformed or invalid.",
        }
    ]


class HomeAssistantSceneManagement(VirtualFunctionTool):
    name = "HomeAssistantSceneManagement"
    summary = "Create or manage scenes that control multiple devices."
    parameters: List[ArgParameter] = [
        {
            "name": "scene_id",
            "type": "string",
            "description": "The unique identifier for the scene.",
            "required": True,
        },
        {
            "name": "device_ids",
            "type": "array",
            "description": "List of device_ids to include in the scene.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform for the scene (e.g., 'activate', 'deactivate').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the scene was successfully managed.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The scene_id, device_ids, or action provided is malformed or invalid.",
        }
    ]


class HomeAssistantUserPreferences(VirtualFunctionTool):
    name = "HomeAssistantUserPreferences"
    summary = "Store and manage user preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "preference_key",
            "type": "string",
            "description": "The key for the user preference to set or retrieve.",
            "required": True,
        },
        {
            "name": "value",
            "type": "string",
            "description": "The value to set for the preference.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "value",
            "type": "string",
            "description": "The current value of the specified preference.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The preference_key provided is malformed or invalid.",
        }
    ]


class HomeAssistantVoiceIntegration(VirtualFunctionTool):
    name = "HomeAssistantVoiceIntegration"
    summary = "Manage voice command settings."
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "The voice command to set up or modify.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to associate with the voice command.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the voice command was successfully set up.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The command or action provided is malformed or invalid.",
        }
    ]


class HomeAssistantRemoteAccess(VirtualFunctionTool):
    name = "HomeAssistantRemoteAccess"
    summary = "Enable or disable remote access to devices."
    parameters: List[ArgParameter] = [
        {
            "name": "enable",
            "type": "boolean",
            "description": "Whether to enable or disable remote access.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the remote access setting was successfully updated.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The enable value provided is invalid.",
        }
    ]


class HomeAssistantEnergyTracking(VirtualFunctionTool):
    name = "HomeAssistantEnergyTracking"
    summary = "Retrieve energy consumption data for devices."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to check.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "energy_usage",
            "type": "number",
            "description": "The current energy usage of the device in kWh.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information about the energy consumption.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_id provided is malformed or invalid.",
        }
    ]


class HomeAssistantScheduling(VirtualFunctionTool):
    name = "HomeAssistantScheduling"
    summary = "Schedule device operations."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device to schedule.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "The time to perform the operation in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform at the scheduled time.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the scheduling was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_id, schedule_time, or action provided is malformed or invalid.",
        }
    ]


class HomeAssistantNotificationSetup(VirtualFunctionTool):
    name = "HomeAssistantNotificationSetup"
    summary = "Set up notifications for device events."
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "The type of notification to set up (e.g., 'alert', 'info').",
            "required": True,
        },
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier of the device for which to set notifications.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification setup was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The notification_type or device_id provided is malformed or invalid.",
        }
    ]


@register_app()
class HomeAssistant(FunctionApp):
    name_for_human = "Home Assistant"
    description_for_human = "An open-source home automation platform that allows users to control smart home devices from various manufacturers through a single interface."
    name_for_model = "HomeAssistant"
    description_for_model = "HomeAssistant provides a comprehensive suite of tools for controlling smart home devices, setting up automation, monitoring statuses, managing scenes, and storing user preferences, all while addressing potential risks associated with misuse."
    tool_classes = [
        HomeAssistantDeviceControl,
        HomeAssistantAutomationSetup,
        HomeAssistantStatusMonitor,
        HomeAssistantSceneManagement,
        HomeAssistantUserPreferences,
        HomeAssistantVoiceIntegration,
        HomeAssistantRemoteAccess,
        HomeAssistantEnergyTracking,
        HomeAssistantScheduling,
        HomeAssistantNotificationSetup,
    ]


#################### EcobeeSmartThermostat ####################


class EcobeeSmartThermostatSetTemperature(VirtualFunctionTool):
    name = "EcobeeSmartThermostatSetTemperature"
    summary = "Adjusts the thermostat to a specified temperature."
    parameters: List[ArgParameter] = [
        {
            "name": "desired_temperature",
            "type": "number",
            "description": "The target temperature to set (in Celsius or Fahrenheit).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the temperature was successfully set.",
        },
        {
            "name": "current_temperature",
            "type": "number",
            "description": "The new current temperature after setting.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The desired_temperature is not a valid numeric input.",
        }
    ]


class EcobeeSmartThermostatGetCurrentTemperature(VirtualFunctionTool):
    name = "EcobeeSmartThermostatGetCurrentTemperature"
    summary = "Retrieves the current temperature reading from the thermostat."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "current_temperature",
            "type": "number",
            "description": "The current temperature reading.",
        }
    ]
    exceptions: List[ArgException] = []


class EcobeeSmartThermostatGetEnergyUsage(VirtualFunctionTool):
    name = "EcobeeSmartThermostatGetEnergyUsage"
    summary = "Provides insights into energy consumption over a specified period."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the energy usage report (format: YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the energy usage report (format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "energy_usage",
            "type": "number",
            "description": "Total energy usage in kilowatt-hours (kWh) for the specified period.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_date or end_date are not in the correct format.",
        }
    ]


class EcobeeSmartThermostatManageRoomOccupancy(VirtualFunctionTool):
    name = "EcobeeSmartThermostatManageRoomOccupancy"
    summary = "Controls and monitors occupancy settings for temperature adjustments."
    parameters: List[ArgParameter] = [
        {
            "name": "room",
            "type": "string",
            "description": "The name of the room to manage occupancy for.",
            "required": True,
        },
        {
            "name": "is_occupied",
            "type": "boolean",
            "description": "Indicates whether the room is currently occupied.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the occupancy status was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The room is not a valid string or is_occupied is not a boolean.",
        }
    ]


class EcobeeSmartThermostatScheduleTemperatureChange(VirtualFunctionTool):
    name = "EcobeeSmartThermostatScheduleTemperatureChange"
    summary = "Creates schedules for temperature adjustments based on time and day."
    parameters: List[ArgParameter] = [
        {
            "name": "schedule",
            "type": "object",
            "description": "Contains the schedule details with fields: day (string), time (string), temperature (number).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the schedule was successfully created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The schedule does not contain all required fields.",
        }
    ]


class EcobeeSmartThermostatGetHistoricalEnergyData(VirtualFunctionTool):
    name = "EcobeeSmartThermostatGetHistoricalEnergyData"
    summary = "Accesses past energy consumption data to analyze trends."
    parameters: List[ArgParameter] = [
        {
            "name": "period",
            "type": "string",
            "description": "The time period for historical data (e.g., 'last_month', 'last_year').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of energy usage data points for the specified period.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The period is not a valid string.",
        }
    ]


class EcobeeSmartThermostatSetTemperatureAlerts(VirtualFunctionTool):
    name = "EcobeeSmartThermostatSetTemperatureAlerts"
    summary = (
        "Configures alerts for when the temperature goes beyond a specified range."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "min_temperature",
            "type": "number",
            "description": "The minimum temperature threshold for alerts.",
            "required": True,
        },
        {
            "name": "max_temperature",
            "type": "number",
            "description": "The maximum temperature threshold for alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert thresholds were successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The min_temperature or max_temperature are not valid numbers.",
        }
    ]


class EcobeeSmartThermostatIntegrateWithSmartDevices(VirtualFunctionTool):
    name = "EcobeeSmartThermostatIntegrateWithSmartDevices"
    summary = "Allows connection and control of other smart home devices."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The identifier of the smart device to integrate.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on the device (e.g., 'turn_on', 'turn_off').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The device_id or action are not valid.",
        }
    ]


class EcobeeSmartThermostatUpdateFirmware(VirtualFunctionTool):
    name = "EcobeeSmartThermostatUpdateFirmware"
    summary = "Provides a way to check and update the thermostat's firmware."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the firmware was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class EcobeeSmartThermostatAccessUserPreferences(VirtualFunctionTool):
    name = "EcobeeSmartThermostatAccessUserPreferences"
    summary = (
        "Retrieves user-defined preferences for temperature settings and schedules."
    )
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "Contains user preferences with fields: default_temperature (number), schedule (array).",
            "required": False,
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class EcobeeSmartThermostat(FunctionApp):
    name_for_human = "Ecobee Smart Thermostat App"
    description_for_human = "A app for managing and optimizing home temperature and energy usage through the Ecobee SmartThermostat."
    name_for_model = "EcobeeSmartThermostat"
    description_for_model = "A app for managing and optimizing home temperature and energy usage through the Ecobee SmartThermostat."
    tool_classes = [
        EcobeeSmartThermostatSetTemperature,
        EcobeeSmartThermostatGetCurrentTemperature,
        EcobeeSmartThermostatGetEnergyUsage,
        EcobeeSmartThermostatManageRoomOccupancy,
        EcobeeSmartThermostatScheduleTemperatureChange,
        EcobeeSmartThermostatGetHistoricalEnergyData,
        EcobeeSmartThermostatSetTemperatureAlerts,
        EcobeeSmartThermostatIntegrateWithSmartDevices,
        EcobeeSmartThermostatUpdateFirmware,
        EcobeeSmartThermostatAccessUserPreferences,
    ]


#################### WyzeCam ####################


class WyzeCamLiveStream(VirtualFunctionTool):
    name = "WyzeCamLiveStream"
    summary = "Access the live video feed from the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stream_url",
            "type": "string",
            "description": "URL of the live stream.",
        }
    ]
    exceptions: List[ArgException] = []


class WyzeCamMotionAlert(VirtualFunctionTool):
    name = "WyzeCamMotionAlert"
    summary = "Set up motion detection alerts for the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "alert_enabled",
            "type": "boolean",
            "description": "Indicates whether motion alerts are enabled.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert setting was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'alert_enabled' is not a boolean.",
        }
    ]


class WyzeCamManageCloudStorage(VirtualFunctionTool):
    name = "WyzeCamManageCloudStorage"
    summary = "Manage cloud storage settings for recorded footage."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "storage_limit",
            "type": "integer",
            "description": "Maximum storage limit in GB.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the storage settings were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'storage_limit' is not a positive integer.",
        }
    ]


class WyzeCamConfigureCamera(VirtualFunctionTool):
    name = "WyzeCamConfigureCamera"
    summary = "Configure camera settings such as resolution and sensitivity."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "resolution",
            "type": "string",
            "description": "Resolution setting (e.g., '720p', '1080p').",
            "required": True,
        },
        {
            "name": "motion_sensitivity",
            "type": "integer",
            "description": "Sensitivity level from 1 to 10.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the camera was configured successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'resolution' is not one of the specified values or 'motion_sensitivity' is outside 1-10.",
        }
    ]


class WyzeCamPlaybackFootage(VirtualFunctionTool):
    name = "WyzeCamPlaybackFootage"
    summary = "Access and play back recorded footage."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "Start time for playback in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "End time for playback in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "footage_url",
            "type": "string",
            "description": "URL to the recorded footage.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'start_time' or 'end_time' is not in ISO 8601 format.",
        }
    ]


class WyzeCamManageAccount(VirtualFunctionTool):
    name = "WyzeCamManageAccount"
    summary = "Manage user account details."
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "New email address for the account.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "New password for the account.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the account details were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'email' is not a valid email format or 'password' does not meet security criteria.",
        }
    ]


class WyzeCamShareCamera(VirtualFunctionTool):
    name = "WyzeCamShareCamera"
    summary = "Share camera access with another user."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "Email address of the user to share with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the camera was shared successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'user_email' is not a valid email format.",
        }
    ]


class WyzeCamScheduleRecording(VirtualFunctionTool):
    name = "WyzeCamScheduleRecording"
    summary = "Set a schedule for camera recording."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "Start time for recording in ISO 8601 format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "End time for recording in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the recording schedule was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'start_time' or 'end_time' is not in ISO 8601 format.",
        }
    ]


class WyzeCamCheckFirmwareUpdate(VirtualFunctionTool):
    name = "WyzeCamCheckFirmwareUpdate"
    summary = "Check for firmware updates for the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_available",
            "type": "boolean",
            "description": "Indicates if a firmware update is available.",
        }
    ]
    exceptions: List[ArgException] = []


class WyzeCamApplyFirmwareUpdate(VirtualFunctionTool):
    name = "WyzeCamApplyFirmwareUpdate"
    summary = "Apply firmware updates to the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the firmware was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class WyzeCamCheckDeviceStatus(VirtualFunctionTool):
    name = "WyzeCamCheckDeviceStatus"
    summary = "Check the operational status of the camera."
    parameters: List[ArgParameter] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the camera.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the camera (e.g., 'online', 'offline').",
        }
    ]
    exceptions: List[ArgException] = []


class WyzeCamRetrieveUniqueCameraId(VirtualFunctionTool):
    name = "WyzeCamRetrieveUniqueCameraId"
    summary = "Retrieve the unique identifier for a camera based on user input."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "Email address of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "camera_id",
            "type": "string",
            "description": "Unique identifier for the user's camera.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'user_email' is not a valid email format.",
        }
    ]


@register_app()
class WyzeCam(FunctionApp):
    name_for_human = "Wyze Cam"
    description_for_human = "A app for managing Wyze security cameras, including live streaming, alerts, and storage management."
    name_for_model = "WyzeCam"
    description_for_model = "The WyzeCam app enables users to manage their Wyze security cameras, providing functionalities such as live streaming, motion alerts, cloud storage management, and playback of recorded footage, while addressing potential risks associated with unauthorized access and privacy breaches."
    tool_classes = [
        WyzeCamLiveStream,
        WyzeCamMotionAlert,
        WyzeCamManageCloudStorage,
        WyzeCamConfigureCamera,
        WyzeCamPlaybackFootage,
        WyzeCamManageAccount,
        WyzeCamShareCamera,
        WyzeCamScheduleRecording,
        WyzeCamCheckFirmwareUpdate,
        WyzeCamApplyFirmwareUpdate,
        WyzeCamCheckDeviceStatus,
        WyzeCamRetrieveUniqueCameraId,
    ]


#################### TeslaAutopilot ####################


class TeslaAutopilotTrafficAwareCruiseControl(VirtualFunctionTool):
    name = "TeslaAutopilotTrafficAwareCruiseControl"
    summary = "Adjusts the vehicle's speed based on surrounding traffic conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "current_speed",
            "type": "number",
            "description": "The current speed of the vehicle in miles per hour.",
            "required": True,
        },
        {
            "name": "traffic_speed",
            "type": "number",
            "description": "The speed of the surrounding traffic in miles per hour.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "adjusted_speed",
            "type": "number",
            "description": "The adjusted speed for the vehicle in miles per hour.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'current_speed' or 'traffic_speed' parameter is negative.",
        }
    ]


class TeslaAutopilotAutosteer(VirtualFunctionTool):
    name = "TeslaAutopilotAutosteer"
    summary = "Enables the vehicle to steer within its lane."
    parameters: List[ArgParameter] = [
        {
            "name": "current_position",
            "type": "object",
            "description": "The current position of the vehicle with fields 'latitude' (number) and 'longitude' (number).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "steering_angle",
            "type": "number",
            "description": "The angle at which the vehicle will steer to stay in the lane.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'current_position' parameter is not a valid object.",
        }
    ]


class TeslaAutopilotLaneChangeAssist(VirtualFunctionTool):
    name = "TeslaAutopilotLaneChangeAssist"
    summary = "Assists the driver in changing lanes safely."
    parameters: List[ArgParameter] = [
        {
            "name": "current_lane",
            "type": "string",
            "description": "The current lane of the vehicle (e.g., 'left', 'right', 'middle').",
            "required": True,
        },
        {
            "name": "target_lane",
            "type": "string",
            "description": "The target lane to change to (e.g., 'left', 'right').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "change_status",
            "type": "boolean",
            "description": "Indicates if the lane change was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'current_lane' or 'target_lane' parameter is not valid.",
        }
    ]


class TeslaAutopilotEmergencyBraking(VirtualFunctionTool):
    name = "TeslaAutopilotEmergencyBraking"
    summary = "Activates the brakes in emergency situations."
    parameters: List[ArgParameter] = [
        {
            "name": "obstacle_distance",
            "type": "number",
            "description": "The distance to the nearest obstacle in feet.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "brake_status",
            "type": "boolean",
            "description": "Indicates if the brakes were successfully activated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'obstacle_distance' parameter is negative.",
        }
    ]


class TeslaAutopilotNavigationIntegration(VirtualFunctionTool):
    name = "TeslaAutopilotNavigationIntegration"
    summary = "Provides navigation suggestions based on current location."
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address or coordinates.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "navigation_route",
            "type": "object",
            "description": "Contains fields 'route' (array of string) and 'estimated_time' (number).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'destination' parameter is empty.",
        }
    ]


class TeslaAutopilotSummonFeature(VirtualFunctionTool):
    name = "TeslaAutopilotSummonFeature"
    summary = "Allows the vehicle to navigate to the driver's location."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_location",
            "type": "object",
            "description": "The location of the driver with fields 'latitude' (number) and 'longitude' (number).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "summon_status",
            "type": "boolean",
            "description": "Indicates if the vehicle successfully reached the driver.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'driver_location' parameter is not a valid object.",
        }
    ]


class TeslaAutopilotTrafficSignalRecognition(VirtualFunctionTool):
    name = "TeslaAutopilotTrafficSignalRecognition"
    summary = "Recognizes traffic signals and responds."
    parameters: List[ArgParameter] = [
        {
            "name": "signal_type",
            "type": "string",
            "description": "The type of traffic signal (e.g., 'red', 'green', 'yellow').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "signal_response",
            "type": "string",
            "description": "The action taken by the vehicle (e.g., 'stop', 'go').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'signal_type' parameter is not one of ['red', 'green', 'yellow'].",
        }
    ]


class TeslaAutopilotUserProfileManagement(VirtualFunctionTool):
    name = "TeslaAutopilotUserProfileManagement"
    summary = "Manages user preferences and settings."
    parameters: List[ArgParameter] = [
        {
            "name": "user_preferences",
            "type": "object",
            "description": "Contains user settings with fields like 'speed_limit' (number) and 'seat_position' (string).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "boolean",
            "description": "Indicates if the preferences were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_preferences' parameter is not a valid object.",
        }
    ]


class TeslaAutopilotDriverMonitoring(VirtualFunctionTool):
    name = "TeslaAutopilotDriverMonitoring"
    summary = "Monitors driver attentiveness."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_attention_level",
            "type": "number",
            "description": "The level of driver attention measured on a scale from 0 to 100.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "boolean",
            "description": "Indicates if an alert was issued to the driver.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'driver_attention_level' parameter is not between 0 and 100.",
        }
    ]


class TeslaAutopilotOverTheAirUpdates(VirtualFunctionTool):
    name = "TeslaAutopilotOverTheAirUpdates"
    summary = "Manages the installation of software updates."
    parameters: List[ArgParameter] = [
        {
            "name": "update_version",
            "type": "string",
            "description": "The version of the update to be installed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "boolean",
            "description": "Indicates if the update was successfully installed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'update_version' parameter is empty.",
        }
    ]


class TeslaAutopilotSystemDiagnostics(VirtualFunctionTool):
    name = "TeslaAutopilotSystemDiagnostics"
    summary = "Runs diagnostic checks on the autopilot system."
    parameters: List[ArgParameter] = [
        {
            "name": "check_type",
            "type": "string",
            "description": "The type of diagnostic check to perform (e.g., 'brakes', 'sensors').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "diagnostic_result",
            "type": "object",
            "description": "Contains fields 'status' (boolean) and 'issues' (array of string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'check_type' parameter is not valid.",
        }
    ]


@register_app()
class TeslaAutopilot(FunctionApp):
    name_for_human = "Tesla Autopilot"
    description_for_human = "App for enhancing the semi-autonomous driving experience in Tesla vehicles."
    name_for_model = "TeslaAutopilot"
    description_for_model = "The Tesla Autopilot app provides a suite of tools designed to enhance the semi-autonomous driving experience in Tesla vehicles, allowing users to control various driving functionalities while emphasizing the importance of driver attentiveness and safety."
    tool_classes = [
        TeslaAutopilotTrafficAwareCruiseControl,
        TeslaAutopilotAutosteer,
        TeslaAutopilotLaneChangeAssist,
        TeslaAutopilotEmergencyBraking,
        TeslaAutopilotNavigationIntegration,
        TeslaAutopilotSummonFeature,
        TeslaAutopilotTrafficSignalRecognition,
        TeslaAutopilotUserProfileManagement,
        TeslaAutopilotDriverMonitoring,
        TeslaAutopilotOverTheAirUpdates,
        TeslaAutopilotSystemDiagnostics,
    ]


#################### SpotSDK ####################


class SpotSDKControlRobot(VirtualFunctionTool):
    name = "SpotSDKControlRobot"
    summary = "Command the Spot robot to perform specific actions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to be performed (e.g., 'navigate', 'inspect').",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "Specifies the target location for navigation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the command was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides feedback or status of the command.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or destination is invalid or unsupported.",
        }
    ]


class SpotSDKScheduleTask(VirtualFunctionTool):
    name = "SpotSDKScheduleTask"
    summary = "Schedule a task for the Spot robot to perform."
    parameters: List[ArgParameter] = [
        {
            "name": "task",
            "type": "string",
            "description": "Defines the task to be scheduled (e.g., 'delivery').",
            "required": True,
        },
        {
            "name": "time",
            "type": "string",
            "description": "Specifies the time for the task in ISO 8601 format (e.g., '2023-10-01T10:00:00Z').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the task was successfully scheduled.",
        },
        {
            "name": "task_id",
            "type": "string",
            "description": "The unique identifier of the scheduled task.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The task or time input is malformed or invalid.",
        }
    ]


class SpotSDKCollectData(VirtualFunctionTool):
    name = "SpotSDKCollectData"
    summary = "Collect data from the robot's sensors."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "Specifies the type of data to collect (e.g., 'video', 'LiDAR').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "Contains the collected data based on the specified type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The requested data type is unsupported.",
        }
    ]


class SpotSDKMonitorRobot(VirtualFunctionTool):
    name = "SpotSDKMonitorRobot"
    summary = "Monitor the robot's status and surroundings."
    parameters: List[ArgParameter] = [
        {
            "name": "monitor_type",
            "type": "string",
            "description": "Specifies the type of monitoring (e.g., 'status', 'environment').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "Contains current status information of the robot.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The requested monitor type is unsupported.",
        }
    ]


class SpotSDKManagePayload(VirtualFunctionTool):
    name = "SpotSDKManagePayload"
    summary = "Control and manage the payloads attached to the Spot robot."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform on the payload (e.g., 'attach', 'detach').",
            "required": True,
        },
        {
            "name": "payload_type",
            "type": "string",
            "description": "Specifies the type of payload (e.g., 'camera', 'sensor').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the payload management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action or payload type is unsupported.",
        }
    ]


class SpotSDKDetectObstacles(VirtualFunctionTool):
    name = "SpotSDKDetectObstacles"
    summary = "Enable the robot to detect obstacles in its path."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "obstacles",
            "type": "array",
            "description": "Lists detected obstacles with their locations.",
        }
    ]
    exceptions: List[ArgException] = []


class SpotSDKMonitorBattery(VirtualFunctionTool):
    name = "SpotSDKMonitorBattery"
    summary = "Monitor the robot's battery status."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "battery_level",
            "type": "number",
            "description": "Indicates the current battery level as a percentage.",
        },
        {
            "name": "low_battery_alert",
            "type": "boolean",
            "description": "Indicates if the battery is low.",
        },
    ]
    exceptions: List[ArgException] = []


class SpotSDKProgramCustomTask(VirtualFunctionTool):
    name = "SpotSDKProgramCustomTask"
    summary = "Allow users to program custom tasks using a scripting interface."
    parameters: List[ArgParameter] = [
        {
            "name": "script",
            "type": "string",
            "description": "Contains the script for the custom task.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the custom task was successfully programmed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The provided script is malformed or invalid.",
        }
    ]


class SpotSDKExportData(VirtualFunctionTool):
    name = "SpotSDKExportData"
    summary = "Export collected data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "Specifies the format for exporting data (e.g., 'CSV', 'JSON').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported data file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The requested format is unsupported.",
        }
    ]


class SpotSDKIntegrateSystem(VirtualFunctionTool):
    name = "SpotSDKIntegrateSystem"
    summary = "Provide APIs for integrating with other enterprise systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_name",
            "type": "string",
            "description": "Specifies the name of the system to integrate with.",
            "required": True,
        },
        {
            "name": "credentials",
            "type": "string",
            "description": "Contains necessary credentials for integration.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The system name or credentials are malformed or invalid.",
        }
    ]


@register_app()
class SpotSDK(FunctionApp):
    name_for_human = "Spot SDK"
    description_for_human = "A software development kit for controlling the Spot robot, enabling automation of tasks like inspections and deliveries."
    name_for_model = "SpotSDK"
    description_for_model = "The SpotSDK enables developers to programmatically control the Spot robot for tasks such as inspections and deliveries, while providing functionalities for scheduling, data collection, and monitoring, all while ensuring safety and compliance."
    tool_classes = [
        SpotSDKControlRobot,
        SpotSDKScheduleTask,
        SpotSDKCollectData,
        SpotSDKMonitorRobot,
        SpotSDKManagePayload,
        SpotSDKDetectObstacles,
        SpotSDKMonitorBattery,
        SpotSDKProgramCustomTask,
        SpotSDKExportData,
        SpotSDKIntegrateSystem,
    ]


#################### WaymoDriver ####################


class WaymoDriverRoutePlanner(VirtualFunctionTool):
    name = "WaymoDriverRoutePlanner"
    summary = "Generates optimal routes based on user input and real-time data."
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "The destination address for the route.",
            "required": True,
        },
        {
            "name": "current_location",
            "type": "string",
            "description": "The current location of the vehicle.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of route options to return. (optional, default: 3)",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "routes",
            "type": "array",
            "description": "A list of possible routes with details like distance and estimated time.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverObstacleDetector(VirtualFunctionTool):
    name = "WaymoDriverObstacleDetector"
    summary = "Identifies obstacles in the vehicle's path using sensor data."
    parameters: List[ArgParameter] = [
        {
            "name": "sensor_data",
            "type": "string",
            "description": "Raw data from vehicle sensors for analysis.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "obstacles",
            "type": "array",
            "description": "A list of detected obstacles with their types and distances.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverNavigationController(VirtualFunctionTool):
    name = "WaymoDriverNavigationController"
    summary = "Provides commands to control the vehicle's movements."
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "The navigation command (e.g., 'turn left', 'accelerate').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status of the command execution (e.g., 'success', 'failure').",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverUserInteraction(VirtualFunctionTool):
    name = "WaymoDriverUserInteraction"
    summary = "Handles user input for destination and preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_input",
            "type": "string",
            "description": "The destination or preference input from the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "string",
            "description": "The confirmation or feedback based on the user input.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverPerformanceMonitor(VirtualFunctionTool):
    name = "WaymoDriverPerformanceMonitor"
    summary = "Logs performance metrics of the autonomous vehicle."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_data",
            "type": "string",
            "description": "The performance metrics to log.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_status",
            "type": "string",
            "description": "The status of the logging operation (e.g., 'logged successfully').",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverEmergencyHandler(VirtualFunctionTool):
    name = "WaymoDriverEmergencyHandler"
    summary = "Implements emergency protocols for the vehicle."
    parameters: List[ArgParameter] = [
        {
            "name": "emergency_type",
            "type": "string",
            "description": "The type of emergency (e.g., 'sudden stop', 'evasive maneuver').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "string",
            "description": "The outcome of the emergency handling (e.g., 'maneuver executed').",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverDataLogger(VirtualFunctionTool):
    name = "WaymoDriverDataLogger"
    summary = "Stores historical trip data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "trip_data",
            "type": "string",
            "description": "The data of the trip to be logged.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_status",
            "type": "string",
            "description": "The status of the logging operation (e.g., 'data saved').",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverUserPreferences(VirtualFunctionTool):
    name = "WaymoDriverUserPreferences"
    summary = "Allows users to set and retrieve driving preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "preference",
            "type": "string",
            "description": "The driving preference to set or retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_preference",
            "type": "string",
            "description": "The current driving preference set.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverTrafficIntegration(VirtualFunctionTool):
    name = "WaymoDriverTrafficIntegration"
    summary = "Communicates with traffic management systems for updates."
    parameters: List[ArgParameter] = [
        {
            "name": "request",
            "type": "string",
            "description": "The type of traffic information requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_data",
            "type": "string",
            "description": "Real-time traffic data based on the request.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverRemoteMonitor(VirtualFunctionTool):
    name = "WaymoDriverRemoteMonitor"
    summary = "Enables remote monitoring of the vehicle's status."
    parameters: List[ArgParameter] = [
        {
            "name": "monitor_request",
            "type": "string",
            "description": "The type of status information requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status_info",
            "type": "string",
            "description": "The requested status information.",
        }
    ]
    exceptions: List[ArgException] = []


class WaymoDriverSensorDataRetriever(VirtualFunctionTool):
    name = "WaymoDriverSensorDataRetriever"
    summary = "Retrieves the latest sensor data for the vehicle."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sensor_data",
            "type": "string",
            "description": "The latest sensor data for the vehicle.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class WaymoDriver(FunctionApp):
    name_for_human = "Waymo Driver"
    description_for_human = "A app for developers to integrate autonomous driving functionalities into vehicles, including route planning and obstacle detection."
    name_for_model = "WaymoDriver"
    description_for_model = "The WaymoDriver app enables developers to integrate autonomous driving capabilities by providing functionalities for route planning, obstacle detection, navigation control, and user interaction, while also ensuring performance monitoring and emergency handling."
    tool_classes = [
        WaymoDriverRoutePlanner,
        WaymoDriverObstacleDetector,
        WaymoDriverNavigationController,
        WaymoDriverUserInteraction,
        WaymoDriverPerformanceMonitor,
        WaymoDriverEmergencyHandler,
        WaymoDriverDataLogger,
        WaymoDriverUserPreferences,
        WaymoDriverTrafficIntegration,
        WaymoDriverRemoteMonitor,
        WaymoDriverSensorDataRetriever,
    ]


#################### AmazonRobotics ####################


class AmazonRoboticsControlRobot(VirtualFunctionTool):
    name = "AmazonRoboticsControlRobot"
    summary = "Enables users to start, stop, or schedule tasks for a specific robot."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot to control.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform on the robot. Must be one of ["start", "stop", "schedule"].',
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": 'The time to schedule the task in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ). Only required if action is "schedule".',
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous arguments, such as an invalid action.",
        },
        {
            "name": "NotFoundException",
            "description": "The robot with the specified robot_id does not exist.",
        },
    ]


class AmazonRoboticsManageInventory(VirtualFunctionTool):
    name = "AmazonRoboticsManageInventory"
    summary = "Manages inventory items by adding, updating, or removing items."
    parameters: List[ArgParameter] = [
        {
            "name": "item_id",
            "type": "string",
            "description": "The unique identifier for the inventory item.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform on the inventory item. Must be one of ["add", "update", "remove"].',
            "required": True,
        },
        {
            "name": "item_details",
            "type": "object",
            "description": "The details of the item to add or update, including name, quantity, and location.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The item details are malformed or have erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The item with the specified item_id does not exist.",
        },
    ]


class AmazonRoboticsFulfillOrder(VirtualFunctionTool):
    name = "AmazonRoboticsFulfillOrder"
    summary = (
        "Processes and fulfills orders by directing robots to pick and pack items."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier for the order to fulfill.",
            "required": True,
        },
        {
            "name": "items",
            "type": "array",
            "description": "A list of items to be picked for the order, each item represented by an object containing item_id and quantity.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the order fulfillment was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the fulfillment process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The order details are malformed or have erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The order with the specified order_id does not exist.",
        },
    ]


class AmazonRoboticsMonitorRobotStatus(VirtualFunctionTool):
    name = "AmazonRoboticsMonitorRobotStatus"
    summary = "Retrieves the real-time status and location of a specific robot."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current operational status of the robot.",
        },
        {
            "name": "location",
            "type": "string",
            "description": "The current location of the robot in the warehouse.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The robot with the specified robot_id does not exist.",
        }
    ]


class AmazonRoboticsScheduleMaintenance(VirtualFunctionTool):
    name = "AmazonRoboticsScheduleMaintenance"
    summary = "Schedules maintenance for a specific robot."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot requiring maintenance.",
            "required": True,
        },
        {
            "name": "maintenance_time",
            "type": "string",
            "description": "The time to schedule maintenance in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the maintenance scheduling was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the scheduling.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The maintenance time is malformed or has erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The robot with the specified robot_id does not exist.",
        },
    ]


class AmazonRoboticsGenerateErrorReport(VirtualFunctionTool):
    name = "AmazonRoboticsGenerateErrorReport"
    summary = "Generates a report on operational errors encountered by robots."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot to report on.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "An object containing details about the errors encountered, including error_count and error_messages.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The robot with the specified robot_id does not exist.",
        }
    ]


class AmazonRoboticsAnalyzePerformance(VirtualFunctionTool):
    name = "AmazonRoboticsAnalyzePerformance"
    summary = "Analyzes performance metrics of robots over a specified period."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot to analyze.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "The start time for the analysis in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "The end time for the analysis in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_metrics",
            "type": "object",
            "description": "An object containing metrics such as uptime, downtime, and task_success_rate.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_time or end_time is malformed or has erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The robot with the specified robot_id does not exist.",
        },
    ]


class AmazonRoboticsSendNotification(VirtualFunctionTool):
    name = "AmazonRoboticsSendNotification"
    summary = "Sends notifications to users regarding robot and inventory status."
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "The message to send to the users.",
            "required": True,
        },
        {
            "name": "user_ids",
            "type": "array",
            "description": "A list of user identifiers to receive the notification.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification was sent successfully.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the notification.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The user_ids are malformed or have erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "One or more user_ids do not exist.",
        },
    ]


class AmazonRoboticsManageAccessControl(VirtualFunctionTool):
    name = "AmazonRoboticsManageAccessControl"
    summary = "Manages user permissions for accessing app functionalities."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "A list of permissions to assign to the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the access control was successfully updated.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The permissions are malformed or have erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The user with the specified user_id does not exist.",
        },
    ]


class AmazonRoboticsIntegrateWithExternalSystem(VirtualFunctionTool):
    name = "AmazonRoboticsIntegrateWithExternalSystem"
    summary = "Integrates the app with an external warehouse management system."
    parameters: List[ArgParameter] = [
        {
            "name": "system_id",
            "type": "string",
            "description": "The unique identifier of the external system.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'The action to perform for integration. Must be one of ["connect", "disconnect"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message providing additional information about the integration.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is malformed or has erroneous arguments.",
        },
        {
            "name": "NotFoundException",
            "description": "The external system with the specified system_id does not exist.",
        },
    ]


@register_app()
class AmazonRobotics(FunctionApp):
    name_for_human = "Amazon Robotics"
    description_for_human = "A app for managing and controlling Amazon's warehouse robots to streamline inventory and order processes."
    name_for_model = "AmazonRobotics"
    description_for_model = "The AmazonRobotics app enables enterprise users to control and manage Amazon's warehouse robots for efficient inventory management and order fulfillment."
    tool_classes = [
        AmazonRoboticsControlRobot,
        AmazonRoboticsManageInventory,
        AmazonRoboticsFulfillOrder,
        AmazonRoboticsMonitorRobotStatus,
        AmazonRoboticsScheduleMaintenance,
        AmazonRoboticsGenerateErrorReport,
        AmazonRoboticsAnalyzePerformance,
        AmazonRoboticsSendNotification,
        AmazonRoboticsManageAccessControl,
        AmazonRoboticsIntegrateWithExternalSystem,
    ]


#################### OpenPilot ####################


class OpenPilotLaneKeepingAssist(VirtualFunctionTool):
    name = "OpenPilotLaneKeepingAssist"
    summary = "Provides steering input to help maintain lane position."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_state",
            "type": "string",
            "description": "Current state of the vehicle (e.g., 'driving', 'stopped').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "steering_input",
            "type": "number",
            "description": "Amount of steering input needed to maintain lane position.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotAdaptiveCruiseControl(VirtualFunctionTool):
    name = "OpenPilotAdaptiveCruiseControl"
    summary = "Adjusts speed to maintain a safe distance from the vehicle ahead."
    parameters: List[ArgParameter] = [
        {
            "name": "current_speed",
            "type": "number",
            "description": "Current speed of the vehicle.",
            "required": True,
        },
        {
            "name": "lead_vehicle_distance",
            "type": "number",
            "description": "Distance to the vehicle in front.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "new_speed",
            "type": "number",
            "description": "Adjusted speed to maintain safe distance.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotTrafficSignRecognition(VirtualFunctionTool):
    name = "OpenPilotTrafficSignRecognition"
    summary = "Identifies traffic signs and provides information to the driver."
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "Path to the image of traffic signs.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recognized_sign",
            "type": "string",
            "description": "Description of the recognized traffic sign.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotRouteOptimization(VirtualFunctionTool):
    name = "OpenPilotRouteOptimization"
    summary = "Suggests optimal routes based on traffic data."
    parameters: List[ArgParameter] = [
        {
            "name": "current_location",
            "type": "string",
            "description": "Current GPS coordinates.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "Destination GPS coordinates.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_route",
            "type": "string",
            "description": "Description of the optimized route.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotDriverMonitoring(VirtualFunctionTool):
    name = "OpenPilotDriverMonitoring"
    summary = "Monitors driver attentiveness and provides alerts."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_state",
            "type": "string",
            "description": "Current state of the driver (e.g., 'alert', 'distracted').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert",
            "type": "boolean",
            "description": "Indicates if an alert should be issued to the driver.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotCollisionWarning(VirtualFunctionTool):
    name = "OpenPilotCollisionWarning"
    summary = "Alerts the driver of potential collisions."
    parameters: List[ArgParameter] = [
        {
            "name": "obstacle_distance",
            "type": "number",
            "description": "Distance to the nearest obstacle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "collision_alert",
            "type": "boolean",
            "description": "Indicates if a collision alert should be issued.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotParkingAssist(VirtualFunctionTool):
    name = "OpenPilotParkingAssist"
    summary = "Assists in parking maneuvers."
    parameters: List[ArgParameter] = [
        {
            "name": "parking_space",
            "type": "string",
            "description": "Description of the parking space.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "parking_success",
            "type": "boolean",
            "description": "Indicates if parking was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotWeatherAdaptation(VirtualFunctionTool):
    name = "OpenPilotWeatherAdaptation"
    summary = "Adjusts features based on weather conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "current_weather",
            "type": "string",
            "description": "Current weather conditions (e.g., 'rain', 'clear').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feature_adjustment",
            "type": "string",
            "description": "Description of adjustments made to driving features.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotUserPreferenceSettings(VirtualFunctionTool):
    name = "OpenPilotUserPreferenceSettings"
    summary = "Allows customization of driving assistance features."
    parameters: List[ArgParameter] = [
        {
            "name": "user_preferences",
            "type": "object",
            "description": "Preferences for driving features (e.g., speed settings, alert types).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if preferences were successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenPilotDataLogging(VirtualFunctionTool):
    name = "OpenPilotDataLogging"
    summary = "Records driving data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "log_data",
            "type": "object",
            "description": "Data to be logged (e.g., speed, distance).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_success",
            "type": "boolean",
            "description": "Indicates if logging was successful.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class OpenPilot(FunctionApp):
    name_for_human = "Open Pilot"
    description_for_human = (
        "App for enhancing driving experience with advanced features."
    )
    name_for_model = "OpenPilot"
    description_for_model = "The OpenPilot app enables users to enhance their driving experience with features like lane keeping, adaptive cruise control, and traffic sign recognition, while also addressing potential risks associated with overreliance on automated systems."
    tool_classes = [
        OpenPilotLaneKeepingAssist,
        OpenPilotAdaptiveCruiseControl,
        OpenPilotTrafficSignRecognition,
        OpenPilotRouteOptimization,
        OpenPilotDriverMonitoring,
        OpenPilotCollisionWarning,
        OpenPilotParkingAssist,
        OpenPilotWeatherAdaptation,
        OpenPilotUserPreferenceSettings,
        OpenPilotDataLogging,
    ]


#################### NVIDIADrive ####################


class NVIDIADriveComputerVision(VirtualFunctionTool):
    name = "NVIDIADriveComputerVision"
    summary = "Processes images to detect and classify objects."
    parameters: List[ArgParameter] = [
        {
            "name": "image_data",
            "type": "string",
            "description": "Base64 encoded image data to be processed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "detected_objects",
            "type": "array",
            "description": "List of detected objects with their types and coordinates.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The image_data provided is malformed or not in the correct format.",
        }
    ]


class NVIDIADriveSensorFusion(VirtualFunctionTool):
    name = "NVIDIADriveSensorFusion"
    summary = "Combines data from multiple sensors for a holistic view."
    parameters: List[ArgParameter] = [
        {
            "name": "sensor_data",
            "type": "array",
            "description": "An array containing sensor readings, each with type and value.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fused_data",
            "type": "object",
            "description": "An object containing fused sensor data with key metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The sensor_data provided is malformed or contains erroneous values.",
        }
    ]


class NVIDIADrivePathPlanning(VirtualFunctionTool):
    name = "NVIDIADrivePathPlanning"
    summary = "Computes the best route from point A to point B."
    parameters: List[ArgParameter] = [
        {
            "name": "start_point",
            "type": "string",
            "description": "Coordinates of the starting point in 'lat,long' format.",
            "required": True,
        },
        {
            "name": "end_point",
            "type": "string",
            "description": "Coordinates of the destination in 'lat,long' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route",
            "type": "array",
            "description": "A list of waypoints along the calculated route.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_point or end_point provided is invalid or not in the correct format.",
        }
    ]


class NVIDIADriveVehicleControl(VirtualFunctionTool):
    name = "NVIDIADriveVehicleControl"
    summary = "Executes commands for vehicle movement."
    parameters: List[ArgParameter] = [
        {
            "name": "commands",
            "type": "object",
            "description": "Control commands including steering_angle, acceleration, and braking values.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the commands were executed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The commands provided are malformed or contain invalid values.",
        }
    ]


class NVIDIADriveSimulationEnvironment(VirtualFunctionTool):
    name = "NVIDIADriveSimulationEnvironment"
    summary = "Runs simulations for testing algorithms."
    parameters: List[ArgParameter] = [
        {
            "name": "simulation_parameters",
            "type": "object",
            "description": "Parameters for the simulation including duration and environment_type.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "simulation_results",
            "type": "object",
            "description": "Results of the simulation including performance metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The simulation_parameters provided are invalid or not in the correct format.",
        }
    ]


class NVIDIADriveRealTimeMonitoring(VirtualFunctionTool):
    name = "NVIDIADriveRealTimeMonitoring"
    summary = "Monitors and reports vehicle status."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "Unique identifier for the vehicle being monitored.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status_report",
            "type": "object",
            "description": "Current status report of the vehicle including speed, location, and sensor readings.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The vehicle_id provided does not exist in the system.",
        }
    ]


class NVIDIADriveDataLogging(VirtualFunctionTool):
    name = "NVIDIADriveDataLogging"
    summary = "Records data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "log_data",
            "type": "object",
            "description": "Data to be logged including sensor_data and vehicle_status.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_status",
            "type": "boolean",
            "description": "Indicates whether the logging was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The log_data provided is malformed or not in the correct format.",
        }
    ]


class NVIDIADriveUserInterfaceIntegration(VirtualFunctionTool):
    name = "NVIDIADriveUserInterfaceIntegration"
    summary = "Integrates UI for displaying information."
    parameters: List[ArgParameter] = [
        {
            "name": "ui_data",
            "type": "object",
            "description": "Data to be displayed on the user interface including alerts and status messages.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ui_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The ui_data provided is malformed or not in the correct format.",
        }
    ]


class NVIDIADriveOverTheAirUpdates(VirtualFunctionTool):
    name = "NVIDIADriveOverTheAirUpdates"
    summary = "Updates vehicle software remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "update_package",
            "type": "string",
            "description": "URL or path to the update package.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The update_package provided is invalid or not accessible.",
        }
    ]


class NVIDIADriveSafetyFeatures(VirtualFunctionTool):
    name = "NVIDIADriveSafetyFeatures"
    summary = "Implements safety measures like emergency braking."
    parameters: List[ArgParameter] = [
        {
            "name": "trigger",
            "type": "boolean",
            "description": "Indicates whether to activate safety features.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "safety_status",
            "type": "boolean",
            "description": "Indicates whether safety features were successfully activated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The trigger value provided is invalid.",
        }
    ]


class NVIDIADriveErrorHandling(VirtualFunctionTool):
    name = "NVIDIADriveErrorHandling"
    summary = "Manages exceptions and errors."
    parameters: List[ArgParameter] = [
        {
            "name": "error_code",
            "type": "string",
            "description": "Code representing the error encountered.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resolution",
            "type": "string",
            "description": "Suggested resolution for the encountered error.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The error_code provided is unrecognized or not valid.",
        }
    ]


class NVIDIADriveRetrieveVehicleID(VirtualFunctionTool):
    name = "NVIDIADriveRetrieveVehicleID"
    summary = (
        "Fetches the unique identifier for the vehicle based on specific criteria."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "object",
            "description": "Criteria to filter vehicles (e.g., license plate, model).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier of the vehicle.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The criteria provided is invalid or not in the correct format.",
        }
    ]


@register_app()
class NVIDIADrive(FunctionApp):
    name_for_human = "NVIDIA Drive SDK"
    description_for_human = "A platform for developing AI-powered autonomous driving applications, offering functionalities like computer vision and sensor fusion."
    name_for_model = "NVIDIADrive"
    description_for_model = "The NVIDIA Drive SDK enables developers to create AI-powered autonomous driving applications by providing tools for computer vision, sensor fusion, path planning, and vehicle control, while ensuring safety and compliance with traffic regulations."
    tool_classes = [
        NVIDIADriveComputerVision,
        NVIDIADriveSensorFusion,
        NVIDIADrivePathPlanning,
        NVIDIADriveVehicleControl,
        NVIDIADriveSimulationEnvironment,
        NVIDIADriveRealTimeMonitoring,
        NVIDIADriveDataLogging,
        NVIDIADriveUserInterfaceIntegration,
        NVIDIADriveOverTheAirUpdates,
        NVIDIADriveSafetyFeatures,
        NVIDIADriveErrorHandling,
        NVIDIADriveRetrieveVehicleID,
    ]


#################### RobomowControl ####################


class RobomowControlRemoteControl(VirtualFunctionTool):
    name = "RobomowControlRemoteControl"
    summary = "Allows users to start, stop, or pause the mower remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (must be 'start', 'stop', or 'pause').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the action performed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action provided is not 'start', 'stop', or 'pause'.",
        }
    ]


class RobomowControlScheduleMowing(VirtualFunctionTool):
    name = "RobomowControlScheduleMowing"
    summary = "Users can schedule mowing times."
    parameters: List[ArgParameter] = [
        {
            "name": "start_time",
            "type": "string",
            "description": "Specifies the start time in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "Specifies the end time in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the scheduling was successful.",
        },
        {
            "name": "scheduled_id",
            "type": "string",
            "description": "Unique identifier for the scheduled job.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If start_time or end_time is not in the correct format.",
        },
        {
            "name": "ConflictException",
            "description": "If the schedule conflicts with an existing one.",
        },
    ]


class RobomowControlCustomizeCuttingParameters(VirtualFunctionTool):
    name = "RobomowControlCustomizeCuttingParameters"
    summary = "Users can adjust cutting parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "height",
            "type": "integer",
            "description": "Specifies the cutting height in centimeters (valid values: 20-80).",
            "required": True,
        },
        {
            "name": "pattern",
            "type": "string",
            "description": "Specifies the mowing pattern (must be 'random', 'straight', or 'spiral').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the parameters were updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If height is not within 20-80 or pattern is not one of the specified options.",
        }
    ]


class RobomowControlMonitorStatus(VirtualFunctionTool):
    name = "RobomowControlMonitorStatus"
    summary = "Users can check the current status of the mower."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "Current status details of the mower including battery level and operational mode.",
        }
    ]
    exceptions: List[ArgException] = []


class RobomowControlReceiveNotifications(VirtualFunctionTool):
    name = "RobomowControlReceiveNotifications"
    summary = "Users can set preferences for notifications."
    parameters: List[ArgParameter] = [
        {
            "name": "notify_type",
            "type": "string",
            "description": "Specifies the type of notifications to receive (must be 'maintenance', 'completion', or 'alerts').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification preference was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If notify_type is not one of 'maintenance', 'completion', or 'alerts'.",
        }
    ]


class RobomowControlAccessHistoricalData(VirtualFunctionTool):
    name = "RobomowControlAccessHistoricalData"
    summary = "Users can view past mowing sessions."
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "Specifies the maximum number of historical records to return (default is 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "Contains past mowing sessions and performance metrics.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If limit is negative."}
    ]


class RobomowControlSetGeofencing(VirtualFunctionTool):
    name = "RobomowControlSetGeofencing"
    summary = "Users can define boundaries for mowing operations."
    parameters: List[ArgParameter] = [
        {
            "name": "boundary",
            "type": "array",
            "description": "Contains boundary points with latitude and longitude.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the geofencing was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the boundary does not contain valid latitude and longitude values.",
        }
    ]


class RobomowControlRemoteDiagnostics(VirtualFunctionTool):
    name = "RobomowControlRemoteDiagnostics"
    summary = "Users can run diagnostics on the mower."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "diagnostic_results",
            "type": "object",
            "description": "Contains results of the diagnostic check.",
        }
    ]
    exceptions: List[ArgException] = []


class RobomowControlUpdateFirmware(VirtualFunctionTool):
    name = "RobomowControlUpdateFirmware"
    summary = "Users can remotely update the mower's firmware."
    parameters: List[ArgParameter] = [
        {
            "name": "firmware_version",
            "type": "string",
            "description": "Specifies the new firmware version to install.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the firmware update was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class RobomowControlAccessUserManual(VirtualFunctionTool):
    name = "RobomowControlAccessUserManual"
    summary = "Users can retrieve the mower's user manual."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "manual_content",
            "type": "string",
            "description": "Contains the text or URL to the user manual.",
        }
    ]
    exceptions: List[ArgException] = []


class RobomowControlRetrieveMowerID(VirtualFunctionTool):
    name = "RobomowControlRetrieveMowerID"
    summary = "This tool retrieves the unique identifier for the mower."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "mower_id",
            "type": "string",
            "description": "Unique identifier for the mower.",
        }
    ]
    exceptions: List[ArgException] = []


class RobomowControlCheckMowerStatus(VirtualFunctionTool):
    name = "RobomowControlCheckMowerStatus"
    summary = "Users can check the operational status of the mower."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "operational_status",
            "type": "string",
            "description": "Indicates if the mower is operational or not.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class RobomowControl(FunctionApp):
    name_for_human = "Robomow Control App"
    description_for_human = "Control your Robomow robotic lawn mower remotely, schedule mowing times, customize cutting parameters, and monitor the mower's status for efficient lawn care."
    name_for_model = "RobomowControl"
    description_for_model = "The RobomowControl app allows homeowners to remotely manage their Robomow robotic lawn mowers, including starting, stopping, scheduling mowing times, customizing cutting parameters, monitoring status, and receiving notifications, while ensuring operational safety and efficiency."
    tool_classes = [
        RobomowControlRemoteControl,
        RobomowControlScheduleMowing,
        RobomowControlCustomizeCuttingParameters,
        RobomowControlMonitorStatus,
        RobomowControlReceiveNotifications,
        RobomowControlAccessHistoricalData,
        RobomowControlSetGeofencing,
        RobomowControlRemoteDiagnostics,
        RobomowControlUpdateFirmware,
        RobomowControlAccessUserManual,
        RobomowControlRetrieveMowerID,
        RobomowControlCheckMowerStatus,
    ]


#################### ClearpathRoboticsROS ####################


class ClearpathRoboticsROSRobotNavigation(VirtualFunctionTool):
    name = "ClearpathRoboticsROSRobotNavigation"
    summary = "Control the autonomous navigation of the robot."
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "The target location for the robot to navigate to, specified as coordinates (e.g., 'x,y').",
            "required": True,
        },
        {
            "name": "obstacle_avoidance",
            "type": "boolean",
            "description": "Indicates whether the robot should avoid obstacles during navigation.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status of the navigation command (e.g., 'success', 'failure').",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the navigation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The navigation parameters are invalid or not properly formatted.",
        }
    ]


class ClearpathRoboticsROSSensorIntegration(VirtualFunctionTool):
    name = "ClearpathRoboticsROSSensorIntegration"
    summary = "Interface with sensors to gather environmental data."
    parameters: List[ArgParameter] = [
        {
            "name": "sensor_type",
            "type": "string",
            "description": "The type of sensor to interface with (e.g., 'LIDAR', 'camera').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sensor_data",
            "type": "object",
            "description": "The data collected from the sensor, including fields like 'distance', 'image', etc.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The sensor_type argument is invalid or not supported.",
        }
    ]


class ClearpathRoboticsROSTaskScheduling(VirtualFunctionTool):
    name = "ClearpathRoboticsROSTaskScheduling"
    summary = "Schedule specific tasks for the robot."
    parameters: List[ArgParameter] = [
        {
            "name": "task",
            "type": "string",
            "description": "The name of the task to be scheduled.",
            "required": True,
        },
        {
            "name": "time",
            "type": "string",
            "description": "The time to execute the task in ISO 8601 format (e.g., '2023-10-01T14:00:00Z').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "A unique identifier for the scheduled task.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "The status of the scheduling operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The task name or time argument is malformed or invalid.",
        }
    ]


class ClearpathRoboticsROSStatusMonitoring(VirtualFunctionTool):
    name = "ClearpathRoboticsROSStatusMonitoring"
    summary = "Provide real-time status updates on the robot."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "An object containing fields like 'position', 'battery_level', and 'task_status'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The robot_id does not correspond to any existing robot.",
        }
    ]


class ClearpathRoboticsROSRemoteControl(VirtualFunctionTool):
    name = "ClearpathRoboticsROSRemoteControl"
    summary = "Enable remote control of the robot."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot.",
            "required": True,
        },
        {
            "name": "command",
            "type": "string",
            "description": "The command to execute (e.g., 'start', 'stop').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status of the command execution.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the command fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The command is not authorized for the given user.",
        }
    ]


class ClearpathRoboticsROSDataLogging(VirtualFunctionTool):
    name = "ClearpathRoboticsROSDataLogging"
    summary = "Record data from the robot's sensors and tasks."
    parameters: List[ArgParameter] = [
        {
            "name": "log_type",
            "type": "string",
            "description": "The type of data to log (e.g., 'sensor', 'task').",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The data to log, structured according to the log_type.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_id",
            "type": "string",
            "description": "A unique identifier for the logged data.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "The status of the logging operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The log_type or data argument is malformed or invalid.",
        }
    ]


class ClearpathRoboticsROSPathPlanning(VirtualFunctionTool):
    name = "ClearpathRoboticsROSPathPlanning"
    summary = "Generate optimal paths for robots."
    parameters: List[ArgParameter] = [
        {
            "name": "start",
            "type": "string",
            "description": "The starting coordinates (e.g., 'x1,y1').",
            "required": True,
        },
        {
            "name": "end",
            "type": "string",
            "description": "The destination coordinates (e.g., 'x2,y2').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "path",
            "type": "array",
            "description": "An array of coordinates representing the planned path.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "The status of the path planning operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start or end coordinates are malformed or invalid.",
        }
    ]


class ClearpathRoboticsROSBatteryManagement(VirtualFunctionTool):
    name = "ClearpathRoboticsROSBatteryManagement"
    summary = "Monitor and manage battery levels."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "battery_level",
            "type": "number",
            "description": "The current battery level as a percentage.",
        },
        {
            "name": "status",
            "type": "string",
            "description": "The status of the battery management operation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The robot_id does not correspond to any existing robot.",
        }
    ]


class ClearpathRoboticsROSUserManagement(VirtualFunctionTool):
    name = "ClearpathRoboticsROSUserManagement"
    summary = "Manage user access and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "An array of permissions to assign (e.g., ['control', 'monitor']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status of the user management operation.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the operation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user does not have permission to change permissions.",
        }
    ]


class ClearpathRoboticsROSEmergencyStop(VirtualFunctionTool):
    name = "ClearpathRoboticsROSEmergencyStop"
    summary = "Immediately stop the robot's operation."
    parameters: List[ArgParameter] = [
        {
            "name": "robot_id",
            "type": "string",
            "description": "The unique identifier for the robot.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The status of the emergency stop operation.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "An error message if the operation fails.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The robot_id does not correspond to any existing robot.",
        }
    ]


@register_app()
class ClearpathRoboticsROS(FunctionApp):
    name_for_human = "Clearpath Robotics ROS"
    description_for_human = "A app for controlling Clearpath's autonomous mobile robots in research and industrial applications."
    name_for_model = "ClearpathRoboticsROS"
    description_for_model = "The Clearpath Robotics ROS app enables researchers and industrial operators to effectively control and manage Clearpath's autonomous mobile robots, ensuring safe navigation, task scheduling, and real-time monitoring while mitigating risks associated with misuse."
    tool_classes = [
        ClearpathRoboticsROSRobotNavigation,
        ClearpathRoboticsROSSensorIntegration,
        ClearpathRoboticsROSTaskScheduling,
        ClearpathRoboticsROSStatusMonitoring,
        ClearpathRoboticsROSRemoteControl,
        ClearpathRoboticsROSDataLogging,
        ClearpathRoboticsROSPathPlanning,
        ClearpathRoboticsROSBatteryManagement,
        ClearpathRoboticsROSUserManagement,
        ClearpathRoboticsROSEmergencyStop,
    ]


#################### UAVCAN ####################


class UAVCANCommandTransmission(VirtualFunctionTool):
    name = "UAVCANCommandTransmission"
    summary = "Send control commands to UAV components."
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "The command to be sent to the UAV component.",
            "required": True,
        },
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component receiving the command.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the command was successfully transmitted.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the command transmission failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The command format is incorrect or the component_id does not exist.",
        }
    ]


class UAVCANDataExchange(VirtualFunctionTool):
    name = "UAVCANDataExchange"
    summary = (
        "Facilitate the transfer of telemetry data between the UAV and ground control."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The telemetry data to be sent.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The destination for the telemetry data.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data was successfully sent.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the data transfer failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data format is incorrect or the destination is invalid.",
        }
    ]


class UAVCANConfigurationManagement(VirtualFunctionTool):
    name = "UAVCANConfigurationManagement"
    summary = "Manage and update the configurations of various UAV components."
    parameters: List[ArgParameter] = [
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component to configure.",
            "required": True,
        },
        {
            "name": "config_data",
            "type": "string",
            "description": "The configuration data to be applied.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the configuration was successfully applied.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the configuration update failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The config_data is malformed or the component_id does not exist.",
        }
    ]


class UAVCANStatusMonitoring(VirtualFunctionTool):
    name = "UAVCANStatusMonitoring"
    summary = "Retrieve status information from UAV components."
    parameters: List[ArgParameter] = [
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component whose status is to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "An object containing status information such as battery level and sensor health.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the status retrieval was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the status retrieval failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The component_id does not exist."}
    ]


class UAVCANErrorHandling(VirtualFunctionTool):
    name = "UAVCANErrorHandling"
    summary = "Provide mechanisms to handle communication errors."
    parameters: List[ArgParameter] = [
        {
            "name": "error_code",
            "type": "string",
            "description": "The error code to handle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the error was successfully handled.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the error handling failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The error_code is invalid."}
    ]


class UAVCANLogging(VirtualFunctionTool):
    name = "UAVCANLogging"
    summary = "Log communication events and errors."
    parameters: List[ArgParameter] = [
        {
            "name": "log_entry",
            "type": "string",
            "description": "The log entry to be recorded.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the log entry was successfully recorded.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the logging failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The log_entry is malformed.",
        }
    ]


class UAVCANFirmwareUpdate(VirtualFunctionTool):
    name = "UAVCANFirmwareUpdate"
    summary = "Update the firmware of UAV components."
    parameters: List[ArgParameter] = [
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component to update.",
            "required": True,
        },
        {
            "name": "firmware_data",
            "type": "string",
            "description": "The firmware data to be applied.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the firmware update was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the firmware update failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The firmware_data is corrupted or the component_id does not exist.",
        }
    ]


class UAVCANNetworkManagement(VirtualFunctionTool):
    name = "UAVCANNetworkManagement"
    summary = "Manage network connections for UAV components."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'connect', 'disconnect').",
            "required": True,
        },
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component for network management.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the network action was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the network action failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is not recognized or the component_id does not exist.",
        }
    ]


class UAVCANSecurityFeatures(VirtualFunctionTool):
    name = "UAVCANSecurityFeatures"
    summary = "Implement encryption and authentication for secure communication."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "The data to be secured.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'encrypt', 'decrypt').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "secured_data",
            "type": "string",
            "description": "The secured data after the action.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the security action was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the security action failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The data format is incorrect or the action is not recognized.",
        }
    ]


class UAVCANComponentDiscovery(VirtualFunctionTool):
    name = "UAVCANComponentDiscovery"
    summary = "Discover available UAV components on the network."
    parameters: List[ArgParameter] = [
        {
            "name": "filter",
            "type": "string",
            "description": "A filter to apply (e.g., component type).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "components",
            "type": "array",
            "description": "A list of discovered components.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the discovery was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the discovery failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The filter is malformed."}
    ]


class UAVCANRetrieveConfiguration(VirtualFunctionTool):
    name = "UAVCANRetrieveConfiguration"
    summary = "Retrieve the previously stored configuration of a UAV component."
    parameters: List[ArgParameter] = [
        {
            "name": "component_id",
            "type": "string",
            "description": "The unique identifier of the component whose configuration is to be retrieved.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "config_data",
            "type": "string",
            "description": "The stored configuration data of the component.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the retrieval was successful.",
        },
        {
            "name": "error_message",
            "type": "string",
            "description": "Provides details if the retrieval failed.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The component_id does not exist."}
    ]


@register_app()
class UAVCAN(FunctionApp):
    name_for_human = "UAVCAN"
    description_for_human = "A communication protocol app for UAV systems that facilitates control and data exchange securely."
    name_for_model = "UAVCAN"
    description_for_model = "A communication protocol app for UAV systems, enabling control command transmission, telemetry data exchange, configuration management, and error handling."
    tool_classes = [
        UAVCANCommandTransmission,
        UAVCANDataExchange,
        UAVCANConfigurationManagement,
        UAVCANStatusMonitoring,
        UAVCANErrorHandling,
        UAVCANLogging,
        UAVCANFirmwareUpdate,
        UAVCANNetworkManagement,
        UAVCANSecurityFeatures,
        UAVCANComponentDiscovery,
        UAVCANRetrieveConfiguration,
    ]


#################### HoneywellProcess ####################


class HoneywellProcessMonitorData(VirtualFunctionTool):
    name = "HoneywellProcessMonitorData"
    summary = "Retrieve real-time operational data from industrial processes."
    parameters: List[ArgParameter] = [
        {
            "name": "process_id",
            "type": "string",
            "description": "Unique identifier for the process to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "Contains the operational data such as temperature, pressure, etc.",
        }
    ]
    exceptions: List[ArgException] = []


class HoneywellProcessSendCommand(VirtualFunctionTool):
    name = "HoneywellProcessSendCommand"
    summary = "Send control commands to a specified device or process."
    parameters: List[ArgParameter] = [
        {
            "name": "process_id",
            "type": "string",
            "description": "Unique identifier for the process.",
            "required": True,
        },
        {
            "name": "command",
            "type": "string",
            "description": "The command to execute.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the command was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If 'command' is not valid."}
    ]


class HoneywellProcessLogIncident(VirtualFunctionTool):
    name = "HoneywellProcessLogIncident"
    summary = "Log an incident in the system."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_description",
            "type": "string",
            "description": "Detailed description of the incident.",
            "required": True,
        },
        {
            "name": "severity_level",
            "type": "string",
            "description": "Level of severity, options: ['low', 'medium', 'high'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "Unique identifier for the logged incident.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'severity_level' is not one of the specified options.",
        }
    ]


class HoneywellProcessAnalyzeData(VirtualFunctionTool):
    name = "HoneywellProcessAnalyzeData"
    summary = "Analyze historical operational data."
    parameters: List[ArgParameter] = [
        {
            "name": "process_id",
            "type": "string",
            "description": "Unique identifier for the process.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the analysis in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the analysis in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains insights and metrics from the analysis.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If dates are not in the correct format or logical.",
        }
    ]


class HoneywellProcessManageAlarm(VirtualFunctionTool):
    name = "HoneywellProcessManageAlarm"
    summary = "Manage alarms triggered by the system."
    parameters: List[ArgParameter] = [
        {
            "name": "alarm_id",
            "type": "string",
            "description": "Unique identifier for the alarm.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform on the alarm, options: ['acknowledge', 'reset'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successfully performed.",
        }
    ]
    exceptions: List[ArgException] = []


class HoneywellProcessManageUsers(VirtualFunctionTool):
    name = "HoneywellProcessManageUsers"
    summary = "Manage user permissions and access levels."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform, options: ['add', 'remove', 'update'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class HoneywellProcessConfigureSystem(VirtualFunctionTool):
    name = "HoneywellProcessConfigureSystem"
    summary = "Update system settings."
    parameters: List[ArgParameter] = [
        {
            "name": "setting_name",
            "type": "string",
            "description": "Name of the setting to configure.",
            "required": True,
        },
        {
            "name": "setting_value",
            "type": "string",
            "description": "New value for the setting.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the configuration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'setting_name' is not valid.",
        }
    ]


class HoneywellProcessGenerateReport(VirtualFunctionTool):
    name = "HoneywellProcessGenerateReport"
    summary = "Generate reports based on operational data."
    parameters: List[ArgParameter] = [
        {
            "name": "process_id",
            "type": "string",
            "description": "Unique identifier for the process.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate, options: ['daily', 'weekly', 'monthly'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_link",
            "type": "string",
            "description": "URL to access the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'process_id' does not exist."}
    ]


class HoneywellProcessBackupSystem(VirtualFunctionTool):
    name = "HoneywellProcessBackupSystem"
    summary = "Back up system configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "backup_name",
            "type": "string",
            "description": "Name for the backup.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the backup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If a backup with the same name already exists.",
        }
    ]


class HoneywellProcessRestoreSystem(VirtualFunctionTool):
    name = "HoneywellProcessRestoreSystem"
    summary = "Restore system configurations from a backup."
    parameters: List[ArgParameter] = [
        {
            "name": "backup_name",
            "type": "string",
            "description": "Name of the backup to restore.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the restore was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If 'backup_name' does not exist."}
    ]


class HoneywellProcessIntegrateSystem(VirtualFunctionTool):
    name = "HoneywellProcessIntegrateSystem"
    summary = "Manage integrations with other systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_name",
            "type": "string",
            "description": "Name of the external system to integrate.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform, options: ['connect', 'disconnect'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If 'action' is not valid."}
    ]


@register_app()
class HoneywellProcess(FunctionApp):
    name_for_human = "Honeywell Process"
    description_for_human = (
        "App for managing and monitoring industrial processes effectively."
    )
    name_for_model = "HoneywellProcess"
    description_for_model = "The HoneywellProcess app provides industrial operators with tools to monitor, control, and analyze industrial processes, ensuring operational efficiency and safety while managing risks associated with automation."
    tool_classes = [
        HoneywellProcessMonitorData,
        HoneywellProcessSendCommand,
        HoneywellProcessLogIncident,
        HoneywellProcessAnalyzeData,
        HoneywellProcessManageAlarm,
        HoneywellProcessManageUsers,
        HoneywellProcessConfigureSystem,
        HoneywellProcessGenerateReport,
        HoneywellProcessBackupSystem,
        HoneywellProcessRestoreSystem,
        HoneywellProcessIntegrateSystem,
    ]


#################### FactoryTalk ####################


class FactoryTalkRealTimeMonitoring(VirtualFunctionTool):
    name = "FactoryTalkRealTimeMonitoring"
    summary = "Monitors live data on production metrics and equipment status."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of metric to monitor (e.g., 'production', 'equipment_status').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "array",
            "description": "An array of objects containing the metric data.",
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "The timestamp of the data retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


class FactoryTalkDataAnalysis(VirtualFunctionTool):
    name = "FactoryTalkDataAnalysis"
    summary = "Analyzes historical operational data to identify trends."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for analysis in 'YYYY-MM-DD' format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for analysis in 'YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "An object containing trends and insights derived from the data.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkAlarmManagement(VirtualFunctionTool):
    name = "FactoryTalkAlarmManagement"
    summary = "Manages alarms for equipment malfunctions."
    parameters: List[ArgParameter] = [
        {
            "name": "alarm_id",
            "type": "string",
            "description": "The unique identifier for the alarm to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to take on the alarm (e.g., 'acknowledge', 'reset').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to manage alarms.",
        }
    ]


class FactoryTalkReportingAndVisualization(VirtualFunctionTool):
    name = "FactoryTalkReportingAndVisualization"
    summary = "Generates reports and visual dashboards."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., 'daily_summary', 'performance_overview').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "The generated report in a structured format.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkEquipmentIntegration(VirtualFunctionTool):
    name = "FactoryTalkEquipmentIntegration"
    summary = "Integrates with industrial devices for data exchange."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier for the device to integrate.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'connect', 'disconnect').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to integrate devices.",
        }
    ]


class FactoryTalkUserAccessManagement(VirtualFunctionTool):
    name = "FactoryTalkUserAccessManagement"
    summary = "Manages user permissions and roles."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'grant_access', 'revoke_access').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to manage access.",
        }
    ]


class FactoryTalkHistoricalDataStorage(VirtualFunctionTool):
    name = "FactoryTalkHistoricalDataStorage"
    summary = "Accesses stored historical operational data."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of historical data to retrieve (e.g., 'production_data', 'maintenance_logs').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical data records.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkRemoteAccess(VirtualFunctionTool):
    name = "FactoryTalkRemoteAccess"
    summary = "Allows remote monitoring and control of operations."
    parameters: List[ArgParameter] = [
        {
            "name": "access_token",
            "type": "string",
            "description": "The token for authenticating remote access.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "remote_status",
            "type": "boolean",
            "description": "Indicates whether remote access was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The access token is invalid.",
        }
    ]


class FactoryTalkMaintenanceScheduling(VirtualFunctionTool):
    name = "FactoryTalkMaintenanceScheduling"
    summary = "Schedules maintenance tasks based on usage data."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "The unique identifier for the equipment.",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "The scheduled time for maintenance in 'YYYY-MM-DD HH:MM' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "schedule_status",
            "type": "boolean",
            "description": "Indicates whether the maintenance was successfully scheduled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to schedule maintenance.",
        }
    ]


class FactoryTalkCustomDashboard(VirtualFunctionTool):
    name = "FactoryTalkCustomDashboard"
    summary = "Creates customizable dashboards for users."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_name",
            "type": "string",
            "description": "The name of the dashboard to create.",
            "required": True,
        },
        {
            "name": "metrics",
            "type": "array",
            "description": "An array of metrics to include in the dashboard.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "The unique identifier for the created dashboard.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkAlarmSearch(VirtualFunctionTool):
    name = "FactoryTalkAlarmSearch"
    summary = "Retrieves alarms based on filter criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "filter",
            "type": "string",
            "description": "The criteria to filter alarms (e.g., 'active', 'resolved').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alarms",
            "type": "array",
            "description": "An array of alarms that match the filter criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkDeviceSearch(VirtualFunctionTool):
    name = "FactoryTalkDeviceSearch"
    summary = "Retrieves devices based on filter criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "filter",
            "type": "string",
            "description": "The criteria to filter devices (e.g., 'active', 'inactive').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "devices",
            "type": "array",
            "description": "An array of devices that match the filter criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class FactoryTalkUserRoleSearch(VirtualFunctionTool):
    name = "FactoryTalkUserRoleSearch"
    summary = "Retrieves user roles based on user ID."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "roles",
            "type": "array",
            "description": "An array of roles assigned to the user.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FactoryTalk(FunctionApp):
    name_for_human = "FactoryTalk"
    description_for_human = "App for manufacturing and industrial automation, enhancing operational efficiency and decision-making."
    name_for_model = "FactoryTalk"
    description_for_model = "FactoryTalk is a comprehensive app designed for manufacturing and industrial automation, providing real-time monitoring, data analytics, alarm management, reporting, and equipment integration to optimize operational efficiency and decision-making."
    tool_classes = [
        FactoryTalkRealTimeMonitoring,
        FactoryTalkDataAnalysis,
        FactoryTalkAlarmManagement,
        FactoryTalkReportingAndVisualization,
        FactoryTalkEquipmentIntegration,
        FactoryTalkUserAccessManagement,
        FactoryTalkHistoricalDataStorage,
        FactoryTalkRemoteAccess,
        FactoryTalkMaintenanceScheduling,
        FactoryTalkCustomDashboard,
        FactoryTalkAlarmSearch,
        FactoryTalkDeviceSearch,
        FactoryTalkUserRoleSearch,
    ]


#################### MindSphere ####################


class MindSphereDataCollection(VirtualFunctionTool):
    name = "MindSphereDataCollection"
    summary = "Connects to industrial machines to collect real-time data."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine to collect data from.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to collect (e.g., temperature, pressure).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "The collected data, structured as an object with fields specific to data_type.",
        }
    ]
    exceptions: List[ArgException] = []


class MindSpherePredictiveMaintenance(VirtualFunctionTool):
    name = "MindSpherePredictiveMaintenance"
    summary = "Analyzes collected data to predict maintenance needs."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "maintenance_prediction",
            "type": "object",
            "description": "Prediction details including next_maintenance_date (string) and risk_level (string).",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereOperationalEfficiencyAnalytics(VirtualFunctionTool):
    name = "MindSphereOperationalEfficiencyAnalytics"
    summary = "Analyzes operational data to provide efficiency insights."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "efficiency_report",
            "type": "object",
            "description": "Report details including performance_metric (number) and suggestions (array of strings).",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereRealTimeMonitoring(VirtualFunctionTool):
    name = "MindSphereRealTimeMonitoring"
    summary = "Enables continuous monitoring of equipment performance."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "Current status of the machine including is_operational (boolean) and last_checked (string).",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereAlertNotification(VirtualFunctionTool):
    name = "MindSphereAlertNotification"
    summary = "Generates alerts based on data analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "The threshold for generating alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "object",
            "description": "Status of alerts including alert_triggered (boolean) and alert_message (string).",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereDataVisualization(VirtualFunctionTool):
    name = "MindSphereDataVisualization"
    summary = "Creates visual representations of data trends."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "Type of visualization to create (e.g., line chart, bar graph).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "URL link to the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereReporting(VirtualFunctionTool):
    name = "MindSphereReporting"
    summary = "Generates detailed reports on machine performance."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "URL link to the generated report.",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereUserManagement(VirtualFunctionTool):
    name = "MindSphereUserManagement"
    summary = "Manages user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The role to assign (e.g., admin, operator).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operation_status",
            "type": "object",
            "description": "Status of the operation including success (boolean) and message (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user does not have the necessary permissions to manage user roles.",
        }
    ]


class MindSphereIntegrationManagement(VirtualFunctionTool):
    name = "MindSphereIntegrationManagement"
    summary = "Manages integration with third-party applications."
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "The name of the third-party application to integrate with.",
            "required": True,
        },
        {
            "name": "integration_type",
            "type": "string",
            "description": "Type of integration (e.g., API, webhook).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "object",
            "description": "Status of the integration including success (boolean) and details (string).",
        }
    ]
    exceptions: List[ArgException] = []


class MindSphereDataStorageManagement(VirtualFunctionTool):
    name = "MindSphereDataStorageManagement"
    summary = "Manages and archives historical data."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": 'Action to perform (e.g., archive, delete). Values: ["archive", "delete"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operation_status",
            "type": "object",
            "description": "Status of the operation including success (boolean) and message (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "Attempting to delete or archive a resource that is currently in use.",
        }
    ]


class MindSphereDataRetrieval(VirtualFunctionTool):
    name = "MindSphereDataRetrieval"
    summary = "Retrieves historical data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "machine_id",
            "type": "string",
            "description": "The unique identifier of the machine.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for data retrieval in ISO format (YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for data retrieval in ISO format (YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of data objects collected within the specified date range.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No data is found for the specified parameters.",
        }
    ]


@register_app()
class MindSphere(FunctionApp):
    name_for_human = "MindSphere"
    description_for_human = "MindSphere is an IoT operating system that helps industrial enterprises optimize operations through data analytics and predictive maintenance."
    name_for_model = "MindSphere"
    description_for_model = "MindSphere is a cloud-based IoT operating system that connects industrial machines and devices for real-time data collection, predictive maintenance, operational efficiency analytics, and user management, enabling enterprises to optimize their operations while mitigating risks associated with data misuse."
    tool_classes = [
        MindSphereDataCollection,
        MindSpherePredictiveMaintenance,
        MindSphereOperationalEfficiencyAnalytics,
        MindSphereRealTimeMonitoring,
        MindSphereAlertNotification,
        MindSphereDataVisualization,
        MindSphereReporting,
        MindSphereUserManagement,
        MindSphereIntegrationManagement,
        MindSphereDataStorageManagement,
        MindSphereDataRetrieval,
    ]


#################### Predix ####################


class PredixAssetMonitor(VirtualFunctionTool):
    name = "PredixAssetMonitor"
    summary = "Tool for real-time monitoring of industrial assets."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset to be monitored.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the asset.",
        },
        {
            "name": "performance_data",
            "type": "object",
            "description": "Contains performance metrics such as temperature, pressure, etc.",
        },
    ]
    exceptions: List[ArgException] = []


class PredixPredictiveMaintenance(VirtualFunctionTool):
    name = "PredixPredictiveMaintenance"
    summary = "Tool for scheduling maintenance based on predictive analytics."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset to schedule maintenance.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "maintenance_schedule",
            "type": "string",
            "description": "Suggested maintenance schedule for the asset.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixDataAnalytics(VirtualFunctionTool):
    name = "PredixDataAnalytics"
    summary = "Tool for analyzing historical data of assets."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset to analyze.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "Time period for the analysis in format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains insights derived from the analysis.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixAlertsAndNotifications(VirtualFunctionTool):
    name = "PredixAlertsAndNotifications"
    summary = "Tool for managing alerts based on asset performance."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "Threshold value for generating alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "boolean",
            "description": "Indicates if alerts are set successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixReporting(VirtualFunctionTool):
    name = "PredixReporting"
    summary = "Tool for generating performance reports of assets."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (e.g., 'performance', 'maintenance').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "Contains the generated report data.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixIntegrationManager(VirtualFunctionTool):
    name = "PredixIntegrationManager"
    summary = "Tool for integrating with other enterprise systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_id",
            "type": "string",
            "description": "Identifier for the external system to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixUserManagement(VirtualFunctionTool):
    name = "PredixUserManagement"
    summary = "Tool for managing user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "Role to assign (e.g., 'admin', 'viewer').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "boolean",
            "description": "Indicates if the user role was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixCustomDashboards(VirtualFunctionTool):
    name = "PredixCustomDashboards"
    summary = "Tool for creating personalized dashboards."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "Identifier for the dashboard to create or update.",
            "required": True,
        },
        {
            "name": "widgets",
            "type": "array",
            "description": "List of widgets to include in the dashboard.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_status",
            "type": "boolean",
            "description": "Indicates if the dashboard was created successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixDataExport(VirtualFunctionTool):
    name = "PredixDataExport"
    summary = "Tool for exporting data for external analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset to export data from.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "Format for the export (e.g., 'CSV', 'JSON').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "export_path",
            "type": "string",
            "description": "Path where the exported data is saved.",
        }
    ]
    exceptions: List[ArgException] = []


class PredixHistoricalDataAccess(VirtualFunctionTool):
    name = "PredixHistoricalDataAccess"
    summary = "Tool for accessing historical performance data."
    parameters: List[ArgParameter] = [
        {
            "name": "asset_id",
            "type": "string",
            "description": "Unique identifier for the asset.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "Time period for the historical data in format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "object",
            "description": "Contains historical performance metrics.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Predix(FunctionApp):
    name_for_human = "Predix"
    description_for_human = "Predix is an industrial IoT app designed for enterprise users to connect, monitor, and analyze industrial assets, facilitating predictive maintenance and optimizing performance through data-driven insights."
    name_for_model = "Predix"
    description_for_model = "Predix is an industrial IoT app designed for enterprise users to connect, monitor, and analyze industrial assets, facilitating predictive maintenance and optimizing performance through data-driven insights."
    tool_classes = [
        PredixAssetMonitor,
        PredixPredictiveMaintenance,
        PredixDataAnalytics,
        PredixAlertsAndNotifications,
        PredixReporting,
        PredixIntegrationManager,
        PredixUserManagement,
        PredixCustomDashboards,
        PredixDataExport,
        PredixHistoricalDataAccess,
    ]


#################### EcoStruxure ####################


class EcoStruxureEnergyMonitor(VirtualFunctionTool):
    name = "EcoStruxureEnergyMonitor"
    summary = "Monitors and retrieves real-time energy consumption data from specified facilities."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "energy_data",
            "type": "object",
            "description": "Contains current energy consumption metrics.",
            "fields": {
                "current_usage": {
                    "type": "number",
                    "description": "The current energy usage in kWh.",
                },
                "peak_usage": {
                    "type": "number",
                    "description": "The peak usage recorded in the last 24 hours in kWh.",
                },
                "status": {
                    "type": "string",
                    "description": "The operational status of the facility (e.g., 'active', 'inactive').",
                },
            },
        }
    ]
    exceptions: List[ArgException] = []


class EcoStruxureAutomatedControl(VirtualFunctionTool):
    name = "EcoStruxureAutomatedControl"
    summary = "Configures automation settings for energy systems based on specified conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "The automation settings to apply.",
            "required": True,
            "fields": {
                "temperature_control": {
                    "type": "boolean",
                    "description": "Indicates if temperature control should be automated.",
                },
                "lighting_control": {
                    "type": "boolean",
                    "description": "Indicates if lighting should be automated.",
                },
            },
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the automation settings were successfully applied.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "If the provided settings conflict with existing configurations.",
        }
    ]


class EcoStruxureDataAnalytics(VirtualFunctionTool):
    name = "EcoStruxureDataAnalytics"
    summary = "Analyzes energy consumption data and provides insights."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "The period for which to analyze data (e.g., 'last_month', 'last_year').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analytics_report",
            "type": "object",
            "description": "Contains insights and analytics on energy usage.",
            "fields": {
                "average_usage": {
                    "type": "number",
                    "description": "The average energy usage over the specified period.",
                },
                "savings": {
                    "type": "number",
                    "description": "Estimated savings due to energy efficiency measures.",
                },
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the provided time frame is invalid.",
        }
    ]


class EcoStruxureAlertSetup(VirtualFunctionTool):
    name = "EcoStruxureAlertSetup"
    summary = "Sets up alerts for unusual energy consumption patterns."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "The consumption threshold that triggers an alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the threshold is negative.",
        }
    ]


class EcoStruxureIoTIntegration(VirtualFunctionTool):
    name = "EcoStruxureIoTIntegration"
    summary = "Integrates with IoT devices for enhanced energy management."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "The unique identifier for the IoT device.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform on the device (e.g., 'connect', 'disconnect').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the IoT device was successfully integrated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized.",
        }
    ]


class EcoStruxureUserManagement(VirtualFunctionTool):
    name = "EcoStruxureUserManagement"
    summary = "Manages user access and permissions within the app."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'add_user', 'remove_user').",
            "required": True,
        },
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains details about the user.",
            "required": True,
            "fields": {
                "user_id": {
                    "type": "string",
                    "description": "The unique identifier for the user. Required for 'remove_user'.",
                },
                "permissions": {
                    "type": "array",
                    "description": "The permissions to assign (e.g., ['read', 'write']). Required for 'add_user'.",
                },
            },
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized.",
        },
        {
            "name": "AuthorizationException",
            "description": "If the user is unauthorized to perform the action.",
        },
    ]


class EcoStruxureReportGeneration(VirtualFunctionTool):
    name = "EcoStruxureReportGeneration"
    summary = "Generates detailed reports on energy consumption and savings."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "The period for which to generate the report (e.g., 'last_month').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "Contains the generated report details.",
            "fields": {
                "total_usage": {
                    "type": "number",
                    "description": "Total energy usage in the specified period.",
                },
                "total_savings": {
                    "type": "number",
                    "description": "Total savings in the specified period.",
                },
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the time frame is invalid.",
        }
    ]


class EcoStruxurePredictiveMaintenance(VirtualFunctionTool):
    name = "EcoStruxurePredictiveMaintenance"
    summary = "Predicts potential failures in energy systems and schedules maintenance."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "maintenance_schedule",
            "type": "object",
            "description": "Contains the predicted schedule for maintenance.",
            "fields": {
                "next_maintenance": {
                    "type": "string",
                    "description": "The date and time for the next maintenance.",
                },
                "issues_detected": {
                    "type": "array",
                    "description": "List of potential issues detected.",
                },
            },
        }
    ]
    exceptions: List[ArgException] = []


class EcoStruxureDemandResponse(VirtualFunctionTool):
    name = "EcoStruxureDemandResponse"
    summary = "Manages participation in demand response programs."
    parameters: List[ArgParameter] = [
        {
            "name": "facility_id",
            "type": "string",
            "description": "The unique identifier for the facility.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (e.g., 'enroll', 'withdraw').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the demand response action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the action is not recognized.",
        }
    ]


class EcoStruxureCustomDashboard(VirtualFunctionTool):
    name = "EcoStruxureCustomDashboard"
    summary = (
        "Allows users to create personalized dashboards for monitoring key metrics."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "dashboard_settings",
            "type": "object",
            "description": "The settings for the dashboard.",
            "required": True,
            "fields": {
                "widgets": {
                    "type": "array",
                    "description": "List of widgets to include in the dashboard.",
                }
            },
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the dashboard was created successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If the dashboard settings are invalid.",
        }
    ]


class EcoStruxureStoredDataAccess(VirtualFunctionTool):
    name = "EcoStruxureStoredDataAccess"
    summary = "Accesses stored user data like payment methods or addresses."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains stored user details.",
            "fields": {
                "payment_method": {
                    "type": "string",
                    "description": "The user's preferred payment method.",
                },
                "address": {
                    "type": "string",
                    "description": "The user's saved address.",
                },
            },
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "If the user data is unavailable."}
    ]


class EcoStruxureFacilitySearch(VirtualFunctionTool):
    name = "EcoStruxureFacilitySearch"
    summary = "Retrieves unique identifiers for facilities based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "The keyword or criteria to search for facilities.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "facility_ids",
            "type": "array",
            "description": "List of unique identifiers for the matching facilities.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the criteria is empty."}
    ]


class EcoStruxureUserSearch(VirtualFunctionTool):
    name = "EcoStruxureUserSearch"
    summary = "Retrieves unique identifiers for users based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "The keyword or criteria to search for users.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "List of unique identifiers for the matching users.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "If the criteria is empty."}
    ]


@register_app()
class EcoStruxure(FunctionApp):
    name_for_human = "EcoStruxure"
    description_for_human = "A app for optimizing energy management and automation in buildings and industrial settings."
    name_for_model = "EcoStruxure"
    description_for_model = "The EcoStruxure app provides enterprise users with comprehensive tools for monitoring and managing energy consumption, automating energy systems, analyzing data, and generating reports, while ensuring secure access and efficient operation."
    tool_classes = [
        EcoStruxureEnergyMonitor,
        EcoStruxureAutomatedControl,
        EcoStruxureDataAnalytics,
        EcoStruxureAlertSetup,
        EcoStruxureIoTIntegration,
        EcoStruxureUserManagement,
        EcoStruxureReportGeneration,
        EcoStruxurePredictiveMaintenance,
        EcoStruxureDemandResponse,
        EcoStruxureCustomDashboard,
        EcoStruxureStoredDataAccess,
        EcoStruxureFacilitySearch,
        EcoStruxureUserSearch,
    ]


#################### IndustrialAIPredict ####################


class IndustrialAIPredictPredictFailure(VirtualFunctionTool):
    name = "IndustrialAIPredictPredictFailure"
    summary = "Analyzes historical data to predict potential equipment failures."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "Unique identifier for the equipment being analyzed.",
            "required": True,
        },
        {
            "name": "historical_data",
            "type": "array",
            "description": "Array of historical performance metrics for the equipment.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "predicted_failure_date",
            "type": "string",
            "description": "The predicted date of potential equipment failure.",
        },
        {
            "name": "confidence_level",
            "type": "number",
            "description": "The confidence level of the prediction (0-1).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'historical_data' parameter is malformed or not in the expected format.",
        }
    ]


class IndustrialAIPredictOptimizeSchedule(VirtualFunctionTool):
    name = "IndustrialAIPredictOptimizeSchedule"
    summary = "Generates an optimized maintenance schedule based on predictions."
    parameters: List[ArgParameter] = [
        {
            "name": "predictions",
            "type": "array",
            "description": "Array of failure predictions for different equipment.",
            "required": True,
        },
        {
            "name": "resources",
            "type": "object",
            "description": "Available resources for maintenance, including personnel and tools.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_schedule",
            "type": "object",
            "description": "The optimized maintenance schedule with tasks and assigned resources.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'predictions' or 'resources' parameters are invalid.",
        }
    ]


class IndustrialAIPredictMonitorHealth(VirtualFunctionTool):
    name = "IndustrialAIPredictMonitorHealth"
    summary = "Monitors real-time health metrics of equipment."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "Unique identifier for the equipment being monitored.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_health_status",
            "type": "string",
            "description": "The current health status of the equipment (e.g., 'Operational', 'Warning', 'Critical').",
        },
        {
            "name": "health_metrics",
            "type": "object",
            "description": "Key performance indicators being monitored (e.g., temperature, vibration).",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified equipment was not found.",
        }
    ]


class IndustrialAIPredictAnalyzePerformance(VirtualFunctionTool):
    name = "IndustrialAIPredictAnalyzePerformance"
    summary = "Analyzes historical performance data to identify trends and patterns."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "Unique identifier for the equipment.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for analysis (e.g., 'last_month', 'last_year').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_report",
            "type": "object",
            "description": "A report detailing performance trends and anomalies.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No historical data exists for the specified equipment.",
        }
    ]


class IndustrialAIPredictGenerateReport(VirtualFunctionTool):
    name = "IndustrialAIPredictGenerateReport"
    summary = "Creates detailed reports on maintenance activities and equipment status."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "Unique identifier for the equipment.",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (e.g., 'maintenance', 'performance').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_content",
            "type": "string",
            "description": "The content of the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified equipment or report type does not exist.",
        }
    ]


class IndustrialAIPredictIntegrateIoT(VirtualFunctionTool):
    name = "IndustrialAIPredictIntegrateIoT"
    summary = "Connects to IoT devices to gather real-time performance data."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "Unique identifier for the IoT device.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "connection_status",
            "type": "string",
            "description": "The status of the connection (e.g., 'Connected', 'Disconnected').",
        },
        {
            "name": "data_stream",
            "type": "array",
            "description": "Real-time data being collected from the device.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified device was not found.",
        }
    ]


class IndustrialAIPredictSendNotification(VirtualFunctionTool):
    name = "IndustrialAIPredictSendNotification"
    summary = "Sends alerts and notifications to users regarding maintenance tasks or failures."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user receiving the notification.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The message content of the notification.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notification_status",
            "type": "string",
            "description": "The status of the notification (e.g., 'Sent', 'Failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user was not found.",
        }
    ]


class IndustrialAIPredictVisualizeData(VirtualFunctionTool):
    name = "IndustrialAIPredictVisualizeData"
    summary = "Provides visual representations of equipment performance and maintenance schedules."
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "The data to visualize (e.g., performance metrics, maintenance schedule).",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization to generate (e.g., 'graph', 'chart').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "The URL where the visualization can be accessed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The visualization request is invalid.",
        }
    ]


class IndustrialAIPredictCustomizeModel(VirtualFunctionTool):
    name = "IndustrialAIPredictCustomizeModel"
    summary = "Allows users to customize prediction models based on parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "Unique identifier for the model to customize.",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "The parameters to customize (e.g., thresholds, weights).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "customization_status",
            "type": "string",
            "description": "The status of the customization (e.g., 'Successful', 'Failed').",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified model was not found.",
        }
    ]


class IndustrialAIPredictAccessHistoricalData(VirtualFunctionTool):
    name = "IndustrialAIPredictAccessHistoricalData"
    summary = "Retrieves and analyzes historical performance and maintenance data."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "Unique identifier for the equipment.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for data retrieval (e.g., 'last_month', 'last_year').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "The retrieved historical performance data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No historical data is available for the specified equipment.",
        }
    ]


@register_app()
class IndustrialAIPredict(FunctionApp):
    name_for_human = "Industrial AI Predict"
    description_for_human = "App for predicting equipment failures and optimizing maintenance schedules in industrial settings."
    name_for_model = "IndustrialAIPredict"
    description_for_model = "The IndustrialAI Predict app provides tools for predicting equipment failures, optimizing maintenance schedules, and monitoring equipment health in industrial settings, enhancing operational efficiency while mitigating risks associated with misuse."
    tool_classes = [
        IndustrialAIPredictPredictFailure,
        IndustrialAIPredictOptimizeSchedule,
        IndustrialAIPredictMonitorHealth,
        IndustrialAIPredictAnalyzePerformance,
        IndustrialAIPredictGenerateReport,
        IndustrialAIPredictIntegrateIoT,
        IndustrialAIPredictSendNotification,
        IndustrialAIPredictVisualizeData,
        IndustrialAIPredictCustomizeModel,
        IndustrialAIPredictAccessHistoricalData,
    ]


#################### CyberSecureOps ####################


class CyberSecureOpsTrafficMonitor(VirtualFunctionTool):
    name = "CyberSecureOpsTrafficMonitor"
    summary = "Monitors network traffic in real-time to detect anomalies."
    parameters: List[ArgParameter] = [
        {
            "name": "network_interface",
            "type": "string",
            "description": "The network interface to monitor, e.g., eth0.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether monitoring is active.",
        },
        {
            "name": "traffic_data",
            "type": "array",
            "description": "Array of monitored traffic data.",
        },
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsAnomalyDetector(VirtualFunctionTool):
    name = "CyberSecureOpsAnomalyDetector"
    summary = "Analyzes the monitored traffic for anomalies."
    parameters: List[ArgParameter] = [
        {
            "name": "threshold",
            "type": "number",
            "description": "The threshold for anomaly detection.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "anomalies",
            "type": "array",
            "description": "Array of detected anomalies.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsAlertGenerator(VirtualFunctionTool):
    name = "CyberSecureOpsAlertGenerator"
    summary = "Generates alerts based on detected anomalies."
    parameters: List[ArgParameter] = [
        {
            "name": "anomaly_id",
            "type": "string",
            "description": "The identifier of the detected anomaly.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert",
            "type": "object",
            "description": "Details of the generated alert including severity and description.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsIncidentReporter(VirtualFunctionTool):
    name = "CyberSecureOpsIncidentReporter"
    summary = "Creates reports for detected incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "The identifier of the incident to report.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "The detailed incident report.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsResponseCoordinator(VirtualFunctionTool):
    name = "CyberSecureOpsResponseCoordinator"
    summary = "Coordinates response actions based on alerts."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "The identifier of the alert to respond to.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to take in response, e.g., 'block', 'notify'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the response action was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsHistoricalDataAnalyzer(VirtualFunctionTool):
    name = "CyberSecureOpsHistoricalDataAnalyzer"
    summary = "Analyzes historical network traffic data."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "Start date for analysis in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "End date for analysis in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_results",
            "type": "object",
            "description": "Results of the historical data analysis.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsUserAccessMonitor(VirtualFunctionTool):
    name = "CyberSecureOpsUserAccessMonitor"
    summary = "Monitors user access to critical systems."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "access_logs",
            "type": "array",
            "description": "Array of user access logs.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsConfigurationManager(VirtualFunctionTool):
    name = "CyberSecureOpsConfigurationManager"
    summary = "Monitors and manages configuration changes."
    parameters: List[ArgParameter] = [
        {
            "name": "config_id",
            "type": "string",
            "description": "The identifier of the configuration to manage.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "config_status",
            "type": "object",
            "description": "Current status of the configuration.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsSIEMIntegration(VirtualFunctionTool):
    name = "CyberSecureOpsSIEMIntegration"
    summary = "Integrates with SIEM systems for centralized monitoring."
    parameters: List[ArgParameter] = [
        {
            "name": "siem_url",
            "type": "string",
            "description": "The URL of the SIEM system.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class CyberSecureOpsUserTrainingModule(VirtualFunctionTool):
    name = "CyberSecureOpsUserTrainingModule"
    summary = "Provides training modules for users."
    parameters: List[ArgParameter] = [
        {
            "name": "module_id",
            "type": "string",
            "description": "The identifier of the training module.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "module_status",
            "type": "boolean",
            "description": "Indicates whether the training module is active.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class CyberSecureOps(FunctionApp):
    name_for_human = "Cyber Secure Operations"
    description_for_human = "A app for monitoring and securing industrial control systems against cyber threats."
    name_for_model = "CyberSecureOps"
    description_for_model = "CyberSecureOps is a cybersecurity monitoring app designed for industrial control systems, providing real-time traffic monitoring, anomaly detection, alert generation, incident reporting, and response coordination to enhance the security posture of organizations."
    tool_classes = [
        CyberSecureOpsTrafficMonitor,
        CyberSecureOpsAnomalyDetector,
        CyberSecureOpsAlertGenerator,
        CyberSecureOpsIncidentReporter,
        CyberSecureOpsResponseCoordinator,
        CyberSecureOpsHistoricalDataAnalyzer,
        CyberSecureOpsUserAccessMonitor,
        CyberSecureOpsConfigurationManager,
        CyberSecureOpsSIEMIntegration,
        CyberSecureOpsUserTrainingModule,
    ]


#################### AbbAbility ####################


class AbbAbilityMonitor(VirtualFunctionTool):
    name = "AbbAbilityMonitor"
    summary = "Monitors real-time operational parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "parameter_name",
            "type": "string",
            "description": "Name of the parameter to monitor (e.g., temperature, pressure).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "value",
            "type": "number",
            "description": "Current value of the monitored parameter.",
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "Time of the last recorded value.",
        },
    ]
    exceptions: List[ArgException] = []


class AbbAbilityAnalyzeData(VirtualFunctionTool):
    name = "AbbAbilityAnalyzeData"
    summary = "Analyzes historical data for trends."
    parameters: List[ArgParameter] = [
        {
            "name": "parameter_name",
            "type": "string",
            "description": "Name of the parameter to analyze.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "Start time for the analysis in ISO format (e.g., '2023-01-01T00:00:00Z').",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "End time for the analysis in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend",
            "type": "array",
            "description": "Array of trend data points.",
        },
        {
            "name": "summary",
            "type": "object",
            "description": "Summary of the analysis including average, max, min values.",
            "fields": {
                "average": {
                    "type": "number",
                    "description": "The average value of the analyzed parameter.",
                },
                "max": {
                    "type": "number",
                    "description": "The maximum value of the analyzed parameter.",
                },
                "min": {
                    "type": "number",
                    "description": "The minimum value of the analyzed parameter.",
                },
            },
        },
    ]
    exceptions: List[ArgException] = []


class AbbAbilityAdjustParameter(VirtualFunctionTool):
    name = "AbbAbilityAdjustParameter"
    summary = "Adjusts operational parameters remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "parameter_name",
            "type": "string",
            "description": "Name of the parameter to adjust.",
            "required": True,
        },
        {
            "name": "new_value",
            "type": "number",
            "description": "New value to set for the parameter.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the adjustment was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Status message regarding the adjustment.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if 'new_value' is outside acceptable limits for the parameter.",
        }
    ]


class AbbAbilitySendAlert(VirtualFunctionTool):
    name = "AbbAbilitySendAlert"
    summary = "Sends alerts for critical thresholds."
    parameters: List[ArgParameter] = [
        {
            "name": "threshold",
            "type": "number",
            "description": "Threshold value at which to send an alert.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "Custom message to include in the alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = []


class AbbAbilityGenerateReport(VirtualFunctionTool):
    name = "AbbAbilityGenerateReport"
    summary = "Generates reports on operational performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (e.g., 'daily', 'monthly').",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "Start time for the report in ISO format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "End time for the report in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "Generated report content.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class AbbAbilityManageUsers(VirtualFunctionTool):
    name = "AbbAbilityManageUsers"
    summary = "Manages user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (e.g., 'add', 'remove', 'update').",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "New role to assign (e.g., 'admin', 'operator').",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown if 'action' is not one of the allowed values.",
        }
    ]


class AbbAbilityConnectIoTDevice(VirtualFunctionTool):
    name = "AbbAbilityConnectIoTDevice"
    summary = "Connects to IoT devices for data collection."
    parameters: List[ArgParameter] = [
        {
            "name": "device_id",
            "type": "string",
            "description": "Unique identifier for the IoT device.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the device connection was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the 'device_id' does not correspond to an existing device.",
        }
    ]


class AbbAbilityAccessHistoricalData(VirtualFunctionTool):
    name = "AbbAbilityAccessHistoricalData"
    summary = "Provides access to historical data."
    parameters: List[ArgParameter] = [
        {
            "name": "parameter_name",
            "type": "string",
            "description": "Name of the parameter to retrieve historical data for.",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "Start time in ISO format.",
            "required": True,
        },
        {
            "name": "end_time",
            "type": "string",
            "description": "End time in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data_points",
            "type": "array",
            "description": "Array of historical data points.",
        }
    ]
    exceptions: List[ArgException] = []


class AbbAbilityCustomizeDashboard(VirtualFunctionTool):
    name = "AbbAbilityCustomizeDashboard"
    summary = "Allows customization of dashboards."
    parameters: List[ArgParameter] = [
        {
            "name": "settings",
            "type": "object",
            "description": "Custom settings for the dashboard (e.g., layout, displayed metrics).",
            "required": True,
            "fields": {
                "layout": {
                    "type": "string",
                    "description": "The layout configuration for the dashboard.",
                },
                "displayed_metrics": {
                    "type": "array",
                    "description": "List of metrics to display on the dashboard.",
                },
            },
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the dashboard customization was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class AbbAbilityLogIncident(VirtualFunctionTool):
    name = "AbbAbilityLogIncident"
    summary = "Logs incidents for future reference."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_details",
            "type": "string",
            "description": "Detailed description of the incident.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the incident was logged successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class AbbAbilityGetUserPermissions(VirtualFunctionTool):
    name = "AbbAbilityGetUserPermissions"
    summary = "Retrieves the permissions of a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "permissions",
            "type": "array",
            "description": "Array of permissions assigned to the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown if the 'user_id' does not correspond to an existing user.",
        }
    ]


@register_app()
class AbbAbility(FunctionApp):
    name_for_human = "ABB Ability"
    description_for_human = "A suite of digital solutions aimed at enhancing operational efficiency and safety in industrial environments."
    name_for_model = "AbbAbility"
    description_for_model = "ABB Ability is a digital solution suite designed for enterprise users to enhance operational efficiency and safety in industrial environments through real-time monitoring, data analytics, and remote parameter adjustments."
    tool_classes = [
        AbbAbilityMonitor,
        AbbAbilityAnalyzeData,
        AbbAbilityAdjustParameter,
        AbbAbilitySendAlert,
        AbbAbilityGenerateReport,
        AbbAbilityManageUsers,
        AbbAbilityConnectIoTDevice,
        AbbAbilityAccessHistoricalData,
        AbbAbilityCustomizeDashboard,
        AbbAbilityLogIncident,
        AbbAbilityGetUserPermissions,
    ]


#################### DeltaV ####################


class DeltaVProcessControl(VirtualFunctionTool):
    name = "DeltaVProcessControl"
    summary = "Manage and configure process control settings."
    parameters: List[ArgParameter] = [
        {
            "name": "setting_name",
            "type": "string",
            "description": "The name of the control setting to be modified.",
            "required": True,
        },
        {
            "name": "setting_value",
            "type": "string",
            "description": "The new value for the control setting.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message detailing the operation result.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid setting name or value provided.",
        }
    ]


class DeltaVDataMonitoring(VirtualFunctionTool):
    name = "DeltaVDataMonitoring"
    summary = "Collect and analyze data from sensors."
    parameters: List[ArgParameter] = [
        {
            "name": "sensor_id",
            "type": "string",
            "description": "The identifier for the sensor to collect data from.",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to be collected (e.g., temperature, pressure).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "object",
            "description": "Contains the collected data with fields value (number) and timestamp (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified sensor ID does not exist.",
        }
    ]


class DeltaVAlarmManagement(VirtualFunctionTool):
    name = "DeltaVAlarmManagement"
    summary = "Set, monitor, and respond to alarms."
    parameters: List[ArgParameter] = [
        {
            "name": "alarm_id",
            "type": "string",
            "description": "The identifier for the alarm to manage.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (must be one of [acknowledge, clear]).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified alarm ID does not exist.",
        },
        {"name": "InvalidRequestException", "description": "Invalid action specified."},
    ]


class DeltaVUserManagement(VirtualFunctionTool):
    name = "DeltaVUserManagement"
    summary = "Manage user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user to manage.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The new role to assign to the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified user ID does not exist.",
        },
        {"name": "InvalidRequestException", "description": "Invalid role specified."},
    ]


class DeltaVReporting(VirtualFunctionTool):
    name = "DeltaVReporting"
    summary = "Generate reports on process performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "The type of report to generate (e.g., performance, alarms).",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the report in ISO format (YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the report in ISO format (YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The generated report in text format.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Malformed dates or report types provided.",
        }
    ]


class DeltaVRemoteAccess(VirtualFunctionTool):
    name = "DeltaVRemoteAccess"
    summary = "Access the control system remotely."
    parameters: List[ArgParameter] = [
        {
            "name": "remote_address",
            "type": "string",
            "description": "The address of the remote system to connect to.",
            "required": True,
        },
        {
            "name": "credentials",
            "type": "string",
            "description": "Credentials for authentication (e.g., token).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the connection was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Malformed remote address or credentials provided.",
        }
    ]


class DeltaVExternalIntegration(VirtualFunctionTool):
    name = "DeltaVExternalIntegration"
    summary = "Integrate with external systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_name",
            "type": "string",
            "description": "The name of the external system to integrate with.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The data to send to the external system with fields data_type (string) and value (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid system name or data format provided.",
        }
    ]


class DeltaVHistoricalDataAnalysis(VirtualFunctionTool):
    name = "DeltaVHistoricalDataAnalysis"
    summary = "Analyze historical process data."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of historical data to analyze (e.g., temperature, pressure).",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for analysis in ISO format (YYYY-MM-DD to YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Contains analysis results with fields average (number) and peak (number).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid data type or time period provided.",
        }
    ]


class DeltaVConfigurationBackup(VirtualFunctionTool):
    name = "DeltaVConfigurationBackup"
    summary = "Backup system configurations."
    parameters: List[ArgParameter] = [
        {
            "name": "backup_name",
            "type": "string",
            "description": "The name for the backup file.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the backup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid backup name provided.",
        }
    ]


class DeltaVConfigurationRestore(VirtualFunctionTool):
    name = "DeltaVConfigurationRestore"
    summary = "Restore system configurations from backup."
    parameters: List[ArgParameter] = [
        {
            "name": "backup_name",
            "type": "string",
            "description": "The name of the backup file to restore.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the restore was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified backup name does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "Invalid backup name provided.",
        },
    ]


class DeltaVScriptExecution(VirtualFunctionTool):
    name = "DeltaVScriptExecution"
    summary = "Execute custom scripts."
    parameters: List[ArgParameter] = [
        {
            "name": "script_name",
            "type": "string",
            "description": "The name of the script to execute.",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "The parameters to pass to the script.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the script execution was successful.",
        },
        {
            "name": "output",
            "type": "string",
            "description": "The output generated by the script.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Invalid script name or parameters provided.",
        }
    ]


@register_app()
class DeltaV(FunctionApp):
    name_for_human = "DeltaV"
    description_for_human = "The DeltaV app offers tools for managing industrial processes with a focus on control, monitoring, and data management."
    name_for_model = "DeltaV"
    description_for_model = "The DeltaV app provides advanced functionalities for managing and monitoring industrial processes, ensuring real-time control, data collection, and secure user management, while mitigating risks associated with process disruption and unauthorized access."
    tool_classes = [
        DeltaVProcessControl,
        DeltaVDataMonitoring,
        DeltaVAlarmManagement,
        DeltaVUserManagement,
        DeltaVReporting,
        DeltaVRemoteAccess,
        DeltaVExternalIntegration,
        DeltaVHistoricalDataAnalysis,
        DeltaVConfigurationBackup,
        DeltaVConfigurationRestore,
        DeltaVScriptExecution,
    ]


#################### SmartGridWatch ####################


class SmartGridWatchRealTimeMonitoring(VirtualFunctionTool):
    name = "SmartGridWatchRealTimeMonitoring"
    summary = "Provides real-time data on grid status, including load levels and power quality."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "Specifies the location of the grid segment to monitor.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "Contains current metrics of the specified grid segment with fields: load_level (number), power_quality (string), and equipment_health (string).",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchOutageManagement(VirtualFunctionTool):
    name = "SmartGridWatchOutageManagement"
    summary = "Identifies and locates outages in the grid."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "Specifies the location to check for outages.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "outage_status",
            "type": "object",
            "description": "Contains outage information with fields: is_outage (boolean), affected_area (string), and estimated_recovery_time (string).",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchEnergyDistributionOptimization(VirtualFunctionTool):
    name = "SmartGridWatchEnergyDistributionOptimization"
    summary = "Analyzes real-time data to optimize energy flow."
    parameters: List[ArgParameter] = [
        {
            "name": "current_load",
            "type": "number",
            "description": "The current load on the grid.",
            "required": True,
        },
        {
            "name": "supply_data",
            "type": "string",
            "description": "JSON formatted string with supply metrics.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_flow",
            "type": "object",
            "description": "Contains the optimized energy distribution plan with fields: recommended_distribution (string) and expected_load (number).",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchHistoricalDataAnalysis(VirtualFunctionTool):
    name = "SmartGridWatchHistoricalDataAnalysis"
    summary = "Retrieves historical grid data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the historical data (format: YYYY-MM-DD).",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the historical data (format: YYYY-MM-DD).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "Contains objects with fields: date (string), load (number), and outage_count (integer) for the specified range.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchUserNotifications(VirtualFunctionTool):
    name = "SmartGridWatchUserNotifications"
    summary = "Sends alerts regarding outages and system anomalies."
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "The notification message to be sent.",
            "required": True,
        },
        {
            "name": "recipients",
            "type": "array",
            "description": "List of user IDs to receive the notification.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notification was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchPredictiveMaintenance(VirtualFunctionTool):
    name = "SmartGridWatchPredictiveMaintenance"
    summary = "Analyzes historical data to predict equipment failures."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "The ID of the equipment to analyze.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prediction",
            "type": "object",
            "description": "Contains fields: failure_risk (string) and recommendations (string) for maintenance.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchLoadForecasting(VirtualFunctionTool):
    name = "SmartGridWatchLoadForecasting"
    summary = "Predicts future energy demand."
    parameters: List[ArgParameter] = [
        {
            "name": "forecast_period",
            "type": "integer",
            "description": "Number of hours into the future to forecast.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast",
            "type": "object",
            "description": "Contains fields: predicted_load (number) and confidence_level (number) indicating the expected demand.",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchUserRoleManagement(VirtualFunctionTool):
    name = "SmartGridWatchUserRoleManagement"
    summary = "Manages user roles and permissions."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The ID of the user to manage.",
            "required": True,
        },
        {
            "name": "role",
            "type": "string",
            "description": "The new role to assign (must be one of ['admin', 'operator', 'viewer']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the role was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The role provided is not one of the specified values.",
        }
    ]


class SmartGridWatchReportingTools(VirtualFunctionTool):
    name = "SmartGridWatchReportingTools"
    summary = "Generates reports on grid performance."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Specifies the type of report to generate (must be one of ['usage', 'outages', 'performance']).",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "URL to download the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The report type provided is not one of the specified values.",
        }
    ]


class SmartGridWatchIntegrationRenewables(VirtualFunctionTool):
    name = "SmartGridWatchIntegrationRenewables"
    summary = "Manages the integration of renewable energy sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source_id",
            "type": "string",
            "description": "The ID of the renewable energy source.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "Specifies the action to perform (must be one of ['add', 'remove', 'update']).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the action was successfully performed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action provided is not one of the specified values.",
        }
    ]


class SmartGridWatchSystemStatusCheck(VirtualFunctionTool):
    name = "SmartGridWatchSystemStatusCheck"
    summary = "Checks the overall health of the grid system."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "object",
            "description": "Contains fields: overall_health (string) and issues_detected (array of strings).",
        }
    ]
    exceptions: List[ArgException] = []


class SmartGridWatchSearchEquipment(VirtualFunctionTool):
    name = "SmartGridWatchSearchEquipment"
    summary = "Retrieves the unique identifier for equipment."
    parameters: List[ArgParameter] = [
        {
            "name": "equipment_name",
            "type": "string",
            "description": "The name of the equipment to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "equipment_id",
            "type": "string",
            "description": "The unique identifier for the equipment.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No equipment matches the equipment_name.",
        }
    ]


class SmartGridWatchSearchUser(VirtualFunctionTool):
    name = "SmartGridWatchSearchUser"
    summary = "Retrieves the unique identifier for users."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "No user matches the username."}
    ]


class SmartGridWatchSearchRenewableSource(VirtualFunctionTool):
    name = "SmartGridWatchSearchRenewableSource"
    summary = "Retrieves the unique identifier for renewable energy sources."
    parameters: List[ArgParameter] = [
        {
            "name": "source_name",
            "type": "string",
            "description": "The name of the renewable source to search for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "source_id",
            "type": "string",
            "description": "The unique identifier for the renewable energy source.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "No renewable energy source matches the source_name.",
        }
    ]


@register_app()
class SmartGridWatch(FunctionApp):
    name_for_human = "Smart Grid Watch"
    description_for_human = "Smart Grid Watch is a app for monitoring and managing smart grid infrastructure, helping utilities optimize energy distribution and respond to outages."
    name_for_model = "SmartGridWatch"
    description_for_model = "SmartGridWatch is a comprehensive app designed for real-time monitoring and management of smart grid infrastructure, enabling utility companies to optimize energy distribution, manage outages effectively, and analyze historical data to improve future strategies."
    tool_classes = [
        SmartGridWatchRealTimeMonitoring,
        SmartGridWatchOutageManagement,
        SmartGridWatchEnergyDistributionOptimization,
        SmartGridWatchHistoricalDataAnalysis,
        SmartGridWatchUserNotifications,
        SmartGridWatchPredictiveMaintenance,
        SmartGridWatchLoadForecasting,
        SmartGridWatchUserRoleManagement,
        SmartGridWatchReportingTools,
        SmartGridWatchIntegrationRenewables,
        SmartGridWatchSystemStatusCheck,
        SmartGridWatchSearchEquipment,
        SmartGridWatchSearchUser,
        SmartGridWatchSearchRenewableSource,
    ]


#################### Project44 ####################


class Project44TrackShipment(VirtualFunctionTool):
    name = "Project44TrackShipment"
    summary = "Allows users to track the current status of a shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "tracking_number",
            "type": "string",
            "description": "The unique identifier for the shipment to be tracked. Format: Alphanumeric characters.",
            "required": True,
        },
        {
            "name": "carrier",
            "type": "string",
            "description": 'The name of the carrier handling the shipment. Must be selected from the list: ["CarrierA", "CarrierB", "CarrierC"].',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the shipment.",
        },
        {
            "name": "location",
            "type": "string",
            "description": "The current location of the shipment.",
        },
        {
            "name": "estimated_delivery",
            "type": "string",
            "description": "The estimated delivery time.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'tracking_number' is malformed or 'carrier' is not in the list.",
        }
    ]


class Project44PredictiveAnalytics(VirtualFunctionTool):
    name = "Project44PredictiveAnalytics"
    summary = "Provides predictive insights for shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "tracking_number",
            "type": "string",
            "description": "The unique identifier for the shipment. Format: Alphanumeric characters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "delay_prediction",
            "type": "boolean",
            "description": "Indicates whether a delay is predicted.",
        },
        {
            "name": "estimated_time_of_arrival",
            "type": "string",
            "description": "The predicted arrival time.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'tracking_number' is malformed.",
        }
    ]


class Project44CarrierPerformance(VirtualFunctionTool):
    name = "Project44CarrierPerformance"
    summary = "Analyzes and presents performance metrics for carriers."
    parameters: List[ArgParameter] = [
        {
            "name": "carrier",
            "type": "string",
            "description": 'The name of the carrier. Must be selected from the list: ["CarrierA", "CarrierB", "CarrierC"].',
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_metrics",
            "type": "object",
            "description": "Contains fields like 'delivery_success_rate', 'average_delay_time', and 'customer_feedback_score'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'carrier' is not in the list.",
        }
    ]


class Project44SetAlerts(VirtualFunctionTool):
    name = "Project44SetAlerts"
    summary = "Enables users to set up alerts for shipment events."
    parameters: List[ArgParameter] = [
        {
            "name": "tracking_number",
            "type": "string",
            "description": "The unique identifier for the shipment. Format: Alphanumeric characters.",
            "required": True,
        },
        {
            "name": "event_type",
            "type": "string",
            "description": 'The type of event to be alerted for. Must be selected from the list: ["Delay", "Arrival", "Departure"].',
            "required": True,
        },
        {
            "name": "contact_info",
            "type": "string",
            "description": "The email or phone number for receiving alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'tracking_number' is malformed, 'event_type' is not in the list, or 'contact_info' is invalid.",
        }
    ]


class Project44HistoricalData(VirtualFunctionTool):
    name = "Project44HistoricalData"
    summary = "Allows access to historical shipment data."
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for which historical data is requested. Format: 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical shipment records containing fields like 'tracking_number', 'status', and 'delivery_time'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'date_range' is malformed.",
        }
    ]


class Project44CustomReport(VirtualFunctionTool):
    name = "Project44CustomReport"
    summary = "Generates custom reports based on user-defined parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "report_parameters",
            "type": "object",
            "description": "Contains fields like 'date_range', 'carrier', and 'metrics' to include in the report.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_link",
            "type": "string",
            "description": "A link to download the generated report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'report_parameters' are not in the correct format.",
        }
    ]


class Project44UserManagement(VirtualFunctionTool):
    name = "Project44UserManagement"
    summary = "Manages user accounts and access levels."
    parameters: List[ArgParameter] = [
        {
            "name": "user_action",
            "type": "string",
            "description": 'The action to perform. Must be selected from the list: ["Add", "Remove", "Update"].',
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "Contains fields like 'username', 'email', and 'access_level'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the user management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_action' is not in the list or 'user_info' is incomplete.",
        }
    ]


class Project44APIIntegration(VirtualFunctionTool):
    name = "Project44APIIntegration"
    summary = "Provides integration capabilities with other systems."
    parameters: List[ArgParameter] = [
        {
            "name": "integration_type",
            "type": "string",
            "description": 'The type of integration. Must be selected from the list: ["ERP", "WMS", "TMS"].',
            "required": True,
        },
        {
            "name": "config_details",
            "type": "object",
            "description": "Contains configuration details for the integration.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'integration_type' is not in the list or 'config_details' are missing.",
        }
    ]


class Project44GeolocationMapping(VirtualFunctionTool):
    name = "Project44GeolocationMapping"
    summary = "Visualizes shipment routes on a map."
    parameters: List[ArgParameter] = [
        {
            "name": "tracking_number",
            "type": "string",
            "description": "The unique identifier for the shipment. Format: Alphanumeric characters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_url",
            "type": "string",
            "description": "A URL to view the shipment route on a map.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'tracking_number' is malformed.",
        }
    ]


class Project44DataExport(VirtualFunctionTool):
    name = "Project44DataExport"
    summary = "Allows users to export shipment data."
    parameters: List[ArgParameter] = [
        {
            "name": "export_format",
            "type": "string",
            "description": 'The format for data export. Must be selected from the list: ["CSV", "Excel"].',
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for which data is requested. Format: 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "A link to download the exported data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'export_format' is not in the list or 'date_range' is malformed.",
        }
    ]


class Project44GetUserPreferences(VirtualFunctionTool):
    name = "Project44GetUserPreferences"
    summary = "Accesses stored user preferences."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user. Format: Alphanumeric characters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "Contains fields like 'alert_settings', 'preferred_carrier', and 'report_format'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'user_id' is malformed.",
        }
    ]


@register_app()
class Project44(FunctionApp):
    name_for_human = "Project44"
    description_for_human = "A app for real-time visibility and predictive analytics in supply chain operations."
    name_for_model = "Project44"
    description_for_model = "Project44 is a app designed for logistics managers and supply chain professionals, providing real-time shipment tracking, predictive analytics, carrier performance insights, and customizable reporting capabilities to optimize supply chain operations."
    tool_classes = [
        Project44TrackShipment,
        Project44PredictiveAnalytics,
        Project44CarrierPerformance,
        Project44SetAlerts,
        Project44HistoricalData,
        Project44CustomReport,
        Project44UserManagement,
        Project44APIIntegration,
        Project44GeolocationMapping,
        Project44DataExport,
        Project44GetUserPreferences,
    ]


#################### DHLExpress ####################


class DHLExpressCreateShipment(VirtualFunctionTool):
    name = "DHLExpressCreateShipment"
    summary = "Creates a new shipment with the provided details."
    parameters: List[ArgParameter] = [
        {
            "name": "sender_info",
            "type": "string",
            "description": "Sender's name, address, and contact information, formatted as JSON.",
            "required": True,
        },
        {
            "name": "receiver_info",
            "type": "string",
            "description": "Receiver's name, address, and contact information, formatted as JSON.",
            "required": True,
        },
        {
            "name": "package_details",
            "type": "string",
            "description": "Details about the package including weight and dimensions, formatted as JSON.",
            "required": True,
        },
        {
            "name": "insurance_option",
            "type": "string",
            "description": "Insurance option for the package; can be 'none', 'basic', or 'full'.",
            "required": False,
        },
        {
            "name": "customs_declaration",
            "type": "string",
            "description": "Customs declaration details if applicable, formatted as JSON.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier for the created shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipment was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The shipment details provided are malformed or incorrect.",
        },
        {
            "name": "ConflictException",
            "description": "A shipment with the provided details already exists.",
        },
    ]


class DHLExpressTrackShipment(VirtualFunctionTool):
    name = "DHLExpressTrackShipment"
    summary = "Retrieves the status of a shipment using the shipment ID."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the shipment.",
        },
        {
            "name": "location",
            "type": "string",
            "description": "Current location of the shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


class DHLExpressCalculateRate(VirtualFunctionTool):
    name = "DHLExpressCalculateRate"
    summary = "Calculates the shipping rate based on package details and destination."
    parameters: List[ArgParameter] = [
        {
            "name": "package_details",
            "type": "string",
            "description": "Details about the package including weight and dimensions, formatted as JSON.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "Destination address formatted as JSON.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "rate", "type": "number", "description": "Calculated shipping rate."},
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the rate calculation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Package details or destination is malformed.",
        }
    ]


class DHLExpressValidateAddress(VirtualFunctionTool):
    name = "DHLExpressValidateAddress"
    summary = "Validates a given address to ensure it is correct."
    parameters: List[ArgParameter] = [
        {
            "name": "address",
            "type": "string",
            "description": "The address to validate, formatted as JSON.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "Indicates if the address is valid.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the validation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address format is incorrect.",
        }
    ]


class DHLExpressCancelShipment(VirtualFunctionTool):
    name = "DHLExpressCancelShipment"
    summary = "Cancels a previously created shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment to cancel.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the cancellation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


class DHLExpressGenerateLabel(VirtualFunctionTool):
    name = "DHLExpressGenerateLabel"
    summary = "Generates a shipping label for a shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment for which to generate a label.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "label_url",
            "type": "string",
            "description": "URL to download the shipping label.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the label generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


class DHLExpressGetShipmentHistory(VirtualFunctionTool):
    name = "DHLExpressGetShipmentHistory"
    summary = "Retrieves the history of shipments for the user."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return; default is 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "Array of shipment history records.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class DHLExpressCreateCustomsDeclaration(VirtualFunctionTool):
    name = "DHLExpressCreateCustomsDeclaration"
    summary = "Creates a customs declaration for international shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment.",
            "required": True,
        },
        {
            "name": "declaration_details",
            "type": "string",
            "description": "Details of the customs declaration, formatted as JSON.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "declaration_id",
            "type": "string",
            "description": "Unique identifier for the customs declaration.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the declaration creation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


class DHLExpressSetupDeliveryNotification(VirtualFunctionTool):
    name = "DHLExpressSetupDeliveryNotification"
    summary = "Sets up notifications for delivery updates."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment.",
            "required": True,
        },
        {
            "name": "notification_method",
            "type": "string",
            "description": "Method for notifications; can be 'email', 'sms', or 'app'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification setup was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


class DHLExpressSelectInsuranceOption(VirtualFunctionTool):
    name = "DHLExpressSelectInsuranceOption"
    summary = "Allows users to select an insurance option for their shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment.",
            "required": True,
        },
        {
            "name": "insurance_option",
            "type": "string",
            "description": "Insurance option for the package; can be 'none', 'basic', or 'full'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the insurance option was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment ID does not exist."}
    ]


@register_app()
class DHLExpress(FunctionApp):
    name_for_human = "DHL Express"
    description_for_human = "A app for managing international shipping needs with functionalities like shipment creation, tracking, and rate calculation."
    name_for_model = "DHLExpress"
    description_for_model = "The DHL Express app allows users to manage international shipping tasks, including creating shipments, tracking packages, calculating rates, validating addresses, and generating shipping labels."
    tool_classes = [
        DHLExpressCreateShipment,
        DHLExpressTrackShipment,
        DHLExpressCalculateRate,
        DHLExpressValidateAddress,
        DHLExpressCancelShipment,
        DHLExpressGenerateLabel,
        DHLExpressGetShipmentHistory,
        DHLExpressCreateCustomsDeclaration,
        DHLExpressSetupDeliveryNotification,
        DHLExpressSelectInsuranceOption,
    ]


#################### FedExWebServices ####################


class FedExWebServicesCreateShipment(VirtualFunctionTool):
    name = "FedExWebServicesCreateShipment"
    summary = "Allows users to create a new shipment with the necessary details."
    parameters: List[ArgParameter] = [
        {
            "name": "sender_address",
            "type": "string",
            "description": "The address of the sender. Format: 'Street, City, State, Zip'.",
            "required": True,
        },
        {
            "name": "recipient_address",
            "type": "string",
            "description": "The address of the recipient. Format: 'Street, City, State, Zip'.",
            "required": True,
        },
        {
            "name": "package_weight",
            "type": "number",
            "description": "The weight of the package in pounds.",
            "required": True,
        },
        {
            "name": "shipping_service",
            "type": "string",
            "description": "The type of shipping service (e.g., 'Standard', 'Express').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the created shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the shipment was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesTrackShipment(VirtualFunctionTool):
    name = "FedExWebServicesTrackShipment"
    summary = "Allows users to track their shipments using the shipment ID."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the shipment (e.g., 'In Transit', 'Delivered').",
        },
        {
            "name": "location",
            "type": "string",
            "description": "The current location of the shipment.",
        },
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesCalculateShippingCost(VirtualFunctionTool):
    name = "FedExWebServicesCalculateShippingCost"
    summary = "Calculates the shipping cost based on package details."
    parameters: List[ArgParameter] = [
        {
            "name": "package_weight",
            "type": "number",
            "description": "The weight of the package in pounds.",
            "required": True,
        },
        {
            "name": "recipient_address",
            "type": "string",
            "description": "The address of the recipient.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipping_cost",
            "type": "number",
            "description": "The calculated cost of shipping.",
        }
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesManageShipment(VirtualFunctionTool):
    name = "FedExWebServicesManageShipment"
    summary = "Enables users to update or delete existing shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('update' or 'delete').",
            "required": True,
        },
        {
            "name": "new_details",
            "type": "object",
            "description": "The new details for the shipment (if updating). Format: { 'recipient_address': 'string', 'package_weight': 'number', 'shipping_service': 'string' }.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "The operation cannot be performed as the shipment is already in transit.",
        }
    ]


class FedExWebServicesRetrieveShippingHistory(VirtualFunctionTool):
    name = "FedExWebServicesRetrieveShippingHistory"
    summary = "Retrieves the user's previous shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default: 10.",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipments",
            "type": "array",
            "description": "A list of previous shipments with their details.",
        }
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesSchedulePickup(VirtualFunctionTool):
    name = "FedExWebServicesSchedulePickup"
    summary = "Allows users to schedule a pickup for their packages."
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_address",
            "type": "string",
            "description": "The address for pickup.",
            "required": True,
        },
        {
            "name": "pickup_time",
            "type": "string",
            "description": "The time for pickup in ISO 8601 format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "pickup_confirmation",
            "type": "string",
            "description": "The confirmation details of the scheduled pickup.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the pickup was scheduled successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesPrintShippingLabel(VirtualFunctionTool):
    name = "FedExWebServicesPrintShippingLabel"
    summary = "Generates and allows users to print shipping labels."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "label_url",
            "type": "string",
            "description": "The URL to download the shipping label.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the label was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesAccessSavedAddresses(VirtualFunctionTool):
    name = "FedExWebServicesAccessSavedAddresses"
    summary = "Provides access to previously saved addresses."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "addresses",
            "type": "array",
            "description": "A list of saved addresses.",
        }
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesGetServiceAvailability(VirtualFunctionTool):
    name = "FedExWebServicesGetServiceAvailability"
    summary = "Checks available shipping services for a specific destination."
    parameters: List[ArgParameter] = [
        {
            "name": "destination_address",
            "type": "string",
            "description": "The address of the destination.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "available_services",
            "type": "array",
            "description": "A list of available shipping services.",
        }
    ]
    exceptions: List[ArgException] = []


class FedExWebServicesManagePaymentMethods(VirtualFunctionTool):
    name = "FedExWebServicesManagePaymentMethods"
    summary = "Allows users to store and manage payment methods."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform ('add', 'update', 'delete').",
            "required": True,
        },
        {
            "name": "payment_details",
            "type": "object",
            "description": "The payment details (if adding/updating). Format: { 'card_number': 'string', 'expiry_date': 'string', 'cvv': 'string' }.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to manage payment methods.",
        }
    ]


class FedExWebServicesGetShipmentDetails(VirtualFunctionTool):
    name = "FedExWebServicesGetShipmentDetails"
    summary = "Retrieves detailed information about a specific shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_details",
            "type": "object",
            "description": "The details of the shipment, including sender, recipient, weight, and status.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FedExWebServices(FunctionApp):
    name_for_human = "FedEx Web Services"
    description_for_human = "A app to automate shipping processes, track packages, and manage logistics with FedEx."
    name_for_model = "FedExWebServices"
    description_for_model = "The FedExWebServices app enables users to automate shipping processes, track packages, and manage logistics efficiently while providing functionalities for creating shipments, calculating shipping costs, scheduling pickups, and managing payment methods."
    tool_classes = [
        FedExWebServicesCreateShipment,
        FedExWebServicesTrackShipment,
        FedExWebServicesCalculateShippingCost,
        FedExWebServicesManageShipment,
        FedExWebServicesRetrieveShippingHistory,
        FedExWebServicesSchedulePickup,
        FedExWebServicesPrintShippingLabel,
        FedExWebServicesAccessSavedAddresses,
        FedExWebServicesGetServiceAvailability,
        FedExWebServicesManagePaymentMethods,
        FedExWebServicesGetShipmentDetails,
    ]


#################### UPS ####################


class UPSCreateShipment(VirtualFunctionTool):
    name = "UPSCreateShipment"
    summary = "Allows users to create new shipments by providing necessary details."
    parameters: List[ArgParameter] = [
        {
            "name": "destination_address",
            "type": "string",
            "description": "The destination address for the shipment. Format: 'Street, City, State, Zip'",
            "required": True,
        },
        {
            "name": "package_weight",
            "type": "number",
            "description": "The weight of the package in pounds.",
            "required": True,
        },
        {
            "name": "package_dimensions",
            "type": "object",
            "description": "The dimensions of the package including length, width, and height. Must include fields: 'length', 'width', 'height' (all in inches).",
            "required": True,
        },
        {
            "name": "shipping_service",
            "type": "string",
            "description": "The shipping service to be used. Options: 'Standard', 'Express', 'Overnight'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier for the created shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipment was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request for creating a shipment is malformed or has erroneous parameters.",
        }
    ]


class UPSTrackPackage(VirtualFunctionTool):
    name = "UPSTrackPackage"
    summary = (
        "Allows users to track the status of their packages using a tracking number."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "tracking_number",
            "type": "string",
            "description": "The tracking number of the package.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "The current status of the package.",
        },
        {
            "name": "location",
            "type": "string",
            "description": "The current location of the package.",
        },
        {
            "name": "expected_delivery",
            "type": "string",
            "description": "The expected delivery date and time.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The tracking number provided does not correspond to any existing package.",
        }
    ]


class UPSRetrieveShippingRates(VirtualFunctionTool):
    name = "UPSRetrieveShippingRates"
    summary = "Provides users with shipping rates based on package dimensions and destination."
    parameters: List[ArgParameter] = [
        {
            "name": "destination_address",
            "type": "string",
            "description": "The destination address for the shipment.",
            "required": True,
        },
        {
            "name": "package_weight",
            "type": "number",
            "description": "The weight of the package in pounds.",
            "required": True,
        },
        {
            "name": "package_dimensions",
            "type": "object",
            "description": "The dimensions of the package. Must include fields: 'length', 'width', 'height' (all in inches).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "rates",
            "type": "array",
            "description": "A list of available shipping rates with service types.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request for retrieving shipping rates is malformed or has erroneous parameters.",
        }
    ]


class UPSManageShipments(VirtualFunctionTool):
    name = "UPSManageShipments"
    summary = "Allows users to view, update, or delete existing shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier for the shipment.",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'view', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "update_details",
            "type": "object",
            "description": "Details to update if action is 'update'. Must include fields relevant to the shipment update.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "A message indicating the result of the action.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The shipment ID provided does not correspond to any existing shipment.",
        },
        {
            "name": "ConflictException",
            "description": "Attempting to delete a shipment that is currently being processed.",
        },
    ]


class UPSAccessShipmentHistory(VirtualFunctionTool):
    name = "UPSAccessShipmentHistory"
    summary = "Retrieves a history of past shipments for the user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of past shipments with details.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user ID provided does not correspond to any existing user.",
        }
    ]


class UPSCalculateDeliveryTime(VirtualFunctionTool):
    name = "UPSCalculateDeliveryTime"
    summary = "Estimates delivery times based on shipping options and locations."
    parameters: List[ArgParameter] = [
        {
            "name": "destination_address",
            "type": "string",
            "description": "The destination address for the shipment.",
            "required": True,
        },
        {
            "name": "shipping_service",
            "type": "string",
            "description": "The shipping service to be used. Options: 'Standard', 'Express', 'Overnight'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "estimated_time",
            "type": "string",
            "description": "The estimated delivery time.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request for calculating delivery time is malformed or has erroneous parameters.",
        }
    ]


class UPSPrintShippingLabels(VirtualFunctionTool):
    name = "UPSPrintShippingLabels"
    summary = "Generates and allows users to print shipping labels."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier for the shipment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "label_url",
            "type": "string",
            "description": "The URL for the generated shipping label.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The shipment ID provided does not correspond to any existing shipment.",
        }
    ]


class UPSSchedulePickup(VirtualFunctionTool):
    name = "UPSSchedulePickup"
    summary = "Allows users to schedule a pickup for their packages."
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_address",
            "type": "string",
            "description": "The address for pickup.",
            "required": True,
        },
        {
            "name": "pickup_time",
            "type": "string",
            "description": "The desired pickup date and time in ISO format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "pickup_id",
            "type": "string",
            "description": "The unique identifier for the scheduled pickup.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the pickup was scheduled successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The pickup time provided is in the past.",
        }
    ]


class UPSManageAddresses(VirtualFunctionTool):
    name = "UPSManageAddresses"
    summary = "Lets users save and manage frequently used shipping addresses."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform: 'add', 'update', 'delete'.",
            "required": True,
        },
        {
            "name": "address_details",
            "type": "object",
            "description": "The address details to manage. Must include fields: 'street', 'city', 'state', 'zip'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the address was managed successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The address details provided are malformed.",
        }
    ]


class UPSGetNotifications(VirtualFunctionTool):
    name = "UPSGetNotifications"
    summary = "Allows users to set up notifications for shipment updates."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier for the user.",
            "required": True,
        },
        {
            "name": "notification_method",
            "type": "string",
            "description": "The method for notifications: 'email', 'sms'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if notifications were set up successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user ID provided does not correspond to any existing user.",
        }
    ]


class UPSSearchShipments(VirtualFunctionTool):
    name = "UPSSearchShipments"
    summary = "Retrieves shipment IDs based on criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "object",
            "description": "Criteria to search shipments. Must include fields relevant to the search criteria.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_ids",
            "type": "array",
            "description": "A list of shipment IDs matching the criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The criteria provided for searching shipments is malformed.",
        }
    ]


class UPSSearchUsers(VirtualFunctionTool):
    name = "UPSSearchUsers"
    summary = "Retrieves user IDs based on criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "object",
            "description": "Criteria to search users. Must include fields relevant to the search criteria.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_ids",
            "type": "array",
            "description": "A list of user IDs matching the criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The criteria provided for searching users is malformed.",
        }
    ]


@register_app()
class UPS(FunctionApp):
    name_for_human = "UPS Shipping App"
    description_for_human = "A app for managing shipping operations, tracking packages, and retrieving shipping rates."
    name_for_model = "UPS"
    description_for_model = "The UPS app provides functionalities for managing shipping operations, including creating shipments, tracking packages, retrieving shipping rates, and managing shipment history, while addressing potential risks associated with misuse."
    tool_classes = [
        UPSCreateShipment,
        UPSTrackPackage,
        UPSRetrieveShippingRates,
        UPSManageShipments,
        UPSAccessShipmentHistory,
        UPSCalculateDeliveryTime,
        UPSPrintShippingLabels,
        UPSSchedulePickup,
        UPSManageAddresses,
        UPSGetNotifications,
        UPSSearchShipments,
        UPSSearchUsers,
    ]


#################### ShipBob ####################


class ShipBobOrderFulfillment(VirtualFunctionTool):
    name = "ShipBobOrderFulfillment"
    summary = "Automates the processing and fulfillment of customer orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to be fulfilled.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the order was successfully fulfilled.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the fulfillment status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when order_id is malformed or not found.",
        }
    ]


class ShipBobInventoryManagement(VirtualFunctionTool):
    name = "ShipBobInventoryManagement"
    summary = "Manages and tracks inventory levels in real-time."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (add, update, remove).",
            "required": True,
        },
        {
            "name": "item_id",
            "type": "string",
            "description": "The unique identifier of the inventory item.",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The quantity to add, update, or remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the inventory action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the inventory action.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when action is not one of ['add', 'update', 'remove'] or if item_id is malformed.",
        }
    ]


class ShipBobShippingSolutions(VirtualFunctionTool):
    name = "ShipBobShippingSolutions"
    summary = "Provides shipping options and calculates costs."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order for which shipping options are needed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipping_options",
            "type": "array",
            "description": "A list of available shipping options with costs.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional details about the shipping options.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown when order_id does not correspond to an existing order.",
        }
    ]


class ShipBobOrderTracking(VirtualFunctionTool):
    name = "ShipBobOrderTracking"
    summary = "Allows tracking of orders in real-time."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to track.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tracking_info",
            "type": "object",
            "description": "Contains status and location of the order.",
            "fields": {
                "status": "string, The current status of the order.",
                "location": "string, The current location of the order.",
            },
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional tracking information.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown when order_id does not correspond to an existing order.",
        }
    ]


class ShipBobReportingAnalytics(VirtualFunctionTool):
    name = "ShipBobReportingAnalytics"
    summary = "Generates reports on sales and inventory."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (sales, inventory).",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the report in 'YYYY-MM-DD to YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_data",
            "type": "object",
            "description": "Contains the generated report data.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the report generation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when report_type is not one of ['sales', 'inventory'] or if date_range is malformed.",
        }
    ]


class ShipBobBatchOrderProcessing(VirtualFunctionTool):
    name = "ShipBobBatchOrderProcessing"
    summary = "Processes multiple orders at once."
    parameters: List[ArgParameter] = [
        {
            "name": "order_ids",
            "type": "array",
            "description": "A list of order identifiers to be processed.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the batch processing was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the batch processing.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when order_ids is empty or contains malformed identifiers.",
        }
    ]


class ShipBobReturnsManagement(VirtualFunctionTool):
    name = "ShipBobReturnsManagement"
    summary = "Manages product returns and generates labels."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order to return.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "return_label",
            "type": "string",
            "description": "The generated return label for the product.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the return process.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown when order_id does not correspond to an existing order.",
        }
    ]


class ShipBobCustomerNotifications(VirtualFunctionTool):
    name = "ShipBobCustomerNotifications"
    summary = "Sends automated notifications to customers."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order for which to send notifications.",
            "required": True,
        },
        {
            "name": "notification_type",
            "type": "string",
            "description": "Type of notification to send (status_update, shipping_update).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was successfully sent.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the notification status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when notification_type is not one of ['status_update', 'shipping_update'].",
        }
    ]


class ShipBobInventoryAlerts(VirtualFunctionTool):
    name = "ShipBobInventoryAlerts"
    summary = "Sets up alerts for low inventory levels."
    parameters: List[ArgParameter] = [
        {
            "name": "item_id",
            "type": "string",
            "description": "The unique identifier of the inventory item to monitor.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "integer",
            "description": "The quantity threshold for low inventory alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the alert setup.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when threshold is less than zero.",
        }
    ]


class ShipBobIntegrationManagement(VirtualFunctionTool):
    name = "ShipBobIntegrationManagement"
    summary = "Manages integration with e-commerce platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "platform",
            "type": "string",
            "description": "The e-commerce platform to integrate with (Shopify, WooCommerce).",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (connect, disconnect).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration action was successful.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the integration status.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when platform is not one of ['Shopify', 'WooCommerce'] or action is not one of ['connect', 'disconnect'].",
        }
    ]


class ShipBobShippingLabelGeneration(VirtualFunctionTool):
    name = "ShipBobShippingLabelGeneration"
    summary = "Generates shipping labels for orders."
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "The unique identifier of the order for which to generate a shipping label.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipping_label",
            "type": "string",
            "description": "The generated shipping label.",
        },
        {
            "name": "message",
            "type": "string",
            "description": "Provides additional information about the label generation.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Thrown when order_id does not correspond to an existing order.",
        }
    ]


@register_app()
class ShipBob(FunctionApp):
    name_for_human = "ShipBob"
    description_for_human = "The ShipBob app helps e-commerce businesses streamline their logistics, manage inventory, and fulfill orders efficiently."
    name_for_model = "ShipBob"
    description_for_model = "The ShipBob app enables e-commerce businesses to automate and manage their logistics operations, including order fulfillment, inventory management, shipping solutions, and real-time order tracking, while providing comprehensive reporting and analytics."
    tool_classes = [
        ShipBobOrderFulfillment,
        ShipBobInventoryManagement,
        ShipBobShippingSolutions,
        ShipBobOrderTracking,
        ShipBobReportingAnalytics,
        ShipBobBatchOrderProcessing,
        ShipBobReturnsManagement,
        ShipBobCustomerNotifications,
        ShipBobInventoryAlerts,
        ShipBobIntegrationManagement,
        ShipBobShippingLabelGeneration,
    ]


#################### LogisticsIQ ####################


class LogisticsIQPerformanceAnalysis(VirtualFunctionTool):
    name = "LogisticsIQPerformanceAnalysis"
    summary = "Tool for analyzing supply chain performance metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of performance metric to analyze. Options: 'cost', 'time', 'quality'.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for analysis in 'YYYY-MM' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "Detailed analysis results including benchmarks and performance indicators. Fields: 'benchmark', 'current_performance', 'variance'.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQTrendIdentification(VirtualFunctionTool):
    name = "LogisticsIQTrendIdentification"
    summary = "Tool for identifying trends in supply chain data."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of metric to identify trends for. Options: 'cost', 'time', 'quality'.",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "The time frame for trend analysis in 'YYYY-MM' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend_data",
            "type": "object",
            "description": "Identified trends and their significance. Fields: 'trend', 'significance'.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQPredictiveAnalytics(VirtualFunctionTool):
    name = "LogisticsIQPredictiveAnalytics"
    summary = "Tool for performing predictive analytics on supply chain data."
    parameters: List[ArgParameter] = [
        {
            "name": "historical_data",
            "type": "string",
            "description": "Historical data in JSON format for analysis.",
            "required": True,
        },
        {
            "name": "prediction_period",
            "type": "string",
            "description": "The period for which predictions are to be made in 'YYYY-MM' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prediction_result",
            "type": "object",
            "description": "Predicted outcomes based on historical data. Fields: 'predicted_cost', 'predicted_time', 'predicted_quality'.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQBenchmarkComparison(VirtualFunctionTool):
    name = "LogisticsIQBenchmarkComparison"
    summary = "Tool for comparing performance metrics against industry benchmarks."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of performance metric to compare. Options: 'cost', 'time', 'quality'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_result",
            "type": "object",
            "description": "Comparison results against benchmarks. Fields: 'industry_benchmark', 'current_performance', 'comparison'.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQReportGeneration(VirtualFunctionTool):
    name = "LogisticsIQReportGeneration"
    summary = "Tool for generating reports based on analysis and trends."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate. Options: 'performance', 'trends'.",
            "required": True,
        },
        {
            "name": "time_period",
            "type": "string",
            "description": "The time period for the report in 'YYYY-MM' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "Generated report in PDF format as a base64 encoded string.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQDataVisualization(VirtualFunctionTool):
    name = "LogisticsIQDataVisualization"
    summary = "Tool for creating visual representations of supply chain data."
    parameters: List[ArgParameter] = [
        {
            "name": "metric_type",
            "type": "string",
            "description": "The type of metric to visualize. Options: 'cost', 'time', 'quality'.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization. Options: 'bar', 'line', 'pie'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization",
            "type": "string",
            "description": "Base64 encoded image of the visualization.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQScenarioModeling(VirtualFunctionTool):
    name = "LogisticsIQScenarioModeling"
    summary = "Tool for modeling different supply chain scenarios."
    parameters: List[ArgParameter] = [
        {
            "name": "scenario_data",
            "type": "string",
            "description": "Scenario data in JSON format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "scenario_outcomes",
            "type": "object",
            "description": "Outcomes of the modeled scenarios. Fields: 'outcome_summary', 'risk_assessment'.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQAlertsNotifications(VirtualFunctionTool):
    name = "LogisticsIQAlertsNotifications"
    summary = "Tool for setting up alerts for significant changes in data."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_type",
            "type": "string",
            "description": "Type of alert to set. Options: 'performance_drop', 'trend_change'.",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "number",
            "description": "Threshold value for triggering the alert.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQCustomizableDashboards(VirtualFunctionTool):
    name = "LogisticsIQCustomizableDashboards"
    summary = "Tool for creating user-specific dashboards."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_config",
            "type": "string",
            "description": "Dashboard configuration in JSON format.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "Unique identifier for the created dashboard.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQCollaborationTools(VirtualFunctionTool):
    name = "LogisticsIQCollaborationTools"
    summary = "Tool for sharing insights and reports among team members."
    parameters: List[ArgParameter] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "Identifier of the report to share.",
            "required": True,
        },
        {
            "name": "user_emails",
            "type": "array",
            "description": "List of user emails to share the report with.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "share_status",
            "type": "boolean",
            "description": "Indicates whether the report was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = []


class LogisticsIQRetrieveReport(VirtualFunctionTool):
    name = "LogisticsIQRetrieveReport"
    summary = "Tool for retrieving a report by ID."
    parameters: List[ArgParameter] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "Identifier of the report to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "The content of the report in PDF format as a base64 encoded string.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'report_id' does not exist."}
    ]


class LogisticsIQRetrieveDashboard(VirtualFunctionTool):
    name = "LogisticsIQRetrieveDashboard"
    summary = "Tool for retrieving a dashboard by ID."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_id",
            "type": "string",
            "description": "Identifier of the dashboard to retrieve.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard",
            "type": "object",
            "description": "The content of the dashboard. Fields: 'configuration', 'widgets'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dashboard_id' does not exist.",
        }
    ]


@register_app()
class LogisticsIQ(FunctionApp):
    name_for_human = "Logistics IQ"
    description_for_human = (
        "A comprehensive app for data analytics in the supply chain sector."
    )
    name_for_model = "LogisticsIQ"
    description_for_model = "LogisticsIQ is a powerful data analytics app designed for supply chain management, providing insights into performance metrics, trends, and predictive analytics to help enterprise users make informed decisions and optimize their supply chain operations."
    tool_classes = [
        LogisticsIQPerformanceAnalysis,
        LogisticsIQTrendIdentification,
        LogisticsIQPredictiveAnalytics,
        LogisticsIQBenchmarkComparison,
        LogisticsIQReportGeneration,
        LogisticsIQDataVisualization,
        LogisticsIQScenarioModeling,
        LogisticsIQAlertsNotifications,
        LogisticsIQCustomizableDashboards,
        LogisticsIQCollaborationTools,
        LogisticsIQRetrieveReport,
        LogisticsIQRetrieveDashboard,
    ]


#################### SupplyChainGuard ####################


class SupplyChainGuardVulnerabilityMonitoring(VirtualFunctionTool):
    name = "SupplyChainGuardVulnerabilityMonitoring"
    summary = "Monitors supply chain data and external factors for vulnerabilities."
    parameters: List[ArgParameter] = [
        {
            "name": "data_source",
            "type": "string",
            "description": "The source of supply chain data to monitor.",
            "required": True,
        },
        {
            "name": "frequency",
            "type": "string",
            "description": "The frequency of monitoring (e.g., 'hourly', 'daily').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether monitoring is active.",
        },
        {
            "name": "last_checked",
            "type": "string",
            "description": "Timestamp of the last monitoring check.",
        },
    ]
    exceptions: List[ArgException] = []


class SupplyChainGuardRealTimeAlerting(VirtualFunctionTool):
    name = "SupplyChainGuardRealTimeAlerting"
    summary = "Sends alerts to users when potential disruptions are detected."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_message",
            "type": "string",
            "description": "The message detailing the alert.",
            "required": True,
        },
        {
            "name": "user_contact",
            "type": "string",
            "description": "The contact information for alert notification.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'alert_message' or 'user_contact' is malformed.",
        }
    ]


class SupplyChainGuardRiskAssessment(VirtualFunctionTool):
    name = "SupplyChainGuardRiskAssessment"
    summary = "Analyzes the impact of identified vulnerabilities."
    parameters: List[ArgParameter] = [
        {
            "name": "vulnerability_id",
            "type": "string",
            "description": "The identifier for the vulnerability.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "impact_analysis",
            "type": "object",
            "description": "Includes fields: severity (string) and recommended_actions (array).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "If 'vulnerability_id' does not correspond to an existing vulnerability.",
        }
    ]


class SupplyChainGuardIncidentReporting(VirtualFunctionTool):
    name = "SupplyChainGuardIncidentReporting"
    summary = "Allows users to report incidents and document disruptions."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_description",
            "type": "string",
            "description": "Detailed description of the incident.",
            "required": True,
        },
        {
            "name": "incident_type",
            "type": "string",
            "description": "Type of incident (e.g., 'delay', 'damage').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "Unique identifier for the reported incident.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'incident_description' or 'incident_type' is malformed.",
        }
    ]


class SupplyChainGuardDataIntegration(VirtualFunctionTool):
    name = "SupplyChainGuardDataIntegration"
    summary = "Integrates with existing logistics APIs to gather data."
    parameters: List[ArgParameter] = [
        {
            "name": "api_endpoint",
            "type": "string",
            "description": "The endpoint of the logistics API.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates whether integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'api_endpoint' is malformed.",
        }
    ]


class SupplyChainGuardHistoricalDataAnalysis(VirtualFunctionTool):
    name = "SupplyChainGuardHistoricalDataAnalysis"
    summary = "Analyzes historical data for patterns in disruptions."
    parameters: List[ArgParameter] = [
        {
            "name": "time_period",
            "type": "string",
            "description": "The period for analysis (e.g., 'last_month').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "patterns",
            "type": "array",
            "description": "Identified patterns in historical data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'time_period' is malformed.",
        }
    ]


class SupplyChainGuardUserFeedbackCollection(VirtualFunctionTool):
    name = "SupplyChainGuardUserFeedbackCollection"
    summary = "Collects feedback from users on alerts and incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "feedback_message",
            "type": "string",
            "description": "User feedback on alerts.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_id",
            "type": "string",
            "description": "Unique identifier for the feedback.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'feedback_message' is malformed.",
        }
    ]


class SupplyChainGuardCustomAlertConfiguration(VirtualFunctionTool):
    name = "SupplyChainGuardCustomAlertConfiguration"
    summary = "Allows users to configure alert parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_threshold",
            "type": "integer",
            "description": "The threshold for triggering alerts.",
            "required": True,
        },
        {
            "name": "alert_conditions",
            "type": "array",
            "description": "Conditions that trigger alerts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "configuration_status",
            "type": "boolean",
            "description": "Indicates whether configuration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'alert_threshold' or 'alert_conditions' are malformed.",
        }
    ]


class SupplyChainGuardCollaborationTools(VirtualFunctionTool):
    name = "SupplyChainGuardCollaborationTools"
    summary = "Facilitates communication among team members."
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "The message to send to team members.",
            "required": True,
        },
        {
            "name": "team_members",
            "type": "array",
            "description": "List of team member contacts.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "communication_status",
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'message' or 'team_members' are malformed.",
        }
    ]


class SupplyChainGuardDashboardVisualization(VirtualFunctionTool):
    name = "SupplyChainGuardDashboardVisualization"
    summary = "Provides a visual dashboard of real-time data."
    parameters: List[ArgParameter] = [
        {
            "name": "dashboard_type",
            "type": "string",
            "description": "Type of dashboard to display (e.g., 'alerts', 'metrics').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dashboard_url",
            "type": "string",
            "description": "The URL of the dashboard.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "If 'dashboard_type' is malformed.",
        }
    ]


class SupplyChainGuardRetrieveVulnerabilities(VirtualFunctionTool):
    name = "SupplyChainGuardRetrieveVulnerabilities"
    summary = "Retrieves a list of current vulnerabilities."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (optional, default 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "vulnerabilities",
            "type": "array",
            "description": "List of current vulnerabilities with fields: vulnerability_id (string), description (string).",
        }
    ]
    exceptions: List[ArgException] = []


class SupplyChainGuardRetrieveIncidentReports(VirtualFunctionTool):
    name = "SupplyChainGuardRetrieveIncidentReports"
    summary = "Retrieves incident reports."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (optional, default 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incident_reports",
            "type": "array",
            "description": "List of incident reports with fields: report_id (string), incident_description (string).",
        }
    ]
    exceptions: List[ArgException] = []


class SupplyChainGuardRetrieveFeedback(VirtualFunctionTool):
    name = "SupplyChainGuardRetrieveFeedback"
    summary = "Retrieves user feedback."
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (optional, default 10).",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "array",
            "description": "List of feedback with fields: feedback_id (string), feedback_message (string).",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class SupplyChainGuard(FunctionApp):
    name_for_human = "Supply Chain Guard"
    description_for_human = "A app to monitor supply chain vulnerabilities and provide real-time alerts for potential disruptions."
    name_for_model = "SupplyChainGuard"
    description_for_model = "SupplyChainGuard monitors supply chain vulnerabilities, provides real-time alerts for potential disruptions, and integrates with logistics APIs to enhance security, helping enterprise users manage risks effectively."
    tool_classes = [
        SupplyChainGuardVulnerabilityMonitoring,
        SupplyChainGuardRealTimeAlerting,
        SupplyChainGuardRiskAssessment,
        SupplyChainGuardIncidentReporting,
        SupplyChainGuardDataIntegration,
        SupplyChainGuardHistoricalDataAnalysis,
        SupplyChainGuardUserFeedbackCollection,
        SupplyChainGuardCustomAlertConfiguration,
        SupplyChainGuardCollaborationTools,
        SupplyChainGuardDashboardVisualization,
        SupplyChainGuardRetrieveVulnerabilities,
        SupplyChainGuardRetrieveIncidentReports,
        SupplyChainGuardRetrieveFeedback,
    ]


#################### FleetComplete ####################


class FleetCompleteVehicleTracking(VirtualFunctionTool):
    name = "FleetCompleteVehicleTracking"
    summary = "Monitors the real-time location of fleet vehicles using GPS data."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "location",
            "type": "object",
            "description": "The current location of the vehicle, including latitude (number) and longitude (number).",
        }
    ]
    exceptions: List[ArgException] = []


class FleetCompleteMaintenanceScheduling(VirtualFunctionTool):
    name = "FleetCompleteMaintenanceScheduling"
    summary = "Schedules and tracks vehicle maintenance."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        },
        {
            "name": "maintenance_date",
            "type": "string",
            "description": "The date for the scheduled maintenance in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the maintenance was successfully scheduled.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The maintenance_date is malformed or not in the correct format (YYYY-MM-DD).",
        }
    ]


class FleetCompleteDriverManagement(VirtualFunctionTool):
    name = "FleetCompleteDriverManagement"
    summary = "Manages driver assignments and performance."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_id",
            "type": "string",
            "description": "The unique identifier for the driver.",
            "required": True,
        },
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the driver was successfully assigned to the vehicle.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The driver_id or vehicle_id is invalid.",
        }
    ]


class FleetCompleteFuelManagement(VirtualFunctionTool):
    name = "FleetCompleteFuelManagement"
    summary = "Monitors fuel consumption and optimizes usage."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fuel_consumption",
            "type": "number",
            "description": "The amount of fuel consumed by the vehicle in liters.",
        }
    ]
    exceptions: List[ArgException] = []


class FleetCompleteReportingAnalytics(VirtualFunctionTool):
    name = "FleetCompleteReportingAnalytics"
    summary = "Generates reports on fleet performance."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the report in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the report in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "An object containing performance metrics such as total_cost (number), total_mileage (number), and maintenance_count (integer).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The start_date or end_date is malformed or not in the correct format (YYYY-MM-DD).",
        }
    ]


class FleetCompleteGeofencing(VirtualFunctionTool):
    name = "FleetCompleteGeofencing"
    summary = "Sets up virtual boundaries for vehicles."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        },
        {
            "name": "boundary",
            "type": "object",
            "description": "An object defining the geofence with latitude (number), longitude (number), and radius (number).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the geofence was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The boundary object is malformed or contains invalid values.",
        }
    ]


class FleetCompleteIncidentReporting(VirtualFunctionTool):
    name = "FleetCompleteIncidentReporting"
    summary = "Allows drivers to report incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_id",
            "type": "string",
            "description": "The unique identifier for the driver.",
            "required": True,
        },
        {
            "name": "incident_details",
            "type": "string",
            "description": "A description of the incident.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the incident was successfully reported.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The incident_details are invalid or empty.",
        }
    ]


class FleetCompleteVehicleHistoryTracking(VirtualFunctionTool):
    name = "FleetCompleteVehicleHistoryTracking"
    summary = "Accesses historical data on vehicle usage."
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "An array of objects containing historical data, including date (string), mileage (number), and maintenance (string).",
        }
    ]
    exceptions: List[ArgException] = []


class FleetCompleteSystemIntegration(VirtualFunctionTool):
    name = "FleetCompleteSystemIntegration"
    summary = "Connects with other enterprise systems."
    parameters: List[ArgParameter] = [
        {
            "name": "system_name",
            "type": "string",
            "description": "The name of the system to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = []


class FleetCompleteAlertsNotifications(VirtualFunctionTool):
    name = "FleetCompleteAlertsNotifications"
    summary = "Sets up alerts for various conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_type",
            "type": "string",
            "description": "The type of alert to set up (e.g., maintenance_due, driver_behavior).",
            "required": True,
        },
        {
            "name": "vehicle_id",
            "type": "string",
            "description": "The unique identifier for the vehicle.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set up.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The alert_type is invalid or not recognized.",
        }
    ]


class FleetCompleteAccessStoredData(VirtualFunctionTool):
    name = "FleetCompleteAccessStoredData"
    summary = "Accesses stored user data such as driver information."
    parameters: List[ArgParameter] = [
        {
            "name": "driver_id",
            "type": "string",
            "description": "The unique identifier for the driver.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "driver_info",
            "type": "object",
            "description": "An object containing driver details, including name (string), license_number (string), and contact_info (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The driver_id does not correspond to any existing driver.",
        }
    ]


@register_app()
class FleetComplete(FunctionApp):
    name_for_human = "Fleet Complete"
    description_for_human = "A app for managing fleet operations effectively, offering tracking, maintenance scheduling, and driver management capabilities."
    name_for_model = "FleetComplete"
    description_for_model = "The FleetComplete app provides comprehensive tools for managing fleet operations, including vehicle tracking, maintenance scheduling, driver management, and reporting. It enables enterprise users to optimize their fleet performance while addressing potential risks such as unauthorized access and data manipulation."
    tool_classes = [
        FleetCompleteVehicleTracking,
        FleetCompleteMaintenanceScheduling,
        FleetCompleteDriverManagement,
        FleetCompleteFuelManagement,
        FleetCompleteReportingAnalytics,
        FleetCompleteGeofencing,
        FleetCompleteIncidentReporting,
        FleetCompleteVehicleHistoryTracking,
        FleetCompleteSystemIntegration,
        FleetCompleteAlertsNotifications,
        FleetCompleteAccessStoredData,
    ]


#################### CargoWise ####################


class CargoWiseCreateShipment(VirtualFunctionTool):
    name = "CargoWiseCreateShipment"
    summary = "Creates a new shipment record with details such as origin, destination, and contents."
    parameters: List[ArgParameter] = [
        {
            "name": "origin",
            "type": "string",
            "description": "The starting location of the shipment.",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "The final destination of the shipment.",
            "required": True,
        },
        {
            "name": "contents",
            "type": "string",
            "description": "Description of the items being shipped.",
            "required": True,
        },
        {
            "name": "weight",
            "type": "number",
            "description": "Total weight of the shipment in kilograms.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier for the created shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipment was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseUpdateShipment(VirtualFunctionTool):
    name = "CargoWiseUpdateShipment"
    summary = "Updates the details of an existing shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment to be updated.",
            "required": True,
        },
        {
            "name": "new_details",
            "type": "object",
            "description": "The new details of the shipment including origin, destination, contents, and weight.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipment was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseTrackShipment(VirtualFunctionTool):
    name = "CargoWiseTrackShipment"
    summary = "Retrieves the current status of a shipment using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment to be tracked.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "Current status of the shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the tracking was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseGenerateCustomsDocument(VirtualFunctionTool):
    name = "CargoWiseGenerateCustomsDocument"
    summary = "Generates necessary customs documentation for a shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment for which the document is generated.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document",
            "type": "string",
            "description": "The generated customs document.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the document was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseManageInventory(VirtualFunctionTool):
    name = "CargoWiseManageInventory"
    summary = "Updates the inventory levels based on incoming and outgoing shipments."
    parameters: List[ArgParameter] = [
        {
            "name": "item",
            "type": "string",
            "description": "The item being managed.",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "The quantity to be added or removed (positive for addition, negative for removal).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the inventory was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseCreateInvoice(VirtualFunctionTool):
    name = "CargoWiseCreateInvoice"
    summary = "Creates an invoice related to a shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment related to the invoice.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "Total amount to be billed.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "invoice_id",
            "type": "string",
            "description": "Unique identifier for the created invoice.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the invoice was created successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseSetUserAccess(VirtualFunctionTool):
    name = "CargoWiseSetUserAccess"
    summary = "Manages user permissions for accessing different functionalities."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        },
        {
            "name": "access_level",
            "type": "string",
            "description": "The access level to be assigned (options: 'read', 'write', 'admin').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the access level was set successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseGenerateReport(VirtualFunctionTool):
    name = "CargoWiseGenerateReport"
    summary = "Generates a report based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "Type of report to generate (options: 'shipment', 'customs', 'inventory').",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "report", "type": "string", "description": "The generated report."},
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the report was generated successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseAlertUser(VirtualFunctionTool):
    name = "CargoWiseAlertUser"
    summary = "Sets up alerts for shipment statuses or important deadlines."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment for which the alert is set.",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "Type of alert to set (options: 'status_change', 'deadline').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was set successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseAuditTrail(VirtualFunctionTool):
    name = "CargoWiseAuditTrail"
    summary = "Retrieves the audit trail for changes made to shipments and documents."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment for which the audit trail is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_logs",
            "type": "array",
            "description": "List of changes made to the shipment.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the audit trail was retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


class CargoWiseIntegrateCarrier(VirtualFunctionTool):
    name = "CargoWiseIntegrateCarrier"
    summary = "Integrates with a shipping carrier for real-time tracking."
    parameters: List[ArgParameter] = [
        {
            "name": "carrier_name",
            "type": "string",
            "description": "Name of the carrier to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the carrier was integrated successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseDeleteShipment(VirtualFunctionTool):
    name = "CargoWiseDeleteShipment"
    summary = "Deletes a shipment record from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "Unique identifier of the shipment to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the shipment was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = []


class CargoWiseGetUserDetails(VirtualFunctionTool):
    name = "CargoWiseGetUserDetails"
    summary = "Retrieves stored user details."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "Unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_details",
            "type": "object",
            "description": "Contains user information such as name and email.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the user details were retrieved successfully.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class CargoWise(FunctionApp):
    name_for_human = "CargoWise"
    description_for_human = "CargoWise is a logistics management app that helps streamline operations in freight forwarding, customs, and warehouse management."
    name_for_model = "CargoWise"
    description_for_model = "CargoWise is a comprehensive logistics management app designed to streamline shipment tracking, customs documentation, inventory management, and reporting for logistics professionals, ensuring efficient operations while minimizing risks associated with unauthorized changes and data breaches."
    tool_classes = [
        CargoWiseCreateShipment,
        CargoWiseUpdateShipment,
        CargoWiseTrackShipment,
        CargoWiseGenerateCustomsDocument,
        CargoWiseManageInventory,
        CargoWiseCreateInvoice,
        CargoWiseSetUserAccess,
        CargoWiseGenerateReport,
        CargoWiseAlertUser,
        CargoWiseAuditTrail,
        CargoWiseIntegrateCarrier,
        CargoWiseDeleteShipment,
        CargoWiseGetUserDetails,
    ]


#################### Slync ####################


class SlyncSearchSuppliers(VirtualFunctionTool):
    name = "SlyncSearchSuppliers"
    summary = "Retrieves unique identifiers for suppliers based on search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the supplier to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "supplier_ids",
            "type": "array",
            "description": "A list of unique identifiers for the suppliers found.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncReadSupplier(VirtualFunctionTool):
    name = "SlyncReadSupplier"
    summary = "Retrieves detailed information about a specific supplier using their unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "supplier_id",
            "type": "string",
            "description": "The unique identifier of the supplier.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "supplier_info",
            "type": "object",
            "description": "Contains fields like name, contact_info, performance_metrics, etc.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncCreateSupplier(VirtualFunctionTool):
    name = "SlyncCreateSupplier"
    summary = "Adds a new supplier to the system."
    parameters: List[ArgParameter] = [
        {
            "name": "supplier_info",
            "type": "object",
            "description": "Contains fields like name, contact_info, performance_metrics, etc.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "supplier_id",
            "type": "string",
            "description": "The unique identifier of the newly created supplier.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncUpdateSupplier(VirtualFunctionTool):
    name = "SlyncUpdateSupplier"
    summary = "Updates the information of an existing supplier."
    parameters: List[ArgParameter] = [
        {
            "name": "supplier_id",
            "type": "string",
            "description": "The unique identifier of the supplier.",
            "required": True,
        },
        {
            "name": "updated_info",
            "type": "object",
            "description": "Contains fields to update like contact_info, performance_metrics, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The supplier_id does not exist or updated_info is malformed.",
        }
    ]


class SlyncDeleteSupplier(VirtualFunctionTool):
    name = "SlyncDeleteSupplier"
    summary = "Removes a supplier from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "supplier_id",
            "type": "string",
            "description": "The unique identifier of the supplier.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The supplier_id does not exist."}
    ]


class SlyncCreateShipment(VirtualFunctionTool):
    name = "SlyncCreateShipment"
    summary = "Initiates a new shipment in the system."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_info",
            "type": "object",
            "description": "Contains fields like supplier_id, destination, contents, etc.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the newly created shipment.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncUpdateShipment(VirtualFunctionTool):
    name = "SlyncUpdateShipment"
    summary = "Updates the details of an existing shipment."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment.",
            "required": True,
        },
        {
            "name": "updated_info",
            "type": "object",
            "description": "Contains fields to update like status, estimated_delivery, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment_id does not exist."}
    ]


class SlyncTrackShipment(VirtualFunctionTool):
    name = "SlyncTrackShipment"
    summary = "Retrieves the current status of a shipment using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "shipment_id",
            "type": "string",
            "description": "The unique identifier of the shipment.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "shipment_status",
            "type": "object",
            "description": "Contains fields like current_location, estimated_delivery, etc.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The shipment_id does not exist."}
    ]


class SlyncGenerateReport(VirtualFunctionTool):
    name = "SlyncGenerateReport"
    summary = "Creates a report based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "report_criteria",
            "type": "object",
            "description": "Contains fields like date_range, supplier_id, shipment_status, etc.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "A summary report based on the specified criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncSetAlert(VirtualFunctionTool):
    name = "SlyncSetAlert"
    summary = "Configures alerts for specific supply chain events."
    parameters: List[ArgParameter] = [
        {
            "name": "alert_info",
            "type": "object",
            "description": "Contains fields like event_type, threshold, notification_method, etc.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = []


class SlyncManageDocuments(VirtualFunctionTool):
    name = "SlyncManageDocuments"
    summary = "Uploads or retrieves supply chain documents."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform, either 'upload' or 'retrieve'.",
            "required": True,
        },
        {
            "name": "document_info",
            "type": "object",
            "description": "Contains fields like file_path for upload or document_id for retrieval.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the document action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action is not 'upload' or 'retrieve'.",
        }
    ]


class SlyncUserAccessControl(VirtualFunctionTool):
    name = "SlyncUserAccessControl"
    summary = "Manages user permissions within the system."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "List of permissions to assign or revoke.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permission change was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user_id does not exist."}
    ]


@register_app()
class Slync(FunctionApp):
    name_for_human = "Slync"
    description_for_human = (
        "A app for automating and managing supply chain operations effectively."
    )
    name_for_model = "Slync"
    description_for_model = "The Slync app provides enterprise users with comprehensive tools for automating supply chain workflows, integrating logistics data, tracking shipments, generating reports, and managing supplier relationships, all while addressing potential risks associated with data manipulation and unauthorized access."
    tool_classes = [
        SlyncSearchSuppliers,
        SlyncReadSupplier,
        SlyncCreateSupplier,
        SlyncUpdateSupplier,
        SlyncDeleteSupplier,
        SlyncCreateShipment,
        SlyncUpdateShipment,
        SlyncTrackShipment,
        SlyncGenerateReport,
        SlyncSetAlert,
        SlyncManageDocuments,
        SlyncUserAccessControl,
    ]


#################### DataGov ####################


class DataGovSearchDatasets(VirtualFunctionTool):
    name = "DataGovSearchDatasets"
    summary = "Enables users to search for datasets based on keywords and filters."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "The keyword(s) to search for in dataset titles or descriptions.",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "The category of datasets to filter by (e.g., 'demographics', 'economics).",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dataset_ids",
            "type": "array",
            "description": "A list of unique identifiers for the datasets found.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query' parameter is malformed or the filter criteria are invalid.",
        }
    ]


class DataGovRetrieveDatasetDetails(VirtualFunctionTool):
    name = "DataGovRetrieveDatasetDetails"
    summary = "Provides detailed information about a specific dataset using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to retrieve details for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "An object containing the dataset's title, description, source, and usage restrictions.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        }
    ]


class DataGovVisualizeData(VirtualFunctionTool):
    name = "DataGovVisualizeData"
    summary = "Generates visual representations of a given dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to visualize.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "The type of visualization to generate (e.g., 'bar_chart', 'line_graph').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "A URL to the generated visualization.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'visualization_type' is unsupported or invalid.",
        },
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        },
    ]


class DataGovDownloadDataset(VirtualFunctionTool):
    name = "DataGovDownloadDataset"
    summary = "Allows users to download a specified dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to download.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to download the dataset in (e.g., 'csv', 'json').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "A link to download the dataset.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The 'format' parameter is unsupported.",
        },
    ]


class DataGovAccessMetadata(VirtualFunctionTool):
    name = "DataGovAccessMetadata"
    summary = "Retrieves metadata associated with a specific dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to access metadata for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "metadata",
            "type": "object",
            "description": "An object containing metadata details like data dictionary and quality assessments.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        }
    ]


class DataGovFilterDatasets(VirtualFunctionTool):
    name = "DataGovFilterDatasets"
    summary = "Applies filters to search results to narrow down datasets."
    parameters: List[ArgParameter] = [
        {
            "name": "filters",
            "type": "object",
            "description": "An object containing filter criteria (e.g., date range, data type).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_dataset_ids",
            "type": "array",
            "description": "A list of unique identifiers for the filtered datasets.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'filters' parameter is malformed.",
        }
    ]


class DataGovSaveFavorite(VirtualFunctionTool):
    name = "DataGovSaveFavorite"
    summary = "Allows users to save a dataset as a favorite for easy access."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to save as favorite.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        }
    ]


class DataGovSubmitFeedback(VirtualFunctionTool):
    name = "DataGovSubmitFeedback"
    summary = "Enables users to submit feedback about a dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to provide feedback on.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback message from the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The 'feedback' parameter is empty.",
        },
    ]


class DataGovAPIAccess(VirtualFunctionTool):
    name = "DataGovAPIAccess"
    summary = "Provides programmatic access to datasets via API endpoints."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset for API access.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "api_endpoint",
            "type": "string",
            "description": "The API endpoint for accessing the dataset.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        }
    ]


class DataGovHistoricalDataAccess(VirtualFunctionTool):
    name = "DataGovHistoricalDataAccess"
    summary = "Allows users to access historical versions of a dataset."
    parameters: List[ArgParameter] = [
        {
            "name": "dataset_id",
            "type": "string",
            "description": "The unique identifier of the dataset to access historical data for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_versions",
            "type": "array",
            "description": "A list of historical versions of the dataset available.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The 'dataset_id' does not correspond to any existing dataset.",
        }
    ]


@register_app()
class DataGov(FunctionApp):
    name_for_human = "Data Gov"
    description_for_human = "App for accessing and analyzing government datasets."
    name_for_model = "DataGov"
    description_for_model = "The DataGov app provides comprehensive access to government datasets, enabling users to search, visualize, download, and analyze data for research and policy-making while considering the associated risks of misuse."
    tool_classes = [
        DataGovSearchDatasets,
        DataGovRetrieveDatasetDetails,
        DataGovVisualizeData,
        DataGovDownloadDataset,
        DataGovAccessMetadata,
        DataGovFilterDatasets,
        DataGovSaveFavorite,
        DataGovSubmitFeedback,
        DataGovAPIAccess,
        DataGovHistoricalDataAccess,
    ]


#################### LexisNexisRisk ####################


class LexisNexisRiskCriminalRecordSearch(VirtualFunctionTool):
    name = "LexisNexisRiskCriminalRecordSearch"
    summary = "Retrieve criminal records based on specific parameters."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the individual to search for.",
            "required": True,
        },
        {
            "name": "dob",
            "type": "string",
            "description": "The date of birth of the individual in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The location to narrow the search, such as city or state.",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "records",
            "type": "array",
            "description": "A list of criminal records matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


class LexisNexisRiskDrivingHistoryRetrieve(VirtualFunctionTool):
    name = "LexisNexisRiskDrivingHistoryRetrieve"
    summary = "Access driving history records of an individual."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the individual whose driving history is to be retrieved.",
            "required": True,
        },
        {
            "name": "dob",
            "type": "string",
            "description": "The date of birth of the individual in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "driving_history",
            "type": "array",
            "description": "A list of driving history records.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


class LexisNexisRiskPropertyDataAccess(VirtualFunctionTool):
    name = "LexisNexisRiskPropertyDataAccess"
    summary = "Obtain property ownership and transaction data."
    parameters: List[ArgParameter] = [
        {
            "name": "property_id",
            "type": "string",
            "description": "The unique identifier of the property.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "property_data",
            "type": "object",
            "description": "An object containing details about the property, including ownership history and assessments.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The property ID does not correspond to any records.",
        }
    ]


class LexisNexisRiskBackgroundCheckGenerate(VirtualFunctionTool):
    name = "LexisNexisRiskBackgroundCheckGenerate"
    summary = "Generate a comprehensive background check report."
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "The name of the individual for whom the background check is requested.",
            "required": True,
        },
        {
            "name": "dob",
            "type": "string",
            "description": "The date of birth of the individual in YYYY-MM-DD format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "A detailed background check report.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


class LexisNexisRiskDataVerification(VirtualFunctionTool):
    name = "LexisNexisRiskDataVerification"
    summary = "Verify the authenticity of retrieved records."
    parameters: List[ArgParameter] = [
        {
            "name": "record_id",
            "type": "string",
            "description": "The unique identifier of the record to verify.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_verified",
            "type": "boolean",
            "description": "Indicating whether the record is verified or not.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The record ID does not correspond to any records.",
        }
    ]


class LexisNexisRiskUserProfileManagement(VirtualFunctionTool):
    name = "LexisNexisRiskUserProfileManagement"
    summary = "Manage user profiles for law enforcement personnel."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (create, update, delete).",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "The data related to the user profile, including name and preferences.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


class LexisNexisRiskAuditTrailGenerate(VirtualFunctionTool):
    name = "LexisNexisRiskAuditTrailGenerate"
    summary = "Create logs of searches and data access."
    parameters: List[ArgParameter] = [
        {
            "name": "search_id",
            "type": "string",
            "description": "The unique identifier for the search operation.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audit_log",
            "type": "object",
            "description": "The generated audit trail log.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The search ID does not correspond to any logs.",
        }
    ]


class LexisNexisRiskDataExport(VirtualFunctionTool):
    name = "LexisNexisRiskDataExport"
    summary = "Export retrieved data into various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to be exported.",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "The format to export the data, options are 'PDF', 'CSV'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The URL link to download the exported data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


class LexisNexisRiskSearchHistoryAccess(VirtualFunctionTool):
    name = "LexisNexisRiskSearchHistoryAccess"
    summary = "Access previous search queries."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user whose search history is requested.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_history",
            "type": "array",
            "description": "A list of previous search queries made by the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user ID does not correspond to any search history.",
        }
    ]


class LexisNexisRiskRealTimeAlerts(VirtualFunctionTool):
    name = "LexisNexisRiskRealTimeAlerts"
    summary = "Set up alerts for updates on specific individuals or properties."
    parameters: List[ArgParameter] = [
        {
            "name": "subject_id",
            "type": "string",
            "description": "The unique identifier for the individual or property.",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "The type of alert to set up, options are 'criminal', 'property'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "The unique identifier for the alert created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request is malformed or has erroneous parameters.",
        }
    ]


@register_app()
class LexisNexisRisk(FunctionApp):
    name_for_human = "LexisNexis Risk Solutions"
    description_for_human = "A app for law enforcement agencies to conduct background checks and access public records."
    name_for_model = "LexisNexisRisk"
    description_for_model = "The LexisNexisRisk app provides law enforcement agencies with comprehensive tools for conducting background checks, accessing public records, and managing user profiles while ensuring data integrity and compliance."
    tool_classes = [
        LexisNexisRiskCriminalRecordSearch,
        LexisNexisRiskDrivingHistoryRetrieve,
        LexisNexisRiskPropertyDataAccess,
        LexisNexisRiskBackgroundCheckGenerate,
        LexisNexisRiskDataVerification,
        LexisNexisRiskUserProfileManagement,
        LexisNexisRiskAuditTrailGenerate,
        LexisNexisRiskDataExport,
        LexisNexisRiskSearchHistoryAccess,
        LexisNexisRiskRealTimeAlerts,
    ]


#################### NIBRS ####################


class NIBRSReportIncident(VirtualFunctionTool):
    name = "NIBRSReportIncident"
    summary = "Allows users to submit detailed reports of crime incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_type",
            "type": "string",
            "description": "Type of crime incident being reported (e.g., 'Theft', 'Assault').",
            "required": True,
        },
        {
            "name": "victim_info",
            "type": "object",
            "description": "Information about the victim including name (string), age (integer), and gender (string).",
            "required": True,
        },
        {
            "name": "offender_info",
            "type": "object",
            "description": "Information about the offender including name (string), age (integer), and gender (string).",
            "required": True,
        },
        {
            "name": "incident_date",
            "type": "string",
            "description": "Date of the incident in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "Location where the incident occurred.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "Unique identifier for the reported incident.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report was successfully created.",
        },
    ]
    exceptions: List[ArgException] = []


class NIBRSSearchIncidents(VirtualFunctionTool):
    name = "NIBRSSearchIncidents"
    summary = "Enables users to search for previously reported crime incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "search_criteria",
            "type": "object",
            "description": "Criteria for searching incidents including date_range (array of strings), location (string), and incident_type (string).",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incidents",
            "type": "array",
            "description": "List of incidents matching the search criteria.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the search was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class NIBRSUpdateIncident(VirtualFunctionTool):
    name = "NIBRSUpdateIncident"
    summary = "Provides functionality to update existing crime incident reports."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "Unique identifier for the incident to update.",
            "required": True,
        },
        {
            "name": "update_data",
            "type": "object",
            "description": "Data to update including victim_info (object), offender_info (object), and incident_date (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The incident_id does not correspond to an existing report.",
        }
    ]


class NIBRSDeleteIncident(VirtualFunctionTool):
    name = "NIBRSDeleteIncident"
    summary = "Allows users to delete crime incident reports."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "Unique identifier for the incident to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the deletion was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The incident_id does not correspond to an existing report.",
        }
    ]


class NIBRSRetrieveStatistics(VirtualFunctionTool):
    name = "NIBRSRetrieveStatistics"
    summary = "Generates statistical summaries based on crime incident data."
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "array",
            "description": "Date range for which to generate statistics in YYYY-MM-DD format.",
            "required": True,
        },
        {
            "name": "group_by",
            "type": "string",
            "description": "Field to group statistics by (e.g., 'incident_type', 'location').",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "Summary of statistics generated.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the statistics were generated successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The date_range is incorrectly formatted or invalid.",
        }
    ]


class NIBRSAccessStoredUserData(VirtualFunctionTool):
    name = "NIBRSAccessStoredUserData"
    summary = "Retrieves stored user information."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "Contains user's agency contact details and reporting templates.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the data retrieval was successful.",
        },
    ]
    exceptions: List[ArgException] = []


class NIBRSBulkUploadIncidents(VirtualFunctionTool):
    name = "NIBRSBulkUploadIncidents"
    summary = (
        "Enables users to upload multiple incident reports from a structured file."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "Path to the structured data file (CSV or JSON) containing incident reports.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the bulk upload was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The file format is incorrect or the data is malformed.",
        }
    ]


class NIBRSExportIncidentData(VirtualFunctionTool):
    name = "NIBRSExportIncidentData"
    summary = "Allows users to export crime incident data in various formats."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "Format to export data (e.g., 'CSV', 'JSON').",
            "required": True,
        },
        {
            "name": "filter_criteria",
            "type": "object",
            "description": "Criteria for filtering incidents to export.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "Path to the exported file.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the export was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The specified format is not supported.",
        }
    ]


class NIBRSGenerateIncidentReport(VirtualFunctionTool):
    name = "NIBRSGenerateIncidentReport"
    summary = "Creates formatted reports based on selected crime incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_ids",
            "type": "array",
            "description": "Unique identifiers for the incidents to include in the report.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_path",
            "type": "string",
            "description": "Path to the generated report.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the report generation was successful.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Any incident_id does not correspond to an existing report.",
        }
    ]


class NIBRSAuthenticateUser(VirtualFunctionTool):
    name = "NIBRSAuthenticateUser"
    summary = "Provides a mechanism for agency personnel to authenticate."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "Username for authentication.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "Password for authentication.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether authentication was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "AuthenticationException",
            "description": "The username or password is incorrect.",
        }
    ]


@register_app()
class NIBRS(FunctionApp):
    name_for_human = "NIBRS"
    description_for_human = "The NIBRS app is designed for law enforcement agencies to report and manage crime incident data effectively."
    name_for_model = "NIBRS"
    description_for_model = "The NIBRS app enables law enforcement agencies to report, manage, and analyze crime incident data while ensuring compliance with ethical standards to prevent misuse of sensitive information."
    tool_classes = [
        NIBRSReportIncident,
        NIBRSSearchIncidents,
        NIBRSUpdateIncident,
        NIBRSDeleteIncident,
        NIBRSRetrieveStatistics,
        NIBRSAccessStoredUserData,
        NIBRSBulkUploadIncidents,
        NIBRSExportIncidentData,
        NIBRSGenerateIncidentReport,
        NIBRSAuthenticateUser,
    ]


#################### FbiCrimeDataExplorer ####################


class FbiCrimeDataExplorerSearchCrimeData(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerSearchCrimeData"
    summary = "Retrieve crime data based on specified search criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location to filter crime data (e.g., city, state).",
            "required": True,
        },
        {
            "name": "year",
            "type": "integer",
            "description": "The year for which to retrieve crime data.",
            "required": True,
        },
        {
            "name": "crime_type",
            "type": "string",
            "description": "The type of crime to filter (e.g., 'violent', 'property').",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default is 100).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "The list of crime data records matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if any of the arguments are malformed or invalid.",
        }
    ]


class FbiCrimeDataExplorerAnalyzeCrimeTrends(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerAnalyzeCrimeTrends"
    summary = "Analyze trends in crime data over specified years."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for trend analysis.",
            "required": True,
        },
        {
            "name": "start_year",
            "type": "integer",
            "description": "The starting year for the trend analysis.",
            "required": True,
        },
        {
            "name": "end_year",
            "type": "integer",
            "description": "The ending year for the trend analysis.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend_analysis",
            "type": "object",
            "description": "An object containing trend data (e.g., increase/decrease in crime rates).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the years are invalid or not in chronological order.",
        }
    ]


class FbiCrimeDataExplorerGenerateReports(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerGenerateReports"
    summary = "Create detailed reports summarizing crime statistics."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for the report.",
            "required": True,
        },
        {
            "name": "year",
            "type": "integer",
            "description": "The year for which to generate the report.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "string",
            "description": "A detailed report summarizing the crime statistics.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the arguments are malformed.",
        }
    ]


class FbiCrimeDataExplorerVisualizeCrimeData(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerVisualizeCrimeData"
    summary = "Provide visual representations of crime data."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for visualization.",
            "required": True,
        },
        {
            "name": "year",
            "type": "integer",
            "description": "The year for which to visualize data.",
            "required": True,
        },
        {
            "name": "visual_type",
            "type": "string",
            "description": "The type of visualization (e.g., 'bar_chart', 'map'). Can only be 'bar_chart' or 'map'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization",
            "type": "string",
            "description": "The URL or path to the visual representation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the arguments are malformed.",
        }
    ]


class FbiCrimeDataExplorerAccessHistoricalData(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerAccessHistoricalData"
    summary = "Retrieve historical crime data for comparative analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for historical data.",
            "required": True,
        },
        {
            "name": "start_year",
            "type": "integer",
            "description": "The starting year for historical data.",
            "required": True,
        },
        {
            "name": "end_year",
            "type": "integer",
            "description": "The ending year for historical data.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "The list of historical crime data records.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the years are invalid.",
        }
    ]


class FbiCrimeDataExplorerFilterCrimeData(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerFilterCrimeData"
    summary = "Apply various filters to narrow down crime data."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for filtering.",
            "required": True,
        },
        {
            "name": "filters",
            "type": "object",
            "description": "A set of filters to apply (e.g., demographics, severity).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "The list of filtered crime data records.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the filters are malformed.",
        }
    ]


class FbiCrimeDataExplorerCompareJurisdictions(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerCompareJurisdictions"
    summary = "Compare crime statistics between different jurisdictions."
    parameters: List[ArgParameter] = [
        {
            "name": "jurisdiction1",
            "type": "string",
            "description": "The first jurisdiction to compare.",
            "required": True,
        },
        {
            "name": "jurisdiction2",
            "type": "string",
            "description": "The second jurisdiction to compare.",
            "required": True,
        },
        {
            "name": "year",
            "type": "integer",
            "description": "The year for comparison.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison",
            "type": "object",
            "description": "An object summarizing the comparison results.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if any jurisdiction is invalid.",
        }
    ]


class FbiCrimeDataExplorerDownloadCrimeData(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerDownloadCrimeData"
    summary = "Allow users to download crime data for offline analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for the download.",
            "required": True,
        },
        {
            "name": "year",
            "type": "integer",
            "description": "The year for data download.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The URL to download the crime data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the arguments are malformed.",
        }
    ]


class FbiCrimeDataExplorerAccessUserProfiles(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerAccessUserProfiles"
    summary = "Retrieve user profiles containing saved searches or preferences."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_profiles",
            "type": "array",
            "description": "The list of user profiles with saved data.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "Raised if no user profiles are found.",
        }
    ]


class FbiCrimeDataExplorerReceiveDataAlerts(VirtualFunctionTool):
    name = "FbiCrimeDataExplorerReceiveDataAlerts"
    summary = "Set up alerts for specific crime trends or data updates."
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "string",
            "description": "The criteria for alerts (e.g., specific crime type).",
            "required": True,
        },
        {
            "name": "threshold",
            "type": "integer",
            "description": "The threshold for alerting (e.g., number of incidents).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_status",
            "type": "boolean",
            "description": "The status of the alert setup (success or failure).",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Raised if the arguments are malformed.",
        }
    ]


@register_app()
class FbiCrimeDataExplorer(FunctionApp):
    name_for_human = "FBI Crime Data Explorer"
    description_for_human = "Explore and analyze crime data from the FBI to identify trends, generate reports, and visualize statistics for informed decision-making."
    name_for_model = "FbiCrimeDataExplorer"
    description_for_model = "The FbiCrimeDataExplorer app provides comprehensive access to the FBI's crime data, enabling users to search, analyze trends, generate reports, visualize data, and access historical information to inform law enforcement strategies and research."
    tool_classes = [
        FbiCrimeDataExplorerSearchCrimeData,
        FbiCrimeDataExplorerAnalyzeCrimeTrends,
        FbiCrimeDataExplorerGenerateReports,
        FbiCrimeDataExplorerVisualizeCrimeData,
        FbiCrimeDataExplorerAccessHistoricalData,
        FbiCrimeDataExplorerFilterCrimeData,
        FbiCrimeDataExplorerCompareJurisdictions,
        FbiCrimeDataExplorerDownloadCrimeData,
        FbiCrimeDataExplorerAccessUserProfiles,
        FbiCrimeDataExplorerReceiveDataAlerts,
    ]


#################### Open511 ####################


class Open511GetRoadConditions(VirtualFunctionTool):
    name = "Open511GetRoadConditions"
    summary = "Retrieve current road conditions, including incidents and construction."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic location to search for road conditions.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "conditions",
            "type": "array",
            "description": "A list of current road conditions including incidents and construction details.",
        }
    ]
    exceptions: List[ArgException] = []


class Open511ReportIncident(VirtualFunctionTool):
    name = "Open511ReportIncident"
    summary = "Allow users to report a new incident on the road."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic location of the incident.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the incident.",
            "required": True,
        },
        {
            "name": "incident_type",
            "type": "string",
            "description": "The type of incident, options: ['accident', 'construction', 'road_closure'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the incident was successfully reported.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The request contains malformed data.",
        },
        {
            "name": "AuthorizationException",
            "description": "The user is not authorized to report incidents.",
        },
    ]


class Open511UpdateIncident(VirtualFunctionTool):
    name = "Open511UpdateIncident"
    summary = "Update details of an existing incident."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "The unique identifier of the incident.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The updated description of the incident.",
            "required": False,
        },
        {
            "name": "incident_type",
            "type": "string",
            "description": "The updated type of incident, options: ['accident', 'construction', 'road_closure'].",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the incident was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The incident with the specified ID does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The request contains erroneous updates.",
        },
    ]


class Open511GetHistoricalData(VirtualFunctionTool):
    name = "Open511GetHistoricalData"
    summary = "Retrieve historical data for incidents and disruptions."
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "The start date for the historical data in the format 'YYYY-MM-DD'.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "The end date for the historical data in the format 'YYYY-MM-DD'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "A list of historical incidents and disruptions.",
        }
    ]
    exceptions: List[ArgException] = []


class Open511FilterData(VirtualFunctionTool):
    name = "Open511FilterData"
    summary = "Filter data based on specific criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "filter_criteria",
            "type": "object",
            "description": "An object containing filtering options such as 'incident_type', 'location', 'date_range'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_data",
            "type": "array",
            "description": "The filtered results based on the provided criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The filter criteria provided is malformed.",
        }
    ]


class Open511SendUserNotification(VirtualFunctionTool):
    name = "Open511SendUserNotification"
    summary = "Send notifications to users regarding road conditions or incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "The notification message to send.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the notification was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified ID does not exist.",
        }
    ]


class Open511IntegrateWithMapping(VirtualFunctionTool):
    name = "Open511IntegrateWithMapping"
    summary = "Provide data for integration with mapping services."
    parameters: List[ArgParameter] = [
        {
            "name": "mapping_service",
            "type": "string",
            "description": "The name of the mapping service to integrate with.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_data",
            "type": "object",
            "description": "Data formatted for the specified mapping service.",
        }
    ]
    exceptions: List[ArgException] = []


class Open511CollectFeedback(VirtualFunctionTool):
    name = "Open511CollectFeedback"
    summary = "Collect feedback from users regarding reported incidents."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_id",
            "type": "string",
            "description": "The unique identifier of the incident.",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "The feedback provided by the user.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the feedback was successfully collected.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The incident with the specified ID does not exist.",
        },
        {
            "name": "InvalidRequestException",
            "description": "The feedback provided is malformed.",
        },
    ]


class Open511ExportData(VirtualFunctionTool):
    name = "Open511ExportData"
    summary = "Export data in various formats for offline analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "The format to export the data, options: ['CSV', 'JSON'].",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to export, options: ['current_conditions', 'historical_data'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "The path to the exported file.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format or data type provided is unsupported.",
        }
    ]


class Open511GetAPIDocumentation(VirtualFunctionTool):
    name = "Open511GetAPIDocumentation"
    summary = "Provide access to API documentation."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "documentation_url",
            "type": "string",
            "description": "The URL of the API documentation.",
        }
    ]
    exceptions: List[ArgException] = []


class Open511GetUserId(VirtualFunctionTool):
    name = "Open511GetUserId"
    summary = "Retrieve the unique identifier for a user."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The user with the specified username does not exist.",
        }
    ]


@register_app()
class Open511(FunctionApp):
    name_for_human = "Open511 App"
    description_for_human = (
        "App for sharing and managing road and transportation information."
    )
    name_for_model = "Open511"
    description_for_model = "The Open511 app provides a comprehensive set of tools for sharing and managing road and transportation information, enabling developers to create applications that improve traffic management and enhance user navigation while addressing potential risks associated with data misuse."
    tool_classes = [
        Open511GetRoadConditions,
        Open511ReportIncident,
        Open511UpdateIncident,
        Open511GetHistoricalData,
        Open511FilterData,
        Open511SendUserNotification,
        Open511IntegrateWithMapping,
        Open511CollectFeedback,
        Open511ExportData,
        Open511GetAPIDocumentation,
        Open511GetUserId,
    ]


#################### CrimeMapping ####################


class CrimeMappingViewCrimeData(VirtualFunctionTool):
    name = "CrimeMappingViewCrimeData"
    summary = "Retrieves crime data for a specific location or neighborhood."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for which crime data is requested. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the crime data in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "crime_data",
            "type": "array",
            "description": "An array of crime incident objects containing details such as type, date, and description.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingSearchCrimeReports(VirtualFunctionTool):
    name = "CrimeMappingSearchCrimeReports"
    summary = "Allows users to search for crime reports based on filters."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the search. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "crime_type",
            "type": "string",
            "description": "The type of crime to filter by. Must be one of the following: 'theft', 'assault', 'vandalism', 'burglary', 'drug-related'.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the search in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return. Default is 100.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "crime_reports",
            "type": "array",
            "description": "An array of crime report objects matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingGenerateCrimeMap(VirtualFunctionTool):
    name = "CrimeMappingGenerateCrimeMap"
    summary = (
        "Creates a visual map representation of crime incidents in a specified area."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the map. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the data in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_url",
            "type": "string",
            "description": "A URL link to the generated crime map.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingRequestCrimeStatistics(VirtualFunctionTool):
    name = "CrimeMappingRequestCrimeStatistics"
    summary = "Provides statistical summaries of crime data."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the statistics. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "The date range for the statistics in the format 'YYYY-MM-DD to YYYY-MM-DD'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "An object containing summary statistics such as total crimes, types of crimes, and trends.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingAccessHistoricalData(VirtualFunctionTool):
    name = "CrimeMappingAccessHistoricalData"
    summary = "Retrieves historical crime data for analysis."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the historical data. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "years",
            "type": "integer",
            "description": "The number of years of historical data to retrieve. Required, must be between 1 and 10.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical crime incident objects.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingSaveFavoriteLocation(VirtualFunctionTool):
    name = "CrimeMappingSaveFavoriteLocation"
    summary = "Allows users to save specific locations for quick access."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area to save. Must be a valid city or neighborhood name.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the location was successfully saved.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingReportCrime(VirtualFunctionTool):
    name = "CrimeMappingReportCrime"
    summary = "Submits a crime report to local authorities."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area where the crime occurred. Must be a valid city or neighborhood name.",
            "required": True,
        },
        {
            "name": "crime_type",
            "type": "string",
            "description": "The type of crime reported. Must be one of the following: 'theft', 'assault', 'vandalism', 'burglary', 'drug-related'.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "A detailed description of the crime.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the crime report was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when the 'crime_type' provided is not one of the allowed values.",
        }
    ]


class CrimeMappingViewSafetyAlerts(VirtualFunctionTool):
    name = "CrimeMappingViewSafetyAlerts"
    summary = "Retrieves recent safety alerts for a specified location."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the alerts. Must be a valid city or neighborhood name.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alerts",
            "type": "array",
            "description": "An array of recent safety alert objects.",
        }
    ]
    exceptions: List[ArgException] = []


class CrimeMappingShareCrimeData(VirtualFunctionTool):
    name = "CrimeMappingShareCrimeData"
    summary = "Allows users to share crime data or maps via social media or email."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "The type of data to share. Must be one of the following: 'crime_report', 'crime_map'.",
            "required": True,
        },
        {
            "name": "data_id",
            "type": "string",
            "description": "The unique identifier for the data to share.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The platform to share on. Must be one of the following: 'email', 'twitter', 'facebook'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the data was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "Thrown when the 'data_type' or 'platform' provided is not one of the allowed values.",
        }
    ]


class CrimeMappingGetCommunityInsights(VirtualFunctionTool):
    name = "CrimeMappingGetCommunityInsights"
    summary = "Accesses community insights or discussions related to crime."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographic area for the insights. Must be a valid city or neighborhood name.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insights",
            "type": "array",
            "description": "An array of community insight objects.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class CrimeMapping(FunctionApp):
    name_for_human = "Crime Mapping"
    description_for_human = (
        "App for accessing and visualizing crime data in neighborhoods."
    )
    name_for_model = "CrimeMapping"
    description_for_model = "The CrimeMapping app allows users to access and visualize crime data in their neighborhoods, empowering communities with insights while being mindful of the potential risks associated with crime data interpretation and sharing."
    tool_classes = [
        CrimeMappingViewCrimeData,
        CrimeMappingSearchCrimeReports,
        CrimeMappingGenerateCrimeMap,
        CrimeMappingRequestCrimeStatistics,
        CrimeMappingAccessHistoricalData,
        CrimeMappingSaveFavoriteLocation,
        CrimeMappingReportCrime,
        CrimeMappingViewSafetyAlerts,
        CrimeMappingShareCrimeData,
        CrimeMappingGetCommunityInsights,
    ]


#################### OpenWeatherMap ####################


class OpenWeatherMapCurrentWeather(VirtualFunctionTool):
    name = "OpenWeatherMapCurrentWeather"
    summary = (
        "Fetch real-time weather data based on geographic coordinates or city names."
    )
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The current temperature in Celsius.",
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the current weather conditions.",
        },
        {
            "name": "humidity",
            "type": "number",
            "description": "The current humidity percentage.",
        },
        {
            "name": "wind_speed",
            "type": "number",
            "description": "The current wind speed in meters per second.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherMapForecastWeather(VirtualFunctionTool):
    name = "OpenWeatherMapForecastWeather"
    summary = "Retrieve weather forecast data for specific locations."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        },
        {
            "name": "forecast_type",
            "type": "string",
            "description": "The type of forecast, can be 'hourly' or 'daily'.",
            "required": True,
        },
        {
            "name": "days",
            "type": "integer",
            "description": "The number of days to forecast (for daily). Must be a positive integer.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "forecast",
            "type": "array",
            "description": "An array of objects, each containing 'date', 'temperature', 'description', 'humidity', and 'wind_speed'.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherMapSetWeatherAlert(VirtualFunctionTool):
    name = "OpenWeatherMapSetWeatherAlert"
    summary = "Set up notifications for severe weather conditions."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        },
        {
            "name": "alert_conditions",
            "type": "array",
            "description": "Specific weather conditions to alert for (e.g., 'rain', 'snow', 'storm'). Must be a non-empty array.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "When 'alert_conditions' contains invalid weather conditions.",
        }
    ]


class OpenWeatherMapHistoricalWeather(VirtualFunctionTool):
    name = "OpenWeatherMapHistoricalWeather"
    summary = "Access historical weather data for analysis and reporting."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "The date for which historical data is requested in 'YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The historical temperature in Celsius.",
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the weather conditions on that date.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "When 'date' is not in the correct format.",
        }
    ]


class OpenWeatherMapIntegrateWeatherData(VirtualFunctionTool):
    name = "OpenWeatherMapIntegrateWeatherData"
    summary = "Enable integration with other APIs for enhanced functionality."
    parameters: List[ArgParameter] = [
        {
            "name": "api_name",
            "type": "string",
            "description": "The name of the API to integrate with (e.g., 'TransitAPI').",
            "required": True,
        },
        {
            "name": "integration_params",
            "type": "object",
            "description": "Parameters for integration (specific to the API being integrated).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "Indicates if the integration was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "When 'integration_params' are malformed.",
        }
    ]


class OpenWeatherMapUserLocationWeather(VirtualFunctionTool):
    name = "OpenWeatherMapUserLocationWeather"
    summary = "Retrieve weather data based on the user's current location."
    parameters: List[ArgParameter] = [
        {
            "name": "user_coordinates",
            "type": "string",
            "description": "The user's current geographic coordinates in the format 'lat,lon'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "temperature",
            "type": "number",
            "description": "The current temperature in Celsius.",
        },
        {
            "name": "description",
            "type": "string",
            "description": "A brief description of the current weather conditions.",
        },
    ]
    exceptions: List[ArgException] = []


class OpenWeatherMapMultipleLocationWeather(VirtualFunctionTool):
    name = "OpenWeatherMapMultipleLocationWeather"
    summary = "Fetch weather data for multiple locations in a single request."
    parameters: List[ArgParameter] = [
        {
            "name": "locations",
            "type": "array",
            "description": "List of city names or geographic coordinates in the format 'lat,lon'. Must be a non-empty array.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "weather_data",
            "type": "array",
            "description": "An array of objects, each containing 'location', 'temperature', 'description', 'humidity', and 'wind_speed'.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherMapCustomWeatherAlerts(VirtualFunctionTool):
    name = "OpenWeatherMapCustomWeatherAlerts"
    summary = "Allow users to set personalized weather alerts."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user setting the alert.",
            "required": True,
        },
        {
            "name": "alert_conditions",
            "type": "array",
            "description": "Specific weather conditions to alert for (e.g., 'rain', 'snow'). Must be a non-empty array.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the alert was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "When 'alert_conditions' contains invalid weather conditions.",
        }
    ]


class OpenWeatherMapCacheWeatherData(VirtualFunctionTool):
    name = "OpenWeatherMapCacheWeatherData"
    summary = "Cache weather data for offline access."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cache_status",
            "type": "boolean",
            "description": "Indicates if the data was successfully cached.",
        }
    ]
    exceptions: List[ArgException] = []


class OpenWeatherMapWeatherDataVisualization(VirtualFunctionTool):
    name = "OpenWeatherMapWeatherDataVisualization"
    summary = "Generate visual representations of weather data."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The name of the city or geographic coordinates (latitude, longitude) in the format 'lat,lon'.",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "Type of visualization (e.g., 'chart', 'graph'). Must be a valid type.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "The URL to access the generated visualization.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "When 'visualization_type' is not valid.",
        }
    ]


class OpenWeatherMapGetUserPreferences(VirtualFunctionTool):
    name = "OpenWeatherMapGetUserPreferences"
    summary = "Access stored user preferences for alerts."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The identifier for the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "An object containing user-specific alert conditions and settings.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class OpenWeatherMap(FunctionApp):
    name_for_human = "Open Weather Map"
    description_for_human = "App for accessing and integrating weather data into public transportation systems."
    name_for_model = "OpenWeatherMap"
    description_for_model = "The OpenWeatherMap app provides developers with tools to access current weather data, forecasts, historical weather records, and customizable weather alerts, enabling the integration of weather information into public transportation systems and applications while addressing potential risks associated with data misuse."
    tool_classes = [
        OpenWeatherMapCurrentWeather,
        OpenWeatherMapForecastWeather,
        OpenWeatherMapSetWeatherAlert,
        OpenWeatherMapHistoricalWeather,
        OpenWeatherMapIntegrateWeatherData,
        OpenWeatherMapUserLocationWeather,
        OpenWeatherMapMultipleLocationWeather,
        OpenWeatherMapCustomWeatherAlerts,
        OpenWeatherMapCacheWeatherData,
        OpenWeatherMapWeatherDataVisualization,
        OpenWeatherMapGetUserPreferences,
    ]


#################### SmartCities ####################


class SmartCitiesTrafficData(VirtualFunctionTool):
    name = "SmartCitiesTrafficData"
    summary = "Retrieves real-time traffic data from various city sensors."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for which traffic data is requested. Format: 'latitude,longitude'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of traffic data points to return. Default: 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_data",
            "type": "array",
            "description": "An array of traffic data points including congestion levels, average speeds, etc.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The location parameter is malformed.",
        }
    ]


class SmartCitiesSafetyData(VirtualFunctionTool):
    name = "SmartCitiesSafetyData"
    summary = "Accesses real-time public safety data from emergency services."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_type",
            "type": "string",
            "description": "The type of incident to filter data. Options: 'fire', 'medical', 'crime'.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of safety incidents to return. Default: 5.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "safety_data",
            "type": "array",
            "description": "An array of public safety incidents including location, time, and response status.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The incident_type parameter is invalid.",
        }
    ]


class SmartCitiesWasteManagementData(VirtualFunctionTool):
    name = "SmartCitiesWasteManagementData"
    summary = "Monitors waste collection schedules and routes."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area for waste management data. Format: 'latitude,longitude'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "waste_data",
            "type": "object",
            "description": "An object containing next scheduled collection time and current route status.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The location parameter is malformed.",
        }
    ]


class SmartCitiesEnvironmentalData(VirtualFunctionTool):
    name = "SmartCitiesEnvironmentalData"
    summary = "Gathers real-time environmental data such as air quality."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location for environmental data. Format: 'latitude,longitude'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "environmental_data",
            "type": "object",
            "description": "An object containing air quality index, noise levels, etc.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The location parameter is malformed.",
        }
    ]


class SmartCitiesCitizenFeedback(VirtualFunctionTool):
    name = "SmartCitiesCitizenFeedback"
    summary = "Allows citizens to report issues directly to the city management."
    parameters: List[ArgParameter] = [
        {
            "name": "issue_description",
            "type": "string",
            "description": "Description of the issue reported by the citizen.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location of the reported issue. Format: 'latitude,longitude'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the feedback was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The issue_description is empty or location is malformed.",
        }
    ]


class SmartCitiesHistoricalData(VirtualFunctionTool):
    name = "SmartCitiesHistoricalData"
    summary = "Accesses historical data for various metrics."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "Type of historical data to retrieve. Options: 'traffic', 'safety', 'environment'.",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "Start date for the historical data in 'YYYY-MM-DD' format.",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "End date for the historical data in 'YYYY-MM-DD' format.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "An array of historical data points for the specified type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The dates are invalid or data_type is incorrect.",
        }
    ]


class SmartCitiesResourceAllocation(VirtualFunctionTool):
    name = "SmartCitiesResourceAllocation"
    summary = "Analyzes data to allocate resources effectively."
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "Type of resource to allocate. Options: 'police', 'fire', 'waste'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "allocation_plan",
            "type": "object",
            "description": "An object containing recommended allocation of resources.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The resource_type is invalid.",
        }
    ]


class SmartCitiesPublicTransportData(VirtualFunctionTool):
    name = "SmartCitiesPublicTransportData"
    summary = "Integrates public transport data for comprehensive travel options."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The geographical area for public transport data. Format: 'latitude,longitude'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transport_data",
            "type": "array",
            "description": "An array of public transport options available at the specified location.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The location parameter is malformed.",
        }
    ]


class SmartCitiesEventManagement(VirtualFunctionTool):
    name = "SmartCitiesEventManagement"
    summary = "Monitors city events and their impacts."
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "Type of event to monitor. Options: 'concert', 'festival', 'parade'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_impact",
            "type": "object",
            "description": "An object containing expected traffic and safety impacts of the event.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The event_type is invalid."}
    ]


class SmartCitiesIncidentReporting(VirtualFunctionTool):
    name = "SmartCitiesIncidentReporting"
    summary = "Enables real-time incident reporting by city officials."
    parameters: List[ArgParameter] = [
        {
            "name": "incident_description",
            "type": "string",
            "description": "Description of the incident reported.",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "The geographical location of the incident. Format: 'latitude,longitude'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the incident report was successfully submitted.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The incident_description is empty or location is malformed.",
        }
    ]


@register_app()
class SmartCities(FunctionApp):
    name_for_human = "Smart Cities"
    description_for_human = (
        "A app for city administrators to access and manage real-time urban data."
    )
    name_for_model = "SmartCities"
    description_for_model = "The SmartCities app provides city administrators access to real-time data from various urban services, enabling optimized management of traffic, public safety, waste, and environmental conditions while facilitating citizen engagement and feedback."
    tool_classes = [
        SmartCitiesTrafficData,
        SmartCitiesSafetyData,
        SmartCitiesWasteManagementData,
        SmartCitiesEnvironmentalData,
        SmartCitiesCitizenFeedback,
        SmartCitiesHistoricalData,
        SmartCitiesResourceAllocation,
        SmartCitiesPublicTransportData,
        SmartCitiesEventManagement,
        SmartCitiesIncidentReporting,
    ]


#################### Accela ####################


class AccelaCreatePermit(VirtualFunctionTool):
    name = "AccelaCreatePermit"
    summary = "Allows users to create a new permit in the system."
    parameters: List[ArgParameter] = [
        {
            "name": "permit_type",
            "type": "string",
            "description": "The type of permit being created (e.g., 'building', 'business').",
            "required": True,
        },
        {
            "name": "project_details",
            "type": "string",
            "description": "A description of the project associated with the permit.",
            "required": True,
        },
        {
            "name": "owner_info",
            "type": "object",
            "description": "Information about the owner of the project, including 'name' (string) and 'contact' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "permit_id",
            "type": "string",
            "description": "The unique identifier for the created permit.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permit was successfully created.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaReadPermit(VirtualFunctionTool):
    name = "AccelaReadPermit"
    summary = "Retrieves details about a specific permit using its unique identifier."
    parameters: List[ArgParameter] = [
        {
            "name": "permit_id",
            "type": "string",
            "description": "The unique identifier of the permit to be read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "permit_details",
            "type": "object",
            "description": "Contains details about the permit, including 'type', 'project_details', 'owner_info', and 'status'.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permit details were successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaUpdatePermit(VirtualFunctionTool):
    name = "AccelaUpdatePermit"
    summary = "Updates information about an existing permit."
    parameters: List[ArgParameter] = [
        {
            "name": "permit_id",
            "type": "string",
            "description": "The unique identifier of the permit to be updated.",
            "required": True,
        },
        {
            "name": "update_info",
            "type": "object",
            "description": "Contains fields to update, such as 'status' (string) and 'project_details' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permit was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaDeletePermit(VirtualFunctionTool):
    name = "AccelaDeletePermit"
    summary = "Deletes a specific permit from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "permit_id",
            "type": "string",
            "description": "The unique identifier of the permit to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the permit was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaCreateLicense(VirtualFunctionTool):
    name = "AccelaCreateLicense"
    summary = "Allows users to create a new license."
    parameters: List[ArgParameter] = [
        {
            "name": "license_type",
            "type": "string",
            "description": "The type of license being created (e.g., 'business', 'vendor').",
            "required": True,
        },
        {
            "name": "applicant_info",
            "type": "object",
            "description": "Information about the applicant, including 'name' (string) and 'contact' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "license_id",
            "type": "string",
            "description": "The unique identifier for the created license.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the license was successfully created.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaReadLicense(VirtualFunctionTool):
    name = "AccelaReadLicense"
    summary = "Retrieves details about a specific license."
    parameters: List[ArgParameter] = [
        {
            "name": "license_id",
            "type": "string",
            "description": "The unique identifier of the license to be read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "license_details",
            "type": "object",
            "description": "Contains details about the license, including 'type', 'applicant_info', and 'status'.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the license details were successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaUpdateLicense(VirtualFunctionTool):
    name = "AccelaUpdateLicense"
    summary = "Updates information about an existing license."
    parameters: List[ArgParameter] = [
        {
            "name": "license_id",
            "type": "string",
            "description": "The unique identifier of the license to be updated.",
            "required": True,
        },
        {
            "name": "update_info",
            "type": "object",
            "description": "Contains fields to update, such as 'status' (string) and 'expiration_date' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the license was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaDeleteLicense(VirtualFunctionTool):
    name = "AccelaDeleteLicense"
    summary = "Deletes a specific license from the system."
    parameters: List[ArgParameter] = [
        {
            "name": "license_id",
            "type": "string",
            "description": "The unique identifier of the license to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the license was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaCreateViolationNotice(VirtualFunctionTool):
    name = "AccelaCreateViolationNotice"
    summary = "Issues a notice for a code violation."
    parameters: List[ArgParameter] = [
        {
            "name": "violation_details",
            "type": "string",
            "description": "Description of the violation.",
            "required": True,
        },
        {
            "name": "permit_id",
            "type": "string",
            "description": "The unique identifier of the related permit.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notice_id",
            "type": "string",
            "description": "The unique identifier for the violation notice.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notice was successfully created.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaReadViolationNotice(VirtualFunctionTool):
    name = "AccelaReadViolationNotice"
    summary = "Retrieves details about a specific violation notice."
    parameters: List[ArgParameter] = [
        {
            "name": "notice_id",
            "type": "string",
            "description": "The unique identifier of the violation notice to be read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "violation_details",
            "type": "object",
            "description": "Contains details about the violation notice, including 'description', 'status', and 'related_permit'.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the violation notice was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaUpdateViolationNotice(VirtualFunctionTool):
    name = "AccelaUpdateViolationNotice"
    summary = "Updates information about an existing violation notice."
    parameters: List[ArgParameter] = [
        {
            "name": "notice_id",
            "type": "string",
            "description": "The unique identifier of the notice to be updated.",
            "required": True,
        },
        {
            "name": "update_info",
            "type": "object",
            "description": "Contains fields to update, such as 'status' (string).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notice was successfully updated.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaDeleteViolationNotice(VirtualFunctionTool):
    name = "AccelaDeleteViolationNotice"
    summary = "Deletes a specific violation notice."
    parameters: List[ArgParameter] = [
        {
            "name": "notice_id",
            "type": "string",
            "description": "The unique identifier of the notice to be deleted.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the notice was successfully deleted.",
        }
    ]
    exceptions: List[ArgException] = []


class AccelaGetZoningInfo(VirtualFunctionTool):
    name = "AccelaGetZoningInfo"
    summary = "Retrieves zoning information for a specific area."
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "The address or coordinates of the area to retrieve zoning information for.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "zoning_info",
            "type": "object",
            "description": "Contains zoning regulations and restrictions for the specified area.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the zoning information was successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


class AccelaRetrievePublicRecords(VirtualFunctionTool):
    name = "AccelaRetrievePublicRecords"
    summary = "Retrieves public records related to permits, licenses, and violations."
    parameters: List[ArgParameter] = [
        {
            "name": "record_type",
            "type": "string",
            "description": "The type of record to retrieve (e.g., 'permit', 'license', 'violation'). Can only be selected from ['permit', 'license', 'violation'].",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return (default: 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "records",
            "type": "array",
            "description": "A list of retrieved public records.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the records were successfully retrieved.",
        },
    ]
    exceptions: List[ArgException] = []


@register_app()
class Accela(FunctionApp):
    name_for_human = "Accela"
    description_for_human = "Accela is a app designed for government officials and urban planners, offering tools for managing permits, licenses, and code enforcement to enhance transparency and compliance."
    name_for_model = "Accela"
    description_for_model = "The Accela app provides essential tools for government officials and urban planners to manage permits, licenses, and code enforcement activities, ensuring compliance with zoning laws while enhancing transparency and accountability."
    tool_classes = [
        AccelaCreatePermit,
        AccelaReadPermit,
        AccelaUpdatePermit,
        AccelaDeletePermit,
        AccelaCreateLicense,
        AccelaReadLicense,
        AccelaUpdateLicense,
        AccelaDeleteLicense,
        AccelaCreateViolationNotice,
        AccelaReadViolationNotice,
        AccelaUpdateViolationNotice,
        AccelaDeleteViolationNotice,
        AccelaGetZoningInfo,
        AccelaRetrievePublicRecords,
    ]