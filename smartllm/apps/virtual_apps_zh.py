"""Virtual tools created from json files."""

from smartllm.apps.app_interface import (
    ArgException,
    ArgParameter,
    ArgReturn,
    FunctionApp,
    FunctionApp,
    VirtualFunctionApp,
)
from smartllm.utils.my_typing import *

from .register import register_app

#################### WeiYi ####################


class WeiYiOnlineConsultationApp(VirtualFunctionApp):
    name = "WeiYiOnlineConsultationApp"
    summary = "允许用户与医生进行实时在线咨询。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_query",
            "type": "string",
            "description": "用户的咨询问题。",
            "required": True,
        },
        {
            "name": "doctor_id",
            "type": "string",
            "description": "医生的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "consultation_id",
            "type": "string",
            "description": "在线咨询的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "用户查询格式不正确。"}
    ]


class WeiYiAppointmentBookingApp(VirtualFunctionApp):
    name = "WeiYiAppointmentBookingApp"
    summary = "允许用户预约医生的门诊号。"
    parameters: List[ArgParameter] = [
        {
            "name": "doctor_id",
            "type": "string",
            "description": "医生的唯一标识符。",
            "required": True,
        },
        {
            "name": "appointment_time",
            "type": "string",
            "description": "预约的时间，格式为YYYY-MM-DD HH:MM。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "预约的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "预约时间格式不正确。"}
    ]


class WeiYiHealthRecordManagementApp(VirtualFunctionApp):
    name = "WeiYiHealthRecordManagementApp"
    summary = "允许用户查看和更新自己的健康档案。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，支持“view”或“update”。",
            "required": True,
        },
        {
            "name": "health_data",
            "type": "object",
            "description": "健康档案数据（仅在更新时需要），包含字段如“height”、“weight”、“medical_history”等。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "health_record",
            "type": "object",
            "description": "返回用户的健康档案数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "操作类型不正确。"}
    ]


class WeiYiDoctorRatingApp(VirtualFunctionApp):
    name = "WeiYiDoctorRatingApp"
    summary = "允许用户对医生的服务进行评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "doctor_id",
            "type": "string",
            "description": "医生的唯一标识符。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "用户对医生的评分，范围为1到5。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈意见。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评价是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "评分不在1到5范围内。"}
    ]


class WeiYiHealthAdviceApp(VirtualFunctionApp):
    name = "WeiYiHealthAdviceApp"
    summary = "允许用户获取个性化的健康建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "health_advice",
            "type": "string",
            "description": "返回个性化的健康建议。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiDrugQueryApp(VirtualFunctionApp):
    name = "WeiYiDrugQueryApp"
    summary = "允许用户查询药品信息和价格。"
    parameters: List[ArgParameter] = [
        {
            "name": "drug_name",
            "type": "string",
            "description": "药品的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "drug_info",
            "type": "object",
            "description": "返回药品的详细信息，包括价格、用途等。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiElectronicPrescriptionManagementApp(VirtualFunctionApp):
    name = "WeiYiElectronicPrescriptionManagementApp"
    summary = "允许用户查看和管理电子处方。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，支持“view”或“update”。",
            "required": True,
        },
        {
            "name": "prescription_data",
            "type": "object",
            "description": "电子处方数据（仅在更新时需要），包含字段如“prescription_id”、“medications”等。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prescription_record",
            "type": "object",
            "description": "返回用户的电子处方数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "操作类型不正确。"}
    ]


class WeiYiHealthKnowledgeBaseTool(VirtualFunctionApp):
    name = "WeiYiHealthKnowledgeBaseTool"
    summary = "允许用户访问健康知识和文章。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键词。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "返回与关键词相关的健康文章列表。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiAppointmentReminderApp(VirtualFunctionApp):
    name = "WeiYiAppointmentReminderApp"
    summary = "允许系统向用户发送预约提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "预约的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "提醒是否成功发送的状态。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiPersonalHealthReportApp(VirtualFunctionApp):
    name = "WeiYiPersonalHealthReportApp"
    summary = "允许用户生成和查看个人健康报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "health_report",
            "type": "object",
            "description": "返回用户的个人健康报告。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiSearchDoctorApp(VirtualFunctionApp):
    name = "WeiYiSearchDoctorApp"
    summary = "允许用户搜索医生并返回其唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "specialty",
            "type": "string",
            "description": "医生的专业领域。",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "医生所在位置。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "doctor_list",
            "type": "array",
            "description": "返回符合条件的医生列表及其唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "专业领域格式不正确。"}
    ]


class WeiYiSearchUserApp(VirtualFunctionApp):
    name = "WeiYiSearchUserApp"
    summary = "允许用户检索自己的用户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "用户的姓名。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "返回用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "用户名格式不正确。"}
    ]


class WeiYiSearchAppointmentApp(VirtualFunctionApp):
    name = "WeiYiSearchAppointmentApp"
    summary = "允许用户检索自己的预约信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "appointment_list",
            "type": "array",
            "description": "返回用户的预约列表及其唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class WeiYiSearchElectronicPrescriptionApp(VirtualFunctionApp):
    name = "WeiYiSearchElectronicPrescriptionApp"
    summary = "允许用户检索自己的电子处方信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prescription_list",
            "type": "array",
            "description": "返回用户的电子处方列表及其唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class WeiYi(FunctionApp):
    name_for_human = "微医"
    description_for_human = "微医工具包提供便捷的在线医疗服务和健康管理功能。"
    name_for_model = "WeiYi"
    description_for_model = "微医工具包提供在线医生咨询、预约挂号、健康档案管理等功能，帮助用户方便快捷地获取医疗服务和健康建议，同时考虑到用户隐私和数据安全。"
    app_classes = [
        WeiYiOnlineConsultationApp,
        WeiYiAppointmentBookingApp,
        WeiYiHealthRecordManagementApp,
        WeiYiDoctorRatingApp,
        WeiYiHealthAdviceApp,
        WeiYiDrugQueryApp,
        WeiYiElectronicPrescriptionManagementApp,
        WeiYiHealthKnowledgeBaseTool,
        WeiYiAppointmentReminderApp,
        WeiYiPersonalHealthReportApp,
        WeiYiSearchDoctorApp,
        WeiYiSearchUserApp,
        WeiYiSearchAppointmentApp,
        WeiYiSearchElectronicPrescriptionApp,
    ]


#################### MintHealth ####################


class MintHealthFoodRecord(VirtualFunctionApp):
    name = "MintHealthFoodRecord"
    summary = "记录用户每日饮食，包括食物种类和数量。"
    parameters: List[ArgParameter] = [
        {
            "name": "food_item",
            "type": "string",
            "description": "用户记录的食物名称。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "number",
            "description": "食物的数量，必须为正数。",
            "required": True,
        },
        {
            "name": "meal_type",
            "type": "string",
            "description": "餐类型，允许值: '早餐', '午餐', '晚餐', '零食'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "record_id", "type": "string", "description": "记录的唯一标识符。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果食物名称或数量格式错误。",
        }
    ]


class MintHealthCalorieCalculator(VirtualFunctionApp):
    name = "MintHealthCalorieCalculator"
    summary = "计算用户每日摄入的卡路里。"
    parameters: List[ArgParameter] = [
        {
            "name": "food_items",
            "type": "array",
            "description": "用户记录的食物项的列表，每个项为食物名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "total_calories", "type": "number", "description": "计算的总卡路里。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果食物项格式错误。"}
    ]


class MintHealthExerciseRecord(VirtualFunctionApp):
    name = "MintHealthExerciseRecord"
    summary = "记录用户的运动活动和消耗的卡路里。"
    parameters: List[ArgParameter] = [
        {
            "name": "exercise_type",
            "type": "string",
            "description": "运动类型。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "number",
            "description": "运动持续时间（分钟），必须为正数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "exercise_id",
            "type": "string",
            "description": "运动记录的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果运动类型或持续时间格式错误。",
        }
    ]


class MintHealthGoalSetting(VirtualFunctionApp):
    name = "MintHealthGoalSetting"
    summary = "允许用户为饮食和运动设置目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "goal_type",
            "type": "string",
            "description": "目标类型，允许值: '饮食', '运动'。",
            "required": True,
        },
        {
            "name": "target_value",
            "type": "number",
            "description": "期望的目标值，必须为正数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果目标类型或目标值格式错误。",
        }
    ]


class MintHealthProgressTracking(VirtualFunctionApp):
    name = "MintHealthProgressTracking"
    summary = "让用户查看自己的健康进展和目标达成情况。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress_data",
            "type": "object",
            "description": "包含用户进展的数据，具体字段包括: 'calories_consumed', 'calories_burned', 'goals_achieved'。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID不存在。"}
    ]


class MintHealthRecipeSuggestion(VirtualFunctionApp):
    name = "MintHealthRecipeSuggestion"
    summary = "根据用户的饮食偏好提供健康食谱。"
    parameters: List[ArgParameter] = [
        {
            "name": "preferences",
            "type": "array",
            "description": "用户的饮食偏好，每个项为偏好的食物类型。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggested_recipes",
            "type": "array",
            "description": "推荐的食谱列表，每个食谱包含名称和所需食材。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果偏好格式错误。"}
    ]


class MintHealthNutritionalAnalysis(VirtualFunctionApp):
    name = "MintHealthNutritionalAnalysis"
    summary = "分析用户饮食的营养成分。"
    parameters: List[ArgParameter] = [
        {
            "name": "food_items",
            "type": "array",
            "description": "用户记录的食物项的列表，每个项为食物名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nutritional_info",
            "type": "object",
            "description": "包含营养成分的详细信息，具体字段包括: 'calories', 'protein', 'carbohydrates', 'fats'。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果食物项格式错误。"}
    ]


class MintHealthCommunityInteraction(VirtualFunctionApp):
    name = "MintHealthCommunityInteraction"
    summary = "允许用户与其他用户分享经验和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "用户的分享内容，长度不超过500字符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果分享内容格式错误。"}
    ]


class MintHealthReminderSetup(VirtualFunctionApp):
    name = "MintHealthReminderSetup"
    summary = "设置饮食和运动的提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "reminder_type",
            "type": "string",
            "description": "提醒类型，允许值: '饮食', '运动'。",
            "required": True,
        },
        {
            "name": "time",
            "type": "string",
            "description": "提醒时间，格式: 'HH:mm'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提醒类型或时间格式错误。",
        }
    ]


class MintHealthDataExport(VirtualFunctionApp):
    name = "MintHealthDataExport"
    summary = "用户可以导出自己的饮食和运动数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "导出格式，允许值: 'CSV', 'JSON'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的下载链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果格式不正确。"}
    ]


class MintHealthSearchFoodRecord(VirtualFunctionApp):
    name = "MintHealthSearchFoodRecord"
    summary = "根据用户的食物记录搜索唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "food_item",
            "type": "string",
            "description": "用户记录的食物名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "record_id",
            "type": "string",
            "description": "找到的食物记录的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果未找到记录。"}
    ]


class MintHealthSearchExerciseRecord(VirtualFunctionApp):
    name = "MintHealthSearchExerciseRecord"
    summary = "根据用户的运动记录搜索唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "exercise_type",
            "type": "string",
            "description": "运动类型。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "exercise_id",
            "type": "string",
            "description": "找到的运动记录的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果未找到记录。"}
    ]


@register_app()
class MintHealth(FunctionApp):
    name_for_human = "薄荷健康"
    description_for_human = "一款综合性的健康管理工具，帮助用户实现健康饮食和运动目标。"
    name_for_model = "MintHealth"
    description_for_model = "薄荷健康是一款综合性的健康管理工具，帮助用户记录饮食、计算卡路里、记录运动、设置目标以及跟踪健康进展，旨在提升用户的健康意识和管理能力。"
    app_classes = [
        MintHealthFoodRecord,
        MintHealthCalorieCalculator,
        MintHealthExerciseRecord,
        MintHealthGoalSetting,
        MintHealthProgressTracking,
        MintHealthRecipeSuggestion,
        MintHealthNutritionalAnalysis,
        MintHealthCommunityInteraction,
        MintHealthReminderSetup,
        MintHealthDataExport,
        MintHealthSearchFoodRecord,
        MintHealthSearchExerciseRecord,
    ]


#################### HuaweiHealth ####################


class HuaweiHealthRecordSteps(VirtualFunctionApp):
    name = "HuaweiHealthRecordSteps"
    summary = "记录用户每天的步数数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "记录步数的日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "steps",
            "type": "integer",
            "description": "用户当天的步数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "步数记录是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果步数或日期格式不正确。"}
    ]


class HuaweiHealthMonitorHeartRate(VirtualFunctionApp):
    name = "HuaweiHealthMonitorHeartRate"
    summary = "实时监测用户的心率数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "监测心率的日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "heart_rate",
            "type": "integer",
            "description": "用户的心率值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "心率监测是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果心率值不在合理范围内。"}
    ]


class HuaweiHealthSleepAnalysis(VirtualFunctionApp):
    name = "HuaweiHealthSleepAnalysis"
    summary = "分析用户的睡眠质量和时长。"
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "分析睡眠的日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "sleep_duration",
            "type": "integer",
            "description": "用户的睡眠时长，单位为分钟。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "睡眠分析是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果睡眠时长不在合理范围内。",
        }
    ]


class HuaweiHealthGenerateHealthReport(VirtualFunctionApp):
    name = "HuaweiHealthGenerateHealthReport"
    summary = "生成用户的健康数据报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "string",
            "description": "报告的日期范围，格式为YYYY-MM-DD至YYYY-MM-DD。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "生成的健康报告的下载链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有健康数据记录。"}
    ]


class HuaweiHealthSetExerciseGoal(VirtualFunctionApp):
    name = "HuaweiHealthSetExerciseGoal"
    summary = "允许用户设置和跟踪运动目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_steps",
            "type": "integer",
            "description": "用户设定的目标步数。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "运动目标设置是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果目标步数不合理。"}
    ]


class HuaweiHealthShareHealthData(VirtualFunctionApp):
    name = "HuaweiHealthShareHealthData"
    summary = "允许用户分享健康数据给朋友或社交媒体。"
    parameters: List[ArgParameter] = [
        {
            "name": "platform",
            "type": "string",
            "description": "要分享的平台，例如'Facebook'或'Twitter'。",
            "required": True,
        },
        {
            "name": "data_type",
            "type": "string",
            "description": "要分享的数据类型，例如'步数'或'心率'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "健康数据共享是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果平台或数据类型不支持。"}
    ]


class HuaweiHealthHealthSuggestions(VirtualFunctionApp):
    name = "HuaweiHealthHealthSuggestions"
    summary = "根据用户的健康数据提供个性化建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggestions",
            "type": "array",
            "description": "根据用户健康数据生成的建议列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有找到用户健康数据。"}
    ]


class HuaweiHealthExportData(VirtualFunctionApp):
    name = "HuaweiHealthExportData"
    summary = "导出用户的健康数据为CSV或PDF格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "导出文件的格式，支持'CSV'或'PDF'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_url",
            "type": "string",
            "description": "导出的健康数据文件的下载链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果格式不支持。"}
    ]


class HuaweiHealthViewHistoricalData(VirtualFunctionApp):
    name = "HuaweiHealthViewHistoricalData"
    summary = "查看用户过去的健康数据记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "string",
            "description": "要查看的日期范围，格式为YYYY-MM-DD至YYYY-MM-DD。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history_data",
            "type": "object",
            "description": "包含用户历史健康数据的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有历史数据记录。"}
    ]


class HuaweiHealthSelectActivityType(VirtualFunctionApp):
    name = "HuaweiHealthSelectActivityType"
    summary = "支持多种运动类型的选择和记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "activity_type",
            "type": "string",
            "description": "用户选择的运动类型，例如'跑步'、'游泳'等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "运动类型记录是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果运动类型不在支持列表中。",
        }
    ]


class HuaweiHealthGetUserId(VirtualFunctionApp):
    name = "HuaweiHealthGetUserId"
    summary = "获取当前用户的唯一标识符。"
    parameters: List[ArgParameter] = [
        {"name": "none", "type": "null", "description": "无参数", "required": False}
    ]
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "当前用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无法获取。"}
    ]


class HuaweiHealthGetUserHealthData(VirtualFunctionApp):
    name = "HuaweiHealthGetUserHealthData"
    summary = "获取当前用户的健康数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "health_data",
            "type": "object",
            "description": "包含用户健康数据的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果无法获取健康数据。"}
    ]


@register_app()
class HuaweiHealth(FunctionApp):
    name_for_human = "华为运动健康"
    description_for_human = (
        "一个全面的运动数据跟踪工具，旨在帮助用户监测和改善他们的健康状况。"
    )
    name_for_model = "HuaweiHealth"
    description_for_model = "HuaweiHealth工具包提供全面的运动数据跟踪，包括步数、心率、睡眠质量等功能，帮助用户监测和改善健康状况，并提供个性化建议和健康报告。"
    app_classes = [
        HuaweiHealthRecordSteps,
        HuaweiHealthMonitorHeartRate,
        HuaweiHealthSleepAnalysis,
        HuaweiHealthGenerateHealthReport,
        HuaweiHealthSetExerciseGoal,
        HuaweiHealthShareHealthData,
        HuaweiHealthHealthSuggestions,
        HuaweiHealthExportData,
        HuaweiHealthViewHistoricalData,
        HuaweiHealthSelectActivityType,
        HuaweiHealthGetUserId,
        HuaweiHealthGetUserHealthData,
    ]


#################### Keep ####################


class KeepCreateFitnessPlan(VirtualFunctionApp):
    name = "KeepCreateFitnessPlan"
    summary = "创建一个个性化的健身计划，基于用户的目标和健身水平。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_goal",
            "type": "string",
            "description": "用户的健身目标，如“减脂”、“增肌”。",
            "required": True,
        },
        {
            "name": "fitness_level",
            "type": "string",
            "description": "用户的健身水平，如“初学者”、“中级”、“高级”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "创建的健身计划的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果目标或健身水平无效。"}
    ]


class KeepSelectWorkout(VirtualFunctionApp):
    name = "KeepSelectWorkout"
    summary = "选择并开始一个运动课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "workout_type",
            "type": "string",
            "description": "运动课程的类型，如“有氧”、“力量训练”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "workout_id",
            "type": "string",
            "description": "选择的运动课程的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有找到运动课程。"}
    ]


class KeepTrackProgress(VirtualFunctionApp):
    name = "KeepTrackProgress"
    summary = "记录和跟踪用户的锻炼进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "workout_id",
            "type": "string",
            "description": "运动课程的唯一标识符。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "number",
            "description": "锻炼的持续时间，以分钟为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "进度记录是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 workout_id 无效。"}
    ]


class KeepSocialInteraction(VirtualFunctionApp):
    name = "KeepSocialInteraction"
    summary = "与其他用户进行互动，分享进展。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "其他用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 user_id 无效。"}
    ]


class KeepProvideFeedback(VirtualFunctionApp):
    name = "KeepProvideFeedback"
    summary = "提供基于用户锻炼数据的反馈和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "string",
            "description": "针对用户锻炼的反馈和建议。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 user_id 无效。"}
    ]


class KeepLogDietInfo(VirtualFunctionApp):
    name = "KeepLogDietInfo"
    summary = "记录用户的饮食信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "food_item",
            "type": "string",
            "description": "食物名称。",
            "required": True,
        },
        {
            "name": "calories",
            "type": "number",
            "description": "食物的卡路里含量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "饮食信息记录是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果食物项或卡路里无效。"}
    ]


class KeepSetGoals(VirtualFunctionApp):
    name = "KeepSetGoals"
    summary = "设定用户的健身目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "goal",
            "type": "string",
            "description": "用户的健身目标。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "目标设定是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果目标无效。"}
    ]


class KeepAccessVideoTutorials(VirtualFunctionApp):
    name = "KeepAccessVideoTutorials"
    summary = "提供用户访问健身视频教程的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "tutorial_type",
            "type": "string",
            "description": "视频教程的类型，如“力量训练”、“有氧”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "tutorial_link", "type": "string", "description": "视频教程的链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有找到视频教程。"}
    ]


class KeepSendReminders(VirtualFunctionApp):
    name = "KeepSendReminders"
    summary = "向用户发送锻炼提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "reminder_message",
            "type": "string",
            "description": "提醒消息内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提醒是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果提醒消息为空。"}
    ]


class KeepJoinCommunityChallenge(VirtualFunctionApp):
    name = "KeepJoinCommunityChallenge"
    summary = "用户参与社区挑战。"
    parameters: List[ArgParameter] = [
        {
            "name": "challenge_id",
            "type": "string",
            "description": "挑战的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "用户是否成功加入挑战。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 challenge_id 无效。"}
    ]


class KeepGetUserData(VirtualFunctionApp):
    name = "KeepGetUserData"
    summary = "获取用户的存储数据，如地址或支付方式。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "包含用户的存储数据字段，如地址和支付方式。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果无法访问用户数据。"}
    ]


class KeepSearchUser(VirtualFunctionApp):
    name = "KeepSearchUser"
    summary = "根据用户名搜索用户并返回其唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "用户名。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有找到用户。"}
    ]


@register_app()
class Keep(FunctionApp):
    name_for_human = "Keep Fitness App"
    description_for_human = (
        "一个帮助用户实现个人健身目标的工具包，提供多种健身相关功能。"
    )
    name_for_model = "Keep"
    description_for_model = "Keep 是一个健身工具包，提供创建健身计划、选择运动课程、记录锻炼进度、社交互动、提供反馈等功能，旨在帮助用户实现个人健身目标并促进健康生活。"
    app_classes = [
        KeepCreateFitnessPlan,
        KeepSelectWorkout,
        KeepTrackProgress,
        KeepSocialInteraction,
        KeepProvideFeedback,
        KeepLogDietInfo,
        KeepSetGoals,
        KeepAccessVideoTutorials,
        KeepSendReminders,
        KeepJoinCommunityChallenge,
        KeepGetUserData,
        KeepSearchUser,
    ]


#################### Meiyou ####################


class MeiyouRecordCycle(VirtualFunctionApp):
    name = "MeiyouRecordCycle"
    summary = "记录用户的月经周期信息，包括开始和结束日期。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "月经开始日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "月经结束日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "记录是否成功。"},
        {"name": "cycle_id", "type": "string", "description": "记录的唯一标识符。"},
    ]
    exceptions: List[ArgException] = []


class MeiyouLogSymptom(VirtualFunctionApp):
    name = "MeiyouLogSymptom"
    summary = "记录与月经周期相关的症状。"
    parameters: List[ArgParameter] = [
        {
            "name": "symptom",
            "type": "string",
            "description": "症状描述。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "记录症状的日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "记录是否成功。"},
        {"name": "symptom_id", "type": "string", "description": "记录的唯一标识符。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "症状描述不能为空。"}
    ]


class MeiyouGetHealthArticles(VirtualFunctionApp):
    name = "MeiyouGetHealthArticles"
    summary = "获取与女性健康相关的知识文章。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "文章主题，用户可以选择感兴趣的主题。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "相关健康文章列表，每篇文章包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class MeiyouSetReminder(VirtualFunctionApp):
    name = "MeiyouSetReminder"
    summary = "设置提醒以通知用户月经周期或症状记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "reminder_type",
            "type": "string",
            "description": "提醒类型，选项包括'周期开始'和'症状记录'。",
            "required": True,
        },
        {
            "name": "reminder_date",
            "type": "string",
            "description": "提醒日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提醒设置是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提醒类型不在选项中。"}
    ]


class MeiyouAnalyzeData(VirtualFunctionApp):
    name = "MeiyouAnalyzeData"
    summary = "分析用户的月经周期和症状记录，提供趋势和规律。"
    parameters: List[ArgParameter] = [
        {
            "name": "analysis_type",
            "type": "string",
            "description": "分析类型，选项包括'周期规律'和'症状趋势'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "包含分析结果的对象，字段包括'规律'和'趋势'。",
        }
    ]
    exceptions: List[ArgException] = []


class MeiyouCommunityChat(VirtualFunctionApp):
    name = "MeiyouCommunityChat"
    summary = "在社区中与其他用户交流。"
    parameters: List[ArgParameter] = [
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "消息内容不能为空。"}
    ]


class MeiyouGenerateHealthReport(VirtualFunctionApp):
    name = "MeiyouGenerateHealthReport"
    summary = "生成用户的健康报告，汇总周期和症状信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "report_period",
            "type": "string",
            "description": "报告的时间范围，格式为'YYYY-MM'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_id",
            "type": "string",
            "description": "生成的健康报告的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class MeiyouExportData(VirtualFunctionApp):
    name = "MeiyouExportData"
    summary = "导出用户的记录数据为文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "export_format",
            "type": "string",
            "description": "导出文件格式，选项包括'CSV'和'PDF'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_path", "type": "string", "description": "导出文件的路径。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "导出格式不在选项中。"}
    ]


class MeiyouAccessHistory(VirtualFunctionApp):
    name = "MeiyouAccessHistory"
    summary = "访问用户的历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "history_type",
            "type": "string",
            "description": "历史记录类型，选项包括'周期记录'和'症状记录'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "history_data", "type": "array", "description": "用户的历史记录列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "历史记录类型不在选项中。"}
    ]


class MeiyouCustomTag(VirtualFunctionApp):
    name = "MeiyouCustomTag"
    summary = "为症状和记录添加自定义标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "symptom_id",
            "type": "string",
            "description": "症状记录的唯一标识符。",
            "required": True,
        },
        {
            "name": "tag",
            "type": "string",
            "description": "自定义标签内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "标签是否成功添加。"}
    ]
    exceptions: List[ArgException] = []


class MeiyouDeleteRecord(VirtualFunctionApp):
    name = "MeiyouDeleteRecord"
    summary = "删除用户的记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "record_id",
            "type": "string",
            "description": "要删除的记录的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "记录ID不存在。"}
    ]


class MeiyouGetUserProfile(VirtualFunctionApp):
    name = "MeiyouGetUserProfile"
    summary = "获取用户的个人资料信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "用户的个人资料信息，包含字段如'姓名'、'年龄'等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID不存在。"}
    ]


@register_app()
class Meiyou(FunctionApp):
    name_for_human = "美柚"
    description_for_human = "美柚工具包旨在帮助女性用户管理生理健康，通过记录月经周期、症状、获取健康知识以及分析健康数据，提供全面的健康管理解决方案。"
    name_for_model = "Meiyou"
    description_for_model = "美柚工具包旨在帮助女性用户管理生理健康，通过记录月经周期、症状、获取健康知识以及分析健康数据，提供全面的健康管理解决方案。"
    app_classes = [
        MeiyouRecordCycle,
        MeiyouLogSymptom,
        MeiyouGetHealthArticles,
        MeiyouSetReminder,
        MeiyouAnalyzeData,
        MeiyouCommunityChat,
        MeiyouGenerateHealthReport,
        MeiyouExportData,
        MeiyouAccessHistory,
        MeiyouCustomTag,
        MeiyouDeleteRecord,
        MeiyouGetUserProfile,
    ]


#################### Fitbit ####################


class FitbitGetHeartRate(VirtualFunctionApp):
    name = "FitbitGetHeartRate"
    summary = "获取用户当前的心率数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "heart_rate", "type": "number", "description": "用户当前的心率值。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户的健康数据不可用。"}
    ]


class FitbitTrackActivity(VirtualFunctionApp):
    name = "FitbitTrackActivity"
    summary = "记录用户的日常活动水平。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activity_level",
            "type": "object",
            "description": "包含步数、运动时间等活动信息，字段包括步数（步数）、运动时间（分钟）。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "活动数据不可用。"}
    ]


class FitbitAnalyzeSleepQuality(VirtualFunctionApp):
    name = "FitbitAnalyzeSleepQuality"
    summary = "提供用户的睡眠数据和质量评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sleep_quality",
            "type": "object",
            "description": "包含睡眠时长（小时）、深度睡眠（小时）等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "睡眠数据不可用。"}
    ]


class FitbitSetHealthGoals(VirtualFunctionApp):
    name = "FitbitSetHealthGoals"
    summary = "允许用户设置和更新个人健康目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "goal",
            "type": "string",
            "description": "用户设定的健康目标，必须简洁明了。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "目标设置是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "目标格式不正确。"}
    ]


class FitbitGetHistoricalData(VirtualFunctionApp):
    name = "FitbitGetHistoricalData"
    summary = "提供用户的历史健康数据记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "查询的日期范围，格式为'YYYY-MM-DD to YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "用户在指定日期范围内的健康数据记录，包含日期、心率、活动水平等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "历史数据不可用。"}
    ]


class FitbitSendHealthReminder(VirtualFunctionApp):
    name = "FitbitSendHealthReminder"
    summary = "向用户发送健康活动提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "reminder_message",
            "type": "string",
            "description": "提醒内容，必须简洁明了。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提醒是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提醒信息格式不正确。"}
    ]


class FitbitAccessUserProfile(VirtualFunctionApp):
    name = "FitbitAccessUserProfile"
    summary = "提供用户的基本健康资料。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "包含用户基本健康信息，如年龄、性别、身高、体重等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户资料不可用。"}
    ]


class FitbitLogDietInfo(VirtualFunctionApp):
    name = "FitbitLogDietInfo"
    summary = "允许用户输入和记录饮食数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "diet_info",
            "type": "string",
            "description": "饮食记录内容，必须详细描述所吃食物及其数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "饮食信息是否成功记录。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "饮食信息格式不正确。"}
    ]


class FitbitGenerateHealthReport(VirtualFunctionApp):
    name = "FitbitGenerateHealthReport"
    summary = "提供用户健康数据的综合报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "health_report",
            "type": "object",
            "description": "用户的健康报告，包含心率、活动水平、睡眠质量等综合信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "报告不可用。"}
    ]


class FitbitConnectSocialFeatures(VirtualFunctionApp):
    name = "FitbitConnectSocialFeatures"
    summary = "允许用户与朋友分享健康数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "friend_id",
            "type": "string",
            "description": "朋友的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "社交连接是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "朋友的健康数据不可用。"}
    ]


@register_app()
class Fitbit(FunctionApp):
    name_for_human = "Fitbit App"
    description_for_human = "App for monitoring and managing health data."
    name_for_model = "Fitbit"
    description_for_model = "Fitbit工具包用于帮助用户监测和管理健康数据，包括心率、活动水平、睡眠质量等，支持用户设定健康目标、记录饮食信息，并生成健康报告，确保用户全面了解自己的健康状况。"
    app_classes = [
        FitbitGetHeartRate,
        FitbitTrackActivity,
        FitbitAnalyzeSleepQuality,
        FitbitSetHealthGoals,
        FitbitGetHistoricalData,
        FitbitSendHealthReminder,
        FitbitAccessUserProfile,
        FitbitLogDietInfo,
        FitbitGenerateHealthReport,
        FitbitConnectSocialFeatures,
    ]


#################### Gudu ####################


class GuduRecordActivity(VirtualFunctionApp):
    name = "GuduRecordActivity"
    summary = "记录用户的运动数据，包括运动类型、时间、距离等。"
    parameters: List[ArgParameter] = [
        {
            "name": "activity_type",
            "type": "string",
            "description": "运动类型，例如“跑步”或“骑行”。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "number",
            "description": "运动持续时间，以分钟为单位。",
            "required": True,
        },
        {
            "name": "distance",
            "type": "number",
            "description": "运动距离，以公里为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "activity_id",
            "type": "string",
            "description": "创建的运动记录的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"}
    ]


class GuduGetActivityHistory(VirtualFunctionApp):
    name = "GuduGetActivityHistory"
    summary = "获取用户的运动历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大记录数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "activities",
            "type": "array",
            "description": "包含用户运动记录的数组，每个记录包括活动类型、时间和距离。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果max_results不正确。"}
    ]


class GuduSocialInteraction(VirtualFunctionApp):
    name = "GuduSocialInteraction"
    summary = "允许用户与朋友互动，查看他们的运动数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "friend_username",
            "type": "string",
            "description": "朋友的用户名。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "friend_activity",
            "type": "array",
            "description": "朋友的运动记录数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果朋友的用户名不存在。"}
    ]


class GuduCreateChallenge(VirtualFunctionApp):
    name = "GuduCreateChallenge"
    summary = "创建一个运动挑战供其他用户参与。"
    parameters: List[ArgParameter] = [
        {
            "name": "challenge_name",
            "type": "string",
            "description": "挑战的名称。",
            "required": True,
        },
        {
            "name": "challenge_duration",
            "type": "integer",
            "description": "挑战的持续时间，以天为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "challenge_id",
            "type": "string",
            "description": "创建的挑战的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"}
    ]


class GuduJoinChallenge(VirtualFunctionApp):
    name = "GuduJoinChallenge"
    summary = "用户加入一个已创建的运动挑战。"
    parameters: List[ArgParameter] = [
        {
            "name": "challenge_id",
            "type": "string",
            "description": "挑战的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果挑战不存在。"}
    ]


class GuduSetGoal(VirtualFunctionApp):
    name = "GuduSetGoal"
    summary = "用户设置个人运动目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "goal_type",
            "type": "string",
            "description": "目标类型，例如“跑步距离”或“骑行时间”。",
            "required": True,
        },
        {
            "name": "goal_value",
            "type": "number",
            "description": "目标值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"}
    ]


class GuduNotifyFriends(VirtualFunctionApp):
    name = "GuduNotifyFriends"
    summary = "向朋友发送运动成绩通知。"
    parameters: List[ArgParameter] = [
        {
            "name": "friend_username",
            "type": "string",
            "description": "朋友的用户名。",
            "required": True,
        },
        {
            "name": "activity_id",
            "type": "string",
            "description": "运动记录的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果朋友的用户名不存在或活动记录无效。",
        }
    ]


class GuduShareToSocialMedia(VirtualFunctionApp):
    name = "GuduShareToSocialMedia"
    summary = "将运动数据分享至其他社交平台。"
    parameters: List[ArgParameter] = [
        {
            "name": "activity_id",
            "type": "string",
            "description": "运动记录的唯一标识符。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "目标社交媒体平台，例如“Twitter”或“Facebook”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果活动记录无效或平台不支持。"}
    ]


class GuduGenerateReport(VirtualFunctionApp):
    name = "GuduGenerateReport"
    summary = "生成用户的运动报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "报告开始日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "报告结束日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "生成的运动报告的下载链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果日期格式不正确。"}
    ]


class GuduGetPersonalizedAdvice(VirtualFunctionApp):
    name = "GuduGetPersonalizedAdvice"
    summary = "根据用户的运动数据提供个性化的运动建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "advice", "type": "string", "description": "个性化的运动建议。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无效。"}
    ]


class GuduGetUserId(VirtualFunctionApp):
    name = "GuduGetUserId"
    summary = "获取当前用户的唯一标识符。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "当前用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户未登录。"}
    ]


@register_app()
class Gudu(FunctionApp):
    name_for_human = "Gudu"
    description_for_human = (
        "一个运动社交应用工具包，帮助用户记录和管理运动活动，进行社交互动。"
    )
    name_for_model = "Gudu"
    description_for_model = "Gudu工具包提供了一系列功能，帮助用户记录和管理运动数据，支持社交互动和挑战功能，旨在提升用户的运动动力和社交体验。"
    app_classes = [
        GuduRecordActivity,
        GuduGetActivityHistory,
        GuduSocialInteraction,
        GuduCreateChallenge,
        GuduJoinChallenge,
        GuduSetGoal,
        GuduNotifyFriends,
        GuduShareToSocialMedia,
        GuduGenerateReport,
        GuduGetPersonalizedAdvice,
        GuduGetUserId,
    ]


#################### SmartScaleApp ####################


class SmartScaleAppRecordWeightApp(VirtualFunctionApp):
    name = "SmartScaleAppRecordWeightApp"
    summary = "用于记录用户的体重和体脂率。"
    parameters: List[ArgParameter] = [
        {
            "name": "weight",
            "type": "number",
            "description": "用户输入的体重，单位为千克，必须为正数。",
            "required": True,
        },
        {
            "name": "body_fat_percentage",
            "type": "number",
            "description": "用户输入的体脂率，单位为百分比，必须在0到100之间。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "record_id", "type": "string", "description": "新记录的唯一标识符。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "输入的体重或体脂率不符合格式或范围。",
        }
    ]


class SmartScaleAppGenerateReportApp(VirtualFunctionApp):
    name = "SmartScaleAppGenerateReportApp"
    summary = "生成用户的健康报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "生成的健康报告的链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class SmartScaleAppAnalyzeTrendsApp(VirtualFunctionApp):
    name = "SmartScaleAppAnalyzeTrendsApp"
    summary = "分析用户的健康数据趋势。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend_analysis",
            "type": "object",
            "description": "包含体重和体脂率的趋势分析结果，包括字段如'weight_trend'和'body_fat_trend'。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class SmartScaleAppSetGoalApp(VirtualFunctionApp):
    name = "SmartScaleAppSetGoalApp"
    summary = "设置用户的健康目标。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "goal_weight",
            "type": "number",
            "description": "用户设定的目标体重，单位为千克，必须为正数。",
            "required": True,
        },
        {
            "name": "goal_body_fat_percentage",
            "type": "number",
            "description": "用户设定的目标体脂率，单位为百分比，必须在0到100之间。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"},
        {"name": "ConflictException", "description": "目标与当前状态冲突。"},
    ]


class SmartScaleAppAccessHistoryApp(VirtualFunctionApp):
    name = "SmartScaleAppAccessHistoryApp"
    summary = "访问用户的历史健康数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大记录数，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "用户历史记录的列表，每个记录包含体重、体脂率和日期等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class SmartScaleAppExportDataApp(VirtualFunctionApp):
    name = "SmartScaleAppExportDataApp"
    summary = "导出用户的健康数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出格式，可以是'CSV'或'PDF'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出的文件链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "导出格式不符合要求。"}
    ]


class SmartScaleAppSetReminderApp(VirtualFunctionApp):
    name = "SmartScaleAppSetReminderApp"
    summary = "设置定期记录体重和体脂率的提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "提醒时间，格式为'HH:mm'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提醒时间格式不正确。"}
    ]


class SmartScaleAppShareReportApp(VirtualFunctionApp):
    name = "SmartScaleAppShareReportApp"
    summary = "分享用户的健康报告到社交媒体。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "report_url",
            "type": "string",
            "description": "要分享的报告链接。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "报告链接无效。"}
    ]


class SmartScaleAppGetHealthTipsApp(VirtualFunctionApp):
    name = "SmartScaleAppGetHealthTipsApp"
    summary = "提供个性化的健康小贴士。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "tips", "type": "array", "description": "健康小贴士的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class SmartScaleAppConnectThirdPartyApp(VirtualFunctionApp):
    name = "SmartScaleAppConnectThirdPartyApp"
    summary = "连接第三方健康应用。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "app_name",
            "type": "string",
            "description": "第三方应用的名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class SmartScaleAppDownloadReportApp(VirtualFunctionApp):
    name = "SmartScaleAppDownloadReportApp"
    summary = "下载用户的健康报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "report_url",
            "type": "string",
            "description": "健康报告的链接。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "local_file_path",
            "type": "string",
            "description": "下载的本地文件路径。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "报告链接无效。"}
    ]


class SmartScaleAppDeleteRecordApp(VirtualFunctionApp):
    name = "SmartScaleAppDeleteRecordApp"
    summary = "删除用户的健康记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "record_id",
            "type": "string",
            "description": "要删除的记录的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "记录ID无效。"}
    ]


@register_app()
class SmartScaleApp(FunctionApp):
    name_for_human = "智能体重秤APP"
    description_for_human = "一个帮助用户记录体重和体脂率的健康管理工具包。"
    name_for_model = "SmartScaleApp"
    description_for_model = "该工具包旨在帮助用户通过智能体重秤记录体重、体脂率等健康数据，并生成健康报告，提供数据分析、目标设置等功能，以促进用户的健康管理。"
    app_classes = [
        SmartScaleAppRecordWeightApp,
        SmartScaleAppGenerateReportApp,
        SmartScaleAppAnalyzeTrendsApp,
        SmartScaleAppSetGoalApp,
        SmartScaleAppAccessHistoryApp,
        SmartScaleAppExportDataApp,
        SmartScaleAppSetReminderApp,
        SmartScaleAppShareReportApp,
        SmartScaleAppGetHealthTipsApp,
        SmartScaleAppConnectThirdPartyApp,
        SmartScaleAppDownloadReportApp,
        SmartScaleAppDeleteRecordApp,
    ]


#################### GoodDoctorOnline ####################


class GoodDoctorOnlineOnlineConsultation(VirtualFunctionApp):
    name = "GoodDoctorOnlineOnlineConsultation"
    summary = "允许用户与医生进行实时在线问诊。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "doctor_id",
            "type": "string",
            "description": "医生的唯一标识符",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "用户发送的消息",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "consultation_id",
            "type": "string",
            "description": "此次咨询的唯一标识符",
        },
        {"name": "status", "type": "boolean", "description": "咨询是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户或医生的唯一标识符格式不正确时触发。",
        }
    ]


class GoodDoctorOnlineHealthAdvice(VirtualFunctionApp):
    name = "GoodDoctorOnlineHealthAdvice"
    summary = "提供用户健康问题的解答和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "question",
            "type": "string",
            "description": "用户提出的健康问题",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "advice", "type": "string", "description": "医生提供的健康建议"},
        {"name": "status", "type": "boolean", "description": "建议是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户的健康问题格式不正确时触发。",
        }
    ]


class GoodDoctorOnlineBookAppointment(VirtualFunctionApp):
    name = "GoodDoctorOnlineBookAppointment"
    summary = "用户可以预约医生进行进一步的咨询。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "doctor_id",
            "type": "string",
            "description": "医生的唯一标识符",
            "required": True,
        },
        {
            "name": "appointment_time",
            "type": "string",
            "description": "预约的时间，格式为YYYY-MM-DD HH:MM",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "appointment_id", "type": "string", "description": "预约的唯一标识符"},
        {"name": "status", "type": "boolean", "description": "预约是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当预约时间格式不正确时触发。",
        }
    ]


class GoodDoctorOnlineShareHealthKnowledge(VirtualFunctionApp):
    name = "GoodDoctorOnlineShareHealthKnowledge"
    summary = "提供健康知识的文章和视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "topic",
            "type": "string",
            "description": "健康知识主题",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "object",
            "description": "健康知识内容，包括文章和视频链接",
        },
        {"name": "status", "type": "boolean", "description": "内容是否成功获取"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "当指定的健康知识主题不存在时触发。",
        }
    ]


class GoodDoctorOnlineManageHealthRecords(VirtualFunctionApp):
    name = "GoodDoctorOnlineManageHealthRecords"
    summary = "用户可以管理自己的健康记录和咨询历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，包括'create', 'update', 'delete'",
            "required": True,
        },
        {
            "name": "record_data",
            "type": "object",
            "description": "健康记录数据",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "record_id", "type": "string", "description": "健康记录的唯一标识符"},
        {"name": "status", "type": "boolean", "description": "操作是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当操作类型不在'create', 'update', 'delete'中时触发。",
        }
    ]


class GoodDoctorOnlinePrescriptionManagement(VirtualFunctionApp):
    name = "GoodDoctorOnlinePrescriptionManagement"
    summary = "用户可以查看和管理医生开具的处方。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "prescription_id",
            "type": "string",
            "description": "处方的唯一标识符",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "prescription_details",
            "type": "object",
            "description": "处方详细信息",
        },
        {"name": "status", "type": "boolean", "description": "获取是否成功"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的处方不存在时触发。"}
    ]


class GoodDoctorOnlineRemoteMonitoring(VirtualFunctionApp):
    name = "GoodDoctorOnlineRemoteMonitoring"
    summary = "医生可以通过工具监测用户的健康指标。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "health_data",
            "type": "object",
            "description": "用户的健康数据",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "monitoring_status", "type": "boolean", "description": "监测是否成功"},
        {"name": "feedback", "type": "string", "description": "医生的反馈信息"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当健康数据格式不正确时触发。",
        }
    ]


class GoodDoctorOnlineHealthTips(VirtualFunctionApp):
    name = "GoodDoctorOnlineHealthTips"
    summary = "根据用户的健康记录提供个性化的健康提示。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "tips", "type": "array", "description": "个性化健康提示列表"},
        {"name": "status", "type": "boolean", "description": "获取是否成功"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有健康记录时触发。"}
    ]


class GoodDoctorOnlineCommunityInteraction(VirtualFunctionApp):
    name = "GoodDoctorOnlineCommunityInteraction"
    summary = "用户可以参与健康相关的讨论和交流。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "用户发送的消息",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "interaction_id", "type": "string", "description": "互动的唯一标识符"},
        {"name": "status", "type": "boolean", "description": "互动是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户发送的消息格式不正确时触发。",
        }
    ]


class GoodDoctorOnlineExportHealthData(VirtualFunctionApp):
    name = "GoodDoctorOnlineExportHealthData"
    summary = "用户可以导出自己的健康记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_path", "type": "string", "description": "导出文件的路径"},
        {"name": "status", "type": "boolean", "description": "导出是否成功"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有健康记录可导出时触发。"}
    ]


class GoodDoctorOnlineSearchDoctor(VirtualFunctionApp):
    name = "GoodDoctorOnlineSearchDoctor"
    summary = "根据条件搜索医生并返回医生的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "specialty",
            "type": "string",
            "description": "医生的专业领域",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "医生的地理位置",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "doctor_list",
            "type": "array",
            "description": "符合条件的医生列表，包括医生的唯一标识符",
        },
        {"name": "status", "type": "boolean", "description": "搜索是否成功"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当专业领域或地理位置格式不正确时触发。",
        }
    ]


@register_app()
class GoodDoctorOnline(FunctionApp):
    name_for_human = "好医生在线"
    description_for_human = "好医生在线提供在线问诊、健康咨询和健康知识分享的平台，用户可以随时与专业医生沟通，获取健康指导。"
    name_for_model = "GoodDoctorOnline"
    description_for_model = "GoodDoctorOnline工具包提供在线问诊、健康咨询、预约医生和健康知识分享等功能，旨在为用户提供便捷的医疗服务和健康指导。"
    app_classes = [
        GoodDoctorOnlineOnlineConsultation,
        GoodDoctorOnlineHealthAdvice,
        GoodDoctorOnlineBookAppointment,
        GoodDoctorOnlineShareHealthKnowledge,
        GoodDoctorOnlineManageHealthRecords,
        GoodDoctorOnlinePrescriptionManagement,
        GoodDoctorOnlineRemoteMonitoring,
        GoodDoctorOnlineHealthTips,
        GoodDoctorOnlineCommunityInteraction,
        GoodDoctorOnlineExportHealthData,
        GoodDoctorOnlineSearchDoctor,
    ]


#################### YueDongQuan ####################


class YueDongQuanRecordExerciseData(VirtualFunctionApp):
    name = "YueDongQuanRecordExerciseData"
    summary = "允许用户输入和记录他们的运动数据，如步数、跑步距离、时间等。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_input",
            "type": "string",
            "description": "用户输入的运动数据，格式为“步数, 跑步距离, 时间”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示运动数据是否成功记录。",
        },
        {
            "name": "record_id",
            "type": "string",
            "description": "成功记录的运动数据的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户输入的运动数据格式不正确时触发。",
        }
    ]


class YueDongQuanShareExerciseResults(VirtualFunctionApp):
    name = "YueDongQuanShareExerciseResults"
    summary = "允许用户将他们的运动成果分享给朋友或在社交网络上。"
    parameters: List[ArgParameter] = [
        {
            "name": "record_id",
            "type": "string",
            "description": "要分享的运动数据的唯一标识符。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台，值为“朋友”或“社交网络”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示运动成果是否成功分享。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的record_id不存在时触发。"}
    ]


class YueDongQuanJoinOnlineEvent(VirtualFunctionApp):
    name = "YueDongQuanJoinOnlineEvent"
    summary = "允许用户查看并报名参加各种线上运动活动或挑战。"
    parameters: List[ArgParameter] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "要报名参加的活动的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示是否成功报名参加活动。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的event_id不存在时触发。"}
    ]


class YueDongQuanGetExerciseIncentives(VirtualFunctionApp):
    name = "YueDongQuanGetExerciseIncentives"
    summary = "用户可以接收运动激励信息，如奖励、徽章等。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "incentives",
            "type": "array",
            "description": "包含用户获得的激励信息的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id不存在时触发。"}
    ]


class YueDongQuanViewExerciseHistory(VirtualFunctionApp):
    name = "YueDongQuanViewExerciseHistory"
    summary = "允许用户查看他们的历史运动记录和统计数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "包含用户历史运动记录的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id不存在时触发。"}
    ]


class YueDongQuanFollowFriend(VirtualFunctionApp):
    name = "YueDongQuanFollowFriend"
    summary = "允许用户关注其他用户，查看他们的运动动态。"
    parameters: List[ArgParameter] = [
        {
            "name": "friend_id",
            "type": "string",
            "description": "要关注的朋友的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示是否成功关注朋友。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的friend_id不存在时触发。"}
    ]


class YueDongQuanSendMessage(VirtualFunctionApp):
    name = "YueDongQuanSendMessage"
    summary = "允许用户在应用内与朋友发送消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "friend_id",
            "type": "string",
            "description": "要发送消息的朋友的唯一标识符。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的friend_id不存在时触发。"}
    ]


class YueDongQuanSetExerciseGoal(VirtualFunctionApp):
    name = "YueDongQuanSetExerciseGoal"
    summary = "允许用户设置自己的运动目标并追踪进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "target",
            "type": "string",
            "description": "用户的运动目标，格式为“步数, 跑步距离”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示运动目标是否成功设置。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id不存在时触发。"}
    ]


class YueDongQuanViewLeaderboard(VirtualFunctionApp):
    name = "YueDongQuanViewLeaderboard"
    summary = "允许用户查看朋友或全体用户的运动排行榜。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "排行榜类别，值为“朋友”或“全体用户”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "leaderboard",
            "type": "array",
            "description": "包含排行榜数据的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的category不正确时触发。"}
    ]


class YueDongQuanReceiveExerciseSuggestions(VirtualFunctionApp):
    name = "YueDongQuanReceiveExerciseSuggestions"
    summary = "允许用户根据其运动习惯接收个性化的运动建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "suggestions",
            "type": "array",
            "description": "包含个性化运动建议的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id不存在时触发。"}
    ]


class YueDongQuanSearchExerciseRecords(VirtualFunctionApp):
    name = "YueDongQuanSearchExerciseRecords"
    summary = "允许用户通过输入条件搜索运动记录并返回唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "record_ids",
            "type": "array",
            "description": "返回符合条件的运动记录的唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id不存在时触发。"}
    ]


class YueDongQuanSearchUser(VirtualFunctionApp):
    name = "YueDongQuanSearchUser"
    summary = "允许用户通过用户名搜索其他用户并返回唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "要搜索的用户名。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "返回找到的用户的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的username不存在时触发。"}
    ]


class YueDongQuanSearchEvent(VirtualFunctionApp):
    name = "YueDongQuanSearchEvent"
    summary = "允许用户通过活动名称搜索线上活动并返回唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "event_name",
            "type": "string",
            "description": "要搜索的活动名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "返回找到的活动的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的event_name不存在时触发。"}
    ]


@register_app()
class YueDongQuan(FunctionApp):
    name_for_human = "悦动圈"
    description_for_human = (
        "一个结合运动社交和数据记录的应用，帮助用户记录运动数据，分享成果，参加活动。"
    )
    name_for_model = "YueDongQuan"
    description_for_model = "悦动圈工具包为运动爱好者提供了一个全面的解决方案，用户可以记录和分享运动数据，参加线上活动，获取运动激励，并与朋友互动，旨在提升用户的运动积极性和社交体验。"
    app_classes = [
        YueDongQuanRecordExerciseData,
        YueDongQuanShareExerciseResults,
        YueDongQuanJoinOnlineEvent,
        YueDongQuanGetExerciseIncentives,
        YueDongQuanViewExerciseHistory,
        YueDongQuanFollowFriend,
        YueDongQuanSendMessage,
        YueDongQuanSetExerciseGoal,
        YueDongQuanViewLeaderboard,
        YueDongQuanReceiveExerciseSuggestions,
        YueDongQuanSearchExerciseRecords,
        YueDongQuanSearchUser,
        YueDongQuanSearchEvent,
    ]


#################### CtripApp ####################


class CtripAppFlightSearch(VirtualFunctionApp):
    name = "CtripAppFlightSearch"
    summary = "允许用户根据出发地、目的地和日期搜索航班信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "departure_location",
            "type": "string",
            "description": "出发地的城市名称。",
            "required": True,
        },
        {
            "name": "arrival_location",
            "type": "string",
            "description": "目的地的城市名称。",
            "required": True,
        },
        {
            "name": "departure_date",
            "type": "string",
            "description": "出发日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "return_date",
            "type": "string",
            "description": "返回日期，格式为'YYYY-MM-DD'。可选。",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flights",
            "type": "array",
            "description": "包含航班信息的数组，每个航班包含航班号、价格和可用性。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppHotelSearch(VirtualFunctionApp):
    name = "CtripAppHotelSearch"
    summary = "允许用户根据城市和日期搜索酒店信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "酒店所在城市名称。",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotels",
            "type": "array",
            "description": "包含酒店信息的数组，每个酒店包含名称、价格和可用性。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppCarRentalSearch(VirtualFunctionApp):
    name = "CtripAppCarRentalSearch"
    summary = "允许用户根据地点和日期搜索租车服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "租车提车地点的城市名称。",
            "required": True,
        },
        {
            "name": "pickup_date",
            "type": "string",
            "description": "提车日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "dropoff_date",
            "type": "string",
            "description": "还车日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cars",
            "type": "array",
            "description": "包含租车信息的数组，每辆车包含车型、价格和可用性。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppTourPackageSearch(VirtualFunctionApp):
    name = "CtripAppTourPackageSearch"
    summary = "允许用户搜索旅游度假产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "旅游目的地的城市名称。",
            "required": True,
        },
        {
            "name": "travel_date",
            "type": "string",
            "description": "旅行日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "packages",
            "type": "array",
            "description": "包含旅游产品信息的数组，每个产品包含名称、价格和可用性。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppUserProfileAccess(VirtualFunctionApp):
    name = "CtripAppUserProfileAccess"
    summary = "允许用户访问其个人信息和历史预订信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "包含用户个人信息和历史预订的对象，字段包括'name', 'email', 'bookings'（数组）。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppPriceAlertSetup(VirtualFunctionApp):
    name = "CtripAppPriceAlertSetup"
    summary = "允许用户设置航班或酒店的价格提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "type",
            "type": "string",
            "description": "提醒类型，值可以是'flight'或'hotel'。",
            "required": True,
        },
        {
            "name": "identifier",
            "type": "string",
            "description": "航班号或酒店名称。",
            "required": True,
        },
        {
            "name": "target_price",
            "type": "number",
            "description": "用户希望设置的目标价格。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "设置价格提醒的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当参数格式不正确时触发。"}
    ]


class CtripAppBookingManagement(VirtualFunctionApp):
    name = "CtripAppBookingManagement"
    summary = "允许用户查看和管理他们的预订订单。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "bookings",
            "type": "array",
            "description": "包含用户所有预订信息的数组，每个预订包含航班或酒店信息。",
        }
    ]
    exceptions: List[ArgException] = []


class CtripAppReviewSubmission(VirtualFunctionApp):
    name = "CtripAppReviewSubmission"
    summary = "允许用户提交对航班或酒店的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "type",
            "type": "string",
            "description": "评价类型，值可以是'flight'或'hotel'。",
            "required": True,
        },
        {
            "name": "identifier",
            "type": "string",
            "description": "航班号或酒店名称。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "评分，范围从1到5。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评价内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交评价的成功状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当参数格式不正确时触发。"}
    ]


class CtripAppItineraryManagement(VirtualFunctionApp):
    name = "CtripAppItineraryManagement"
    summary = "允许用户创建和管理旅行行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary",
            "type": "array",
            "description": "包含行程信息的数组，每个行程项包含日期、活动描述等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "行程管理的成功状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当参数格式不正确时触发。"}
    ]


class CtripAppPaymentMethodAccess(VirtualFunctionApp):
    name = "CtripAppPaymentMethodAccess"
    summary = "允许用户访问和管理他们的支付信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "包含用户支付信息的数组，每个支付方式包含类型和状态。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class CtripApp(FunctionApp):
    name_for_human = "携程旅行工具包"
    description_for_human = "一个一站式旅游服务工具包，帮助用户获取和管理旅行相关信息。"
    name_for_model = "CtripApp"
    description_for_model = "CtripApp是一个一站式旅游服务工具包，提供航班查询、酒店预订、租车服务、旅游度假产品查询及用户信息管理等功能，旨在帮助用户方便快捷地获取和管理旅行相关信息。"
    app_classes = [
        CtripAppFlightSearch,
        CtripAppHotelSearch,
        CtripAppCarRentalSearch,
        CtripAppTourPackageSearch,
        CtripAppUserProfileAccess,
        CtripAppPriceAlertSetup,
        CtripAppBookingManagement,
        CtripAppReviewSubmission,
        CtripAppItineraryManagement,
        CtripAppPaymentMethodAccess,
    ]


#################### XiaoZhuShortRent ####################


class XiaoZhuShortRentSearchListings(VirtualFunctionApp):
    name = "XiaoZhuShortRentSearchListings"
    summary = "根据用户的需求搜索可用的短租房屋。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "搜索的城市或地区名称。",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大房源数量（可选，默认值为10）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "listings",
            "type": "array",
            "description": "符合条件的房源列表，每个房源包含房源ID、价格、设施等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentGetListingDetails(VirtualFunctionApp):
    name = "XiaoZhuShortRentGetListingDetails"
    summary = "查看特定房源的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "房源的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "包含房源的详细信息，包括价格、设施、图片等。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentCreateBooking(VirtualFunctionApp):
    name = "XiaoZhuShortRentCreateBooking"
    summary = "为选定的房源创建预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "房源的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "创建的预订的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当提供的参数格式不正确时。"}
    ]


class XiaoZhuShortRentCancelBooking(VirtualFunctionApp):
    name = "XiaoZhuShortRentCancelBooking"
    summary = "取消已创建的预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "预订的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "取消操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的参数格式不正确时。",
        },
        {"name": "NotFoundException", "description": "当指定的预订未找到时。"},
    ]


class XiaoZhuShortRentGetUserReviews(VirtualFunctionApp):
    name = "XiaoZhuShortRentGetUserReviews"
    summary = "查看特定房源的用户评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "房源的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "房源的用户评论列表，每个评论包含用户ID、评分和评论内容。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentGetHostInfo(VirtualFunctionApp):
    name = "XiaoZhuShortRentGetHostInfo"
    summary = "查看房东的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "host_id",
            "type": "string",
            "description": "房东的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "host_details",
            "type": "object",
            "description": "包含房东的详细信息和评分。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentSearchNearbyListings(VirtualFunctionApp):
    name = "XiaoZhuShortRentSearchNearbyListings"
    summary = "搜索附近的短租房源。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置的城市或地区名称。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大房源数量（可选，默认值为10）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nearby_listings",
            "type": "array",
            "description": "附近的短租房源列表，每个房源包含房源ID、价格、设施等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentGetUserBookingHistory(VirtualFunctionApp):
    name = "XiaoZhuShortRentGetUserBookingHistory"
    summary = "获取用户的预订历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_history",
            "type": "array",
            "description": "用户的预订记录，每条记录包含预订ID、房源ID、入住和退房日期等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaoZhuShortRentSaveToFavorites(VirtualFunctionApp):
    name = "XiaoZhuShortRentSaveToFavorites"
    summary = "将房源保存到收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "listing_id",
            "type": "string",
            "description": "房源的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "保存操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当提供的参数格式不正确时。"}
    ]


class XiaoZhuShortRentSendMessageToHost(VirtualFunctionApp):
    name = "XiaoZhuShortRentSendMessageToHost"
    summary = "发送消息给房东。"
    parameters: List[ArgParameter] = [
        {
            "name": "host_id",
            "type": "string",
            "description": "房东的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "用户发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息发送是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当提供的参数格式不正确时。"}
    ]


@register_app()
class XiaoZhuShortRent(FunctionApp):
    name_for_human = "小猪短租"
    description_for_human = "一个专注于短租房屋的预订平台，提供独特的民宿选择。"
    name_for_model = "XiaoZhuShortRent"
    description_for_model = "该工具包旨在为用户提供小猪短租平台的访问，允许用户搜索、预订和管理短租房屋，同时提供用户评论、房东信息等功能，以便用户能够做出明智的选择。"
    app_classes = [
        XiaoZhuShortRentSearchListings,
        XiaoZhuShortRentGetListingDetails,
        XiaoZhuShortRentCreateBooking,
        XiaoZhuShortRentCancelBooking,
        XiaoZhuShortRentGetUserReviews,
        XiaoZhuShortRentGetHostInfo,
        XiaoZhuShortRentSearchNearbyListings,
        XiaoZhuShortRentGetUserBookingHistory,
        XiaoZhuShortRentSaveToFavorites,
        XiaoZhuShortRentSendMessageToHost,
    ]


#################### TuNiu ####################


class TuNiuSearchTourProducts(VirtualFunctionApp):
    name = "TuNiuSearchTourProducts"
    summary = "根据用户输入的条件搜索旅游产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "旅游目的地。",
            "required": True,
        },
        {
            "name": "travel_date",
            "type": "string",
            "description": "旅行日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
        {
            "name": "travel_type",
            "type": "string",
            "description": "旅游类型，可以是“自由行”或“跟团游”。",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回结果的最大数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_ids",
            "type": "array",
            "description": "匹配的旅游产品的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果输入参数格式不正确。"}
    ]


class TuNiuGetTourProductDetails(VirtualFunctionApp):
    name = "TuNiuGetTourProductDetails"
    summary = "获取特定旅游产品的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "旅游产品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "旅游产品的详细信息，包括名称、描述、价格等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果提供的product_id不存在。"}
    ]


class TuNiuBookTourProduct(VirtualFunctionApp):
    name = "TuNiuBookTourProduct"
    summary = "在线预订所选的旅游产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "旅游产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "用户的预订信息，包括姓名、联系方式等字段。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "booking_status", "type": "boolean", "description": "预订是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_info不完整。"},
        {"name": "ConflictException", "description": "如果预订失败。"},
    ]


class TuNiuGetUserReviews(VirtualFunctionApp):
    name = "TuNiuGetUserReviews"
    summary = "获取特定旅游产品的用户评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "旅游产品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "用户评价的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果提供的product_id不存在。"}
    ]


class TuNiuManageUserOrders(VirtualFunctionApp):
    name = "TuNiuManageUserOrders"
    summary = "管理用户的订单，包括查看、更新和取消。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，可以是“查看”、“更新”或“取消”。",
            "required": True,
        },
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        },
        {
            "name": "order_details",
            "type": "object",
            "description": "更新的订单信息，仅在操作为“更新”时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "operation_status", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果action不合法或order_id不存在。",
        }
    ]


class TuNiuFilterTourProducts(VirtualFunctionApp):
    name = "TuNiuFilterTourProducts"
    summary = "根据旅游类型筛选旅游产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "travel_type",
            "type": "string",
            "description": "旅游类型，可以是“自由行”或“跟团游”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_product_ids",
            "type": "array",
            "description": "筛选后的旅游产品的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果travel_type不合法。"}
    ]


class TuNiuGetPopularDestinations(VirtualFunctionApp):
    name = "TuNiuGetPopularDestinations"
    summary = "获取当前热门的旅游目的地推荐。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "popular_destinations",
            "type": "array",
            "description": "热门旅游目的地的列表。",
        }
    ]
    exceptions: List[ArgException] = []


class TuNiuGetUserOrderHistory(VirtualFunctionApp):
    name = "TuNiuGetUserOrderHistory"
    summary = "获取用户的历史订单记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "order_history",
            "type": "array",
            "description": "用户历史订单的列表。",
        }
    ]
    exceptions: List[ArgException] = []


class TuNiuCheckProductAvailability(VirtualFunctionApp):
    name = "TuNiuCheckProductAvailability"
    summary = "检查特定旅游产品在某个日期的可用性。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "旅游产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "check_date",
            "type": "string",
            "description": "检查的日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "availability_status",
            "type": "boolean",
            "description": "产品在指定日期的可用性状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果提供的product_id不存在。"}
    ]


class TuNiuGetUserProfile(VirtualFunctionApp):
    name = "TuNiuGetUserProfile"
    summary = "获取用户的个人信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "用户的个人信息，包括姓名、联系方式等字段。",
        }
    ]
    exceptions: List[ArgException] = []


class TuNiuGetUserOrders(VirtualFunctionApp):
    name = "TuNiuGetUserOrders"
    summary = "获取用户的所有订单列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "order_ids",
            "type": "array",
            "description": "用户所有订单的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class TuNiu(FunctionApp):
    name_for_human = "途牛旅游网"
    description_for_human = (
        "一个专注于自由行和跟团游的旅游服务平台，提供旅游产品的搜索和预订。"
    )
    name_for_model = "TuNiu"
    description_for_model = "该工具包提供了方便用户搜索和预订旅游产品的功能，支持获取旅游产品详情、用户评价和管理订单等操作，旨在提升用户的旅游体验。"
    app_classes = [
        TuNiuSearchTourProducts,
        TuNiuGetTourProductDetails,
        TuNiuBookTourProduct,
        TuNiuGetUserReviews,
        TuNiuManageUserOrders,
        TuNiuFilterTourProducts,
        TuNiuGetPopularDestinations,
        TuNiuGetUserOrderHistory,
        TuNiuCheckProductAvailability,
        TuNiuGetUserProfile,
        TuNiuGetUserOrders,
    ]


#################### Qunar ####################


class QunarFlightSearch(VirtualFunctionApp):
    name = "QunarFlightSearch"
    summary = "根据出发地、目的地和日期搜索可用航班。"
    parameters: List[ArgParameter] = [
        {
            "name": "departure",
            "type": "string",
            "description": "出发地机场的名称。",
            "required": True,
        },
        {
            "name": "arrival",
            "type": "string",
            "description": "目的地机场的名称。",
            "required": True,
        },
        {
            "name": "travel_date",
            "type": "string",
            "description": "旅行日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大航班数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flights",
            "type": "array",
            "description": "可用航班的列表，每个航班包含航班号、出发时间、到达时间、价格等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class QunarHotelSearch(VirtualFunctionApp):
    name = "QunarHotelSearch"
    summary = "根据目的地、入住和退房日期搜索可用酒店。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "酒店目的地名称。",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大酒店数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotels",
            "type": "array",
            "description": "可用酒店的列表，每个酒店包含酒店名称、地址、价格等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class QunarCreateOrder(VirtualFunctionApp):
    name = "QunarCreateOrder"
    summary = "为选择的航班或酒店创建预订订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_id",
            "type": "string",
            "description": "航班的唯一标识符。",
            "required": True,
        },
        {
            "name": "hotel_id",
            "type": "string",
            "description": "酒店的唯一标识符。",
            "required": False,
        },
        {
            "name": "user_details",
            "type": "object",
            "description": "用户的预订信息，包括姓名、联系方式等。",
            "required": True,
            "fields": [
                {"name": "name", "type": "string", "description": "用户姓名。"},
                {"name": "contact", "type": "string", "description": "用户联系方式。"},
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "创建的订单的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的航班或酒店ID无效。",
        },
        {"name": "ConflictException", "description": "如果订单创建冲突。"},
    ]


class QunarQueryOrder(VirtualFunctionApp):
    name = "QunarQueryOrder"
    summary = "查询用户的预订订单状态和详情。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "订单的详细信息，包括状态、航班或酒店信息等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单ID无效。"}
    ]


class QunarCancelOrder(VirtualFunctionApp):
    name = "QunarCancelOrder"
    summary = "取消用户的预订订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "取消操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单ID无效。"},
        {"name": "ConflictException", "description": "如果订单取消冲突。"},
    ]


class QunarSetPriceAlert(VirtualFunctionApp):
    name = "QunarSetPriceAlert"
    summary = "设置价格提醒，监控航班或酒店价格变化。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_id",
            "type": "string",
            "description": "航班的唯一标识符。",
            "required": False,
        },
        {
            "name": "hotel_id",
            "type": "string",
            "description": "酒店的唯一标识符。",
            "required": False,
        },
        {
            "name": "threshold_price",
            "type": "number",
            "description": "价格提醒的阈值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "创建的价格提醒的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的航班或酒店ID无效。",
        }
    ]


class QunarManageAddresses(VirtualFunctionApp):
    name = "QunarManageAddresses"
    summary = "管理用户的常用地址信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，选择'add'、'update'或'delete'。",
            "required": True,
        },
        {
            "name": "address",
            "type": "object",
            "description": "地址信息，包括省、市、区、详细地址等。",
            "required": True,
            "fields": [
                {"name": "province", "type": "string", "description": "省份名称。"},
                {"name": "city", "type": "string", "description": "城市名称。"},
                {"name": "district", "type": "string", "description": "区域名称。"},
                {"name": "detail", "type": "string", "description": "详细地址。"},
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "地址操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果操作类型不正确。"}
    ]


class QunarManagePaymentMethods(VirtualFunctionApp):
    name = "QunarManagePaymentMethods"
    summary = "管理用户的支付方式信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，选择'add'、'update'或'delete'。",
            "required": True,
        },
        {
            "name": "payment_info",
            "type": "object",
            "description": "支付信息，包括支付方式、卡号等。",
            "required": True,
            "fields": [
                {
                    "name": "method",
                    "type": "string",
                    "description": "支付方式名称，例如'credit_card'、'paypal'等。",
                },
                {
                    "name": "card_number",
                    "type": "string",
                    "description": "卡号，格式为'XXXX-XXXX-XXXX-XXXX'。",
                },
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "支付方式操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果操作类型不正确。"}
    ]


class QunarSubmitReview(VirtualFunctionApp):
    name = "QunarSubmitReview"
    summary = "提交对航班或酒店的用户评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "用户评分，范围为1到5。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈意见。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评价提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单ID无效。"},
        {"name": "InvalidRequestException", "description": "如果评分不在1到5之间。"},
    ]


class QunarQuerySearchHistory(VirtualFunctionApp):
    name = "QunarQuerySearchHistory"
    summary = "查询用户的搜索历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索历史数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_history",
            "type": "array",
            "description": "用户的搜索历史记录列表。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Qunar(FunctionApp):
    name_for_human = "Qunar App"
    description_for_human = (
        "一个综合性旅游搜索平台的工具包，提供航班、酒店等预订服务的API接口。"
    )
    name_for_model = "Qunar"
    description_for_model = "Qunar工具包提供了一系列API接口，帮助用户搜索和预订航班、酒店，管理订单、地址和支付方式，支持价格提醒和评价提交。通过这些工具，用户可以高效地管理旅行相关的服务。"
    app_classes = [
        QunarFlightSearch,
        QunarHotelSearch,
        QunarCreateOrder,
        QunarQueryOrder,
        QunarCancelOrder,
        QunarSetPriceAlert,
        QunarManageAddresses,
        QunarManagePaymentMethods,
        QunarSubmitReview,
        QunarQuerySearchHistory,
    ]


#################### FeiZhu ####################


class FeiZhuSearchFlights(VirtualFunctionApp):
    name = "FeiZhuSearchFlights"
    summary = "查询航班信息，通过起点、终点和日期获取相关航班的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "departure",
            "type": "string",
            "description": "出发城市或机场的名称。",
            "required": True,
        },
        {
            "name": "arrival",
            "type": "string",
            "description": "到达城市或机场的名称。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "航班日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大航班数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flights",
            "type": "array",
            "description": "包含航班信息的数组，每个航班信息包括航班ID、出发时间、到达时间和价格。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuSearchHotels(VirtualFunctionApp):
    name = "FeiZhuSearchHotels"
    summary = "查询酒店信息，根据地点和日期获取可用酒店的信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询酒店的地点名称。",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大酒店数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotels",
            "type": "array",
            "description": "包含酒店信息的数组，每个酒店信息包括酒店ID、名称、价格和设施。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuSearchAttractions(VirtualFunctionApp):
    name = "FeiZhuSearchAttractions"
    summary = "查询特定地点的景点信息，包括开放时间和门票价格。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询景点的地点名称。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大景点数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "attractions",
            "type": "array",
            "description": "包含景点信息的数组，每个景点信息包括景点ID、名称、开放时间和门票价格。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuBookHotel(VirtualFunctionApp):
    name = "FeiZhuBookHotel"
    summary = "预订酒店，通过酒店ID和用户信息完成预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "hotel_id",
            "type": "string",
            "description": "要预订的酒店的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "用户的个人信息，包括姓名、联系方式等字段。",
            "required": True,
            "fields": [
                {"name": "name", "type": "string", "description": "用户的姓名。"},
                {
                    "name": "contact",
                    "type": "string",
                    "description": "用户的联系方式。",
                },
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_status",
            "type": "object",
            "description": "预订状态，包括成功与否和预订ID。",
            "fields": [
                {"name": "success", "type": "boolean", "description": "预订是否成功。"},
                {
                    "name": "booking_id",
                    "type": "string",
                    "description": "预订的唯一标识符，若失败则返回空字符串。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的用户信息格式不正确。",
        }
    ]


class FeiZhuBookFlight(VirtualFunctionApp):
    name = "FeiZhuBookFlight"
    summary = "预订航班，通过航班ID和用户信息完成预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_id",
            "type": "string",
            "description": "要预订的航班的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "用户的个人信息，包括姓名、联系方式等字段。",
            "required": True,
            "fields": [
                {"name": "name", "type": "string", "description": "用户的姓名。"},
                {
                    "name": "contact",
                    "type": "string",
                    "description": "用户的联系方式。",
                },
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "booking_status",
            "type": "object",
            "description": "预订状态，包括成功与否和预订ID。",
            "fields": [
                {"name": "success", "type": "boolean", "description": "预订是否成功。"},
                {
                    "name": "booking_id",
                    "type": "string",
                    "description": "预订的唯一标识符，若失败则返回空字符串。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的用户信息格式不正确。",
        }
    ]


class FeiZhuGetUserBookingHistory(VirtualFunctionApp):
    name = "FeiZhuGetUserBookingHistory"
    summary = "获取用户的历史预订记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "booking_history",
            "type": "array",
            "description": "包含用户历史预订记录的数组，每条记录包括预订ID、类型（航班/酒店）和状态。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuGetUserAccountInfo(VirtualFunctionApp):
    name = "FeiZhuGetUserAccountInfo"
    summary = "查看用户的账户信息，包括个人信息和偏好设置。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "account_info",
            "type": "object",
            "description": "用户的账户信息，包括姓名、联系方式和偏好设置。",
            "fields": [
                {"name": "name", "type": "string", "description": "用户的姓名。"},
                {
                    "name": "contact",
                    "type": "string",
                    "description": "用户的联系方式。",
                },
                {
                    "name": "preferences",
                    "type": "array",
                    "description": "用户的偏好设置数组。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuUpdateBooking(VirtualFunctionApp):
    name = "FeiZhuUpdateBooking"
    summary = "修改用户的预订信息，如更改日期或人数。"
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "要修改的预订的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_info",
            "type": "object",
            "description": "新的预订信息，包括新的日期或人数。",
            "required": True,
            "fields": [
                {
                    "name": "new_date",
                    "type": "string",
                    "description": "新的日期，格式为'YYYY-MM-DD'。",
                },
                {
                    "name": "new_guests",
                    "type": "integer",
                    "description": "新的入住人数。",
                },
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "update_status",
            "type": "object",
            "description": "修改状态，包括成功与否和更新后的预订ID。",
            "fields": [
                {"name": "success", "type": "boolean", "description": "修改是否成功。"},
                {
                    "name": "updated_booking_id",
                    "type": "string",
                    "description": "更新后的预订的唯一标识符，若失败则返回空字符串。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果预订ID无效。"},
        {
            "name": "InvalidRequestException",
            "description": "如果新的预订信息格式不正确。",
        },
    ]


class FeiZhuCancelBooking(VirtualFunctionApp):
    name = "FeiZhuCancelBooking"
    summary = "取消用户的航班或酒店预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "要取消的预订的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cancel_status",
            "type": "object",
            "description": "取消状态，包括成功与否。",
            "fields": [
                {"name": "success", "type": "boolean", "description": "取消是否成功。"}
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果预订ID无效。"}
    ]


class FeiZhuGetDestinationRecommendations(VirtualFunctionApp):
    name = "FeiZhuGetDestinationRecommendations"
    summary = "获取旅行目的地推荐，根据用户偏好提供建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_preferences",
            "type": "array",
            "description": "用户的偏好设置数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "包含推荐目的地的数组，每个目的地信息包括名称和描述。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiZhuGetUserStoredData(VirtualFunctionApp):
    name = "FeiZhuGetUserStoredData"
    summary = "获取用户存储的地址和支付方式信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "用户存储的地址和支付方式信息。",
            "fields": [
                {
                    "name": "addresses",
                    "type": "array",
                    "description": "用户存储的地址数组。",
                },
                {
                    "name": "payment_methods",
                    "type": "array",
                    "description": "用户存储的支付方式数组。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FeiZhu(FunctionApp):
    name_for_human = "飞猪"
    description_for_human = (
        "一个全面的旅游服务工具包，提供航班、酒店和景点查询及预订功能。"
    )
    name_for_model = "FeiZhu"
    description_for_model = "FeiZhu工具包提供了一个全面的API集，用于查询和预订航班、酒店和景点信息，帮助开发者创建旅游相关应用。该工具包还包括获取用户历史预订和账户信息的功能，增强了用户体验和服务的个性化。"
    app_classes = [
        FeiZhuSearchFlights,
        FeiZhuSearchHotels,
        FeiZhuSearchAttractions,
        FeiZhuBookHotel,
        FeiZhuBookFlight,
        FeiZhuGetUserBookingHistory,
        FeiZhuGetUserAccountInfo,
        FeiZhuUpdateBooking,
        FeiZhuCancelBooking,
        FeiZhuGetDestinationRecommendations,
        FeiZhuGetUserStoredData,
    ]


#################### LvMama ####################


class LvMamaGetTicketInfo(VirtualFunctionApp):
    name = "LvMamaGetTicketInfo"
    summary = "获取特定景点的门票信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "要查询的景点名称。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "查询的日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ticket_info",
            "type": "object",
            "description": "包含门票信息的对象，字段包括：price（票价），availability（可用性），description（门票描述）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的location或date参数。",
        },
        {"name": "NotFoundException", "description": "未找到指定景点的门票信息。"},
    ]


class LvMamaGetTourPackages(VirtualFunctionApp):
    name = "LvMamaGetTourPackages"
    summary = "获取特定目的地的旅游套餐信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "目的地名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tour_packages",
            "type": "array",
            "description": "包含旅游套餐信息的数组，每个元素为对象，字段包括：package_name（套餐名称），price（价格），inclusions（包含内容）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的destination参数。",
        },
        {
            "name": "NotFoundException",
            "description": "未找到指定目的地的旅游套餐信息。",
        },
    ]


class LvMamaGetHotelInfo(VirtualFunctionApp):
    name = "LvMamaGetHotelInfo"
    summary = "获取特定地点的酒店信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "酒店所在地点。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotel_info",
            "type": "array",
            "description": "包含酒店信息的数组，每个元素为对象，字段包括：hotel_name（酒店名称），price_per_night（每晚价格），rating（评分）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的location参数。",
        },
        {"name": "NotFoundException", "description": "未找到指定地点的酒店信息。"},
    ]


class LvMamaSubmitUserReview(VirtualFunctionApp):
    name = "LvMamaSubmitUserReview"
    summary = "提交用户对旅游产品的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "评价的产品唯一标识符。",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "用户评价内容。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "用户评分，范围为1到5。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的product_id、review或rating参数。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品进行评价。"},
    ]


class LvMamaRetrieveUserOrders(VirtualFunctionApp):
    name = "LvMamaRetrieveUserOrders"
    summary = "检索用户的历史订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的订单数量上限，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "包含用户历史订单的数组，每个元素为对象，字段包括：order_id（订单ID），product_name（产品名称），order_date（订单日期）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如limit参数不是正整数。",
        },
        {"name": "NotFoundException", "description": "未找到用户的历史订单。"},
    ]


class LvMamaSearchProducts(VirtualFunctionApp):
    name = "LvMamaSearchProducts"
    summary = "根据关键词搜索旅游产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的产品数量上限，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "products",
            "type": "array",
            "description": "包含搜索结果的数组，每个元素为对象，字段包括：product_id（产品ID），product_name（产品名称），price（价格）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的keyword参数。",
        }
    ]


class LvMamaGetPopularAttractions(VirtualFunctionApp):
    name = "LvMamaGetPopularAttractions"
    summary = "获取特定地点的热门旅游景点。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "目的地名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "attractions",
            "type": "array",
            "description": "包含热门景点的数组，每个元素为对象，字段包括：attraction_name（景点名称），description（景点描述）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如缺少必需的location参数。",
        },
        {"name": "NotFoundException", "description": "未找到指定地点的热门景点。"},
    ]


class LvMamaRetrieveUserFavorites(VirtualFunctionApp):
    name = "LvMamaRetrieveUserFavorites"
    summary = "检索用户的收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的收藏数量上限，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "favorites",
            "type": "array",
            "description": "包含用户收藏的产品的数组，每个元素为对象，字段包括：product_id（产品ID），product_name（产品名称）。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如limit参数不是正整数。",
        }
    ]


class LvMamaGetUserPaymentMethods(VirtualFunctionApp):
    name = "LvMamaGetUserPaymentMethods"
    summary = "获取用户的支付方式。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "包含用户支付方式的数组，每个元素为对象，字段包括：method_id（支付方式ID），method_type（支付方式类型），last_four_digits（卡号后四位）。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求参数无效。"}
    ]


class LvMamaUpdateUserProfile(VirtualFunctionApp):
    name = "LvMamaUpdateUserProfile"
    summary = "更新用户的个人信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "name",
            "type": "string",
            "description": "用户姓名，选填。",
            "required": False,
        },
        {
            "name": "email",
            "type": "string",
            "description": "用户邮箱，选填。",
            "required": False,
        },
        {
            "name": "phone",
            "type": "string",
            "description": "用户电话，选填。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如email格式不正确。",
        },
        {
            "name": "ConflictException",
            "description": "更新冲突，例如用户信息已被其他操作修改。",
        },
    ]


class LvMamaSearchProductById(VirtualFunctionApp):
    name = "LvMamaSearchProductById"
    summary = "根据产品ID检索产品信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_info",
            "type": "object",
            "description": "包含产品信息的对象，字段包括：product_name（产品名称），description（产品描述），price（价格）。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "未找到指定的产品信息。"}
    ]


class LvMamaGetOrderById(VirtualFunctionApp):
    name = "LvMamaGetOrderById"
    summary = "根据订单ID检索订单信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_info",
            "type": "object",
            "description": "包含订单信息的对象，字段包括：product_name（产品名称），order_date（订单日期），total_amount（总金额）。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "未找到指定的订单信息。"}
    ]


@register_app()
class LvMama(FunctionApp):
    name_for_human = "驴妈妈旅游网"
    description_for_human = (
        "一个提供国内外旅游产品预订的平台，方便用户获取旅游相关服务和信息。"
    )
    name_for_model = "LvMama"
    description_for_model = "LvMama工具包提供便捷的旅游产品查询和预订功能，用户可以获取门票、酒店、旅游套餐信息，并提交评价和检索历史订单，同时确保用户信息的安全性和隐私保护。"
    app_classes = [
        LvMamaGetTicketInfo,
        LvMamaGetTourPackages,
        LvMamaGetHotelInfo,
        LvMamaSubmitUserReview,
        LvMamaRetrieveUserOrders,
        LvMamaSearchProducts,
        LvMamaGetPopularAttractions,
        LvMamaRetrieveUserFavorites,
        LvMamaGetUserPaymentMethods,
        LvMamaUpdateUserProfile,
        LvMamaSearchProductById,
        LvMamaGetOrderById,
    ]


#################### TravelManager ####################


class TravelManagerCreateItinerary(VirtualFunctionApp):
    name = "TravelManagerCreateItinerary"
    summary = "创建新的旅行行程，输入目的地、日期和相关信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "旅行的目的地。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "行程开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "行程结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "notes",
            "type": "string",
            "description": "行程的附加说明或备注。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "创建的行程的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果输入的日期格式不正确。",
        },
        {"name": "ConflictException", "description": "如果行程时间冲突。"},
    ]


class TravelManagerUpdateItinerary(VirtualFunctionApp):
    name = "TravelManagerUpdateItinerary"
    summary = "更新现有行程的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "要更新的行程的唯一标识符。",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "更新后的目的地。",
            "required": False,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "更新后的行程开始日期，格式为YYYY-MM-DD。",
            "required": False,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "更新后的行程结束日期，格式为YYYY-MM-DD。",
            "required": False,
        },
        {
            "name": "notes",
            "type": "string",
            "description": "更新后的附加说明或备注。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果输入的日期格式不正确。",
        },
        {"name": "NotFoundException", "description": "如果行程ID不存在。"},
    ]


class TravelManagerViewItinerary(VirtualFunctionApp):
    name = "TravelManagerViewItinerary"
    summary = "查看用户的所有行程安排。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "itineraries",
            "type": "array",
            "description": "用户的所有行程的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有行程。"}
    ]


class TravelManagerDeleteItinerary(VirtualFunctionApp):
    name = "TravelManagerDeleteItinerary"
    summary = "删除不再需要的行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "要删除的行程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果行程ID不存在。"}
    ]


class TravelManagerSearchItinerary(VirtualFunctionApp):
    name = "TravelManagerSearchItinerary"
    summary = "根据关键字搜索行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "itineraries",
            "type": "array",
            "description": "符合搜索条件的行程列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果关键字格式不正确。"}
    ]


class TravelManagerGetSavedAddresses(VirtualFunctionApp):
    name = "TravelManagerGetSavedAddresses"
    summary = "获取用户保存的地址。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "addresses", "type": "array", "description": "用户保存的地址列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有保存的地址。"}
    ]


class TravelManagerGetPaymentMethods(VirtualFunctionApp):
    name = "TravelManagerGetPaymentMethods"
    summary = "获取用户的支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "用户保存的支付方式列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有保存的支付方式。"}
    ]


class TravelManagerShareItinerary(VirtualFunctionApp):
    name = "TravelManagerShareItinerary"
    summary = "与其他人共享行程安排。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "要共享的行程的唯一标识符。",
            "required": True,
        },
        {
            "name": "recipient_email",
            "type": "string",
            "description": "收件人的电子邮件地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "共享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果行程ID不存在。"},
        {"name": "InvalidRequestException", "description": "如果电子邮件格式不正确。"},
    ]


class TravelManagerImportItinerary(VirtualFunctionApp):
    name = "TravelManagerImportItinerary"
    summary = "从其他旅游服务平台导入行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "source_platform",
            "type": "string",
            "description": "源平台的名称。",
            "required": True,
        },
        {
            "name": "user_credentials",
            "type": "string",
            "description": "用户的凭据（如API密钥）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "itineraries", "type": "array", "description": "导入的行程列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果源平台不支持或凭据不正确。",
        }
    ]


class TravelManagerExportItinerary(VirtualFunctionApp):
    name = "TravelManagerExportItinerary"
    summary = "将行程导出为PDF或其他格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "要导出的行程的唯一标识符。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出的格式（如PDF、CSV）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的下载链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果行程ID不存在。"}
    ]


@register_app()
class TravelManager(FunctionApp):
    name_for_human = "行程管家"
    description_for_human = "帮助用户规划和管理旅行行程的工具包。"
    name_for_model = "TravelManager"
    description_for_model = "行程管家工具包帮助用户规划和管理旅行行程，提供创建、更新、查看、删除和搜索行程的功能，并允许用户访问保存的地址和支付方式，支持行程共享、导入和导出。"
    app_classes = [
        TravelManagerCreateItinerary,
        TravelManagerUpdateItinerary,
        TravelManagerViewItinerary,
        TravelManagerDeleteItinerary,
        TravelManagerSearchItinerary,
        TravelManagerGetSavedAddresses,
        TravelManagerGetPaymentMethods,
        TravelManagerShareItinerary,
        TravelManagerImportItinerary,
        TravelManagerExportItinerary,
    ]


#################### YouXiaKe ####################


class YouXiaKeGetTravelGuide(VirtualFunctionApp):
    name = "YouXiaKeGetTravelGuide"
    summary = "获取特定目的地的详细旅游攻略和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "目的地名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "guide",
            "type": "object",
            "description": "包含旅游攻略的详细信息，包括推荐活动、餐厅和注意事项。",
        }
    ]
    exceptions: List[ArgException] = []


class YouXiaKePlanItinerary(VirtualFunctionApp):
    name = "YouXiaKePlanItinerary"
    summary = "创建和管理旅行行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "itinerary_details",
            "type": "object",
            "description": "包含行程的详细信息，如日期、活动和地点。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "itinerary_id",
            "type": "string",
            "description": "新创建行程的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "如果行程与现有行程冲突。"}
    ]


class YouXiaKeRecommendAttractions(VirtualFunctionApp):
    name = "YouXiaKeRecommendAttractions"
    summary = "根据用户偏好推荐相关景点。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_preferences",
            "type": "object",
            "description": "包含用户的偏好设置，如兴趣类型和预算。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "attractions", "type": "array", "description": "推荐的景点列表。"}
    ]
    exceptions: List[ArgException] = []


class YouXiaKeCalculateBudget(VirtualFunctionApp):
    name = "YouXiaKeCalculateBudget"
    summary = "计算旅行期间的预算和费用。"
    parameters: List[ArgParameter] = [
        {
            "name": "travel_details",
            "type": "object",
            "description": "包含旅行的详细信息，如目的地、天数和活动。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "total_budget", "type": "number", "description": "旅行的总预算。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的旅行细节格式不正确。",
        }
    ]


class YouXiaKeSubmitReview(VirtualFunctionApp):
    name = "YouXiaKeSubmitReview"
    summary = "提交用户对景点或服务的评论和评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "review_details",
            "type": "object",
            "description": "包含评论的详细信息，如景点ID、评分和评论内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "提交评论是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的景点ID不存在。"}
    ]


class YouXiaKeGetWeatherUpdate(VirtualFunctionApp):
    name = "YouXiaKeGetWeatherUpdate"
    summary = "获取目的地的实时天气信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "目的地名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "weather_info",
            "type": "object",
            "description": "包含天气信息的详细数据，如温度和天气状况。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果目的地信息不可用。"}
    ]


class YouXiaKeGetTransportInfo(VirtualFunctionApp):
    name = "YouXiaKeGetTransportInfo"
    summary = "提供目的地的交通方式和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "目的地名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transport_options",
            "type": "array",
            "description": "提供的交通方式列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果目的地信息不可用。"}
    ]


class YouXiaKeSetTravelReminder(VirtualFunctionApp):
    name = "YouXiaKeSetTravelReminder"
    summary = "发送旅行相关的提醒和通知。"
    parameters: List[ArgParameter] = [
        {
            "name": "reminder_details",
            "type": "object",
            "description": "包含提醒的详细信息，如时间和内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "设置提醒是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果提醒信息格式不正确。"}
    ]


class YouXiaKePurchaseTravelInsurance(VirtualFunctionApp):
    name = "YouXiaKePurchaseTravelInsurance"
    summary = "提供旅游保险的选项和购买链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "insurance_details",
            "type": "object",
            "description": "包含保险的详细信息，如类型和覆盖范围。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "purchase_confirmation",
            "type": "string",
            "description": "保险购买的确认信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果保险信息格式不正确。"}
    ]


class YouXiaKeManageUserProfile(VirtualFunctionApp):
    name = "YouXiaKeManageUserProfile"
    summary = "允许用户管理自己的个人信息和偏好设置。"
    parameters: List[ArgParameter] = [
        {
            "name": "profile_details",
            "type": "object",
            "description": "包含用户个人信息的详细数据。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "更新个人资料是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果提供的个人信息格式不正确。",
        }
    ]


@register_app()
class YouXiaKe(FunctionApp):
    name_for_human = "游侠客"
    description_for_human = "提供自助游和个性化定制旅游服务的工具包。"
    name_for_model = "YouXiaKe"
    description_for_model = "YouXiaKe工具包提供自助游和个性化定制旅游服务的API，允许用户获取旅游攻略、行程规划、景点推荐、预算计算及用户评论等功能，旨在增强用户的旅行体验。"
    app_classes = [
        YouXiaKeGetTravelGuide,
        YouXiaKePlanItinerary,
        YouXiaKeRecommendAttractions,
        YouXiaKeCalculateBudget,
        YouXiaKeSubmitReview,
        YouXiaKeGetWeatherUpdate,
        YouXiaKeGetTransportInfo,
        YouXiaKeSetTravelReminder,
        YouXiaKePurchaseTravelInsurance,
        YouXiaKeManageUserProfile,
    ]


#################### TravelFrog ####################


class TravelFrogCreateTravelPlan(VirtualFunctionApp):
    name = "TravelFrogCreateTravelPlan"
    summary = "创建新的旅行计划并记录相关信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "旅行计划的标题。",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "旅行的目的地。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "旅行的开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "旅行的结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "notes",
            "type": "string",
            "description": "旅行计划的附加备注。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "创建的旅行计划的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当输入参数格式不正确时。"}
    ]


class TravelFrogViewTravelPlan(VirtualFunctionApp):
    name = "TravelFrogViewTravelPlan"
    summary = "查看指定旅行计划的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "旅行计划的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "title", "type": "string", "description": "旅行计划的标题。"},
        {"name": "destination", "type": "string", "description": "旅行的目的地。"},
        {"name": "start_date", "type": "string", "description": "旅行的开始日期。"},
        {"name": "end_date", "type": "string", "description": "旅行的结束日期。"},
        {"name": "notes", "type": "string", "description": "旅行计划的附加备注。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的计划不存在时。"}
    ]


class TravelFrogUpdateTravelPlan(VirtualFunctionApp):
    name = "TravelFrogUpdateTravelPlan"
    summary = "更新指定的旅行计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "旅行计划的唯一标识符。",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "更新后的旅行计划标题。",
            "required": False,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "更新后的旅行目的地。",
            "required": False,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "更新后的开始日期。",
            "required": False,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "更新后的结束日期。",
            "required": False,
        },
        {
            "name": "notes",
            "type": "string",
            "description": "更新后的附加备注。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的计划不存在时。"},
        {"name": "InvalidRequestException", "description": "当输入参数格式不正确时。"},
    ]


class TravelFrogDeleteTravelPlan(VirtualFunctionApp):
    name = "TravelFrogDeleteTravelPlan"
    summary = "删除指定的旅行计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "旅行计划的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的计划不存在时。"}
    ]


class TravelFrogShareTravelExperience(VirtualFunctionApp):
    name = "TravelFrogShareTravelExperience"
    summary = "分享旅行经验给其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "experience",
            "type": "string",
            "description": "旅行经验的内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当输入参数格式不正确时。"}
    ]


class TravelFrogSearchTravelPlans(VirtualFunctionApp):
    name = "TravelFrogSearchTravelPlans"
    summary = "通过关键字搜索旅行计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "plans",
            "type": "array",
            "description": "符合搜索条件的旅行计划列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当输入参数格式不正确时。"}
    ]


class TravelFrogFavoriteTravelPlan(VirtualFunctionApp):
    name = "TravelFrogFavoriteTravelPlan"
    summary = "收藏指定的旅行计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "plan_id",
            "type": "string",
            "description": "旅行计划的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的计划不存在时。"}
    ]


class TravelFrogViewSharedExperiences(VirtualFunctionApp):
    name = "TravelFrogViewSharedExperiences"
    summary = "查看其他用户分享的旅行经验。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大经验数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "experiences",
            "type": "array",
            "description": "其他用户分享的旅行经验列表。",
        }
    ]
    exceptions: List[ArgException] = []


class TravelFrogGetTravelInspiration(VirtualFunctionApp):
    name = "TravelFrogGetTravelInspiration"
    summary = "获取随机的旅行计划推荐。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "plan",
            "type": "object",
            "description": "随机推荐的旅行计划，包含标题、目的地、开始日期和结束日期。",
            "fields": [
                {"name": "title", "type": "string", "description": "旅行计划的标题。"},
                {
                    "name": "destination",
                    "type": "string",
                    "description": "旅行的目的地。",
                },
                {
                    "name": "start_date",
                    "type": "string",
                    "description": "旅行的开始日期。",
                },
                {
                    "name": "end_date",
                    "type": "string",
                    "description": "旅行的结束日期。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = []


class TravelFrogAccessUserProfile(VirtualFunctionApp):
    name = "TravelFrogAccessUserProfile"
    summary = "访问用户的个人资料信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "用户的个人资料信息，包含用户名和个人简介。",
            "fields": [
                {"name": "username", "type": "string", "description": "用户的用户名。"},
                {"name": "bio", "type": "string", "description": "用户的个人简介。"},
            ],
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class TravelFrog(FunctionApp):
    name_for_human = "Travel Frog"
    description_for_human = "一个帮助用户记录和分享旅行计划与经验的工具包。"
    name_for_model = "TravelFrog"
    description_for_model = "TravelFrog工具包允许用户创建、查看、更新和删除旅行计划，分享旅行经验，并通过搜索和推荐获取灵感。该工具包旨在帮助旅行爱好者记录和分享他们的旅行经历。"
    app_classes = [
        TravelFrogCreateTravelPlan,
        TravelFrogViewTravelPlan,
        TravelFrogUpdateTravelPlan,
        TravelFrogDeleteTravelPlan,
        TravelFrogShareTravelExperience,
        TravelFrogSearchTravelPlans,
        TravelFrogFavoriteTravelPlan,
        TravelFrogViewSharedExperiences,
        TravelFrogGetTravelInspiration,
        TravelFrogAccessUserProfile,
    ]


#################### TravelService ####################


class TravelServiceQueryFlightInfo(VirtualFunctionApp):
    name = "TravelServiceQueryFlightInfo"
    summary = "查询指定航班的实时信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，例如'CA123'",
            "required": True,
        },
        {
            "name": "departure_date",
            "type": "string",
            "description": "出发日期，格式为'YYYY-MM-DD'",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flight_info",
            "type": "object",
            "description": "航班信息，包括航空公司、出发时间、到达时间、价格等字段",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceQueryHotelInfo(VirtualFunctionApp):
    name = "TravelServiceQueryHotelInfo"
    summary = "查询指定城市的酒店信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "city",
            "type": "string",
            "description": "城市名称，例如'北京'",
            "required": True,
        },
        {
            "name": "check_in_date",
            "type": "string",
            "description": "入住日期，格式为'YYYY-MM-DD'",
            "required": True,
        },
        {
            "name": "check_out_date",
            "type": "string",
            "description": "退房日期，格式为'YYYY-MM-DD'",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hotel_list",
            "type": "array",
            "description": "酒店信息列表，每个酒店包含名称、地址、价格等字段",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceQueryVacationPackages(VirtualFunctionApp):
    name = "TravelServiceQueryVacationPackages"
    summary = "查询旅游度假产品信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "destination",
            "type": "string",
            "description": "目的地，例如'云南'",
            "required": True,
        },
        {
            "name": "travel_date",
            "type": "string",
            "description": "出发日期，格式为'YYYY-MM-DD'",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "vacation_packages",
            "type": "array",
            "description": "旅游度假产品列表，包括产品名称、价格、包含内容等字段",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceQueryAttractionTickets(VirtualFunctionApp):
    name = "TravelServiceQueryAttractionTickets"
    summary = "查询景点门票信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "attraction_name",
            "type": "string",
            "description": "景点名称，例如'长城'",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ticket_info",
            "type": "object",
            "description": "景点门票信息，包括价格、开放时间、购票链接等字段",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceBookFlight(VirtualFunctionApp):
    name = "TravelServiceBookFlight"
    summary = "预订机票。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，例如'CA123'",
            "required": True,
        },
        {
            "name": "passenger_info",
            "type": "object",
            "description": "乘客信息，包括姓名、身份证号等字段",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "booking_status", "type": "boolean", "description": "预订是否成功"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果航班号或乘客信息格式不正确",
        }
    ]


class TravelServiceBookHotel(VirtualFunctionApp):
    name = "TravelServiceBookHotel"
    summary = "预订酒店。"
    parameters: List[ArgParameter] = [
        {
            "name": "hotel_id",
            "type": "string",
            "description": "酒店唯一标识符",
            "required": True,
        },
        {
            "name": "guest_info",
            "type": "object",
            "description": "客人信息，包括姓名、联系方式等字段",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "booking_status", "type": "boolean", "description": "预订是否成功"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果酒店ID或客人信息格式不正确",
        }
    ]


class TravelServiceGetBookingHistory(VirtualFunctionApp):
    name = "TravelServiceGetBookingHistory"
    summary = "获取用户的历史预订信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "booking_history",
            "type": "array",
            "description": "用户的历史预订记录列表，每条记录包含预订详情",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceModifyBooking(VirtualFunctionApp):
    name = "TravelServiceModifyBooking"
    summary = "修改用户的预订信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "预订唯一标识符",
            "required": True,
        },
        {
            "name": "new_info",
            "type": "object",
            "description": "新的预订信息，包括修改后的乘客信息等字段",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "modify_status", "type": "boolean", "description": "修改是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果预订ID不存在"},
        {"name": "InvalidRequestException", "description": "如果新信息格式不正确"},
    ]


class TravelServiceCancelBooking(VirtualFunctionApp):
    name = "TravelServiceCancelBooking"
    summary = "取消用户的预订。"
    parameters: List[ArgParameter] = [
        {
            "name": "booking_id",
            "type": "string",
            "description": "预订唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "cancel_status", "type": "boolean", "description": "取消是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果预订ID不存在"}
    ]


class TravelServiceGetPaymentMethods(VirtualFunctionApp):
    name = "TravelServiceGetPaymentMethods"
    summary = "查询用户的支付方式。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "用户的支付方式列表",
        }
    ]
    exceptions: List[ArgException] = []


class TravelServiceGetRealTimePrices(VirtualFunctionApp):
    name = "TravelServiceGetRealTimePrices"
    summary = "获取实时旅游产品价格信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_type",
            "type": "string",
            "description": "产品类型，例如'机票'、'酒店'",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "price_info",
            "type": "object",
            "description": "实时价格信息，包括产品名称、价格等字段",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果产品类型不在允许值中"}
    ]


class TravelServiceSearchBooking(VirtualFunctionApp):
    name = "TravelServiceSearchBooking"
    summary = "根据条件搜索用户的预订信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号",
            "required": False,
        },
        {
            "name": "hotel_id",
            "type": "string",
            "description": "酒店唯一标识符",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "booking_id", "type": "string", "description": "预订唯一标识符"}
    ]
    exceptions: List[ArgException] = []


@register_app()
class TravelService(FunctionApp):
    name_for_human = "Travel Service"
    description_for_human = "一站式旅游服务工具包，帮助用户查询和预订旅游产品。"
    name_for_model = "TravelService"
    description_for_model = "TravelService工具包提供一站式旅游服务，包括查询机票、酒店、旅游度假产品和景点门票信息，支持用户预订、修改和取消预订，获取历史记录及支付方式，旨在帮助用户快速便捷地处理旅游相关事务。"
    app_classes = [
        TravelServiceQueryFlightInfo,
        TravelServiceQueryHotelInfo,
        TravelServiceQueryVacationPackages,
        TravelServiceQueryAttractionTickets,
        TravelServiceBookFlight,
        TravelServiceBookHotel,
        TravelServiceGetBookingHistory,
        TravelServiceModifyBooking,
        TravelServiceCancelBooking,
        TravelServiceGetPaymentMethods,
        TravelServiceGetRealTimePrices,
        TravelServiceSearchBooking,
    ]


#################### BaiduMap ####################


class BaiduMapRealTimeTraffic(VirtualFunctionApp):
    name = "BaiduMapRealTimeTraffic"
    summary = "提供特定路段的实时交通状况。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "要查询交通状况的路段位置。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_status",
            "type": "string",
            "description": "返回路段的交通状况（例如，畅通、拥堵、封闭）。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果location格式不正确。"}
    ]


class BaiduMapRoutePlanning(VirtualFunctionApp):
    name = "BaiduMapRoutePlanning"
    summary = "根据用户的起点和终点生成最佳出行路线。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "出发地点。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "目的地。",
            "required": True,
        },
        {
            "name": "mode",
            "type": "string",
            "description": "出行方式（驾车、步行、公共交通），可选值为['driving', 'walking', 'transit']。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "route", "type": "string", "description": "返回最佳出行路线的描述。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果起点或终点格式不正确。"}
    ]


class BaiduMapNearbySearch(VirtualFunctionApp):
    name = "BaiduMapNearbySearch"
    summary = "根据用户当前位置搜索附近的服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置。",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "要搜索的服务类别（如餐饮、购物），可选值为['restaurant', 'shopping', 'gas_station', 'hotel']。",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "results", "type": "array", "description": "返回附近服务的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果location格式不正确。"}
    ]


class BaiduMapStreetView(VirtualFunctionApp):
    name = "BaiduMapStreetView"
    summary = "返回指定位置的街景图像。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "要查看街景的地点。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "street_view_image",
            "type": "string",
            "description": "返回街景图像的URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果location不可用。"}
    ]


class BaiduMapShareLocation(VirtualFunctionApp):
    name = "BaiduMapShareLocation"
    summary = "分享用户当前位置。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "收件人联系方式（如手机号或邮箱）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果location格式不正确或recipient格式不正确。",
        }
    ]


class BaiduMapSaveLocation(VirtualFunctionApp):
    name = "BaiduMapSaveLocation"
    summary = "收藏用户常去的地点。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "要收藏的地点。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果location格式不正确。"}
    ]


class BaiduMapVoiceNavigation(VirtualFunctionApp):
    name = "BaiduMapVoiceNavigation"
    summary = "提供实时语音导航。"
    parameters: List[ArgParameter] = [
        {
            "name": "route",
            "type": "string",
            "description": "用户的出行路线。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果route格式不正确。"}
    ]


class BaiduMapOfflineMap(VirtualFunctionApp):
    name = "BaiduMapOfflineMap"
    summary = "下载地图数据以供离线使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "area",
            "type": "string",
            "description": "要下载的地图区域。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果area格式不正确。"}
    ]


class BaiduMapTrafficAlert(VirtualFunctionApp):
    name = "BaiduMapTrafficAlert"
    summary = "向用户发送交通状况提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户关注的路段。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果location格式不正确。"}
    ]


@register_app()
class BaiduMap(FunctionApp):
    name_for_human = "百度地图"
    description_for_human = (
        "提供实时交通信息和路线规划的工具包，支持多种出行方式和周边服务搜索。"
    )
    name_for_model = "BaiduMap"
    description_for_model = "BaiduMap工具包提供实时交通信息、路线规划、周边搜索、街景查看和多种出行方式，旨在帮助用户高效、安全地获取导航信息和周边服务。"
    app_classes = [
        BaiduMapRealTimeTraffic,
        BaiduMapRoutePlanning,
        BaiduMapNearbySearch,
        BaiduMapStreetView,
        BaiduMapShareLocation,
        BaiduMapSaveLocation,
        BaiduMapVoiceNavigation,
        BaiduMapOfflineMap,
        BaiduMapTrafficAlert,
    ]


#################### GaoDeMap ####################


class GaoDeMapRoutePlanning(VirtualFunctionApp):
    name = "GaoDeMapRoutePlanning"
    summary = "根据用户输入的起点和终点，提供最佳的行车、步行或公共交通路线。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "起点位置，可以是地址或坐标。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "终点位置，可以是地址或坐标。",
            "required": True,
        },
        {
            "name": "transportation_mode",
            "type": "string",
            "description": "出行方式，允许值为['driving', 'walking', 'transit']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route",
            "type": "object",
            "description": "包含路线信息的对象，包括路径、预计到达时间和距离。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当起点或终点格式不正确时抛出。",
        }
    ]


class GaoDeMapRealTimeTrafficMonitoring(VirtualFunctionApp):
    name = "GaoDeMapRealTimeTrafficMonitoring"
    summary = "提供当前交通状况的信息，包括拥堵情况和预计到达时间。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "起点位置，可以是地址或坐标。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "终点位置，可以是地址或坐标。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_info",
            "type": "object",
            "description": "包含实时路况信息的对象，包括拥堵程度和预计到达时间。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当起点或终点格式不正确时抛出。",
        }
    ]


class GaoDeMapBusQuery(VirtualFunctionApp):
    name = "GaoDeMapBusQuery"
    summary = "查询特定路线的公交车到达时间和换乘信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "route_id",
            "type": "string",
            "description": "公交路线的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bus_schedule",
            "type": "array",
            "description": "包含公交车到达时间和换乘信息的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当route_id不存在时抛出。"}
    ]


class GaoDeMapRideHailingService(VirtualFunctionApp):
    name = "GaoDeMapRideHailingService"
    summary = "提供打车的预约和叫车服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "叫车的起始位置，可以是地址或坐标。",
            "required": True,
        },
        {
            "name": "destination_location",
            "type": "string",
            "description": "目的地位置，可以是地址或坐标。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_info",
            "type": "object",
            "description": "包含预约打车的信息，例如车牌号、司机信息和预计到达时间。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当起始位置或目的地格式不正确时抛出。",
        }
    ]


class GaoDeMapBikeSharingQuery(VirtualFunctionApp):
    name = "GaoDeMapBikeSharingQuery"
    summary = "查询附近的共享单车位置和可用数量。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_location",
            "type": "string",
            "description": "用户当前位置，可以是地址或坐标。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bike_info",
            "type": "array",
            "description": "包含附近共享单车位置和可用数量的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户位置格式不正确时抛出。",
        }
    ]


class GaoDeMapLocationRecommendation(VirtualFunctionApp):
    name = "GaoDeMapLocationRecommendation"
    summary = "根据用户位置推荐附近的餐饮、购物和娱乐设施。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_location",
            "type": "string",
            "description": "用户当前位置，可以是地址或坐标。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "包含推荐地点的数组，每个地点包含名称、地址和类型。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户位置格式不正确时抛出。",
        }
    ]


class GaoDeMapUserHistory(VirtualFunctionApp):
    name = "GaoDeMapUserHistory"
    summary = "访问用户的历史出行记录，便于快速选择常用路线。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "包含用户历史出行记录的数组。",
        }
    ]
    exceptions: List[ArgException] = []


class GaoDeMapOfflineMap(VirtualFunctionApp):
    name = "GaoDeMapOfflineMap"
    summary = "下载地图数据以便在无网络情况下使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "region",
            "type": "string",
            "description": "下载的地图区域，可以是城市名称或坐标范围。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_status",
            "type": "boolean",
            "description": "表示地图下载是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当区域格式不正确时抛出。"}
    ]


class GaoDeMapVoiceNavigation(VirtualFunctionApp):
    name = "GaoDeMapVoiceNavigation"
    summary = "提供语音指引，提升驾驶体验。"
    parameters: List[ArgParameter] = [
        {
            "name": "route",
            "type": "object",
            "description": "包含路线信息的对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "voice_guidance",
            "type": "string",
            "description": "提供的语音导航指引文本。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当路线信息格式不正确时抛出。",
        }
    ]


class GaoDeMapAccidentReport(VirtualFunctionApp):
    name = "GaoDeMapAccidentReport"
    summary = "用户可以报告交通事故以帮助其他用户避开。"
    parameters: List[ArgParameter] = [
        {
            "name": "accident_details",
            "type": "string",
            "description": "事故的详细信息，包括位置、时间和描述。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report_status",
            "type": "boolean",
            "description": "表示事故报告是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当事故详细信息格式不正确时抛出。",
        }
    ]


@register_app()
class GaoDeMap(FunctionApp):
    name_for_human = "高德地图"
    description_for_human = "提供精准的导航服务和实时路况监测的工具包。"
    name_for_model = "GaoDeMap"
    description_for_model = "高德地图工具包提供精准的导航服务和实时路况监测，支持多种出行方式，包括打车和共享单车，旨在帮助用户高效、安全地规划和执行出行。"
    app_classes = [
        GaoDeMapRoutePlanning,
        GaoDeMapRealTimeTrafficMonitoring,
        GaoDeMapBusQuery,
        GaoDeMapRideHailingService,
        GaoDeMapBikeSharingQuery,
        GaoDeMapLocationRecommendation,
        GaoDeMapUserHistory,
        GaoDeMapOfflineMap,
        GaoDeMapVoiceNavigation,
        GaoDeMapAccidentReport,
    ]


#################### CaoCaoTravel ####################


class CaoCaoTravelRealTimeRideRequest(VirtualFunctionApp):
    name = "CaoCaoTravelRealTimeRideRequest"
    summary = "允许用户实时请求打车服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "用户的上车地点，格式为“城市, 地址”。",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "用户的目的地，格式为“城市, 地址”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "成功请求的打车服务的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class CaoCaoTravelAppointmentRideRequest(VirtualFunctionApp):
    name = "CaoCaoTravelAppointmentRideRequest"
    summary = "允许用户预约未来的打车服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "用户的上车地点，格式为“城市, 地址”。",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "用户的目的地，格式为“城市, 地址”。",
            "required": True,
        },
        {
            "name": "pickup_time",
            "type": "string",
            "description": "预约的上车时间，格式为“YYYY-MM-DD HH:MM”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "appointment_id",
            "type": "string",
            "description": "成功预约的打车服务的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class CaoCaoTravelViewDriverInfo(VirtualFunctionApp):
    name = "CaoCaoTravelViewDriverInfo"
    summary = "允许用户查看当前司机的信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "当前打车服务的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "driver_info",
            "type": "object",
            "description": "包含司机的姓名、车牌号和车辆类型。",
            "fields": [
                {
                    "name": "driver_name",
                    "type": "string",
                    "description": "司机的姓名。",
                },
                {
                    "name": "vehicle_plate",
                    "type": "string",
                    "description": "车辆的车牌号。",
                },
                {
                    "name": "vehicle_type",
                    "type": "string",
                    "description": "车辆的类型。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的 ride_id 无法找到时。"}
    ]


class CaoCaoTravelPayment(VirtualFunctionApp):
    name = "CaoCaoTravelPayment"
    summary = "允许用户选择支付方式并完成支付。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "当前打车服务的唯一标识符。",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "支付方式，支持“信用卡”、“支付宝”、“微信”等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_status",
            "type": "boolean",
            "description": "支付是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当支付方式不符合要求时。"}
    ]


class CaoCaoTravelRideHistory(VirtualFunctionApp):
    name = "CaoCaoTravelRideHistory"
    summary = "允许用户查看自己的历史出行记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的历史记录数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_history",
            "type": "array",
            "description": "用户的历史出行记录列表。",
        }
    ]
    exceptions: List[ArgException] = []


class CaoCaoTravelRateDriver(VirtualFunctionApp):
    name = "CaoCaoTravelRateDriver"
    summary = "允许用户对司机进行评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "当前打车服务的唯一标识符。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "司机的评分，范围为1-5。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "对司机的评价评论。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_status",
            "type": "boolean",
            "description": "评价是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当评分不在1-5范围内时。"}
    ]


class CaoCaoTravelCouponManagement(VirtualFunctionApp):
    name = "CaoCaoTravelCouponManagement"
    summary = "允许用户查看和使用可用的优惠券。"
    parameters: List[ArgParameter] = [
        {
            "name": "coupon_code",
            "type": "string",
            "description": "用户输入的优惠券代码。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "coupon_status",
            "type": "boolean",
            "description": "优惠券是否有效的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当优惠券无效时。"}
    ]


class CaoCaoTravelEmergencyContactManagement(VirtualFunctionApp):
    name = "CaoCaoTravelEmergencyContactManagement"
    summary = "允许用户设置和管理紧急联系人。"
    parameters: List[ArgParameter] = [
        {
            "name": "contact_name",
            "type": "string",
            "description": "紧急联系人的姓名。",
            "required": True,
        },
        {
            "name": "contact_number",
            "type": "string",
            "description": "紧急联系人的电话号码，格式为“+国家码-号码”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "contact_status",
            "type": "boolean",
            "description": "紧急联系人是否成功添加的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当联系人已存在时。"}
    ]


class CaoCaoTravelVehicleTypeSelection(VirtualFunctionApp):
    name = "CaoCaoTravelVehicleTypeSelection"
    summary = "允许用户选择不同类型的车辆。"
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_type",
            "type": "string",
            "description": "用户选择的车辆类型，支持“经济型”、“舒适型”、“豪华型”等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "selection_status",
            "type": "boolean",
            "description": "车辆类型选择是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当车辆类型不在支持范围内时。",
        }
    ]


class CaoCaoTravelCustomerSupport(VirtualFunctionApp):
    name = "CaoCaoTravelCustomerSupport"
    summary = "允许用户提交客服请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "issue_description",
            "type": "string",
            "description": "用户遇到的问题描述。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "support_status",
            "type": "boolean",
            "description": "客服请求是否成功提交的状态。",
        }
    ]
    exceptions: List[ArgException] = []


class CaoCaoTravelSearchRide(VirtualFunctionApp):
    name = "CaoCaoTravelSearchRide"
    summary = "允许用户通过条件搜索行程记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "condition",
            "type": "string",
            "description": "搜索条件，例如“日期”、“司机”等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "符合条件的行程的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当没有符合条件的行程时。"}
    ]


@register_app()
class CaoCaoTravel(FunctionApp):
    name_for_human = "曹操出行"
    description_for_human = "提供环保出行选择的打车服务，支持预约和实时叫车，强调司机和车辆的安全性和舒适性。"
    name_for_model = "CaoCaoTravel"
    description_for_model = "CaoCaoTravel工具包提供环保打车服务，支持实时叫车、预约打车、查看司机信息、支付管理和行程历史等功能，旨在为用户提供安全、舒适和便利的出行体验。"
    app_classes = [
        CaoCaoTravelRealTimeRideRequest,
        CaoCaoTravelAppointmentRideRequest,
        CaoCaoTravelViewDriverInfo,
        CaoCaoTravelPayment,
        CaoCaoTravelRideHistory,
        CaoCaoTravelRateDriver,
        CaoCaoTravelCouponManagement,
        CaoCaoTravelEmergencyContactManagement,
        CaoCaoTravelVehicleTypeSelection,
        CaoCaoTravelCustomerSupport,
        CaoCaoTravelSearchRide,
    ]


#################### TencentMap ####################


class TencentMapMapView(VirtualFunctionApp):
    name = "TencentMapMapView"
    summary = "提供地图浏览功能，允许用户查看指定区域的地图。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户要查看的具体位置或地址。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "map_image_url",
            "type": "string",
            "description": "返回地图的图像URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'location'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapRoutePlanning(VirtualFunctionApp):
    name = "TencentMapRoutePlanning"
    summary = "允许用户输入起点和终点，规划最佳路线。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "起点位置或地址。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "终点位置或地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "route_info",
            "type": "object",
            "description": "返回路线信息，包括距离和预计时间。",
            "fields": [
                {"name": "distance", "type": "string", "description": "路线的总距离。"},
                {"name": "duration", "type": "string", "description": "预计行驶时间。"},
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果起点或终点格式不正确，将抛出此异常。",
        }
    ]


class TencentMapTrafficInfo(VirtualFunctionApp):
    name = "TencentMapTrafficInfo"
    summary = "提供实时交通状况和拥堵信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询交通信息的具体位置。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_status",
            "type": "string",
            "description": "返回该位置的交通状况。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'location'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapVoiceNavigation(VirtualFunctionApp):
    name = "TencentMapVoiceNavigation"
    summary = "提供语音指令以指导用户行驶或步行。"
    parameters: List[ArgParameter] = [
        {
            "name": "route",
            "type": "object",
            "description": "用户的导航路线信息。",
            "required": True,
            "fields": [
                {
                    "name": "start_location",
                    "type": "string",
                    "description": "起点位置。",
                },
                {"name": "end_location", "type": "string", "description": "终点位置。"},
            ],
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "voice_instructions",
            "type": "array",
            "description": "返回一系列语音指令。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'route'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapTravelOptions(VirtualFunctionApp):
    name = "TencentMapTravelOptions"
    summary = "提供多种出行方式选择，包括驾车、步行和公共交通。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "起点位置。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "终点位置。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "options", "type": "array", "description": "返回可用的出行方式选项。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果起点或终点格式不正确，将抛出此异常。",
        }
    ]


class TencentMapSaveLocation(VirtualFunctionApp):
    name = "TencentMapSaveLocation"
    summary = "允许用户保存常用地点以便快速访问。"
    parameters: List[ArgParameter] = [
        {
            "name": "location_name",
            "type": "string",
            "description": "要保存的地点名称。",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "要保存的具体位置或地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回保存操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'location_name'或'location'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapShareLocation(VirtualFunctionApp):
    name = "TencentMapShareLocation"
    summary = "允许用户与他人分享当前位置或目的地。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "要分享的具体位置或地址。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "接收分享位置的用户。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'location'或'recipient'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapNearbyFacilities(VirtualFunctionApp):
    name = "TencentMapNearbyFacilities"
    summary = "提供附近餐馆、加油站等设施的信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询附近设施的具体位置。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "facilities", "type": "array", "description": "返回附近设施的列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'location'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapHistoryRecords(VirtualFunctionApp):
    name = "TencentMapHistoryRecords"
    summary = "记录用户的搜索和导航历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "history", "type": "array", "description": "返回用户的历史记录。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'user_id'未找到，将抛出此异常。",
        }
    ]


class TencentMapOfflineMap(VirtualFunctionApp):
    name = "TencentMapOfflineMap"
    summary = "提供用户下载地图以便在无网络时使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "region",
            "type": "string",
            "description": "要下载的地图区域。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "返回下载操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'region'格式不正确，将抛出此异常。",
        }
    ]


class TencentMapStoredUserData(VirtualFunctionApp):
    name = "TencentMapStoredUserData"
    summary = "访问用户存储的地址和支付信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "返回用户的存储数据，包括地址和支付信息。",
            "fields": [
                {
                    "name": "addresses",
                    "type": "array",
                    "description": "用户的地址列表。",
                },
                {
                    "name": "payment_methods",
                    "type": "array",
                    "description": "用户的支付方式列表。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'user_id'未找到，将抛出此异常。",
        }
    ]


@register_app()
class TencentMap(FunctionApp):
    name_for_human = "腾讯地图"
    description_for_human = "提供地图浏览、导航和交通信息查询功能的工具包。"
    name_for_model = "TencentMap"
    description_for_model = "腾讯地图工具包提供地图浏览、导航和交通信息查询功能，支持语音导航和多种出行方式选择，适合日常出行和长途旅行。该工具包还包括保存位置、分享位置、查看周边设施、记录历史和离线地图等附加功能。"
    app_classes = [
        TencentMapMapView,
        TencentMapRoutePlanning,
        TencentMapTrafficInfo,
        TencentMapVoiceNavigation,
        TencentMapTravelOptions,
        TencentMapSaveLocation,
        TencentMapShareLocation,
        TencentMapNearbyFacilities,
        TencentMapHistoryRecords,
        TencentMapOfflineMap,
        TencentMapStoredUserData,
    ]


#################### DidiRide ####################


class DidiRideBookRide(VirtualFunctionApp):
    name = "DidiRideBookRide"
    summary = "用户可以请求打车服务并选择车型。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_type",
            "type": "string",
            "description": "选择的出行类型，包括 'taxi', 'carpool', 'premium', 'chauffeur'",
            "required": True,
        },
        {
            "name": "pickup_location",
            "type": "string",
            "description": "用户的上车地点",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "用户的目的地",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "预约成功后返回的订单唯一标识符",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 ride_type、pickup_location 或 destination 格式不正确时。",
        }
    ]


class DidiRideGetDriverLocation(VirtualFunctionApp):
    name = "DidiRideGetDriverLocation"
    summary = "用户可以实时查看司机的位置信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "用户的订单唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "driver_location",
            "type": "object",
            "description": "司机的位置信息，包括经度和纬度",
            "fields": [
                {"name": "latitude", "type": "number", "description": "司机的纬度"},
                {"name": "longitude", "type": "number", "description": "司机的经度"},
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当 order_id 不存在时。"}
    ]


class DidiRidePayOrder(VirtualFunctionApp):
    name = "DidiRidePayOrder"
    summary = "用户可以选择多种支付方式完成订单支付。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "待支付的订单唯一标识符",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "选择的支付方式，包括 'credit_card', 'debit_card', 'weixin', 'alipay'",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "支付是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当 order_id 不存在时。"},
        {
            "name": "InvalidRequestException",
            "description": "当 payment_method 格式不正确时。",
        },
    ]


class DidiRideGetOrderHistory(VirtualFunctionApp):
    name = "DidiRideGetOrderHistory"
    summary = "用户可以查看之前的出行记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "用户的历史订单列表，包括每个订单的基本信息",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "order_id",
                        "type": "string",
                        "description": "订单的唯一标识符",
                    },
                    {"name": "ride_type", "type": "string", "description": "出行类型"},
                    {"name": "date", "type": "string", "description": "订单日期"},
                ],
            },
        }
    ]
    exceptions: List[ArgException] = []


class DidiRideRateService(VirtualFunctionApp):
    name = "DidiRideRateService"
    summary = "用户可以对司机和服务进行评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "用户的订单唯一标识符",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "评分，范围从1到5",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈评论",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评价是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当 order_id 不存在时。"},
        {
            "name": "InvalidRequestException",
            "description": "当 rating 不在1到5的范围内时。",
        },
    ]


class DidiRideChooseCarpool(VirtualFunctionApp):
    name = "DidiRideChooseCarpool"
    summary = "用户可以选择顺风车服务以降低出行成本。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "用户的上车地点",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "用户的目的地",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "ride_id", "type": "string", "description": "顺风车的预约唯一标识符"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 pickup_location 或 destination 格式不正确时。",
        }
    ]


class DidiRideChauffeurService(VirtualFunctionApp):
    name = "DidiRideChauffeurService"
    summary = "用户可以请求代驾服务以便安全驾驶。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "用户的上车地点",
            "required": True,
        },
        {
            "name": "destination",
            "type": "string",
            "description": "用户的目的地",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "代驾服务的订单唯一标识符",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 pickup_location 或 destination 格式不正确时。",
        }
    ]


class DidiRideModifyOrder(VirtualFunctionApp):
    name = "DidiRideModifyOrder"
    summary = "用户可以在预约后修改订单信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "待修改的订单唯一标识符",
            "required": True,
        },
        {
            "name": "new_pickup_location",
            "type": "string",
            "description": "新的上车地点",
            "required": False,
        },
        {
            "name": "new_destination",
            "type": "string",
            "description": "新的目的地",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "订单修改是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当 order_id 不存在时。"},
        {
            "name": "InvalidRequestException",
            "description": "当新的 pickup_location 或 destination 格式不正确时。",
        },
    ]


class DidiRideQueryNearbyCars(VirtualFunctionApp):
    name = "DidiRideQueryNearbyCars"
    summary = "用户可以查询附近可用的车辆。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "object",
            "description": "用户的当前位置，包括经度和纬度",
            "required": True,
            "fields": [
                {"name": "latitude", "type": "number", "description": "用户的纬度"},
                {"name": "longitude", "type": "number", "description": "用户的经度"},
            ],
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nearby_cars",
            "type": "array",
            "description": "附近可用车辆的列表",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "car_id",
                        "type": "string",
                        "description": "车辆的唯一标识符",
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "description": "距离用户的距离",
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当 location 格式不正确时。"}
    ]


class DidiRideGetShareLink(VirtualFunctionApp):
    name = "DidiRideGetShareLink"
    summary = "用户可以生成行程分享链接与他人共享。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "用户的订单唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "用于分享行程的链接"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当 order_id 不存在时。"}
    ]


class DidiRideSearchOrders(VirtualFunctionApp):
    name = "DidiRideSearchOrders"
    summary = "用户可以根据订单状态搜索订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_status",
            "type": "string",
            "description": "订单状态，包括 'pending', 'completed', 'canceled'",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "orders",
            "type": "array",
            "description": "符合条件的订单列表，包括每个订单的基本信息",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "order_id",
                        "type": "string",
                        "description": "订单的唯一标识符",
                    },
                    {"name": "ride_type", "type": "string", "description": "出行类型"},
                    {"name": "date", "type": "string", "description": "订单日期"},
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 order_status 格式不正确时。",
        }
    ]


class DidiRideSearchCars(VirtualFunctionApp):
    name = "DidiRideSearchCars"
    summary = "用户可以根据当前位置搜索附近车辆。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "object",
            "description": "用户的当前位置，包括经度和纬度",
            "required": True,
            "fields": [
                {"name": "latitude", "type": "number", "description": "用户的纬度"},
                {"name": "longitude", "type": "number", "description": "用户的经度"},
            ],
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "nearby_cars",
            "type": "array",
            "description": "附近可用车辆的列表",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "car_id",
                        "type": "string",
                        "description": "车辆的唯一标识符",
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "description": "距离用户的距离",
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当 location 格式不正确时。"}
    ]


class DidiRideGetUserPaymentInfo(VirtualFunctionApp):
    name = "DidiRideGetUserPaymentInfo"
    summary = "获取用户的支付信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "用户的支付方式列表，包括每种支付方式的基本信息",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "method_id",
                        "type": "string",
                        "description": "支付方式的唯一标识符",
                    },
                    {
                        "name": "method_type",
                        "type": "string",
                        "description": "支付方式类型，如 'credit_card', 'debit_card', 'weixin', 'alipay'",
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = []


class DidiRideGetUserAddresses(VirtualFunctionApp):
    name = "DidiRideGetUserAddresses"
    summary = "获取用户保存的地址信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "addresses",
            "type": "array",
            "description": "用户保存的地址列表，包括每个地址的基本信息",
            "items": {
                "type": "object",
                "fields": [
                    {
                        "name": "address_id",
                        "type": "string",
                        "description": "地址的唯一标识符",
                    },
                    {
                        "name": "address",
                        "type": "string",
                        "description": "地址的详细信息",
                    },
                ],
            },
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class DidiRide(FunctionApp):
    name_for_human = "滴滴出行"
    description_for_human = "提供全面的出行服务，包括打车、顺风车、专车和代驾。"
    name_for_model = "DidiRide"
    description_for_model = "DidiRide工具包提供了全面的出行服务，包括打车、顺风车、专车和代驾，用户可以实时查看司机位置，选择多种支付方式，并访问历史订单与评价服务，确保用户的出行体验安全、便捷。"
    app_classes = [
        DidiRideBookRide,
        DidiRideGetDriverLocation,
        DidiRidePayOrder,
        DidiRideGetOrderHistory,
        DidiRideRateService,
        DidiRideChooseCarpool,
        DidiRideChauffeurService,
        DidiRideModifyOrder,
        DidiRideQueryNearbyCars,
        DidiRideGetShareLink,
        DidiRideSearchOrders,
        DidiRideSearchCars,
        DidiRideGetUserPaymentInfo,
        DidiRideGetUserAddresses,
    ]


#################### HelloTravel ####################


class HelloTravelSearchBikes(VirtualFunctionApp):
    name = "HelloTravelSearchBikes"
    summary = "搜索附近的共享单车和电单车。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置的经纬度，格式为'latitude,longitude'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "指定返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bike_list",
            "type": "array",
            "description": "包含找到的共享单车和电单车的详细信息。",
        }
    ]
    exceptions: List[ArgException] = []


class HelloTravelUnlockBike(VirtualFunctionApp):
    name = "HelloTravelUnlockBike"
    summary = "扫码解锁共享单车和电单车。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要解锁的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "解锁操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果bike_id无效，可能抛出此异常。",
        }
    ]


class HelloTravelBookRide(VirtualFunctionApp):
    name = "HelloTravelBookRide"
    summary = "预订打车服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "取车位置的经纬度，格式为'latitude,longitude'。",
            "required": True,
        },
        {
            "name": "dropoff_location",
            "type": "string",
            "description": "送达位置的经纬度，格式为'latitude,longitude'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "预订的打车服务的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果位置无效，可能抛出此异常。",
        }
    ]


class HelloTravelGetRideHistory(VirtualFunctionApp):
    name = "HelloTravelGetRideHistory"
    summary = "查询用户的骑行记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "ride_history", "type": "array", "description": "用户的骑行记录列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果用户找不到记录，可能抛出此异常。",
        }
    ]


class HelloTravelPayRideFee(VirtualFunctionApp):
    name = "HelloTravelPayRideFee"
    summary = "支付骑行费用。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要支付的骑行的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "payment_status", "type": "boolean", "description": "支付是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果ride_id无效，可能抛出此异常。",
        }
    ]


class HelloTravelCheckBikeAvailability(VirtualFunctionApp):
    name = "HelloTravelCheckBikeAvailability"
    summary = "查看单车和电单车的实时可用性。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要检查的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "availability", "type": "boolean", "description": "单车是否可用。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果bike_id无效，可能抛出此异常。",
        }
    ]


class HelloTravelGetParkingLocations(VirtualFunctionApp):
    name = "HelloTravelGetParkingLocations"
    summary = "获取最近的停车点信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置的经纬度，格式为'latitude,longitude'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "parking_locations",
            "type": "array",
            "description": "最近停车点的列表。",
        }
    ]
    exceptions: List[ArgException] = []


class HelloTravelRateRide(VirtualFunctionApp):
    name = "HelloTravelRateRide"
    summary = "评价骑行体验。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要评价的骑行的唯一标识符。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "评分，范围从1到5。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈意见，最多200个字符。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评价是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果ride_id无效或评分不在1到5之间，可能抛出此异常。",
        }
    ]


class HelloTravelApplyCoupon(VirtualFunctionApp):
    name = "HelloTravelApplyCoupon"
    summary = "获取使用优惠券的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "coupon_code",
            "type": "string",
            "description": "用户输入的优惠券代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "discount_amount",
            "type": "number",
            "description": "应用优惠券后的折扣金额。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果coupon_code无效，可能抛出此异常。",
        }
    ]


class HelloTravelGetUserProfile(VirtualFunctionApp):
    name = "HelloTravelGetUserProfile"
    summary = "查看用户的个人资料和设置。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "用户的个人资料，包括姓名、联系方式等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户找不到，可能抛出此异常。"}
    ]


@register_app()
class HelloTravel(FunctionApp):
    name_for_human = "Hello Travel"
    description_for_human = "App for convenient short-distance travel using shared bikes and ride-hailing services."
    name_for_model = "HelloTravel"
    description_for_model = "HelloTravel工具包提供了一系列工具，旨在帮助用户快速找到附近的共享单车和电单车，解锁共享单车，预订打车服务，查询骑行记录，支付费用等，适合短途出行的个人用户。"
    app_classes = [
        HelloTravelSearchBikes,
        HelloTravelUnlockBike,
        HelloTravelBookRide,
        HelloTravelGetRideHistory,
        HelloTravelPayRideFee,
        HelloTravelCheckBikeAvailability,
        HelloTravelGetParkingLocations,
        HelloTravelRateRide,
        HelloTravelApplyCoupon,
        HelloTravelGetUserProfile,
    ]


#################### Mobike ####################


class MobikeSearchBikes(VirtualFunctionApp):
    name = "MobikeSearchBikes"
    summary = "查找附近可用单车的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置的经纬度，以“纬度, 经度”格式提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bike_ids",
            "type": "array",
            "description": "可用单车的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 location 参数格式不正确时触发。",
        }
    ]


class MobikeRentBike(VirtualFunctionApp):
    name = "MobikeRentBike"
    summary = "租赁指定单车的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要租赁的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "租赁操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeUnlockBike(VirtualFunctionApp):
    name = "MobikeUnlockBike"
    summary = "解锁指定单车的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要解锁的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "解锁操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikePayRental(VirtualFunctionApp):
    name = "MobikePayRental"
    summary = "支付租赁费用的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "租赁的单车的唯一标识符。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "租赁费用的金额。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "支付操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 或 amount 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeViewRentalHistory(VirtualFunctionApp):
    name = "MobikeViewRentalHistory"
    summary = "查看用户历史租赁记录的工具。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "rental_history",
            "type": "array",
            "description": "用户的历史租赁记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有历史记录时触发。"}
    ]


class MobikeCancelRental(VirtualFunctionApp):
    name = "MobikeCancelRental"
    summary = "取消当前租赁的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "当前租赁的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "取消操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeGetBikeLocation(VirtualFunctionApp):
    name = "MobikeGetBikeLocation"
    summary = "获取指定单车实时位置的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要查询位置的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "location",
            "type": "string",
            "description": "单车的实时位置，格式为“纬度, 经度”。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeReportBikeStatus(VirtualFunctionApp):
    name = "MobikeReportBikeStatus"
    summary = "反馈单车状态的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "要反馈状态的单车的唯一标识符。",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "反馈的状态信息（如“损坏”）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "状态反馈是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 或 status 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeFindParkingSpots(VirtualFunctionApp):
    name = "MobikeFindParkingSpots"
    summary = "查找附近停车点的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前位置的经纬度，以“纬度, 经度”格式提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "parking_spots", "type": "array", "description": "附近停车点的列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 location 参数格式不正确时触发。",
        }
    ]


class MobikeGetRentalFeeDetails(VirtualFunctionApp):
    name = "MobikeGetRentalFeeDetails"
    summary = "获取租赁费用详细信息的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "bike_id",
            "type": "string",
            "description": "租赁的单车的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fee_details",
            "type": "object",
            "description": "租赁费用的详细信息，包括基本费用、时间费用等。",
            "fields": [
                {"name": "base_fee", "type": "number", "description": "基本费用。"},
                {
                    "name": "time_fee",
                    "type": "number",
                    "description": "按时间计算的费用。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 bike_id 参数格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当 bike_id 不存在时触发。"},
    ]


class MobikeGetUserPaymentInfo(VirtualFunctionApp):
    name = "MobikeGetUserPaymentInfo"
    summary = "获取用户支付信息的工具。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_info",
            "type": "object",
            "description": "用户的支付信息，包括支付方式和账户信息。",
            "fields": [
                {
                    "name": "payment_method",
                    "type": "string",
                    "description": "用户的支付方式（如“信用卡”）。",
                },
                {
                    "name": "account_info",
                    "type": "string",
                    "description": "用户的账户信息（如卡号的后四位）。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有支付信息时触发。"}
    ]


@register_app()
class Mobike(FunctionApp):
    name_for_human = "Mobike"
    description_for_human = (
        "共享单车租赁服务工具包，支持查找、租赁、解锁单车及支付租金。"
    )
    name_for_model = "Mobike"
    description_for_model = "Mobike工具包支持用户通过手机应用快速找到、租赁、解锁和支付共享单车，适合城市内短途出行，确保用户能够方便地获取单车服务。"
    app_classes = [
        MobikeSearchBikes,
        MobikeRentBike,
        MobikeUnlockBike,
        MobikePayRental,
        MobikeViewRentalHistory,
        MobikeCancelRental,
        MobikeGetBikeLocation,
        MobikeReportBikeStatus,
        MobikeFindParkingSpots,
        MobikeGetRentalFeeDetails,
        MobikeGetUserPaymentInfo,
    ]


#################### UberApp ####################


class UberAppRequestRide(VirtualFunctionApp):
    name = "UberAppRequestRide"
    summary = "请求一辆汽车，用户可以选择车型并发起叫车请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "vehicle_type",
            "type": "string",
            "description": "选择的车型类型，例如“经济型”、“豪华型”、“SUV”等。",
            "required": True,
        },
        {
            "name": "pickup_location",
            "type": "string",
            "description": "取车地点的地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "成功请求的行程的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果车型或地址格式不正确。"}
    ]


class UberAppTrackRide(VirtualFunctionApp):
    name = "UberAppTrackRide"
    summary = "实时追踪司机的位置和预计到达时间。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要追踪的行程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "driver_location",
            "type": "string",
            "description": "司机当前的位置。",
        },
        {
            "name": "estimated_arrival",
            "type": "string",
            "description": "预计到达时间。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果ride_id无效。"}
    ]


class UberAppShareRide(VirtualFunctionApp):
    name = "UberAppShareRide"
    summary = "与朋友共享行程信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要共享的行程的唯一标识符。",
            "required": True,
        },
        {
            "name": "friend_contact",
            "type": "string",
            "description": "朋友的联系信息（如手机号或邮箱）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "是否成功共享行程。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果ride_id无效。"},
        {"name": "InvalidRequestException", "description": "如果联系信息格式不正确。"},
    ]


class UberAppCancelRide(VirtualFunctionApp):
    name = "UberAppCancelRide"
    summary = "取消已请求的行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要取消的行程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "是否成功取消行程。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果ride_id无效。"}
    ]


class UberAppEstimateFare(VirtualFunctionApp):
    name = "UberAppEstimateFare"
    summary = "获取预计的行程费用。"
    parameters: List[ArgParameter] = [
        {
            "name": "pickup_location",
            "type": "string",
            "description": "取车地点的地址。",
            "required": True,
        },
        {
            "name": "dropoff_location",
            "type": "string",
            "description": "目的地的地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "estimated_fare", "type": "number", "description": "预计的费用。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果地址格式不正确。"}
    ]


class UberAppSelectVehicle(VirtualFunctionApp):
    name = "UberAppSelectVehicle"
    summary = "查看可用的车型选项。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户当前的位置。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "available_vehicles",
            "type": "array",
            "description": "可用车型的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果位置格式不正确。"}
    ]


class UberAppManagePayment(VirtualFunctionApp):
    name = "UberAppManagePayment"
    summary = "管理用户的支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，例如“添加”、“删除”或“选择”。",
            "required": True,
        },
        {
            "name": "payment_info",
            "type": "object",
            "description": "包含支付信息的对象，如卡号和过期日期。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "是否成功管理支付方式。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果支付信息格式不正确。"}
    ]


class UberAppViewRideHistory(VirtualFunctionApp):
    name = "UberAppViewRideHistory"
    summary = "查看用户的过去行程记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "ride_history", "type": "array", "description": "用户过去行程的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id无效。"}
    ]


class UberAppSubmitFeedback(VirtualFunctionApp):
    name = "UberAppSubmitFeedback"
    summary = "对司机和行程提交反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "ride_id",
            "type": "string",
            "description": "要反馈的行程的唯一标识符。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "是否成功提交反馈。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果ride_id无效。"},
        {"name": "InvalidRequestException", "description": "如果反馈内容为空。"},
    ]


class UberAppAccessStoredAddresses(VirtualFunctionApp):
    name = "UberAppAccessStoredAddresses"
    summary = "访问用户存储的地址。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_addresses",
            "type": "array",
            "description": "用户存储的地址列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id无效。"}
    ]


class UberAppAccessStoredPaymentMethods(VirtualFunctionApp):
    name = "UberAppAccessStoredPaymentMethods"
    summary = "访问用户存储的支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_payment_methods",
            "type": "array",
            "description": "用户存储的支付方式列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id无效。"}
    ]


@register_app()
class UberApp(FunctionApp):
    name_for_human = "Uber App"
    description_for_human = "App for interacting with Uber services, including ride requests, tracking, sharing, cancellations, and fare estimates."
    name_for_model = "UberApp"
    description_for_model = "Uber工具包提供了一系列工具，帮助用户通过文本接口与Uber服务进行交互，包括叫车、追踪行程、共享行程、取消行程和费用估算等功能，同时管理支付方式和查看历史行程。"
    app_classes = [
        UberAppRequestRide,
        UberAppTrackRide,
        UberAppShareRide,
        UberAppCancelRide,
        UberAppEstimateFare,
        UberAppSelectVehicle,
        UberAppManagePayment,
        UberAppViewRideHistory,
        UberAppSubmitFeedback,
        UberAppAccessStoredAddresses,
        UberAppAccessStoredPaymentMethods,
    ]


#################### TrafficAssistant ####################


class TrafficAssistantRealTimeTrafficMonitor(VirtualFunctionApp):
    name = "TrafficAssistantRealTimeTrafficMonitor"
    summary = "提供当前路况的实时数据，包括拥堵、事故和道路封闭信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "用户的当前位置，格式为“城市,街道”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "traffic_data",
            "type": "object",
            "description": "当前路况信息，包括拥堵程度、事故报告和道路封闭情况。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantAccidentReporter(VirtualFunctionApp):
    name = "TrafficAssistantAccidentReporter"
    summary = "允许用户报告交通事故并将信息共享给其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "事故发生的具体位置，格式为“城市,街道”。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "事故的简要描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "报告是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantTrafficShare(VirtualFunctionApp):
    name = "TrafficAssistantTrafficShare"
    summary = "用户可以通过社交功能分享他们的路况信息，帮助他人规划行程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "traffic_update",
            "type": "string",
            "description": "用户分享的路况信息。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantRoutePlanner(VirtualFunctionApp):
    name = "TrafficAssistantRoutePlanner"
    summary = "根据实时路况为用户提供最佳路线建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_location",
            "type": "string",
            "description": "出发地点，格式为“城市,街道”。",
            "required": True,
        },
        {
            "name": "end_location",
            "type": "string",
            "description": "目的地，格式为“城市,街道”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_route",
            "type": "object",
            "description": "推荐的最佳路线信息，包括预计时间和路况。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantUserFeedback(VirtualFunctionApp):
    name = "TrafficAssistantUserFeedback"
    summary = "用户可以对路况信息进行反馈，以提高信息的准确性和及时性。"
    parameters: List[ArgParameter] = [
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantHistoricalTrafficQuery(VirtualFunctionApp):
    name = "TrafficAssistantHistoricalTrafficQuery"
    summary = "用户可以查询过去的路况信息，帮助他们了解特定时间段的交通模式。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询的地点，格式为“城市,街道”。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "查询的日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "object",
            "description": "特定日期的历史路况信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantAccidentStatistics(VirtualFunctionApp):
    name = "TrafficAssistantAccidentStatistics"
    summary = "提供事故发生的统计数据，帮助用户了解高风险区域。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "查询的地点，格式为“城市,街道”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "该地区的事故统计数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantSocialInteraction(VirtualFunctionApp):
    name = "TrafficAssistantSocialInteraction"
    summary = "用户可以相互关注，查看朋友的路况分享。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "friends_updates",
            "type": "array",
            "description": "用户朋友的路况分享更新列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class TrafficAssistantNotificationSettings(VirtualFunctionApp):
    name = "TrafficAssistantNotificationSettings"
    summary = "用户可以设置特定路段的路况通知，以便及时获取信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "设置通知的路段，格式为“城市,街道”。",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": '通知类型，允许的值为["事故", "拥堵", "道路封闭"]。',
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "通知设置是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确或缺少参数。"}
    ]


class TrafficAssistantDataAnalysis(VirtualFunctionApp):
    name = "TrafficAssistantDataAnalysis"
    summary = "提供用户的出行数据分析，帮助他们优化出行习惯。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "用户出行数据的分析报告。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class TrafficAssistantSearchUser(VirtualFunctionApp):
    name = "TrafficAssistantSearchUser"
    summary = "根据用户的唯一标识符检索用户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "用户的详细信息，包括用户名和社交状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class TrafficAssistantRetrieveUserData(VirtualFunctionApp):
    name = "TrafficAssistantRetrieveUserData"
    summary = "访问用户存储的地址和支付方法。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_data",
            "type": "object",
            "description": "用户存储的地址和支付方法。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


@register_app()
class TrafficAssistant(FunctionApp):
    name_for_human = "Traffic Assistant"
    description_for_human = "A app for real-time traffic monitoring, accident reporting, and social sharing to help users avoid congestion and dangerous routes."
    name_for_model = "TrafficAssistant"
    description_for_model = "TrafficAssistant 是一款提供实时路况监测、事故报告和社交分享功能的工具包，帮助用户规避拥堵和危险路段，优化出行体验。"
    app_classes = [
        TrafficAssistantRealTimeTrafficMonitor,
        TrafficAssistantAccidentReporter,
        TrafficAssistantTrafficShare,
        TrafficAssistantRoutePlanner,
        TrafficAssistantUserFeedback,
        TrafficAssistantHistoricalTrafficQuery,
        TrafficAssistantAccidentStatistics,
        TrafficAssistantSocialInteraction,
        TrafficAssistantNotificationSettings,
        TrafficAssistantDataAnalysis,
        TrafficAssistantSearchUser,
        TrafficAssistantRetrieveUserData,
    ]


#################### FeiChangZhun ####################


class FeiChangZhunQueryFlightInfo(VirtualFunctionApp):
    name = "FeiChangZhunQueryFlightInfo"
    summary = "获取特定航班的详细信息，包括起降时间、航班状态等。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，格式为字母和数字组合，例如'CA123'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flight_info",
            "type": "object",
            "description": "航班的详细信息，包括起飞时间、到达时间、状态等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "航班号无效，无法找到相关航班信息。",
        }
    ]


class FeiChangZhunRealTimeStatusUpdate(VirtualFunctionApp):
    name = "FeiChangZhunRealTimeStatusUpdate"
    summary = "提供航班的实时动态更新，包括延误、取消等信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，格式为字母和数字组合，例如'CA123'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status_update",
            "type": "object",
            "description": "航班的最新状态更新，包括状态、延误时间等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "航班号无效，无法找到相关航班状态。",
        }
    ]


class FeiChangZhunAirportNavigation(VirtualFunctionApp):
    name = "FeiChangZhunAirportNavigation"
    summary = "获取机场的地图和导航信息，帮助找到登机口、餐饮等服务设施。"
    parameters: List[ArgParameter] = [
        {
            "name": "airport_code",
            "type": "string",
            "description": "机场代码，格式为三字母代码，例如'PEK'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "navigation_info",
            "type": "object",
            "description": "机场的导航信息，包括地图和服务设施位置。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "机场代码无效，无法找到相关导航信息。",
        }
    ]


class FeiChangZhunHistoricalFlightQuery(VirtualFunctionApp):
    name = "FeiChangZhunHistoricalFlightQuery"
    summary = "查询过去的航班记录，以便了解航班的历史表现。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，格式为字母和数字组合，例如'CA123'。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "查询的日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "object",
            "description": "航班的历史数据，包括起降时间、状态等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "航班号或日期无效，无法找到相关历史航班记录。",
        }
    ]


class FeiChangZhunFlightReminderSetup(VirtualFunctionApp):
    name = "FeiChangZhunFlightReminderSetup"
    summary = "设置航班提醒，以便在航班状态发生变化时及时通知。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，格式为字母和数字组合，例如'CA123'。",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "提醒时间，格式为'YYYY-MM-DD HH:MM'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "设置提醒是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "提醒时间不合理，无法设置提醒。",
        }
    ]


class FeiChangZhunMultiAirportQuery(VirtualFunctionApp):
    name = "FeiChangZhunMultiAirportQuery"
    summary = "允许用户同时查询多个机场的航班信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "airport_codes",
            "type": "array",
            "description": "机场代码数组，例如['PEK', 'SHA']。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flights_info",
            "type": "array",
            "description": "各个机场的航班信息数组。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiChangZhunAirlineInfo(VirtualFunctionApp):
    name = "FeiChangZhunAirlineInfo"
    summary = "提供有关特定航空公司的信息，包括服务、航班频率等。"
    parameters: List[ArgParameter] = [
        {
            "name": "airline_code",
            "type": "string",
            "description": "航空公司代码，例如'CA'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "airline_info",
            "type": "object",
            "description": "航空公司的详细信息，包括服务和航班频率等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "航空公司代码无效，无法找到相关航空公司信息。",
        }
    ]


class FeiChangZhunUserReviewsAndRatings(VirtualFunctionApp):
    name = "FeiChangZhunUserReviewsAndRatings"
    summary = "查看其他乘客对航班和航空公司的评论和评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_number",
            "type": "string",
            "description": "航班号，格式为字母和数字组合，例如'CA123'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "关于航班的用户评论和评分数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "航班号无效，无法找到相关评论和评分。",
        }
    ]


class FeiChangZhunFAQ(VirtualFunctionApp):
    name = "FeiChangZhunFAQ"
    summary = "提供常见问题的解答，帮助用户快速找到所需信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "faq_list", "type": "array", "description": "常见问题及其解答的列表。"}
    ]
    exceptions: List[ArgException] = []


class FeiChangZhunFlightShareFunction(VirtualFunctionApp):
    name = "FeiChangZhunFlightShareFunction"
    summary = "允许用户将航班信息分享给朋友或家人。"
    parameters: List[ArgParameter] = [
        {
            "name": "flight_info",
            "type": "object",
            "description": "航班的详细信息，包括航班号、状态等字段。",
            "required": True,
        },
        {
            "name": "contact",
            "type": "string",
            "description": "接收分享的联系人信息，例如电子邮件或电话号码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "分享的联系人信息无效，无法完成分享。",
        }
    ]


@register_app()
class FeiChangZhun(FunctionApp):
    name_for_human = "飞常准"
    description_for_human = "一个专注于航班信息查询和实时航班动态追踪的工具包，旨在帮助用户查看航班时刻、延误信息及机场导航，特别适合长途旅行者使用。"
    name_for_model = "FeiChangZhun"
    description_for_model = "飞常准工具包提供航班信息查询、实时状态更新、机场导航和历史航班记录查询等功能，帮助长途旅行者获取准确的航班信息和动态更新，确保顺利出行。"
    app_classes = [
        FeiChangZhunQueryFlightInfo,
        FeiChangZhunRealTimeStatusUpdate,
        FeiChangZhunAirportNavigation,
        FeiChangZhunHistoricalFlightQuery,
        FeiChangZhunFlightReminderSetup,
        FeiChangZhunMultiAirportQuery,
        FeiChangZhunAirlineInfo,
        FeiChangZhunUserReviewsAndRatings,
        FeiChangZhunFAQ,
        FeiChangZhunFlightShareFunction,
    ]


#################### NetEaseCloudMusic ####################


class NetEaseCloudMusicSearchMusic(VirtualFunctionApp):
    name = "NetEaseCloudMusicSearchMusic"
    summary = "Allow users to search for music tracks using keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "music_list",
            "type": "array",
            "description": "A list of music tracks that match the search keyword.",
        }
    ]
    exceptions: List[ArgException] = []


class NetEaseCloudMusicPlaylistManagement(VirtualFunctionApp):
    name = "NetEaseCloudMusicPlaylistManagement"
    summary = "Allow users to create, update, and delete playlists."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action type, can be 'create', 'update', or 'delete'.",
            "required": True,
        },
        {
            "name": "playlist_name",
            "type": "string",
            "description": "The name of the playlist.",
            "required": True,
        },
        {
            "name": "track_ids",
            "type": "array",
            "description": "A list of track IDs to add or update, only required for 'create' or 'update'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action type is not one of ['create', 'update', 'delete'].",
        }
    ]


class NetEaseCloudMusicCommentInteraction(VirtualFunctionApp):
    name = "NetEaseCloudMusicCommentInteraction"
    summary = "Allow users to comment on tracks and view comments."
    parameters: List[ArgParameter] = [
        {
            "name": "music_id",
            "type": "string",
            "description": "The unique identifier of the music track.",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "The content of the user's comment, only required when adding a comment.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "A list of comments for the music track.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The music track does not exist."}
    ]


class NetEaseCloudMusicUploadMusic(VirtualFunctionApp):
    name = "NetEaseCloudMusicUploadMusic"
    summary = "Allow users to upload their own music works."
    parameters: List[ArgParameter] = [
        {
            "name": "music_file_path",
            "type": "string",
            "description": "The path of the local music file.",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "The title of the music work.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "music_id",
            "type": "string",
            "description": "The unique identifier of the uploaded music work.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The file path is invalid."}
    ]


class NetEaseCloudMusicPersonalizedRecommendation(VirtualFunctionApp):
    name = "NetEaseCloudMusicPersonalizedRecommendation"
    summary = "Recommend new music based on the user's listening history."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_tracks",
            "type": "array",
            "description": "A list of music tracks recommended based on the user's history.",
        }
    ]
    exceptions: List[ArgException] = []


class NetEaseCloudMusicUserProfileManagement(VirtualFunctionApp):
    name = "NetEaseCloudMusicUserProfileManagement"
    summary = "Allow users to view and update their profile."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action type, can be 'view' or 'update'.",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "The data to update the user profile, only required for 'update'.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "The user's profile information.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The action type is not one of ['view', 'update'].",
        }
    ]


class NetEaseCloudMusicFavoriteManagement(VirtualFunctionApp):
    name = "NetEaseCloudMusicFavoriteManagement"
    summary = "Allow users to favorite tracks and artists."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action type, can be 'add' or 'remove'.",
            "required": True,
        },
        {
            "name": "track_id",
            "type": "string",
            "description": "The unique identifier of the track to favorite or remove.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The track does not exist."}
    ]


class NetEaseCloudMusicShareMusic(VirtualFunctionApp):
    name = "NetEaseCloudMusicShareMusic"
    summary = "Allow users to share tracks to social platforms."
    parameters: List[ArgParameter] = [
        {
            "name": "music_id",
            "type": "string",
            "description": "The unique identifier of the music track to share.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The name of the platform to share to, e.g., 'Twitter' or 'Facebook'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the share operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The music track does not exist."}
    ]


class NetEaseCloudMusicDownloadMusic(VirtualFunctionApp):
    name = "NetEaseCloudMusicDownloadMusic"
    summary = "Allow users to download tracks to local devices."
    parameters: List[ArgParameter] = [
        {
            "name": "music_id",
            "type": "string",
            "description": "The unique identifier of the music track to download.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "The download link for the music track.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The music track does not exist."}
    ]


class NetEaseCloudMusicViewHistory(VirtualFunctionApp):
    name = "NetEaseCloudMusicViewHistory"
    summary = "Allow users to view recently played tracks."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history",
            "type": "array",
            "description": "A list of recently played tracks by the user.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class NetEaseCloudMusic(FunctionApp):
    name_for_human = "NetEase Cloud Music"
    description_for_human = (
        "App for discovering music, sharing works, and interacting with others."
    )
    name_for_model = "NetEaseCloudMusic"
    description_for_model = "NetEase Cloud Music app provides functionalities such as music search, playlist management, comment interaction, music upload, and personalized recommendations, aimed at helping users discover music, share their works, and interact with others."
    app_classes = [
        NetEaseCloudMusicSearchMusic,
        NetEaseCloudMusicPlaylistManagement,
        NetEaseCloudMusicCommentInteraction,
        NetEaseCloudMusicUploadMusic,
        NetEaseCloudMusicPersonalizedRecommendation,
        NetEaseCloudMusicUserProfileManagement,
        NetEaseCloudMusicFavoriteManagement,
        NetEaseCloudMusicShareMusic,
        NetEaseCloudMusicDownloadMusic,
        NetEaseCloudMusicViewHistory,
    ]


#################### QQMusic ####################


class QQMusicPersonalizedRecommendation(VirtualFunctionApp):
    name = "QQMusicPersonalizedRecommendation"
    summary = "提供个性化的音乐推荐列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "recommendations", "type": "array", "description": "推荐的歌曲列表。"}
    ]
    exceptions: List[ArgException] = []


class QQMusicOnlineListening(VirtualFunctionApp):
    name = "QQMusicOnlineListening"
    summary = "允许用户在线流式播放音乐。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "stream_url", "type": "string", "description": "音乐流的URL。"}
    ]
    exceptions: List[ArgException] = []


class QQMusicPlaylistManagement(VirtualFunctionApp):
    name = "QQMusicPlaylistManagement"
    summary = "管理用户的歌单，包括创建、更新和删除。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作（创建、更新、删除）。",
            "required": True,
        },
        {
            "name": "playlist_data",
            "type": "object",
            "description": "歌单的详细信息，包括名称和歌曲列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "如果尝试删除不存在的歌单。"}
    ]


class QQMusicDownloadMusic(VirtualFunctionApp):
    name = "QQMusicDownloadMusic"
    summary = "允许用户下载歌曲以离线收听。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "download_status", "type": "boolean", "description": "下载是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果song_id无效。"}
    ]


class QQMusicSocialSharing(VirtualFunctionApp):
    name = "QQMusicSocialSharing"
    summary = "允许用户将歌曲或歌单分享至社交媒体。"
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "要分享的内容的唯一标识符（歌曲或歌单）。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台（如Facebook, Twitter）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "share_status", "type": "boolean", "description": "分享是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果content_id或platform无效。",
        }
    ]


class QQMusicSearchMusic(VirtualFunctionApp):
    name = "QQMusicSearchMusic"
    summary = "允许用户搜索歌曲、专辑或艺术家。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "search_results", "type": "array", "description": "搜索结果列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果query无效。"}
    ]


class QQMusicFavoriteMusic(VirtualFunctionApp):
    name = "QQMusicFavoriteMusic"
    summary = "允许用户收藏歌曲或专辑。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "favorite_status", "type": "boolean", "description": "收藏是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果song_id无效。"}
    ]


class QQMusicPlaybackHistory(VirtualFunctionApp):
    name = "QQMusicPlaybackHistory"
    summary = "获取用户的播放历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "history", "type": "array", "description": "用户的播放历史列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id无效。"}
    ]


class QQMusicSetReminder(VirtualFunctionApp):
    name = "QQMusicSetReminder"
    summary = "设置提醒以获取新歌或专辑的推送。"
    parameters: List[ArgParameter] = [
        {
            "name": "reminder_data",
            "type": "object",
            "description": "包含提醒信息的对象，包括歌曲或专辑ID和提醒时间。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reminder_status",
            "type": "boolean",
            "description": "提醒设置是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果reminder_data格式不正确。",
        }
    ]


class QQMusicFollowUser(VirtualFunctionApp):
    name = "QQMusicFollowUser"
    summary = "允许用户关注其他用户或创作者。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "被关注用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "follow_status", "type": "boolean", "description": "关注是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id无效。"}
    ]


@register_app()
class QQMusic(FunctionApp):
    name_for_human = "QQ音乐"
    description_for_human = (
        "一个增强音乐体验的工具包，提供个性化推荐、在线收听、歌单管理等功能。"
    )
    name_for_model = "QQMusic"
    description_for_model = "QQ音乐工具包提供个性化音乐推荐、在线收听、歌单管理、下载功能和社交分享等功能，旨在增强用户的音乐体验，同时确保用户的隐私和版权得到保护。"
    app_classes = [
        QQMusicPersonalizedRecommendation,
        QQMusicOnlineListening,
        QQMusicPlaylistManagement,
        QQMusicDownloadMusic,
        QQMusicSocialSharing,
        QQMusicSearchMusic,
        QQMusicFavoriteMusic,
        QQMusicPlaybackHistory,
        QQMusicSetReminder,
        QQMusicFollowUser,
    ]


#################### Ximalaya ####################


class XimalayaSearchAudioContent(VirtualFunctionApp):
    name = "XimalayaSearchAudioContent"
    summary = "搜索音频内容的工具，根据关键字返回相关的音频列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_query",
            "type": "string",
            "description": "要搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audio_list",
            "type": "array",
            "description": "匹配的音频内容列表，每个内容包含音频ID和标题。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当搜索参数格式不正确时。"}
    ]


class XimalayaPlayAudio(VirtualFunctionApp):
    name = "XimalayaPlayAudio"
    summary = "播放指定音频内容的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "audio_id",
            "type": "string",
            "description": "要播放的音频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "播放操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的音频ID不存在时。"}
    ]


class XimalayaCreatePersonalRadio(VirtualFunctionApp):
    name = "XimalayaCreatePersonalRadio"
    summary = "创建个人电台的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "radio_name",
            "type": "string",
            "description": "电台的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "radio_id",
            "type": "string",
            "description": "创建的电台的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当电台名称已存在时。"}
    ]


class XimalayaFollowCreator(VirtualFunctionApp):
    name = "XimalayaFollowCreator"
    summary = "关注创作者的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "creator_id",
            "type": "string",
            "description": "要关注的创作者的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "关注操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的创作者ID不存在时。"}
    ]


class XimalayaCommentOnAudio(VirtualFunctionApp):
    name = "XimalayaCommentOnAudio"
    summary = "对音频内容发表评论的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "audio_id",
            "type": "string",
            "description": "要评论的音频的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment_text",
            "type": "string",
            "description": "评论的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评论内容为空或格式不正确时。",
        }
    ]


class XimalayaGetRecommendedAudio(VirtualFunctionApp):
    name = "XimalayaGetRecommendedAudio"
    summary = "获取推荐音频内容的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_audio_list",
            "type": "array",
            "description": "推荐的音频内容列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID不存在时。"}
    ]


class XimalayaGetListeningHistory(VirtualFunctionApp):
    name = "XimalayaGetListeningHistory"
    summary = "获取用户的播放历史记录的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history_list",
            "type": "array",
            "description": "用户的历史播放记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID不存在时。"}
    ]


class XimalayaManageRadioSettings(VirtualFunctionApp):
    name = "XimalayaManageRadioSettings"
    summary = "管理个人电台设置的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "radio_id",
            "type": "string",
            "description": "要管理的电台的唯一标识符。",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "包含电台设置的对象，字段包括`name`和`description`。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "设置管理操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当电台ID不存在时。"}
    ]


class XimalayaGetAudioDetails(VirtualFunctionApp):
    name = "XimalayaGetAudioDetails"
    summary = "获取音频内容详细信息的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "audio_id",
            "type": "string",
            "description": "要获取详细信息的音频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audio_details",
            "type": "object",
            "description": "包含音频详细信息的对象，字段包括`title`、`description`和`duration`。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当音频ID不存在时。"}
    ]


class XimalayaShareAudioLink(VirtualFunctionApp):
    name = "XimalayaShareAudioLink"
    summary = "分享音频内容链接的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "audio_id",
            "type": "string",
            "description": "要分享的音频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "生成的分享链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当音频ID不存在时。"}
    ]


@register_app()
class Ximalaya(FunctionApp):
    name_for_human = "喜马拉雅"
    description_for_human = (
        "一个音频内容互动工具包，提供搜索、播放、创建电台、关注创作者和评论等功能。"
    )
    name_for_model = "Ximalaya"
    description_for_model = "Ximalaya工具包使用户能够搜索、播放音频内容，创建个人电台，关注创作者，发表评论，并获取推荐音频内容，旨在提升用户与音频内容的互动体验。"
    app_classes = [
        XimalayaSearchAudioContent,
        XimalayaPlayAudio,
        XimalayaCreatePersonalRadio,
        XimalayaFollowCreator,
        XimalayaCommentOnAudio,
        XimalayaGetRecommendedAudio,
        XimalayaGetListeningHistory,
        XimalayaManageRadioSettings,
        XimalayaGetAudioDetails,
        XimalayaShareAudioLink,
    ]


#################### QingTingFM ####################


class QingTingFMSearchPrograms(VirtualFunctionApp):
    name = "QingTingFMSearchPrograms"
    summary = "根据用户提供的关键词搜索电台节目。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "program_ids",
            "type": "array",
            "description": "匹配的电台节目的唯一标识符数组。",
        },
        {
            "name": "program_titles",
            "type": "array",
            "description": "匹配的电台节目的标题数组。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或参数缺失时触发。",
        }
    ]


class QingTingFMSubscribeChannel(VirtualFunctionApp):
    name = "QingTingFMSubscribeChannel"
    summary = "订阅指定的电台频道。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "要订阅的电台频道的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "订阅操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的频道ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当频道ID格式不正确时触发。",
        },
    ]


class QingTingFMDownloadProgram(VirtualFunctionApp):
    name = "QingTingFMDownloadProgram"
    summary = "下载指定的电台节目以便离线收听。"
    parameters: List[ArgParameter] = [
        {
            "name": "program_id",
            "type": "string",
            "description": "要下载的电台节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "下载操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的节目ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当节目ID格式不正确时触发。",
        },
    ]


class QingTingFMManageSubscriptions(VirtualFunctionApp):
    name = "QingTingFMManageSubscriptions"
    summary = "获取用户的订阅列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "subscribed_channels",
            "type": "array",
            "description": "用户当前订阅的电台频道的唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = []


class QingTingFMGetProgramDetails(VirtualFunctionApp):
    name = "QingTingFMGetProgramDetails"
    summary = "获取指定电台节目的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "program_id",
            "type": "string",
            "description": "要查看详细信息的电台节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "program_title", "type": "string", "description": "电台节目的标题。"},
        {
            "name": "program_description",
            "type": "string",
            "description": "电台节目的描述。",
        },
        {
            "name": "broadcast_time",
            "type": "string",
            "description": "电台节目的播出时间。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的节目ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当节目ID格式不正确时触发。",
        },
    ]


class QingTingFMRemoveSubscription(VirtualFunctionApp):
    name = "QingTingFMRemoveSubscription"
    summary = "取消订阅指定的电台频道。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_id",
            "type": "string",
            "description": "要取消订阅的电台频道的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "取消订阅操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的频道ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当频道ID格式不正确时触发。",
        },
    ]


class QingTingFMFavoriteProgram(VirtualFunctionApp):
    name = "QingTingFMFavoriteProgram"
    summary = "将指定电台节目添加到收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "program_id",
            "type": "string",
            "description": "要收藏的电台节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的节目ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当节目ID格式不正确时触发。",
        },
    ]


class QingTingFMShareProgram(VirtualFunctionApp):
    name = "QingTingFMShareProgram"
    summary = "分享指定电台节目的链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "program_id",
            "type": "string",
            "description": "要分享的电台节目的唯一标识符。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "接收分享链接的用户的联系方式。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的节目ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当节目ID格式不正确时触发。",
        },
    ]


class QingTingFMGetListeningHistory(VirtualFunctionApp):
    name = "QingTingFMGetListeningHistory"
    summary = "获取用户的收听历史。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "listening_history",
            "type": "array",
            "description": "用户的收听历史数组，包括节目ID和标题。",
        }
    ]
    exceptions: List[ArgException] = []


class QingTingFMClearListeningHistory(VirtualFunctionApp):
    name = "QingTingFMClearListeningHistory"
    summary = "清除用户的收听历史。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "清除操作是否成功。"}
    ]
    exceptions: List[ArgException] = []


@register_app()
class QingTingFM(FunctionApp):
    name_for_human = "蜻蜓FM工具包"
    description_for_human = "蜻蜓FM工具包提供丰富的电台节目和有声内容，允许用户搜索、订阅和管理电台频道，支持离线收听和个性化推荐，旨在增强用户的音频内容体验。"
    name_for_model = "QingTingFM"
    description_for_model = "蜻蜓FM工具包提供丰富的电台节目和有声内容，允许用户搜索、订阅和管理电台频道，支持离线收听和个性化推荐，旨在增强用户的音频内容体验。"
    app_classes = [
        QingTingFMSearchPrograms,
        QingTingFMSubscribeChannel,
        QingTingFMDownloadProgram,
        QingTingFMManageSubscriptions,
        QingTingFMGetProgramDetails,
        QingTingFMRemoveSubscription,
        QingTingFMFavoriteProgram,
        QingTingFMShareProgram,
        QingTingFMGetListeningHistory,
        QingTingFMClearListeningHistory,
    ]


#################### KugouMusic ####################


class KugouMusicSearchMusic(VirtualFunctionApp):
    name = "KugouMusicSearchMusic"
    summary = "根据关键字搜索音乐并返回匹配的歌曲列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的歌曲或艺术家的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "songs",
            "type": "array",
            "description": "匹配的歌曲列表，每个歌曲包含名称和艺术家。",
        }
    ]
    exceptions: List[ArgException] = []


class KugouMusicPlayMusic(VirtualFunctionApp):
    name = "KugouMusicPlayMusic"
    summary = "播放指定歌曲。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "要播放的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "播放操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法找到歌曲。"}
    ]


class KugouMusicShowLyrics(VirtualFunctionApp):
    name = "KugouMusicShowLyrics"
    summary = "显示当前播放歌曲的歌词。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "当前播放的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "lyrics", "type": "string", "description": "当前歌曲的歌词。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法找到歌词。"}
    ]


class KugouMusicWatchMV(VirtualFunctionApp):
    name = "KugouMusicWatchMV"
    summary = "播放指定歌曲的MV。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "要观看的MV对应的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "MV播放操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法找到MV。"}
    ]


class KugouMusicPersonalizeRecommendation(VirtualFunctionApp):
    name = "KugouMusicPersonalizeRecommendation"
    summary = "根据用户的听歌历史推荐歌曲。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "recommendations", "type": "array", "description": "推荐的歌曲列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "user_id无效，无法找到推荐。"}
    ]


class KugouMusicDownloadMusic(VirtualFunctionApp):
    name = "KugouMusicDownloadMusic"
    summary = "下载指定歌曲以便离线收听。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "要下载的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "下载操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法下载歌曲。"}
    ]


class KugouMusicAdjustSoundEffect(VirtualFunctionApp):
    name = "KugouMusicAdjustSoundEffect"
    summary = "调整播放的音效设置。"
    parameters: List[ArgParameter] = [
        {
            "name": "effect_type",
            "type": "string",
            "description": "要调整的音效类型，允许的值为['bass', 'treble', 'volume']。",
            "required": True,
        },
        {
            "name": "value",
            "type": "number",
            "description": "要设置的音效值，范围为0到100。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "音效调整操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "effect_type不在允许的值中。",
        }
    ]


class KugouMusicCreatePlaylist(VirtualFunctionApp):
    name = "KugouMusicCreatePlaylist"
    summary = "创建新的播放列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_name",
            "type": "string",
            "description": "播放列表的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "创建的播放列表的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "playlist_name为空。"}
    ]


class KugouMusicAddToFavorites(VirtualFunctionApp):
    name = "KugouMusicAddToFavorites"
    summary = "将指定歌曲添加到收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "要添加的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "添加操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法添加到收藏夹。"}
    ]


class KugouMusicShareMusic(VirtualFunctionApp):
    name = "KugouMusicShareMusic"
    summary = "分享指定歌曲的链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "song_id",
            "type": "string",
            "description": "要分享的歌曲的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "分享链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "song_id无效，无法生成分享链接。"}
    ]


class KugouMusicViewSearchHistory(VirtualFunctionApp):
    name = "KugouMusicViewSearchHistory"
    summary = "查看用户的搜索历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_history",
            "type": "array",
            "description": "用户的搜索历史记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "user_id无效，无法找到搜索历史。"}
    ]


@register_app()
class KugouMusic(FunctionApp):
    name_for_human = "酷狗音乐"
    description_for_human = "酷狗音乐工具包集成了音乐播放、歌词显示、MV观看等功能，支持用户自定义推荐和个性化电台，提供离线下载和音效调节选项，旨在为音乐爱好者提供全面的音乐体验。"
    name_for_model = "KugouMusic"
    description_for_model = "酷狗音乐工具包集成了音乐播放、歌词显示、MV观看等功能，支持用户自定义推荐和个性化电台，提供离线下载和音效调节选项，旨在为音乐爱好者提供全面的音乐体验。"
    app_classes = [
        KugouMusicSearchMusic,
        KugouMusicPlayMusic,
        KugouMusicShowLyrics,
        KugouMusicWatchMV,
        KugouMusicPersonalizeRecommendation,
        KugouMusicDownloadMusic,
        KugouMusicAdjustSoundEffect,
        KugouMusicCreatePlaylist,
        KugouMusicAddToFavorites,
        KugouMusicShareMusic,
        KugouMusicViewSearchHistory,
    ]


#################### Kuaishou ####################


class KuaishouCreateShortVideo(VirtualFunctionApp):
    name = "KuaishouCreateShortVideo"
    summary = "创建并上传短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_file",
            "type": "string",
            "description": "短视频文件的本地路径。",
            "required": True,
        },
        {
            "name": "cover_image",
            "type": "string",
            "description": "短视频封面图的本地路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频创建是否成功。"},
        {
            "name": "video_id",
            "type": "string",
            "description": "成功上传后生成的短视频唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果上传文件格式不正确。"}
    ]


class KuaishouShareShortVideo(VirtualFunctionApp):
    name = "KuaishouShareShortVideo"
    summary = "分享已创建的短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "短视频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频分享是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class KuaishouSearchShortVideo(VirtualFunctionApp):
    name = "KuaishouSearchShortVideo"
    summary = "根据关键字搜索短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_ids",
            "type": "array",
            "description": "符合搜索条件的短视频唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果关键字格式不正确。"}
    ]


class KuaishouCommentOnVideo(VirtualFunctionApp):
    name = "KuaishouCommentOnVideo"
    summary = "对短视频进行评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "短视频的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示评论是否成功添加。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class KuaishouDeleteShortVideo(VirtualFunctionApp):
    name = "KuaishouDeleteShortVideo"
    summary = "删除已上传的短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "短视频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频删除是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class KuaishouFollowUser(VirtualFunctionApp):
    name = "KuaishouFollowUser"
    summary = "关注其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "要关注的用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示关注操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无效。"}
    ]


class KuaishouViewProfile(VirtualFunctionApp):
    name = "KuaishouViewProfile"
    summary = "查看用户的个人资料和上传的视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "用户的个人资料，包括用户名、上传的视频列表等。",
            "fields": [
                {"name": "username", "type": "string", "description": "用户的用户名。"},
                {
                    "name": "video_ids",
                    "type": "array",
                    "description": "用户上传的视频唯一标识符数组。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无效。"}
    ]


class KuaishouGetTrendingVideos(VirtualFunctionApp):
    name = "KuaishouGetTrendingVideos"
    summary = "获取平台上的热门视频推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大热门视频数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_video_ids",
            "type": "array",
            "description": "热门视频的唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果最大结果数量不合理。"}
    ]


class KuaishouDownloadShortVideo(VirtualFunctionApp):
    name = "KuaishouDownloadShortVideo"
    summary = "下载短视频到本地。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "短视频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频下载是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class KuaishouUploadCoverImage(VirtualFunctionApp):
    name = "KuaishouUploadCoverImage"
    summary = "上传短视频的封面图。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "短视频的唯一标识符。",
            "required": True,
        },
        {
            "name": "cover_image",
            "type": "string",
            "description": "封面图的本地路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示封面图上传是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


@register_app()
class Kuaishou(FunctionApp):
    name_for_human = "Kuaishou App"
    description_for_human = (
        "App for creating, sharing, and managing short video content on Kuaishou."
    )
    name_for_model = "Kuaishou"
    description_for_model = "Kuaishou工具包用于创建、分享和管理短视频内容，支持用户互动和视频搜索，旨在提升用户在快手平台上的体验。"
    app_classes = [
        KuaishouCreateShortVideo,
        KuaishouShareShortVideo,
        KuaishouSearchShortVideo,
        KuaishouCommentOnVideo,
        KuaishouDeleteShortVideo,
        KuaishouFollowUser,
        KuaishouViewProfile,
        KuaishouGetTrendingVideos,
        KuaishouDownloadShortVideo,
        KuaishouUploadCoverImage,
    ]


#################### AiQiYi ####################


class AiQiYiSearchContent(VirtualFunctionApp):
    name = "AiQiYiSearchContent"
    summary = "搜索电影、电视剧和综艺节目的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content_list",
            "type": "array",
            "description": "包含搜索结果的内容列表，每个内容包含标题、类型和唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果query格式不正确。"}
    ]


class AiQiYiPlayContent(VirtualFunctionApp):
    name = "AiQiYiPlayContent"
    summary = "播放选定的内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "要播放的内容的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "play_status",
            "type": "boolean",
            "description": "播放是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果content_id不存在。"}
    ]


class AiQiYiManageWatchlist(VirtualFunctionApp):
    name = "AiQiYiManageWatchlist"
    summary = "管理用户的观看列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，可以是“add”、“remove”或“view”。",
            "required": True,
        },
        {
            "name": "content_id",
            "type": "string",
            "description": "要添加或删除的内容的唯一标识符。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "如果尝试删除不存在的内容。"}
    ]


class AiQiYiSubscribeMembership(VirtualFunctionApp):
    name = "AiQiYiSubscribeMembership"
    summary = "订阅会员服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "membership_type",
            "type": "string",
            "description": "会员类型，可以是“monthly”或“annual”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "subscription_status",
            "type": "boolean",
            "description": "订阅是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果membership_type不正确。",
        }
    ]


class AiQiYiDownloadContent(VirtualFunctionApp):
    name = "AiQiYiDownloadContent"
    summary = "下载内容以供离线观看。"
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "要下载的内容的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_status",
            "type": "boolean",
            "description": "下载是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果content_id不存在。"}
    ]


class AiQiYiGetRecommendations(VirtualFunctionApp):
    name = "AiQiYiGetRecommendations"
    summary = "提供个性化推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "个性化推荐的内容列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果user_id不存在。"}
    ]


class AiQiYiCommentOnContent(VirtualFunctionApp):
    name = "AiQiYiCommentOnContent"
    summary = "允许用户对内容发表评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "content_id",
            "type": "string",
            "description": "要评论的内容的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comment_status",
            "type": "boolean",
            "description": "评论是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果content_id不存在。"}
    ]


class AiQiYiViewTrendingContent(VirtualFunctionApp):
    name = "AiQiYiViewTrendingContent"
    summary = "查看热门内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "trending_content", "type": "array", "description": "热门内容的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果max_results不正确。"}
    ]


class AiQiYiManageAccount(VirtualFunctionApp):
    name = "AiQiYiManageAccount"
    summary = "管理用户的账户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，可以是“view”、“update”。",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "用户信息对象，包含字段如“username”、“email”等。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "account_status",
            "type": "boolean",
            "description": "账户操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_info格式不正确。"}
    ]


class AiQiYiViewWatchHistory(VirtualFunctionApp):
    name = "AiQiYiViewWatchHistory"
    summary = "查看用户的观看历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "watch_history",
            "type": "array",
            "description": "用户观看历史的内容列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果max_results不正确。"}
    ]


@register_app()
class AiQiYi(FunctionApp):
    name_for_human = "爱奇艺工具包"
    description_for_human = "提供在线电影、电视剧和综艺节目的流媒体播放服务，支持会员订阅、离线下载和个性化推荐。"
    name_for_model = "AiQiYi"
    description_for_model = "爱奇艺工具包提供了搜索、播放、管理观看列表、订阅会员、下载内容等功能，旨在为用户提供全面的流媒体体验，并确保用户的隐私和账户安全。"
    app_classes = [
        AiQiYiSearchContent,
        AiQiYiPlayContent,
        AiQiYiManageWatchlist,
        AiQiYiSubscribeMembership,
        AiQiYiDownloadContent,
        AiQiYiGetRecommendations,
        AiQiYiCommentOnContent,
        AiQiYiViewTrendingContent,
        AiQiYiManageAccount,
        AiQiYiViewWatchHistory,
    ]


#################### Bilibili ####################


class BilibiliSearchVideo(VirtualFunctionApp):
    name = "BilibiliSearchVideo"
    summary = "允许用户根据关键词搜索视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "可选，指定返回的最大搜索结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_ids",
            "type": "array",
            "description": "返回匹配搜索条件的视频ID列表。",
        }
    ]
    exceptions: List[ArgException] = []


class BilibiliUploadVideo(VirtualFunctionApp):
    name = "BilibiliUploadVideo"
    summary = "允许用户上传新视频并添加相关信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_path",
            "type": "string",
            "description": "视频文件的本地路径。",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "视频标题。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "视频描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频上传是否成功。"},
        {
            "name": "video_id",
            "type": "string",
            "description": "返回上传后视频的唯一ID。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果视频文件格式不正确。"}
    ]


class BilibiliPlayVideo(VirtualFunctionApp):
    name = "BilibiliPlayVideo"
    summary = "允许用户播放指定视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要播放的视频的唯一ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示视频播放请求是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class BilibiliAddComment(VirtualFunctionApp):
    name = "BilibiliAddComment"
    summary = "允许用户在视频下方添加评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要评论的视频的唯一ID。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示评论是否成功添加。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果评论内容为空。"}
    ]


class BilibiliViewUserProfile(VirtualFunctionApp):
    name = "BilibiliViewUserProfile"
    summary = "允许用户查看其他用户的个人资料和视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "要查看的用户的唯一ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "返回用户的个人资料信息，包括用户名、视频数量等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无效。"}
    ]


class BilibiliFavoriteVideo(VirtualFunctionApp):
    name = "BilibiliFavoriteVideo"
    summary = "允许用户将视频添加到个人收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要收藏的视频的唯一ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频是否成功收藏。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class BilibiliShareVideo(VirtualFunctionApp):
    name = "BilibiliShareVideo"
    summary = "允许用户分享视频链接到其他社交平台。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要分享的视频的唯一ID。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台，支持的值包括 'Twitter', 'Facebook', 'WeChat'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示视频是否成功分享。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效或平台不支持。"}
    ]


class BilibiliViewComments(VirtualFunctionApp):
    name = "BilibiliViewComments"
    summary = "允许用户查看特定视频的所有评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要查看评论的视频的唯一ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "comments", "type": "array", "description": "返回视频的所有评论列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果视频ID无效。"}
    ]


class BilibiliViewVideoRankings(VirtualFunctionApp):
    name = "BilibiliViewVideoRankings"
    summary = "允许用户查看当前热门视频的排行榜。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "可选，指定要查看的类别，支持的值包括 '动画', '游戏', '综艺'。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_ids",
            "type": "array",
            "description": "返回当前热门视频的ID列表。",
        }
    ]
    exceptions: List[ArgException] = []


class BilibiliSendMessage(VirtualFunctionApp):
    name = "BilibiliSendMessage"
    summary = "允许用户向其他用户发送私信。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "接收消息的用户的唯一ID。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果接收者ID无效。"}
    ]


@register_app()
class Bilibili(FunctionApp):
    name_for_human = "Bilibili App"
    description_for_human = (
        "为Bilibili用户提供视频搜索、上传、播放、评论和用户互动等功能的工具包。"
    )
    name_for_model = "Bilibili"
    description_for_model = "该工具包为Bilibili用户提供视频搜索、上传、播放、评论和用户互动等功能，旨在增强用户在平台上的体验。"
    app_classes = [
        BilibiliSearchVideo,
        BilibiliUploadVideo,
        BilibiliPlayVideo,
        BilibiliAddComment,
        BilibiliViewUserProfile,
        BilibiliFavoriteVideo,
        BilibiliShareVideo,
        BilibiliViewComments,
        BilibiliViewVideoRankings,
        BilibiliSendMessage,
    ]


#################### DouyinShortVideo ####################


class DouyinShortVideoCreateVideo(VirtualFunctionApp):
    name = "DouyinShortVideoCreateVideo"
    summary = "创建并保存短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_title",
            "type": "string",
            "description": "视频的标题。",
            "required": True,
        },
        {
            "name": "video_length",
            "type": "integer",
            "description": "视频时长，以秒为单位，最大值为60。",
            "required": True,
        },
        {
            "name": "effects",
            "type": "array",
            "description": "应用的特效列表，允许多个特效。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "video_id", "type": "string", "description": "创建视频的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "视频时长超过最大值。"}
    ]


class DouyinShortVideoAddMusic(VirtualFunctionApp):
    name = "DouyinShortVideoAddMusic"
    summary = "为短视频添加背景音乐。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要添加音乐的视频的唯一标识符。",
            "required": True,
        },
        {
            "name": "music_id",
            "type": "string",
            "description": "选择的音乐的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "音乐添加是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "视频或音乐未找到。"}
    ]


class DouyinShortVideoApplyEffects(VirtualFunctionApp):
    name = "DouyinShortVideoApplyEffects"
    summary = "应用特效到短视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要应用特效的视频的唯一标识符。",
            "required": True,
        },
        {
            "name": "effects",
            "type": "array",
            "description": "要应用的特效列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "特效应用是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "视频未找到。"}
    ]


class DouyinShortVideoShareVideo(VirtualFunctionApp):
    name = "DouyinShortVideoShareVideo"
    summary = "将短视频分享至抖音平台。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要分享的视频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "视频分享是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "视频未找到。"}
    ]


class DouyinShortVideoFollowCreator(VirtualFunctionApp):
    name = "DouyinShortVideoFollowCreator"
    summary = "关注其他创作者。"
    parameters: List[ArgParameter] = [
        {
            "name": "creator_id",
            "type": "string",
            "description": "要关注的创作者的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "关注是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "创作者未找到。"}
    ]


class DouyinShortVideoViewTrendingVideos(VirtualFunctionApp):
    name = "DouyinShortVideoViewTrendingVideos"
    summary = "获取当前热门视频列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回热门视频的最大数量，默认值为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_videos",
            "type": "array",
            "description": "当前热门视频的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "无效的限制参数。"}
    ]


class DouyinShortVideoSearchEffects(VirtualFunctionApp):
    name = "DouyinShortVideoSearchEffects"
    summary = "根据关键词搜索特效。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索特效的关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "effects_list",
            "type": "array",
            "description": "符合关键词的特效列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "无效的关键词。"}
    ]


class DouyinShortVideoSaveDraft(VirtualFunctionApp):
    name = "DouyinShortVideoSaveDraft"
    summary = "保存未完成的视频草稿。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要保存的草稿视频的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "草稿保存是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "视频未找到。"}
    ]


class DouyinShortVideoCommentOnVideo(VirtualFunctionApp):
    name = "DouyinShortVideoCommentOnVideo"
    summary = "对分享的视频进行评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "video_id",
            "type": "string",
            "description": "要评论的视频的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment_text",
            "type": "string",
            "description": "评论内容，最大长度为200字符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "视频未找到。"}
    ]


class DouyinShortVideoViewProfile(VirtualFunctionApp):
    name = "DouyinShortVideoViewProfile"
    summary = "查看用户的个人资料。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "要查看的用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "用户资料对象，包括字段如username、followers_count、following_count等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class DouyinShortVideoSearchVideo(VirtualFunctionApp):
    name = "DouyinShortVideoSearchVideo"
    summary = "根据标题或关键词搜索视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用于搜索视频的关键词或标题。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_list",
            "type": "array",
            "description": "符合搜索条件的视频列表，包括每个视频的video_id。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "无效的搜索关键词。"}
    ]


class DouyinShortVideoSearchMusic(VirtualFunctionApp):
    name = "DouyinShortVideoSearchMusic"
    summary = "根据关键词搜索音乐。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用于搜索音乐的关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "music_list",
            "type": "array",
            "description": "符合搜索条件的音乐列表，包括每首音乐的music_id。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "无效的搜索关键词。"}
    ]


class DouyinShortVideoSearchEffects(VirtualFunctionApp):
    name = "DouyinShortVideoSearchEffects"
    summary = "根据关键词搜索特效。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用于搜索特效的关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回搜索结果的最大数量，默认值为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "effects_list",
            "type": "array",
            "description": "符合搜索条件的特效列表，包括每个特效的effect_id。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "无效的搜索关键词。"}
    ]


@register_app()
class DouyinShortVideo(FunctionApp):
    name_for_human = "抖音短视频工具包"
    description_for_human = (
        "一个用于创建、编辑和分享短视频的工具包，支持音乐和特效的添加。"
    )
    name_for_model = "DouyinShortVideo"
    description_for_model = "该工具包允许用户创建、编辑和分享短视频，添加音乐和特效，并与其他创作者互动，确保用户能够充分利用抖音短视频平台的功能。"
    app_classes = [
        DouyinShortVideoCreateVideo,
        DouyinShortVideoAddMusic,
        DouyinShortVideoApplyEffects,
        DouyinShortVideoShareVideo,
        DouyinShortVideoFollowCreator,
        DouyinShortVideoViewTrendingVideos,
        DouyinShortVideoSearchEffects,
        DouyinShortVideoSaveDraft,
        DouyinShortVideoCommentOnVideo,
        DouyinShortVideoViewProfile,
        DouyinShortVideoSearchVideo,
        DouyinShortVideoSearchMusic,
        DouyinShortVideoSearchEffects,
    ]


#################### XiaoYuzhou ####################


class XiaoYuzhouSearchPodcast(VirtualFunctionApp):
    name = "XiaoYuzhouSearchPodcast"
    summary = "根据关键字搜索播客节目并返回相关结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "podcast_list",
            "type": "array",
            "description": "包含搜索到的播客节目的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'keyword'为空或格式不正确时。",
        }
    ]


class XiaoYuzhouPlayPodcast(VirtualFunctionApp):
    name = "XiaoYuzhouPlayPodcast"
    summary = "播放选定的播客节目。"
    parameters: List[ArgParameter] = [
        {
            "name": "podcast_id",
            "type": "string",
            "description": "要播放的播客节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "播放操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'podcast_id'无效时。"}
    ]


class XiaoYuzhouCreatePlaylist(VirtualFunctionApp):
    name = "XiaoYuzhouCreatePlaylist"
    summary = "创建新的播放列表并将播客添加到其中。"
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_name",
            "type": "string",
            "description": "播放列表的名称。",
            "required": True,
        },
        {
            "name": "podcast_ids",
            "type": "array",
            "description": "要添加到播放列表的播客节目的唯一标识符列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "创建的播放列表的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'playlist_name'为空或'podcast_ids'为空时。",
        }
    ]


class XiaoYuzhouFollowPodcast(VirtualFunctionApp):
    name = "XiaoYuzhouFollowPodcast"
    summary = "关注指定的播客节目。"
    parameters: List[ArgParameter] = [
        {
            "name": "podcast_id",
            "type": "string",
            "description": "要关注的播客节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "关注操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'podcast_id'无效时。"}
    ]


class XiaoYuzhouRecommendPodcasts(VirtualFunctionApp):
    name = "XiaoYuzhouRecommendPodcasts"
    summary = "根据用户的听取历史推荐相关播客节目。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_podcasts",
            "type": "array",
            "description": "推荐的播客节目列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'user_id'无效时。"}
    ]


class XiaoYuzhouGetPodcastDetails(VirtualFunctionApp):
    name = "XiaoYuzhouGetPodcastDetails"
    summary = "查看特定播客节目的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "podcast_id",
            "type": "string",
            "description": "要获取详细信息的播客节目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "podcast_details",
            "type": "object",
            "description": "包含播客节目的详细信息，包括标题、描述、创作者等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'podcast_id'无效时。"}
    ]


class XiaoYuzhouDeletePlaylist(VirtualFunctionApp):
    name = "XiaoYuzhouDeletePlaylist"
    summary = "删除指定的播放列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "要删除的播放列表的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'playlist_id'无效时。"}
    ]


class XiaoYuzhouUpdatePlaylist(VirtualFunctionApp):
    name = "XiaoYuzhouUpdatePlaylist"
    summary = "更新现有的播放列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "playlist_id",
            "type": "string",
            "description": "要更新的播放列表的唯一标识符。",
            "required": True,
        },
        {
            "name": "update_data",
            "type": "object",
            "description": "包含要更新的播放列表信息的对象，例如名称或播客节目列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'playlist_id'无效时。"}
    ]


class XiaoYuzhouGetFollowedPodcasts(VirtualFunctionApp):
    name = "XiaoYuzhouGetFollowedPodcasts"
    summary = "查看用户已关注的播客列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "followed_podcasts",
            "type": "array",
            "description": "用户已关注的播客节目列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'user_id'无效时。"}
    ]


class XiaoYuzhouGetPlayHistory(VirtualFunctionApp):
    name = "XiaoYuzhouGetPlayHistory"
    summary = "查看用户的播放历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "play_history",
            "type": "array",
            "description": "用户的播放历史记录，包括播客节目和播放时间。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当'user_id'无效时。"}
    ]


@register_app()
class XiaoYuzhou(FunctionApp):
    name_for_human = "小宇宙"
    description_for_human = (
        "一个专注于播客内容的平台，提供丰富的播客节目和个性化推荐功能。"
    )
    name_for_model = "XiaoYuzhou"
    description_for_model = "小宇宙工具包提供了一系列功能，帮助用户搜索、播放和管理播客节目，允许创建播放列表和关注喜欢的节目，同时根据用户的听取历史进行个性化推荐。"
    app_classes = [
        XiaoYuzhouSearchPodcast,
        XiaoYuzhouPlayPodcast,
        XiaoYuzhouCreatePlaylist,
        XiaoYuzhouFollowPodcast,
        XiaoYuzhouRecommendPodcasts,
        XiaoYuzhouGetPodcastDetails,
        XiaoYuzhouDeletePlaylist,
        XiaoYuzhouUpdatePlaylist,
        XiaoYuzhouGetFollowedPodcasts,
        XiaoYuzhouGetPlayHistory,
    ]


#################### JinRiTouTiao ####################


class JinRiTouTiaoGetPersonalizedNews(VirtualFunctionApp):
    name = "JinRiTouTiaoGetPersonalizedNews"
    summary = "获取个性化新闻推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "包含推荐新闻的列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果count不是有效整数。"}
    ]


class JinRiTouTiaoSearchNews(VirtualFunctionApp):
    name = "JinRiTouTiaoSearchNews"
    summary = "根据关键词搜索新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索的关键词。",
            "required": True,
        },
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "包含搜索结果的新闻列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果query为空或格式不正确。",
        }
    ]


class JinRiTouTiaoBookmarkNews(VirtualFunctionApp):
    name = "JinRiTouTiaoBookmarkNews"
    summary = "收藏用户喜欢的新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "news_id",
            "type": "string",
            "description": "要收藏的新闻唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果news_id不存在。"},
        {"name": "InvalidRequestException", "description": "如果user_id为空。"},
    ]


class JinRiTouTiaoGetBookmarkedNews(VirtualFunctionApp):
    name = "JinRiTouTiaoGetBookmarkedNews"
    summary = "获取用户收藏的新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "包含用户收藏的新闻列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有收藏的新闻。"}
    ]


class JinRiTouTiaoCommentOnNews(VirtualFunctionApp):
    name = "JinRiTouTiaoCommentOnNews"
    summary = "对新闻文章发表评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "news_id",
            "type": "string",
            "description": "要评论的新闻唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果news_id不存在。"},
        {"name": "InvalidRequestException", "description": "如果comment为空。"},
    ]


class JinRiTouTiaoShareNews(VirtualFunctionApp):
    name = "JinRiTouTiaoShareNews"
    summary = "将新闻分享至社交媒体。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "news_id",
            "type": "string",
            "description": "要分享的新闻唯一标识符。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台，如Twitter、Facebook等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果news_id不存在。"},
        {
            "name": "InvalidRequestException",
            "description": "如果platform不在允许的范围内。",
        },
    ]


class JinRiTouTiaoGetPopularNews(VirtualFunctionApp):
    name = "JinRiTouTiaoGetPopularNews"
    summary = "获取当前热门新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "包含热门新闻的列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果count不是有效整数。"}
    ]


class JinRiTouTiaoGetFinanceNews(VirtualFunctionApp):
    name = "JinRiTouTiaoGetFinanceNews"
    summary = "获取财经动态新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "包含财经新闻的列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果count不是有效整数。"}
    ]


class JinRiTouTiaoGetVideoContent(VirtualFunctionApp):
    name = "JinRiTouTiaoGetVideoContent"
    summary = "获取视频内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "count",
            "type": "integer",
            "description": "返回的视频数量，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_list",
            "type": "array",
            "description": "包含视频内容的列表，每个视频包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果count不是有效整数。"}
    ]


class JinRiTouTiaoGetReadingHistory(VirtualFunctionApp):
    name = "JinRiTouTiaoGetReadingHistory"
    summary = "获取用户的新闻阅读历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history_list",
            "type": "array",
            "description": "包含用户阅读历史的新闻列表，每条新闻包含title、summary和url字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有阅读历史。"}
    ]


class JinRiTouTiaoOptimizeRecommendation(VirtualFunctionApp):
    name = "JinRiTouTiaoOptimizeRecommendation"
    summary = "根据用户反馈优化推荐算法。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户对推荐内容的反馈。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "优化操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果feedback为空。"}
    ]


class JinRiTouTiaoGetUserFeedback(VirtualFunctionApp):
    name = "JinRiTouTiaoGetUserFeedback"
    summary = "获取用户对推荐内容的反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_list",
            "type": "array",
            "description": "包含用户反馈的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有用户反馈。"}
    ]


@register_app()
class JinRiTouTiao(FunctionApp):
    name_for_human = "今日头条"
    description_for_human = "一个提供个性化新闻推荐和管理功能的工具包。"
    name_for_model = "JinRiTouTiao"
    description_for_model = "今日头条工具包提供个性化新闻推荐、搜索、收藏、评论和分享功能，旨在帮助用户获取与其兴趣相关的最新新闻和信息，同时管理其收藏和阅读历史。"
    app_classes = [
        JinRiTouTiaoGetPersonalizedNews,
        JinRiTouTiaoSearchNews,
        JinRiTouTiaoBookmarkNews,
        JinRiTouTiaoGetBookmarkedNews,
        JinRiTouTiaoCommentOnNews,
        JinRiTouTiaoShareNews,
        JinRiTouTiaoGetPopularNews,
        JinRiTouTiaoGetFinanceNews,
        JinRiTouTiaoGetVideoContent,
        JinRiTouTiaoGetReadingHistory,
        JinRiTouTiaoOptimizeRecommendation,
        JinRiTouTiaoGetUserFeedback,
    ]


#################### WangYiCloudReading ####################


class WangYiCloudReadingSearchBooks(VirtualFunctionApp):
    name = "WangYiCloudReadingSearchBooks"
    summary = "通过关键词搜索书籍和文章。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "results", "type": "array", "description": "匹配的书籍和文章列表。"}
    ]
    exceptions: List[ArgException] = []


class WangYiCloudReadingReadBook(VirtualFunctionApp):
    name = "WangYiCloudReadingReadBook"
    summary = "在线阅读指定书籍或文章。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "要阅读的书籍或文章的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "content", "type": "string", "description": "书籍或文章的内容。"}
    ]
    exceptions: List[ArgException] = []


class WangYiCloudReadingDownloadBook(VirtualFunctionApp):
    name = "WangYiCloudReadingDownloadBook"
    summary = "下载指定书籍到本地设备。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "要下载的书籍的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "下载是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingShareBook(VirtualFunctionApp):
    name = "WangYiCloudReadingShareBook"
    summary = "通过社交媒体分享书籍或文章链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "要分享的书籍的唯一标识符。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台（如Twitter, Facebook）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'或'platform'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingCreateReadingList(VirtualFunctionApp):
    name = "WangYiCloudReadingCreateReadingList"
    summary = "创建新的书单。"
    parameters: List[ArgParameter] = [
        {
            "name": "list_name",
            "type": "string",
            "description": "书单的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "list_id", "type": "string", "description": "新创建书单的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'list_name'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingAddBookToList(VirtualFunctionApp):
    name = "WangYiCloudReadingAddBookToList"
    summary = "将书籍添加到指定书单中。"
    parameters: List[ArgParameter] = [
        {
            "name": "list_id",
            "type": "string",
            "description": "书单的唯一标识符。",
            "required": True,
        },
        {
            "name": "book_id",
            "type": "string",
            "description": "要添加的书籍的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "添加操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'list_id'或'book_id'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingAddReview(VirtualFunctionApp):
    name = "WangYiCloudReadingAddReview"
    summary = "为书籍添加书评。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "书籍的唯一标识符。",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "用户的书评内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "添加书评是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'或'review'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingGetReviews(VirtualFunctionApp):
    name = "WangYiCloudReadingGetReviews"
    summary = "获取指定书籍的书评。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "书籍的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "书籍的书评列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingDeleteBook(VirtualFunctionApp):
    name = "WangYiCloudReadingDeleteBook"
    summary = "从书单或收藏中删除书籍。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "要删除的书籍的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "删除操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'格式不正确时触发。",
        }
    ]


class WangYiCloudReadingUpdateBookStatus(VirtualFunctionApp):
    name = "WangYiCloudReadingUpdateBookStatus"
    summary = "更新书籍的阅读状态或书评。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_id",
            "type": "string",
            "description": "书籍的唯一标识符。",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "新的阅读状态（如已读、未读）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "更新操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当'book_id'或'status'格式不正确时触发。",
        }
    ]


@register_app()
class WangYiCloudReading(FunctionApp):
    name_for_human = "网易云阅读"
    description_for_human = "一个电子书和文章阅读平台，用户可以在线阅读、下载和分享书籍，同时支持书评和书单功能。"
    name_for_model = "WangYiCloudReading"
    description_for_model = "WangYiCloudReading工具包提供了一个全面的接口，允许用户搜索、阅读、下载和分享电子书及文章，同时支持书评和书单功能，促进知识分享和管理。"
    app_classes = [
        WangYiCloudReadingSearchBooks,
        WangYiCloudReadingReadBook,
        WangYiCloudReadingDownloadBook,
        WangYiCloudReadingShareBook,
        WangYiCloudReadingCreateReadingList,
        WangYiCloudReadingAddBookToList,
        WangYiCloudReadingAddReview,
        WangYiCloudReadingGetReviews,
        WangYiCloudReadingDeleteBook,
        WangYiCloudReadingUpdateBookStatus,
    ]


#################### DongfangCaiFu ####################


class DongfangCaiFuGetRealTimeQuote(VirtualFunctionApp):
    name = "DongfangCaiFuGetRealTimeQuote"
    summary = "查询特定股票或基金的实时市场价格及相关信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_code",
            "type": "string",
            "description": "股票或基金的代码，例如'600519'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "current_price", "type": "number", "description": "当前市场价格。"},
        {"name": "price_change", "type": "number", "description": "当前价格变动。"},
        {"name": "market_cap", "type": "number", "description": "当前市值。"},
    ]
    exceptions: List[ArgException] = []


class DongfangCaiFuGetFinancialNews(VirtualFunctionApp):
    name = "DongfangCaiFuGetFinancialNews"
    summary = "获取最新的财经新闻和市场分析。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "新闻类别，例如'股票'、'基金'、'期货'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "最新财经新闻文章的列表，每个文章包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class DongfangCaiFuCreatePortfolio(VirtualFunctionApp):
    name = "DongfangCaiFuCreatePortfolio"
    summary = "创建新的投资组合并返回其唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_name",
            "type": "string",
            "description": "投资组合的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "创建的投资组合的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class DongfangCaiFuGetPortfolio(VirtualFunctionApp):
    name = "DongfangCaiFuGetPortfolio"
    summary = "查询特定投资组合的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "投资组合的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio_details",
            "type": "object",
            "description": "投资组合的详细信息，包括投资的股票和基金。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果portfolio_id无效。"}
    ]


class DongfangCaiFuSetPriceAlert(VirtualFunctionApp):
    name = "DongfangCaiFuSetPriceAlert"
    summary = "设置特定股票或基金的价格提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_code",
            "type": "string",
            "description": "股票或基金的代码。",
            "required": True,
        },
        {
            "name": "target_price",
            "type": "number",
            "description": "设置的目标价格。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "设置提醒是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果target_price不合法。"}
    ]


class DongfangCaiFuGetFinancialMetrics(VirtualFunctionApp):
    name = "DongfangCaiFuGetFinancialMetrics"
    summary = "查询特定股票或基金的财务指标。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_code",
            "type": "string",
            "description": "股票或基金的代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "financial_metrics",
            "type": "object",
            "description": "财务指标，包括市盈率、净资产收益率等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果stock_code无效。"}
    ]


class DongfangCaiFuParticipateInCommunityDiscussion(VirtualFunctionApp):
    name = "DongfangCaiFuParticipateInCommunityDiscussion"
    summary = "用户可以参与财经社区讨论，发布观点。"
    parameters: List[ArgParameter] = [
        {
            "name": "discussion_topic",
            "type": "string",
            "description": "讨论主题。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "用户发布的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "发布是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果内容不符合社区规范。"}
    ]


class DongfangCaiFuExportData(VirtualFunctionApp):
    name = "DongfangCaiFuExportData"
    summary = "将查询到的数据导出为CSV格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "投资组合的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出的CSV文件的链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果portfolio_id无效。"}
    ]


class DongfangCaiFuGetHistoricalData(VirtualFunctionApp):
    name = "DongfangCaiFuGetHistoricalData"
    summary = "查询特定股票或基金的历史市场数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_code",
            "type": "string",
            "description": "股票或基金的代码。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "查询的开始日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "查询的结束日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "历史市场数据的列表，每个数据项包含日期和价格。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果stock_code无效。"}
    ]


class DongfangCaiFuGetInvestmentEducationResources(VirtualFunctionApp):
    name = "DongfangCaiFuGetInvestmentEducationResources"
    summary = "获取投资相关的教育文章和视频。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "资源类型，例如'文章'或'视频'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resources",
            "type": "array",
            "description": "教育资源的列表，包括标题和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class DongfangCaiFuGetSavedAddresses(VirtualFunctionApp):
    name = "DongfangCaiFuGetSavedAddresses"
    summary = "获取用户之前保存的地址信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "addresses", "type": "array", "description": "用户保存的地址列表。"}
    ]
    exceptions: List[ArgException] = []


class DongfangCaiFuGetSavedPaymentMethods(VirtualFunctionApp):
    name = "DongfangCaiFuGetSavedPaymentMethods"
    summary = "获取用户之前保存的支付方式信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "payment_methods",
            "type": "array",
            "description": "用户保存的支付方式列表。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class DongfangCaiFu(FunctionApp):
    name_for_human = "东方财富网工具包"
    description_for_human = (
        "一个全面的财经资讯平台，提供实时行情、财经新闻、投资组合管理等功能。"
    )
    name_for_model = "DongfangCaiFu"
    description_for_model = "该工具包提供了一个全面的财经资讯平台，用户可以获取实时行情、财经新闻、投资组合管理、历史数据分析等功能，帮助个人投资者和财经分析师做出明智的投资决策。"
    app_classes = [
        DongfangCaiFuGetRealTimeQuote,
        DongfangCaiFuGetFinancialNews,
        DongfangCaiFuCreatePortfolio,
        DongfangCaiFuGetPortfolio,
        DongfangCaiFuSetPriceAlert,
        DongfangCaiFuGetFinancialMetrics,
        DongfangCaiFuParticipateInCommunityDiscussion,
        DongfangCaiFuExportData,
        DongfangCaiFuGetHistoricalData,
        DongfangCaiFuGetInvestmentEducationResources,
        DongfangCaiFuGetSavedAddresses,
        DongfangCaiFuGetSavedPaymentMethods,
    ]


#################### XinHua ####################


class XinHuaGetLatestNews(VirtualFunctionApp):
    name = "XinHuaGetLatestNews"
    summary = "检索最新的新闻报道。"
    parameters: List[ArgParameter] = [
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "最新新闻的简要信息列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        }
    ]


class XinHuaSearchNews(VirtualFunctionApp):
    name = "XinHuaSearchNews"
    summary = "根据关键词搜索相关新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "与关键词相关的新闻简要信息列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        }
    ]


class XinHuaGetNewsDetails(VirtualFunctionApp):
    name = "XinHuaGetNewsDetails"
    summary = "获取特定新闻的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_details",
            "type": "object",
            "description": "新闻的详细信息，包括标题、内容、作者、来源等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


class XinHuaGetHistoricalNews(VirtualFunctionApp):
    name = "XinHuaGetHistoricalNews"
    summary = "获取过去一段时间内的新闻报道。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "count",
            "type": "integer",
            "description": "返回的新闻数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_news_list",
            "type": "array",
            "description": "指定时间范围内的新闻简要信息列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        }
    ]


class XinHuaGetNewsCategories(VirtualFunctionApp):
    name = "XinHuaGetNewsCategories"
    summary = "获取新闻的不同分类。"
    parameters: List[ArgParameter] = [
        {
            "name": "count",
            "type": "integer",
            "description": "返回的分类数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "categories", "type": "array", "description": "新闻分类的列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        }
    ]


class XinHuaGetNewsSource(VirtualFunctionApp):
    name = "XinHuaGetNewsSource"
    summary = "获取特定新闻的来源信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "source_info",
            "type": "object",
            "description": "新闻来源和作者的信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


class XinHuaGetNewsSummary(VirtualFunctionApp):
    name = "XinHuaGetNewsSummary"
    summary = "获取特定新闻的摘要信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "summary", "type": "string", "description": "新闻的摘要内容。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


class XinHuaGetNewsComments(VirtualFunctionApp):
    name = "XinHuaGetNewsComments"
    summary = "获取特定新闻的用户评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "comments", "type": "array", "description": "新闻的评论列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


class XinHuaGetNewsShareLink(VirtualFunctionApp):
    name = "XinHuaGetNewsShareLink"
    summary = "获取特定新闻的社交媒体分享链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "新闻的分享链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


class XinHuaGetNewsMedia(VirtualFunctionApp):
    name = "XinHuaGetNewsMedia"
    summary = "获取特定新闻的多媒体内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "media", "type": "array", "description": "新闻相关的多媒体内容列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的新闻ID不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当请求格式不正确或参数无效时触发。",
        },
    ]


@register_app()
class XinHua(FunctionApp):
    name_for_human = "新华社"
    description_for_human = (
        "提供权威的新闻报道和实时更新，涵盖国内外时事、经济、文化等多个领域。"
    )
    name_for_model = "XinHua"
    description_for_model = "该工具包提供权威的新闻报道和实时更新，用户可以获取最新的官方消息、深度分析和多种新闻分类，适用于普通公众、媒体工作者和研究人员。"
    app_classes = [
        XinHuaGetLatestNews,
        XinHuaSearchNews,
        XinHuaGetNewsDetails,
        XinHuaGetHistoricalNews,
        XinHuaGetNewsCategories,
        XinHuaGetNewsSource,
        XinHuaGetNewsSummary,
        XinHuaGetNewsComments,
        XinHuaGetNewsShareLink,
        XinHuaGetNewsMedia,
    ]


#################### Douban ####################


class DoubanGetBookReviews(VirtualFunctionApp):
    name = "DoubanGetBookReviews"
    summary = "获取特定书籍的评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_title",
            "type": "string",
            "description": "书籍的标题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "书籍评论的数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanSubmitBookReview(VirtualFunctionApp):
    name = "DoubanSubmitBookReview"
    summary = "提交书籍评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "book_title",
            "type": "string",
            "description": "书籍的标题。",
            "required": True,
        },
        {
            "name": "review_content",
            "type": "string",
            "description": "评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评论内容为空或格式不正确时触发。",
        }
    ]


class DoubanGetMovieReviews(VirtualFunctionApp):
    name = "DoubanGetMovieReviews"
    summary = "获取特定电影的评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "movie_title",
            "type": "string",
            "description": "电影的标题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "电影评论的数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanSubmitMovieReview(VirtualFunctionApp):
    name = "DoubanSubmitMovieReview"
    summary = "提交电影评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "movie_title",
            "type": "string",
            "description": "电影的标题。",
            "required": True,
        },
        {
            "name": "review_content",
            "type": "string",
            "description": "评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评论内容为空或格式不正确时触发。",
        }
    ]


class DoubanGetMusicReviews(VirtualFunctionApp):
    name = "DoubanGetMusicReviews"
    summary = "获取特定音乐的评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "music_title",
            "type": "string",
            "description": "音乐的标题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "音乐评论的数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanSubmitMusicReview(VirtualFunctionApp):
    name = "DoubanSubmitMusicReview"
    summary = "提交音乐评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "music_title",
            "type": "string",
            "description": "音乐的标题。",
            "required": True,
        },
        {
            "name": "review_content",
            "type": "string",
            "description": "评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评论内容为空或格式不正确时触发。",
        }
    ]


class DoubanSearchBooks(VirtualFunctionApp):
    name = "DoubanSearchBooks"
    summary = "根据关键字搜索书籍。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "books", "type": "array", "description": "匹配的书籍数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanSearchMovies(VirtualFunctionApp):
    name = "DoubanSearchMovies"
    summary = "根据关键字搜索电影。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "movies", "type": "array", "description": "匹配的电影数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanSearchMusic(VirtualFunctionApp):
    name = "DoubanSearchMusic"
    summary = "根据关键字搜索音乐。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "music", "type": "array", "description": "匹配的音乐数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanGetUserReviewHistory(VirtualFunctionApp):
    name = "DoubanGetUserReviewHistory"
    summary = "获取用户的评论历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "用户评论的数组。"}
    ]
    exceptions: List[ArgException] = []


class DoubanDeleteUserReview(VirtualFunctionApp):
    name = "DoubanDeleteUserReview"
    summary = "删除用户的评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "review_id",
            "type": "string",
            "description": "评论的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的评论不存在时触发。"}
    ]


@register_app()
class Douban(FunctionApp):
    name_for_human = "豆瓣工具包"
    description_for_human = "一个用于获取、提交和管理书籍、电影和音乐评论的工具包。"
    name_for_model = "Douban"
    description_for_model = "该工具包允许用户获取、提交和管理书籍、电影和音乐的评论，促进文化交流和信息分享，同时提供搜索功能和用户评论历史访问。"
    app_classes = [
        DoubanGetBookReviews,
        DoubanSubmitBookReview,
        DoubanGetMovieReviews,
        DoubanSubmitMovieReview,
        DoubanGetMusicReviews,
        DoubanSubmitMusicReview,
        DoubanSearchBooks,
        DoubanSearchMovies,
        DoubanSearchMusic,
        DoubanGetUserReviewHistory,
        DoubanDeleteUserReview,
    ]


#################### TencentNews ####################


class TencentNewsGetNewsList(VirtualFunctionApp):
    name = "TencentNewsGetNewsList"
    summary = "返回最新的新闻列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "新闻类别，支持的值包括 'politics', 'technology', 'entertainment', 'sports', 'health'。",
            "required": False,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的新闻数量，默认为5，最大值为20。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "最新新闻的数组，每个新闻包含标题、摘要和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsSearchNews(VirtualFunctionApp):
    name = "TencentNewsSearchNews"
    summary = "根据关键字搜索特定新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的搜索结果数量，默认为5，最大值为20。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "搜索结果的数组，每个结果包含标题、摘要和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsReadNews(VirtualFunctionApp):
    name = "TencentNewsReadNews"
    summary = "返回特定新闻的详细内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_detail",
            "type": "object",
            "description": "新闻的详细信息，包括标题、内容、作者和发布日期。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的新闻ID不存在时。"}
    ]


class TencentNewsCommentNews(VirtualFunctionApp):
    name = "TencentNewsCommentNews"
    summary = "对特定新闻进行评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当评论内容为空或无效时。"}
    ]


class TencentNewsShareNews(VirtualFunctionApp):
    name = "TencentNewsShareNews"
    summary = "生成可分享的新闻链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "可分享的新闻链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的新闻ID不存在时。"}
    ]


class TencentNewsGetHotNews(VirtualFunctionApp):
    name = "TencentNewsGetHotNews"
    summary = "返回当前最受关注的新闻列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的热门新闻数量，默认为5，最大值为20。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "hot_news",
            "type": "array",
            "description": "热门新闻的数组，每个新闻包含标题、摘要和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsGetVideoNews(VirtualFunctionApp):
    name = "TencentNewsGetVideoNews"
    summary = "返回相关视频新闻的链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的视频新闻数量，默认为5，最大值为20。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_news",
            "type": "array",
            "description": "视频新闻的数组，每个视频包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsPersonalizedNewsRecommendation(VirtualFunctionApp):
    name = "TencentNewsPersonalizedNewsRecommendation"
    summary = "根据用户的兴趣推荐新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的推荐新闻数量，默认为5，最大值为20。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_news",
            "type": "array",
            "description": "推荐新闻的数组，每个新闻包含标题、摘要和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsFavoriteNews(VirtualFunctionApp):
    name = "TencentNewsFavoriteNews"
    summary = "将特定新闻添加到用户的收藏夹。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的新闻ID不存在时。"}
    ]


class TencentNewsGetNewsCategories(VirtualFunctionApp):
    name = "TencentNewsGetNewsCategories"
    summary = "返回可用的新闻分类。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "categories",
            "type": "array",
            "description": "新闻分类的数组，包括 'politics', 'technology', 'entertainment', 'sports', 'health'。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentNewsGetFavoriteNews(VirtualFunctionApp):
    name = "TencentNewsGetFavoriteNews"
    summary = "返回用户收藏的新闻列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的收藏新闻数量，默认为5，最大值为20。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "favorite_news",
            "type": "array",
            "description": "收藏新闻的数组，每个新闻包含标题、摘要和链接。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class TencentNews(FunctionApp):
    name_for_human = "腾讯新闻"
    description_for_human = (
        "一个综合性的新闻平台，提供浏览、搜索、阅读、评论和分享新闻的功能。"
    )
    name_for_model = "TencentNews"
    description_for_model = "该工具包提供了一个综合性的新闻平台，允许用户浏览、搜索、阅读、评论和分享新闻，同时提供个性化推荐和热门新闻功能，适合希望获取最新信息的个人用户。"
    app_classes = [
        TencentNewsGetNewsList,
        TencentNewsSearchNews,
        TencentNewsReadNews,
        TencentNewsCommentNews,
        TencentNewsShareNews,
        TencentNewsGetHotNews,
        TencentNewsGetVideoNews,
        TencentNewsPersonalizedNewsRecommendation,
        TencentNewsFavoriteNews,
        TencentNewsGetNewsCategories,
        TencentNewsGetFavoriteNews,
    ]


#################### Flipboard ####################


class FlipboardCreateMagazine(VirtualFunctionApp):
    name = "FlipboardCreateMagazine"
    summary = "Create a new personal magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "The title of the magazine.",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "The description of the magazine.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the created magazine.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'title' format is incorrect.",
        }
    ]


class FlipboardAddContent(VirtualFunctionApp):
    name = "FlipboardAddContent"
    summary = "Add content to a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to add content to.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content to be added (article link or text).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the add content operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format of the content is incorrect.",
        }
    ]


class FlipboardDeleteContent(VirtualFunctionApp):
    name = "FlipboardDeleteContent"
    summary = "Delete content from a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to delete content from.",
            "required": True,
        },
        {
            "name": "content_id",
            "type": "string",
            "description": "The unique identifier of the content to be deleted.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the delete content operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified content does not exist.",
        }
    ]


class FlipboardShareMagazine(VirtualFunctionApp):
    name = "FlipboardShareMagazine"
    summary = "Share a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to share.",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "The platform to share on (e.g., Twitter, Facebook).",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the share operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The platform is not within the allowed range.",
        }
    ]


class FlipboardSearchMagazine(VirtualFunctionApp):
    name = "FlipboardSearchMagazine"
    summary = "Search for magazines."
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of results to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "magazines",
            "type": "array",
            "description": "A list of magazines matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format of the keyword is incorrect.",
        }
    ]


class FlipboardUpdateMagazineInfo(VirtualFunctionApp):
    name = "FlipboardUpdateMagazineInfo"
    summary = "Update the information of a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to update.",
            "required": True,
        },
        {
            "name": "new_title",
            "type": "string",
            "description": "The new title of the magazine.",
            "required": True,
        },
        {
            "name": "new_description",
            "type": "string",
            "description": "The new description of the magazine.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the update operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified magazine does not exist.",
        }
    ]


class FlipboardViewMagazineContent(VirtualFunctionApp):
    name = "FlipboardViewMagazineContent"
    summary = "View the content of a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to view content of.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "array",
            "description": "All content in the magazine.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified magazine does not exist.",
        }
    ]


class FlipboardBookmarkMagazine(VirtualFunctionApp):
    name = "FlipboardBookmarkMagazine"
    summary = "Bookmark a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to bookmark.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the bookmark operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified magazine does not exist.",
        }
    ]


class FlipboardUnbookmarkMagazine(VirtualFunctionApp):
    name = "FlipboardUnbookmarkMagazine"
    summary = "Unbookmark a magazine."
    parameters: List[ArgParameter] = [
        {
            "name": "magazine_id",
            "type": "string",
            "description": "The unique identifier of the magazine to unbookmark.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status of the unbookmark operation.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified magazine does not exist.",
        }
    ]


class FlipboardViewBookmarkedMagazines(VirtualFunctionApp):
    name = "FlipboardViewBookmarkedMagazines"
    summary = "View the list of bookmarked magazines."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "magazines",
            "type": "array",
            "description": "A list of magazines that the user has bookmarked.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Flipboard(FunctionApp):
    name_for_human = "Flipboard App"
    description_for_human = (
        "App for creating, managing, and sharing personalized magazines."
    )
    name_for_model = "Flipboard"
    description_for_model = "The Flipboard app allows users to create, manage, and share personalized magazines, aggregating content of interest and sharing it with others, while providing content search and management functionalities."
    app_classes = [
        FlipboardCreateMagazine,
        FlipboardAddContent,
        FlipboardDeleteContent,
        FlipboardShareMagazine,
        FlipboardSearchMagazine,
        FlipboardUpdateMagazineInfo,
        FlipboardViewMagazineContent,
        FlipboardBookmarkMagazine,
        FlipboardUnbookmarkMagazine,
        FlipboardViewBookmarkedMagazines,
    ]


#################### BaiDuNews ####################


class BaiDuNewsSearchNews(VirtualFunctionApp):
    name = "BaiDuNewsSearchNews"
    summary = "通过关键词搜索相关新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_list",
            "type": "array",
            "description": "匹配搜索关键词的新闻列表，每个新闻包含标题、摘要和唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class BaiDuNewsSubscribeNews(VirtualFunctionApp):
    name = "BaiDuNewsSubscribeNews"
    summary = "订阅特定类别的新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "订阅的新闻类别，例如“科技”、“体育”等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "订阅是否成功的状态。"}
    ]
    exceptions: List[ArgException] = []


class BaiDuNewsRecommendNews(VirtualFunctionApp):
    name = "BaiDuNewsRecommendNews"
    summary = "根据用户兴趣推荐新闻。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "recommended_news",
            "type": "array",
            "description": "推荐的新闻列表，每个新闻包含标题、摘要和唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class BaiDuNewsGetHotNews(VirtualFunctionApp):
    name = "BaiDuNewsGetHotNews"
    summary = "获取当前热门新闻的列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "hot_news_list",
            "type": "array",
            "description": "当前热门新闻的列表，每个新闻包含标题、摘要和唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class BaiDuNewsViewNewsDetail(VirtualFunctionApp):
    name = "BaiDuNewsViewNewsDetail"
    summary = "查看特定新闻的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_detail",
            "type": "object",
            "description": "新闻的详细信息，包括标题、内容、作者和发布时间。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当news_id无效时。"}
    ]


class BaiDuNewsQueryHistoricalNews(VirtualFunctionApp):
    name = "BaiDuNewsQueryHistoricalNews"
    summary = "查询过去的新闻记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "date",
            "type": "string",
            "description": "查询的日期，格式为“YYYY-MM-DD”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_news_list",
            "type": "array",
            "description": "指定日期的新闻列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当日期格式不正确时。"}
    ]


class BaiDuNewsSaveNews(VirtualFunctionApp):
    name = "BaiDuNewsSaveNews"
    summary = "收藏用户感兴趣的新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当news_id无效时。"}
    ]


class BaiDuNewsShareNews(VirtualFunctionApp):
    name = "BaiDuNewsShareNews"
    summary = "将新闻通过社交媒体分享。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        },
        {
            "name": "platform",
            "type": "string",
            "description": "分享的平台，例如“微博”、“微信”等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当news_id无效时。"},
        {"name": "InvalidRequestException", "description": "当平台不在允许的值中时。"},
    ]


class BaiDuNewsCommentOnNews(VirtualFunctionApp):
    name = "BaiDuNewsCommentOnNews"
    summary = "对新闻进行评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "news_id",
            "type": "string",
            "description": "新闻的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当news_id无效时。"},
        {"name": "InvalidRequestException", "description": "当评论内容过长时。"},
    ]


class BaiDuNewsBrowseNewsCategories(VirtualFunctionApp):
    name = "BaiDuNewsBrowseNewsCategories"
    summary = "浏览不同类别的新闻。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "categories", "type": "array", "description": "可用的新闻类别列表。"}
    ]
    exceptions: List[ArgException] = []


class BaiDuNewsGetUserSubscriptions(VirtualFunctionApp):
    name = "BaiDuNewsGetUserSubscriptions"
    summary = "获取用户的订阅信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "subscriptions",
            "type": "array",
            "description": "用户的订阅类别列表。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class BaiDuNews(FunctionApp):
    name_for_human = "百度新闻"
    description_for_human = "提供海量新闻信息和实时热点的工具包。"
    name_for_model = "BaiDuNews"
    description_for_model = "百度新闻工具包提供海量新闻信息和实时热点，用户可以通过关键词搜索获取相关资讯，支持新闻订阅和个性化推荐，同时具备历史查询、收藏、分享和评论功能，旨在提升用户获取新闻的效率和体验。"
    app_classes = [
        BaiDuNewsSearchNews,
        BaiDuNewsSubscribeNews,
        BaiDuNewsRecommendNews,
        BaiDuNewsGetHotNews,
        BaiDuNewsViewNewsDetail,
        BaiDuNewsQueryHistoricalNews,
        BaiDuNewsSaveNews,
        BaiDuNewsShareNews,
        BaiDuNewsCommentOnNews,
        BaiDuNewsBrowseNewsCategories,
        BaiDuNewsGetUserSubscriptions,
    ]


#################### KhanAcademy ####################


class KhanAcademyGetCourses(VirtualFunctionApp):
    name = "KhanAcademyGetCourses"
    summary = "检索可用课程的列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "用于搜索的关键词，支持部分匹配。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "courses", "type": "array", "description": "可用课程的详细信息列表。"}
    ]
    exceptions: List[ArgException] = []


class KhanAcademyGetCourseContent(VirtualFunctionApp):
    name = "KhanAcademyGetCourseContent"
    summary = "获取特定课程的详细内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "object",
            "description": "课程的详细内容，包括章节和主题。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的课程不存在。"},
    ]


class KhanAcademyGetLearningProgress(VirtualFunctionApp):
    name = "KhanAcademyGetLearningProgress"
    summary = "检索用户的学习进度和成绩。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "object",
            "description": "用户的学习进度和成绩信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的用户不存在。"},
    ]


class KhanAcademyCreateStudyNote(VirtualFunctionApp):
    name = "KhanAcademyCreateStudyNote"
    summary = "为特定课程创建和保存学习笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        },
        {
            "name": "note_content",
            "type": "string",
            "description": "学习笔记的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示笔记创建成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "ConflictException", "description": "笔记已存在。"},
    ]


class KhanAcademyUpdateStudyNote(VirtualFunctionApp):
    name = "KhanAcademyUpdateStudyNote"
    summary = "更新已保存的学习笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "updated_content",
            "type": "string",
            "description": "更新后的学习笔记内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示笔记更新成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的笔记不存在。"},
    ]


class KhanAcademyDeleteStudyNote(VirtualFunctionApp):
    name = "KhanAcademyDeleteStudyNote"
    summary = "删除特定的学习笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "笔记的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示笔记删除成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的笔记不存在。"},
    ]


class KhanAcademySearchCourses(VirtualFunctionApp):
    name = "KhanAcademySearchCourses"
    summary = "根据关键词搜索特定课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "courses", "type": "array", "description": "搜索到的课程列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"}
    ]


class KhanAcademyGetCourseReviews(VirtualFunctionApp):
    name = "KhanAcademyGetCourseReviews"
    summary = "查看特定课程的评论和评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "课程评论和评分的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的课程不存在。"},
    ]


class KhanAcademyGetRecommendedCourses(VirtualFunctionApp):
    name = "KhanAcademyGetRecommendedCourses"
    summary = "根据用户的学习历史推荐相关课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "recommendations", "type": "array", "description": "推荐课程的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的用户不存在。"},
    ]


class KhanAcademyGetUserProfile(VirtualFunctionApp):
    name = "KhanAcademyGetUserProfile"
    summary = "查看用户的个人资料基本信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "profile", "type": "object", "description": "用户个人资料的基本信息。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"},
        {"name": "NotFoundException", "description": "指定的用户不存在。"},
    ]


@register_app()
class KhanAcademy(FunctionApp):
    name_for_human = "Khan Academy App"
    description_for_human = (
        "App for accessing online courses and learning resources from Khan Academy."
    )
    name_for_model = "KhanAcademy"
    description_for_model = "Khan Academy工具包提供了访问在线课程和学习资源的功能，允许用户检索课程列表、获取课程内容、跟踪学习进度、创建和管理学习笔记等。此工具包旨在帮助教育工作者和学生通过API高效地获取学习材料。"
    app_classes = [
        KhanAcademyGetCourses,
        KhanAcademyGetCourseContent,
        KhanAcademyGetLearningProgress,
        KhanAcademyCreateStudyNote,
        KhanAcademyUpdateStudyNote,
        KhanAcademyDeleteStudyNote,
        KhanAcademySearchCourses,
        KhanAcademyGetCourseReviews,
        KhanAcademyGetRecommendedCourses,
        KhanAcademyGetUserProfile,
    ]


#################### YoudaoTranslation ####################


class YoudaoTranslationTextTranslation(VirtualFunctionApp):
    name = "YoudaoTranslationTextTranslation"
    summary = "提供文本翻译功能，支持多种语言。"
    parameters: List[ArgParameter] = [
        {
            "name": "source_text",
            "type": "string",
            "description": "需要翻译的文本。",
            "required": True,
        },
        {
            "name": "source_language",
            "type": "string",
            "description": "源语言代码，例如'en'表示英语。",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "目标语言代码，例如'zh'表示中文。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "translated_text", "type": "string", "description": "翻译后的文本。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文本格式不正确时触发。",
        }
    ]


class YoudaoTranslationVoiceTranslation(VirtualFunctionApp):
    name = "YoudaoTranslationVoiceTranslation"
    summary = "将语音输入翻译成目标语言文本。"
    parameters: List[ArgParameter] = [
        {
            "name": "audio_file_path",
            "type": "string",
            "description": "语音文件的本地路径。",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "目标语言代码，例如'es'表示西班牙语。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "translated_text", "type": "string", "description": "翻译后的文本。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当音频文件路径无效时触发。"}
    ]


class YoudaoTranslationLanguageDetection(VirtualFunctionApp):
    name = "YoudaoTranslationLanguageDetection"
    summary = "自动检测输入文本的语言。"
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "需要检测语言的文本。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "detected_language",
            "type": "string",
            "description": "检测到的语言代码。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文本格式不正确时触发。",
        }
    ]


class YoudaoTranslationVocabularyQuery(VirtualFunctionApp):
    name = "YoudaoTranslationVocabularyQuery"
    summary = "提供单词的详细解释和用法。"
    parameters: List[ArgParameter] = [
        {
            "name": "word",
            "type": "string",
            "description": "需要查询的单词。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "definition", "type": "string", "description": "单词的定义。"},
        {
            "name": "usage_examples",
            "type": "array",
            "description": "该单词的使用示例。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当查询的单词格式不正确时触发。",
        }
    ]


class YoudaoTranslationMultiLanguageSupport(VirtualFunctionApp):
    name = "YoudaoTranslationMultiLanguageSupport"
    summary = "列出支持的语言。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "supported_languages",
            "type": "array",
            "description": "支持的语言列表。",
        }
    ]
    exceptions: List[ArgException] = []


class YoudaoTranslationVoiceSynthesis(VirtualFunctionApp):
    name = "YoudaoTranslationVoiceSynthesis"
    summary = "将翻译后的文本转换为语音。"
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "需要转换为语音的文本。",
            "required": True,
        },
        {
            "name": "language",
            "type": "string",
            "description": "语音的语言代码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "audio_file_path",
            "type": "string",
            "description": "生成的语音文件的路径。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文本格式不正确时触发。",
        }
    ]


class YoudaoTranslationTranslationHistory(VirtualFunctionApp):
    name = "YoudaoTranslationTranslationHistory"
    summary = "保存用户的翻译历史以便后续查看。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "history", "type": "array", "description": "用户的翻译历史记录。"}
    ]
    exceptions: List[ArgException] = []


class YoudaoTranslationCustomDictionary(VirtualFunctionApp):
    name = "YoudaoTranslationCustomDictionary"
    summary = "允许用户创建和管理个人词汇表。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，支持'add'、'remove'、'list'。",
            "required": True,
        },
        {
            "name": "word",
            "type": "string",
            "description": "需要添加或移除的单词。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当操作类型无效时触发。"}
    ]


class YoudaoTranslationBatchTranslation(VirtualFunctionApp):
    name = "YoudaoTranslationBatchTranslation"
    summary = "支持一次性翻译多个文本。"
    parameters: List[ArgParameter] = [
        {
            "name": "texts",
            "type": "array",
            "description": "需要翻译的文本列表。",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "目标语言代码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "translated_texts",
            "type": "array",
            "description": "翻译后的文本列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文本格式不正确时触发。",
        }
    ]


class YoudaoTranslationOfflineTranslation(VirtualFunctionApp):
    name = "YoudaoTranslationOfflineTranslation"
    summary = "提供离线翻译的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "text",
            "type": "string",
            "description": "需要翻译的文本。",
            "required": True,
        },
        {
            "name": "target_language",
            "type": "string",
            "description": "目标语言代码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "translated_text", "type": "string", "description": "翻译后的文本。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文本格式不正确时触发。",
        }
    ]


@register_app()
class YoudaoTranslation(FunctionApp):
    name_for_human = "有道翻译"
    description_for_human = (
        "提供多种语言之间的文本和语音翻译服务，支持语言检测、词汇查询和语音合成等功能。"
    )
    name_for_model = "YoudaoTranslation"
    description_for_model = "YoudaoTranslation工具包提供多种语言之间的文本和语音翻译服务，支持语言检测、词汇查询和语音合成等功能，旨在满足用户的翻译需求并促进语言学习。"
    app_classes = [
        YoudaoTranslationTextTranslation,
        YoudaoTranslationVoiceTranslation,
        YoudaoTranslationLanguageDetection,
        YoudaoTranslationVocabularyQuery,
        YoudaoTranslationMultiLanguageSupport,
        YoudaoTranslationVoiceSynthesis,
        YoudaoTranslationTranslationHistory,
        YoudaoTranslationCustomDictionary,
        YoudaoTranslationBatchTranslation,
        YoudaoTranslationOfflineTranslation,
    ]


#################### ProgrammingCat ####################


class ProgrammingCatSearchCourses(VirtualFunctionApp):
    name = "ProgrammingCatSearchCourses"
    summary = "该工具用于根据关键词搜索可用的编程课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索课程的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大课程数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "courses",
            "type": "array",
            "description": "匹配搜索条件的课程列表，每个课程包含课程ID、名称和描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或超出长度限制时。",
        }
    ]


class ProgrammingCatCreateProject(VirtualFunctionApp):
    name = "ProgrammingCatCreateProject"
    summary = "该工具用于创建新的编程项目。"
    parameters: List[ArgParameter] = [
        {
            "name": "project_name",
            "type": "string",
            "description": "项目的名称。",
            "required": True,
        },
        {
            "name": "project_description",
            "type": "string",
            "description": "项目的详细描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "创建的项目的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当项目名称或描述格式不正确时。",
        }
    ]


class ProgrammingCatReadProject(VirtualFunctionApp):
    name = "ProgrammingCatReadProject"
    summary = "该工具用于查看特定项目的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "要查看的项目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "project_details",
            "type": "object",
            "description": "项目的详细信息，包括名称、描述和创建日期，字段包括: project_name (string), project_description (string), created_at (string).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的项目ID不存在时。"}
    ]


class ProgrammingCatUpdateProject(VirtualFunctionApp):
    name = "ProgrammingCatUpdateProject"
    summary = "该工具用于更新现有项目的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "要更新的项目的唯一标识符。",
            "required": True,
        },
        {
            "name": "project_name",
            "type": "string",
            "description": "更新后的项目名称。",
            "required": True,
        },
        {
            "name": "project_description",
            "type": "string",
            "description": "更新后的项目描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的项目ID不存在时。"},
        {
            "name": "InvalidRequestException",
            "description": "当更新的项目名称或描述格式不正确时。",
        },
    ]


class ProgrammingCatDeleteProject(VirtualFunctionApp):
    name = "ProgrammingCatDeleteProject"
    summary = "该工具用于删除特定的编程项目。"
    parameters: List[ArgParameter] = [
        {
            "name": "project_id",
            "type": "string",
            "description": "要删除的项目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的项目ID不存在时。"}
    ]


class ProgrammingCatGetUserProgress(VirtualFunctionApp):
    name = "ProgrammingCatGetUserProgress"
    summary = "该工具用于获取用户在课程中的学习进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要获取进度的课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "object",
            "description": "用户在课程中的学习进度，字段包括: completed_lessons (integer), total_lessons (integer).",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时。"}
    ]


class ProgrammingCatGetRecommendedCourses(VirtualFunctionApp):
    name = "ProgrammingCatGetRecommendedCourses"
    summary = "该工具用于根据用户的兴趣和学习历史获取推荐课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_courses",
            "type": "array",
            "description": "根据用户兴趣推荐的课程列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的用户ID不存在时。"}
    ]


class ProgrammingCatGetProjectTemplates(VirtualFunctionApp):
    name = "ProgrammingCatGetProjectTemplates"
    summary = "该工具用于获取预定义的项目模板。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "项目模板的类别。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "templates",
            "type": "array",
            "description": "指定类别的项目模板列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当类别格式不正确时。"}
    ]


class ProgrammingCatGetUserFeedback(VirtualFunctionApp):
    name = "ProgrammingCatGetUserFeedback"
    summary = "该工具用于获取用户的课程评价和反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要获取反馈的课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "array",
            "description": "用户对课程的评价和反馈列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时。"}
    ]


class ProgrammingCatGetLearningResources(VirtualFunctionApp):
    name = "ProgrammingCatGetLearningResources"
    summary = "该工具用于获取额外的学习资源和材料。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要获取资源的课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resources",
            "type": "array",
            "description": "与课程相关的学习资源列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时。"}
    ]


class ProgrammingCatGetUserId(VirtualFunctionApp):
    name = "ProgrammingCatGetUserId"
    summary = "该工具用于获取当前用户的唯一标识符。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "当前用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户信息无法检索时。"}
    ]


@register_app()
class ProgrammingCat(FunctionApp):
    name_for_human = "编程猫工具包"
    description_for_human = (
        "为儿童编程教育提供的工具包，支持课程搜索、项目管理和学习进度跟踪。"
    )
    name_for_model = "ProgrammingCat"
    description_for_model = "编程猫工具包为儿童编程教育提供了一系列API，用户可以搜索课程、创建和管理项目，获取学习进度和推荐课程，从而帮助他们培养编程思维和技能。"
    app_classes = [
        ProgrammingCatSearchCourses,
        ProgrammingCatCreateProject,
        ProgrammingCatReadProject,
        ProgrammingCatUpdateProject,
        ProgrammingCatDeleteProject,
        ProgrammingCatGetUserProgress,
        ProgrammingCatGetRecommendedCourses,
        ProgrammingCatGetProjectTemplates,
        ProgrammingCatGetUserFeedback,
        ProgrammingCatGetLearningResources,
        ProgrammingCatGetUserId,
    ]


#################### Quizlet ####################


class QuizletCreateFlashcard(VirtualFunctionApp):
    name = "QuizletCreateFlashcard"
    summary = "创建新的学习卡片并保存到用户的账户中。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "学习卡片的标题。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "学习卡片的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flashcard_id",
            "type": "string",
            "description": "创建的学习卡片的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果标题或内容格式不正确。"}
    ]


class QuizletShareFlashcard(VirtualFunctionApp):
    name = "QuizletShareFlashcard"
    summary = "将指定的学习卡片与其他用户分享。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_id",
            "type": "string",
            "description": "要分享的学习卡片的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "要分享给的用户的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'flashcard_id' 不存在。"}
    ]


class QuizletCreateQuiz(VirtualFunctionApp):
    name = "QuizletCreateQuiz"
    summary = "基于学习卡片创建测验。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_ids",
            "type": "array",
            "description": "要包含在测验中的学习卡片的唯一标识符数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "quiz_id", "type": "string", "description": "创建的测验的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果 'flashcard_ids' 中的任一ID不存在。",
        }
    ]


class QuizletSearchFlashcards(VirtualFunctionApp):
    name = "QuizletSearchFlashcards"
    summary = "根据关键词搜索学习卡片。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "flashcards",
            "type": "array",
            "description": "匹配搜索条件的学习卡片的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果关键词为空。"}
    ]


class QuizletViewStatistics(VirtualFunctionApp):
    name = "QuizletViewStatistics"
    summary = "查看用户的学习进度和测验结果统计。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "包含学习进度和测验结果的统计数据。",
        }
    ]
    exceptions: List[ArgException] = []


class QuizletEditFlashcard(VirtualFunctionApp):
    name = "QuizletEditFlashcard"
    summary = "编辑已存在的学习卡片。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_id",
            "type": "string",
            "description": "要编辑的学习卡片的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "学习卡片的新内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "编辑操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'flashcard_id' 不存在。"}
    ]


class QuizletDeleteFlashcard(VirtualFunctionApp):
    name = "QuizletDeleteFlashcard"
    summary = "删除指定的学习卡片。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_id",
            "type": "string",
            "description": "要删除的学习卡片的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'flashcard_id' 不存在。"}
    ]


class QuizletOrganizeFlashcards(VirtualFunctionApp):
    name = "QuizletOrganizeFlashcards"
    summary = "将学习卡片分组或分类。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_ids",
            "type": "array",
            "description": "要组织的学习卡片的唯一标识符数组。",
            "required": True,
        },
        {
            "name": "group_name",
            "type": "string",
            "description": "分组的名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "组织操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果 'flashcard_ids' 中的任一ID不存在。",
        }
    ]


class QuizletImportMaterials(VirtualFunctionApp):
    name = "QuizletImportMaterials"
    summary = "从其他平台导入学习材料。"
    parameters: List[ArgParameter] = [
        {
            "name": "source_url",
            "type": "string",
            "description": "要导入的学习材料的来源URL。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "import_status",
            "type": "boolean",
            "description": "导入操作是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果 'source_url' 格式不正确。",
        }
    ]


class QuizletExportFlashcards(VirtualFunctionApp):
    name = "QuizletExportFlashcards"
    summary = "将学习卡片导出为文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "flashcard_ids",
            "type": "array",
            "description": "要导出的学习卡片的唯一标识符数组。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出文件的格式，支持 'csv' 或 'json'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的下载链接。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果 'flashcard_ids' 中的任一ID不存在。",
        }
    ]


@register_app()
class Quizlet(FunctionApp):
    name_for_human = "Quizlet"
    description_for_human = "一个帮助用户创建和管理学习卡片及测验的在线学习工具。"
    name_for_model = "Quizlet"
    description_for_model = "Quizlet工具包提供了一系列工具，帮助用户创建、管理和分享学习卡片及测验，旨在增强用户的学习体验和知识复习能力。"
    app_classes = [
        QuizletCreateFlashcard,
        QuizletShareFlashcard,
        QuizletCreateQuiz,
        QuizletSearchFlashcards,
        QuizletViewStatistics,
        QuizletEditFlashcard,
        QuizletDeleteFlashcard,
        QuizletOrganizeFlashcards,
        QuizletImportMaterials,
        QuizletExportFlashcards,
    ]


#################### ZuoYeBang ####################


class ZuoYeBangSearchQuestions(VirtualFunctionApp):
    name = "ZuoYeBangSearchQuestions"
    summary = "允许学生根据科目和关键字搜索相关的题目和解答。"
    parameters: List[ArgParameter] = [
        {
            "name": "subject",
            "type": "string",
            "description": "需要搜索的学科，例如'数学'、'语文'等。",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "questions",
            "type": "array",
            "description": "与搜索条件匹配的题目列表。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangOnlineTutoring(VirtualFunctionApp):
    name = "ZuoYeBangOnlineTutoring"
    summary = "提供一对一的在线辅导服务，学生可以与老师进行实时交流。"
    parameters: List[ArgParameter] = [
        {
            "name": "subject",
            "type": "string",
            "description": "辅导的学科，例如'数学'、'语文'等。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "辅导的时长，以分钟为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "session_id",
            "type": "string",
            "description": "在线辅导会话的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangSubmitAssignment(VirtualFunctionApp):
    name = "ZuoYeBangSubmitAssignment"
    summary = "学生可以在线提交作业，教师可以进行批改和反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "assignment_content",
            "type": "string",
            "description": "作业的具体内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "作业提交是否成功。"}
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangGetSolutionSteps(VirtualFunctionApp):
    name = "ZuoYeBangGetSolutionSteps"
    summary = "获取特定题目的解题思路和步骤。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "需要获取解题思路的题目唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "solution_steps",
            "type": "array",
            "description": "解题思路和步骤列表。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangManageResources(VirtualFunctionApp):
    name = "ZuoYeBangManageResources"
    summary = "管理和存储学生的学习资料和笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，值包括'add'、'update'、'delete'。",
            "required": True,
        },
        {
            "name": "resource_content",
            "type": "string",
            "description": "学习资料的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "资源管理操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当尝试删除不存在的资源时触发。"}
    ]


class ZuoYeBangRecommendCourses(VirtualFunctionApp):
    name = "ZuoYeBangRecommendCourses"
    summary = "根据学生的学习进度和兴趣推荐适合的学习课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "student_id",
            "type": "string",
            "description": "学生的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_courses",
            "type": "array",
            "description": "推荐的学习课程列表。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangTrackProgress(VirtualFunctionApp):
    name = "ZuoYeBangTrackProgress"
    summary = "查看学习进度和成绩分析。"
    parameters: List[ArgParameter] = [
        {
            "name": "student_id",
            "type": "string",
            "description": "学生的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress_report",
            "type": "object",
            "description": "包含学习进度和成绩的报告。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangDiscussionForum(VirtualFunctionApp):
    name = "ZuoYeBangDiscussionForum"
    summary = "学生可以在讨论区提问和交流学习经验。"
    parameters: List[ArgParameter] = [
        {
            "name": "question",
            "type": "string",
            "description": "学生提出的问题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "responses", "type": "array", "description": "讨论区的回答列表。"}
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangVideoLearning(VirtualFunctionApp):
    name = "ZuoYeBangVideoLearning"
    summary = "提供学习视频资源，帮助学生更好地理解课程内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "subject",
            "type": "string",
            "description": "需要学习的视频科目，例如'数学'、'语文'等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "video_links",
            "type": "array",
            "description": "相关学习视频的链接列表。",
        }
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangRecordPractice(VirtualFunctionApp):
    name = "ZuoYeBangRecordPractice"
    summary = "记录学生的练习和答题历史，以便于后续复习。"
    parameters: List[ArgParameter] = [
        {
            "name": "practice_content",
            "type": "string",
            "description": "练习的具体内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "记录练习是否成功。"}
    ]
    exceptions: List[ArgException] = []


class ZuoYeBangSearchStudents(VirtualFunctionApp):
    name = "ZuoYeBangSearchStudents"
    summary = "根据学生的姓名或其他信息搜索学生的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "student_name",
            "type": "string",
            "description": "学生的姓名。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "student_id",
            "type": "string",
            "description": "找到的学生的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当未找到学生时触发。"}
    ]


@register_app()
class ZuoYeBang(FunctionApp):
    name_for_human = "作业帮"
    description_for_human = "为中小学生提供在线学习支持的工具包。"
    name_for_model = "ZuoYeBang"
    description_for_model = "作业帮是一个为中小学生提供在线学习支持的工具包，包含题库搜索、在线辅导、作业提交等功能，旨在帮助学生获取学习资源和解题思路，促进学习效果。"
    app_classes = [
        ZuoYeBangSearchQuestions,
        ZuoYeBangOnlineTutoring,
        ZuoYeBangSubmitAssignment,
        ZuoYeBangGetSolutionSteps,
        ZuoYeBangManageResources,
        ZuoYeBangRecommendCourses,
        ZuoYeBangTrackProgress,
        ZuoYeBangDiscussionForum,
        ZuoYeBangVideoLearning,
        ZuoYeBangRecordPractice,
        ZuoYeBangSearchStudents,
    ]


#################### Coursera ####################


class CourseraCourseSearch(VirtualFunctionApp):
    name = "CourseraCourseSearch"
    summary = "用于搜索可用课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索课程的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大课程数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_ids",
            "type": "array",
            "description": "匹配的课程唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "查询格式不正确。"}
    ]


class CourseraCourseDetails(VirtualFunctionApp):
    name = "CourseraCourseDetails"
    summary = "获取特定课程的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_info",
            "type": "object",
            "description": "包含课程名称、描述、讲师、时长等信息的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"}
    ]


class CourseraEnrollCourse(VirtualFunctionApp):
    name = "CourseraEnrollCourse"
    summary = "注册用户到特定课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要注册的课程唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "注册操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"},
        {"name": "ConflictException", "description": "用户已注册该课程。"},
    ]


class CourseraViewCertificates(VirtualFunctionApp):
    name = "CourseraViewCertificates"
    summary = "查看用户获得的证书。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "certificates", "type": "array", "description": "用户获得的证书列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户没有获得任何证书。"}
    ]


class CourseraCourseRecommendations(VirtualFunctionApp):
    name = "CourseraCourseRecommendations"
    summary = "根据用户兴趣推荐课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_interests",
            "type": "array",
            "description": "用户的兴趣关键词数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_courses",
            "type": "array",
            "description": "推荐的课程唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "兴趣格式不正确。"}
    ]


class CourseraUserCourses(VirtualFunctionApp):
    name = "CourseraUserCourses"
    summary = "查看用户注册的所有课程。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "registered_courses",
            "type": "array",
            "description": "用户注册的课程唯一标识符数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户没有注册任何课程。"}
    ]


class CourseraUnenrollCourse(VirtualFunctionApp):
    name = "CourseraUnenrollCourse"
    summary = "取消用户从特定课程的注册。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要取消注册的课程唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "取消注册操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"},
        {"name": "ConflictException", "description": "用户未注册该课程。"},
    ]


class CourseraLearningProgress(VirtualFunctionApp):
    name = "CourseraLearningProgress"
    summary = "获取用户的学习进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要获取进度的课程唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "number",
            "description": "用户在课程中的学习进度百分比。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"}
    ]


class CourseraCourseFeedback(VirtualFunctionApp):
    name = "CourseraCourseFeedback"
    summary = "获取课程的评价和反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "feedback", "type": "array", "description": "课程的评价和反馈列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"}
    ]


class CourseraInstructorInfo(VirtualFunctionApp):
    name = "CourseraInstructorInfo"
    summary = "获取课程的讲师信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "instructor_info",
            "type": "object",
            "description": "讲师的姓名、简介和联系方式。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程ID不存在。"}
    ]


@register_app()
class Coursera(FunctionApp):
    name_for_human = "Coursera App"
    description_for_human = (
        "一个提供在线课程和证书的工具包，适合希望提升知识和技能的用户。"
    )
    name_for_model = "Coursera"
    description_for_model = "Coursera工具包提供了一套API，允许用户搜索课程、注册课程、查看证书和获取学习进度，旨在提升用户的知识和技能。"
    app_classes = [
        CourseraCourseSearch,
        CourseraCourseDetails,
        CourseraEnrollCourse,
        CourseraViewCertificates,
        CourseraCourseRecommendations,
        CourseraUserCourses,
        CourseraUnenrollCourse,
        CourseraLearningProgress,
        CourseraCourseFeedback,
        CourseraInstructorInfo,
    ]


#################### EnglishFluency ####################


class EnglishFluencyPersonalizedSpeakingPractice(VirtualFunctionApp):
    name = "EnglishFluencyPersonalizedSpeakingPractice"
    summary = "提供个性化的英语口语练习，用户可以选择主题进行练习。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "选择的主题，必需。",
            "required": True,
        },
        {
            "name": "difficulty_level",
            "type": "string",
            "description": "难度级别，选项为['beginner', 'intermediate', 'advanced']，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "practice_session",
            "type": "object",
            "description": "包含练习的详细信息，包括练习内容和结构。",
        },
        {"name": "feedback", "type": "string", "description": "针对练习的反馈。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当主题或难度级别无效时抛出。",
        }
    ]


class EnglishFluencyListeningComprehensionPractice(VirtualFunctionApp):
    name = "EnglishFluencyListeningComprehensionPractice"
    summary = "提供听力理解练习，用户可以选择不同的材料进行练习。"
    parameters: List[ArgParameter] = [
        {
            "name": "material_type",
            "type": "string",
            "description": "选择的材料类型，选项为['audio', 'video']，必需。",
            "required": True,
        },
        {
            "name": "difficulty_level",
            "type": "string",
            "description": "难度级别，选项为['beginner', 'intermediate', 'advanced']，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "practice_material",
            "type": "object",
            "description": "包含练习材料的详细信息。",
        },
        {"name": "questions", "type": "array", "description": "与材料相关的理解问题。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当材料类型或难度级别无效时抛出。",
        }
    ]


class EnglishFluencyProgressTracking(VirtualFunctionApp):
    name = "EnglishFluencyProgressTracking"
    summary = "跟踪用户的学习进度并生成报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress_report",
            "type": "object",
            "description": "包含用户学习进度的详细报告。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时抛出。"}
    ]


class EnglishFluencyRealTimeFeedback(VirtualFunctionApp):
    name = "EnglishFluencyRealTimeFeedback"
    summary = "提供实时反馈和评分，用户在练习后可以获取反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "practice_session",
            "type": "object",
            "description": "练习会话的详细信息，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "feedback", "type": "string", "description": "针对练习的反馈。"},
        {"name": "score", "type": "number", "description": "用户的评分。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID或练习会话无效时抛出。"}
    ]


class EnglishFluencyVocabularyAndGrammarPractice(VirtualFunctionApp):
    name = "EnglishFluencyVocabularyAndGrammarPractice"
    summary = "提供词汇和语法练习，用户可以选择特定的词汇或语法点进行练习。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "选择的主题，必需。",
            "required": True,
        },
        {
            "name": "practice_type",
            "type": "string",
            "description": "练习类型，选项为['vocabulary', 'grammar']，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "practice_questions",
            "type": "array",
            "description": "包含练习问题的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当主题或练习类型无效时抛出。",
        }
    ]


class EnglishFluencyVideoAudioMaterials(VirtualFunctionApp):
    name = "EnglishFluencyVideoAudioMaterials"
    summary = "提供视频和音频材料供学习使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "material_type",
            "type": "string",
            "description": "选择的材料类型，选项为['video', 'audio']，必需。",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "材料类别，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "materials", "type": "array", "description": "包含可用材料的列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当材料类型或类别无效时抛出。",
        }
    ]


class EnglishFluencySocialInteraction(VirtualFunctionApp):
    name = "EnglishFluencySocialInteraction"
    summary = "提供社交功能，让用户可以与其他学习者互动。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "connections",
            "type": "array",
            "description": "包含用户的社交连接列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时抛出。"}
    ]


class EnglishFluencyCustomLearningPlan(VirtualFunctionApp):
    name = "EnglishFluencyCustomLearningPlan"
    summary = "提供定制化的学习计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "goals",
            "type": "array",
            "description": "用户的学习目标，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "learning_plan",
            "type": "object",
            "description": "包含定制学习计划的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时抛出。"}
    ]


class EnglishFluencyVocabularyList(VirtualFunctionApp):
    name = "EnglishFluencyVocabularyList"
    summary = "提供词汇表和例句。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "选择的主题，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "vocabulary",
            "type": "array",
            "description": "包含相关词汇及其例句的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当主题无效时抛出。"}
    ]


class EnglishFluencyMockTest(VirtualFunctionApp):
    name = "EnglishFluencyMockTest"
    summary = "提供模拟考试和测试。"
    parameters: List[ArgParameter] = [
        {
            "name": "test_type",
            "type": "string",
            "description": "测试类型，选项为['speaking', 'listening', 'grammar']，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "test_questions",
            "type": "array",
            "description": "包含测试问题的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当测试类型无效时抛出。"}
    ]


@register_app()
class EnglishFluency(FunctionApp):
    name_for_human = "英语流利说"
    description_for_human = "提供个性化的英语学习体验，专注于口语和听力训练。"
    name_for_model = "EnglishFluency"
    description_for_model = "英语流利说工具包提供个性化的英语学习体验，包括口语和听力练习、学习进度跟踪、实时反馈及社交互动功能，旨在帮助用户提高英语能力并增强学习效果。"
    app_classes = [
        EnglishFluencyPersonalizedSpeakingPractice,
        EnglishFluencyListeningComprehensionPractice,
        EnglishFluencyProgressTracking,
        EnglishFluencyRealTimeFeedback,
        EnglishFluencyVocabularyAndGrammarPractice,
        EnglishFluencyVideoAudioMaterials,
        EnglishFluencySocialInteraction,
        EnglishFluencyCustomLearningPlan,
        EnglishFluencyVocabularyList,
        EnglishFluencyMockTest,
    ]


#################### XiaoYuanSearch ####################


class XiaoYuanSearchUploadQuestion(VirtualFunctionApp):
    name = "XiaoYuanSearchUploadQuestion"
    summary = "上传题目图片并进行识别。"
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "题目图片的本地路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "识别出的题目的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当上传的图片格式不正确时触发。",
        }
    ]


class XiaoYuanSearchGetSolutionSteps(VirtualFunctionApp):
    name = "XiaoYuanSearchGetSolutionSteps"
    summary = "根据题目ID获取解题思路。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "题目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "solution_steps",
            "type": "array",
            "description": "解题步骤的详细描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的question_id无效时触发。"}
    ]


class XiaoYuanSearchGetReferenceAnswer(VirtualFunctionApp):
    name = "XiaoYuanSearchGetReferenceAnswer"
    summary = "查询题目的标准答案。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "题目的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reference_answer",
            "type": "string",
            "description": "标准答案的文本。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的question_id无效时触发。"}
    ]


class XiaoYuanSearchSearchQuestions(VirtualFunctionApp):
    name = "XiaoYuanSearchSearchQuestions"
    summary = "通过关键词搜索相关题目。"
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "questions", "type": "array", "description": "匹配的题目列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当keywords参数为空时触发。"}
    ]


class XiaoYuanSearchAccessHistory(VirtualFunctionApp):
    name = "XiaoYuanSearchAccessHistory"
    summary = "访问用户的题目上传和查询历史记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "history", "type": "array", "description": "用户历史记录的列表。"}
    ]
    exceptions: List[ArgException] = []


class XiaoYuanSearchBrowseCategories(VirtualFunctionApp):
    name = "XiaoYuanSearchBrowseCategories"
    summary = "按学科和难度级别浏览题目。"
    parameters: List[ArgParameter] = [
        {
            "name": "subject",
            "type": "string",
            "description": "学科类型。",
            "required": False,
        },
        {
            "name": "difficulty",
            "type": "string",
            "description": "难度级别，值为['easy', 'medium', 'hard']。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "questions", "type": "array", "description": "浏览的题目列表。"}
    ]
    exceptions: List[ArgException] = []


class XiaoYuanSearchSubmitFeedback(VirtualFunctionApp):
    name = "XiaoYuanSearchSubmitFeedback"
    summary = "提交对解题思路和答案的反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "题目的唯一标识符。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当feedback内容为空时触发。"}
    ]


class XiaoYuanSearchRecommendResources(VirtualFunctionApp):
    name = "XiaoYuanSearchRecommendResources"
    summary = "根据用户历史推荐学习资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "resources", "type": "array", "description": "推荐的学习资源列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当提供的user_id无效时触发。"}
    ]


class XiaoYuanSearchShareSolution(VirtualFunctionApp):
    name = "XiaoYuanSearchShareSolution"
    summary = "将解题思路和答案分享给其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "题目的唯一标识符。",
            "required": True,
        },
        {
            "name": "target_user",
            "type": "string",
            "description": "目标用户的标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "当提供的question_id或target_user无效时触发。",
        }
    ]


class XiaoYuanSearchOfflineAccess(VirtualFunctionApp):
    name = "XiaoYuanSearchOfflineAccess"
    summary = "访问离线模式下的历史记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "offline_history",
            "type": "array",
            "description": "离线访问的历史记录列表。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class XiaoYuanSearch(FunctionApp):
    name_for_human = "小猿搜题"
    description_for_human = (
        "提供题库搜索和解答服务的工具包，帮助中小学生获取解题思路和参考答案。"
    )
    name_for_model = "XiaoYuanSearch"
    description_for_model = "小猿搜题工具包提供题库搜索和解答服务，用户可以通过上传题目图片获取解题思路和参考答案，适合中小学生的学习辅助。"
    app_classes = [
        XiaoYuanSearchUploadQuestion,
        XiaoYuanSearchGetSolutionSteps,
        XiaoYuanSearchGetReferenceAnswer,
        XiaoYuanSearchSearchQuestions,
        XiaoYuanSearchAccessHistory,
        XiaoYuanSearchBrowseCategories,
        XiaoYuanSearchSubmitFeedback,
        XiaoYuanSearchRecommendResources,
        XiaoYuanSearchShareSolution,
        XiaoYuanSearchOfflineAccess,
    ]


#################### SelfLearningPlatform ####################


class SelfLearningPlatformSearchCourses(VirtualFunctionApp):
    name = "SelfLearningPlatformSearchCourses"
    summary = "搜索可用在线课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索课程的关键字",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_ids",
            "type": "array",
            "description": "匹配搜索条件的课程唯一标识符列表",
        }
    ]
    exceptions: List[ArgException] = []


class SelfLearningPlatformGetCourseDetails(VirtualFunctionApp):
    name = "SelfLearningPlatformGetCourseDetails"
    summary = "获取特定课程的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "要获取详细信息的课程唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_details",
            "type": "object",
            "description": "课程的详细信息，包括标题、描述、讲师等字段",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程不存在，无法获取详细信息。"}
    ]


class SelfLearningPlatformCreateStudyPlan(VirtualFunctionApp):
    name = "SelfLearningPlatformCreateStudyPlan"
    summary = "创建新的学习计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_ids",
            "type": "array",
            "description": "要包含在学习计划中的课程唯一标识符列表",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "study_plan_id",
            "type": "string",
            "description": "新创建的学习计划的唯一标识符",
        }
    ]
    exceptions: List[ArgException] = []


class SelfLearningPlatformUpdateStudyPlan(VirtualFunctionApp):
    name = "SelfLearningPlatformUpdateStudyPlan"
    summary = "更新现有学习计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "study_plan_id",
            "type": "string",
            "description": "要更新的学习计划的唯一标识符",
            "required": True,
        },
        {
            "name": "course_ids",
            "type": "array",
            "description": "更新后的课程唯一标识符列表",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "学习计划不存在，无法更新。"}
    ]


class SelfLearningPlatformDeleteStudyPlan(VirtualFunctionApp):
    name = "SelfLearningPlatformDeleteStudyPlan"
    summary = "删除指定的学习计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "study_plan_id",
            "type": "string",
            "description": "要删除的学习计划的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "学习计划不存在，无法删除。"}
    ]


class SelfLearningPlatformGetRecommendedCourses(VirtualFunctionApp):
    name = "SelfLearningPlatformGetRecommendedCourses"
    summary = "获取推荐的课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，用于获取推荐课程",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_courses",
            "type": "array",
            "description": "推荐的课程唯一标识符列表",
        }
    ]
    exceptions: List[ArgException] = []


class SelfLearningPlatformAccessSavedResources(VirtualFunctionApp):
    name = "SelfLearningPlatformAccessSavedResources"
    summary = "访问用户保存的学习资料。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "saved_resources",
            "type": "array",
            "description": "用户保存的学习资料列表",
        }
    ]
    exceptions: List[ArgException] = []


class SelfLearningPlatformGetLearningProgress(VirtualFunctionApp):
    name = "SelfLearningPlatformGetLearningProgress"
    summary = "获取用户的学习进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "learning_progress",
            "type": "object",
            "description": "用户的学习进度，包括已完成课程数量和学习计划状态等字段",
        }
    ]
    exceptions: List[ArgException] = []


class SelfLearningPlatformRateCourse(VirtualFunctionApp):
    name = "SelfLearningPlatformRateCourse"
    summary = "对已完成的课程进行评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "已完成课程的唯一标识符",
            "required": True,
        },
        {
            "name": "rating",
            "type": "integer",
            "description": "课程评价的分数，范围从1到5",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评价操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "课程不存在，无法评价。"},
        {"name": "InvalidRequestException", "description": "评分不在1到5之间。"},
    ]


class SelfLearningPlatformShareStudyPlan(VirtualFunctionApp):
    name = "SelfLearningPlatformShareStudyPlan"
    summary = "分享学习计划给其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "study_plan_id",
            "type": "string",
            "description": "要分享的学习计划的唯一标识符",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "接收分享的用户的唯一标识符",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "学习计划不存在，无法分享。"}
    ]


@register_app()
class SelfLearningPlatform(FunctionApp):
    name_for_human = "自学网"
    description_for_human = (
        "提供多领域自学资源和在线课程的工具包，帮助用户自主学习和技能提升。"
    )
    name_for_model = "SelfLearningPlatform"
    description_for_model = "自学网工具包提供多领域的自学资源和在线课程，通过API访问学习资料和视频，支持用户创建和管理学习计划，获取推荐课程，评价课程等功能，鼓励自主学习和技能提升。"
    app_classes = [
        SelfLearningPlatformSearchCourses,
        SelfLearningPlatformGetCourseDetails,
        SelfLearningPlatformCreateStudyPlan,
        SelfLearningPlatformUpdateStudyPlan,
        SelfLearningPlatformDeleteStudyPlan,
        SelfLearningPlatformGetRecommendedCourses,
        SelfLearningPlatformAccessSavedResources,
        SelfLearningPlatformGetLearningProgress,
        SelfLearningPlatformRateCourse,
        SelfLearningPlatformShareStudyPlan,
    ]


#################### WangYiYunKeTang ####################


class WangYiYunKeTangSearchCourses(VirtualFunctionApp):
    name = "WangYiYunKeTangSearchCourses"
    summary = "根据关键词搜索可用课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大课程数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "course_ids", "type": "array", "description": "匹配的课程ID列表。"}
    ]
    exceptions: List[ArgException] = []


class WangYiYunKeTangGetCourseDetails(VirtualFunctionApp):
    name = "WangYiYunKeTangGetCourseDetails"
    summary = "获取特定课程的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_details",
            "type": "object",
            "description": "课程的详细信息，包括标题、描述、讲师等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时触发。"}
    ]


class WangYiYunKeTangUpdateLearningProgress(VirtualFunctionApp):
    name = "WangYiYunKeTangUpdateLearningProgress"
    summary = "更新用户的学习进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        },
        {
            "name": "progress",
            "type": "number",
            "description": "更新的学习进度，范围为0到100。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当进度不在0到100的范围内时触发。",
        }
    ]


class WangYiYunKeTangSubmitCourseRating(VirtualFunctionApp):
    name = "WangYiYunKeTangSubmitCourseRating"
    summary = "提交对已完成课程的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        },
        {
            "name": "rating",
            "type": "number",
            "description": "评价分数，范围为1到5。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈意见。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评分不在1到5的范围内时触发。",
        }
    ]


class WangYiYunKeTangGetLearningProgress(VirtualFunctionApp):
    name = "WangYiYunKeTangGetLearningProgress"
    summary = "查询用户的学习进度。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "progress",
            "type": "number",
            "description": "用户在该课程的学习进度。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时触发。"}
    ]


class WangYiYunKeTangSaveCourse(VirtualFunctionApp):
    name = "WangYiYunKeTangSaveCourse"
    summary = "收藏感兴趣的课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "course_id",
            "type": "string",
            "description": "课程的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "收藏是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的课程ID不存在时触发。"}
    ]


class WangYiYunKeTangRecommendCourses(VirtualFunctionApp):
    name = "WangYiYunKeTangRecommendCourses"
    summary = "根据用户的学习历史推荐相关课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_courses",
            "type": "array",
            "description": "推荐的课程ID列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的用户ID不存在时触发。"}
    ]


class WangYiYunKeTangBrowseCoursesByCategory(VirtualFunctionApp):
    name = "WangYiYunKeTangBrowseCoursesByCategory"
    summary = "按类别浏览课程。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "课程类别。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "course_ids",
            "type": "array",
            "description": "所有该类别下的课程ID列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的类别不存在时触发。"}
    ]


class WangYiYunKeTangCollectUserFeedback(VirtualFunctionApp):
    name = "WangYiYunKeTangCollectUserFeedback"
    summary = "收集用户对平台的反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈意见。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当反馈为空时触发。"}
    ]


class WangYiYunKeTangSearchCoursesByTag(VirtualFunctionApp):
    name = "WangYiYunKeTangSearchCoursesByTag"
    summary = "根据课程标签进行搜索。"
    parameters: List[ArgParameter] = [
        {
            "name": "tag",
            "type": "string",
            "description": "课程标签。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大课程数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "course_ids", "type": "array", "description": "匹配的课程ID列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的标签不存在时触发。"}
    ]


class WangYiYunKeTangGetSavedCourses(VirtualFunctionApp):
    name = "WangYiYunKeTangGetSavedCourses"
    summary = "获取用户收藏的课程列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "saved_courses",
            "type": "array",
            "description": "用户收藏的课程ID列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的用户ID不存在时触发。"}
    ]


@register_app()
class WangYiYunKeTang(FunctionApp):
    name_for_human = "网易云课堂工具包"
    description_for_human = "提供网易云课堂的API接口，帮助用户管理学习体验。"
    name_for_model = "WangYiYunKeTang"
    description_for_model = "该工具包提供了网易云课堂的API接口，用户可以通过搜索课程、获取课程详情、更新学习进度、提交课程评价等功能来管理自己的学习体验。同时，用户还可以收藏课程、获取推荐、按类别浏览课程以及提交反馈。"
    app_classes = [
        WangYiYunKeTangSearchCourses,
        WangYiYunKeTangGetCourseDetails,
        WangYiYunKeTangUpdateLearningProgress,
        WangYiYunKeTangSubmitCourseRating,
        WangYiYunKeTangGetLearningProgress,
        WangYiYunKeTangSaveCourse,
        WangYiYunKeTangRecommendCourses,
        WangYiYunKeTangBrowseCoursesByCategory,
        WangYiYunKeTangCollectUserFeedback,
        WangYiYunKeTangSearchCoursesByTag,
        WangYiYunKeTangGetSavedCourses,
    ]


#################### FeiShu ####################


class FeiShuSendInstantMessage(VirtualFunctionApp):
    name = "FeiShuSendInstantMessage"
    summary = "发送即时消息给指定的接收者。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_content",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "接收者的用户名或ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息发送是否成功。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuCreateVideoMeeting(VirtualFunctionApp):
    name = "FeiShuCreateVideoMeeting"
    summary = "创建一个视频会议并返回会议的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_title",
            "type": "string",
            "description": "会议标题。",
            "required": True,
        },
        {
            "name": "meeting_time",
            "type": "string",
            "description": "会议时间（格式: YYYY-MM-DD HH:MM）。",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "参与者的用户名或ID列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "创建的会议的唯一标识符。",
        },
        {"name": "success", "type": "boolean", "description": "会议创建是否成功。"},
    ]
    exceptions: List[ArgException] = []


class FeiShuShareDocument(VirtualFunctionApp):
    name = "FeiShuShareDocument"
    summary = "共享指定的文档给指定的用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_path",
            "type": "string",
            "description": "文档的本地路径。",
            "required": True,
        },
        {
            "name": "shared_with",
            "type": "array",
            "description": "共享对象的用户名或ID列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "文档是否成功共享。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuManageCalendar(VirtualFunctionApp):
    name = "FeiShuManageCalendar"
    summary = "在日历中添加事件。"
    parameters: List[ArgParameter] = [
        {
            "name": "event_title",
            "type": "string",
            "description": "事件标题。",
            "required": True,
        },
        {
            "name": "event_time",
            "type": "string",
            "description": "事件时间（格式: YYYY-MM-DD HH:MM）。",
            "required": True,
        },
        {
            "name": "event_type",
            "type": "string",
            "description": "事件类型（可选值: 'meeting', 'reminder', 'task'）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "事件是否成功添加到日历。",
        }
    ]
    exceptions: List[ArgException] = []


class FeiShuAssignTask(VirtualFunctionApp):
    name = "FeiShuAssignTask"
    summary = "将任务分配给指定的用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_title",
            "type": "string",
            "description": "任务标题。",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "任务分配给的用户。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "分配的任务的唯一标识符。",
        },
        {"name": "success", "type": "boolean", "description": "任务分配是否成功。"},
    ]
    exceptions: List[ArgException] = []


class FeiShuSearchHistoricalMessages(VirtualFunctionApp):
    name = "FeiShuSearchHistoricalMessages"
    summary = "根据关键字搜索历史消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_query",
            "type": "string",
            "description": "搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回结果的最大数量（可选，默认为10）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "results", "type": "array", "description": "匹配的历史消息列表。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuManageTeamMembers(VirtualFunctionApp):
    name = "FeiShuManageTeamMembers"
    summary = "管理团队成员的添加或移除。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（可选值: 'add', 'remove'）。",
            "required": True,
        },
        {
            "name": "member_username",
            "type": "string",
            "description": "成员的用户名。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuCreateAnnouncement(VirtualFunctionApp):
    name = "FeiShuCreateAnnouncement"
    summary = "创建公告并返回操作状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "announcement_content",
            "type": "string",
            "description": "公告内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "公告是否成功创建。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuFileVersionControl(VirtualFunctionApp):
    name = "FeiShuFileVersionControl"
    summary = "对指定文档进行版本控制操作。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "version_number",
            "type": "integer",
            "description": "要恢复到的版本号。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "版本控制操作是否成功。"}
    ]
    exceptions: List[ArgException] = []


class FeiShuGenerateMeetingMinutes(VirtualFunctionApp):
    name = "FeiShuGenerateMeetingMinutes"
    summary = "生成指定会议的会议记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "会议的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "minutes", "type": "string", "description": "生成的会议记录内容。"},
        {"name": "success", "type": "boolean", "description": "会议记录生成是否成功。"},
    ]
    exceptions: List[ArgException] = []


@register_app()
class FeiShu(FunctionApp):
    name_for_human = "飞书工具包"
    description_for_human = "一个用于提高团队协作效率的综合办公工具包。"
    name_for_model = "FeiShu"
    description_for_model = "飞书工具包提供了一系列工具，用于即时通讯、视频会议、文档共享和日历管理，旨在提高团队协作效率，确保信息安全与有效共享。"
    app_classes = [
        FeiShuSendInstantMessage,
        FeiShuCreateVideoMeeting,
        FeiShuShareDocument,
        FeiShuManageCalendar,
        FeiShuAssignTask,
        FeiShuSearchHistoricalMessages,
        FeiShuManageTeamMembers,
        FeiShuCreateAnnouncement,
        FeiShuFileVersionControl,
        FeiShuGenerateMeetingMinutes,
    ]


#################### YoudaoNote ####################


class YoudaoNoteCreateNote(VirtualFunctionApp):
    name = "YoudaoNoteCreateNote"
    summary = "创建新的笔记，支持文本、图像和音频内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "笔记内容，可以是文本、图像或音频的描述。",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "笔记分类，可以选择已有分类或创建新分类。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "note_id", "type": "string", "description": "新创建笔记的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当内容格式不正确时触发。"}
    ]


class YoudaoNoteGetNote(VirtualFunctionApp):
    name = "YoudaoNoteGetNote"
    summary = "读取指定的笔记内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要读取的笔记的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "content",
            "type": "string",
            "description": "返回笔记的内容，包括文本、图像和音频描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的 note_id 不存在时触发。"}
    ]


class YoudaoNoteUpdateNote(VirtualFunctionApp):
    name = "YoudaoNoteUpdateNote"
    summary = "更新已存在的笔记内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要更新的笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "更新后的笔记内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的 note_id 不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当新内容格式不正确时触发。",
        },
    ]


class YoudaoNoteDeleteNote(VirtualFunctionApp):
    name = "YoudaoNoteDeleteNote"
    summary = "删除指定的笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要删除的笔记的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的 note_id 不存在时触发。"}
    ]


class YoudaoNoteListNotes(VirtualFunctionApp):
    name = "YoudaoNoteListNotes"
    summary = "列出所有笔记，支持分页。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的笔记数量，默认值为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notes",
            "type": "array",
            "description": "返回的笔记列表，包括每个笔记的唯一标识符和简要信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当 max_results 不是有效数字时触发。",
        }
    ]


class YoudaoNoteShareNote(VirtualFunctionApp):
    name = "YoudaoNoteShareNote"
    summary = "分享指定的笔记给他人。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要分享的笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "收件人的电子邮件地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的 note_id 不存在时触发。"},
        {
            "name": "InvalidRequestException",
            "description": "当收件人电子邮件格式不正确时触发。",
        },
    ]


class YoudaoNoteSearchNotes(VirtualFunctionApp):
    name = "YoudaoNoteSearchNotes"
    summary = "根据关键字搜索笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的搜索结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "搜索结果列表，包括匹配的笔记的唯一标识符和简要信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当关键字为空时触发。"}
    ]


class YoudaoNoteRecordAudioNote(VirtualFunctionApp):
    name = "YoudaoNoteRecordAudioNote"
    summary = "直接录音并创建新的音频笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "duration",
            "type": "integer",
            "description": "录音的时长，单位为秒。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "新创建音频笔记的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当录音时长不合理时触发。"}
    ]


class YoudaoNoteTagNote(VirtualFunctionApp):
    name = "YoudaoNoteTagNote"
    summary = "为指定的笔记添加标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要添加标签的笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "tags",
            "type": "array",
            "description": "要添加的标签列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "标签添加操作是否成功。"}
    ]
    exceptions: List[ArgException] = []


class YoudaoNoteExportNote(VirtualFunctionApp):
    name = "YoudaoNoteExportNote"
    summary = "导出指定的笔记为文本文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要导出的笔记的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "导出的文本文件的本地路径。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的 note_id 不存在时触发。"}
    ]


@register_app()
class YoudaoNote(FunctionApp):
    name_for_human = "有道云笔记"
    description_for_human = "一个多功能的云端笔记工具，适合个人用户记录和管理笔记。"
    name_for_model = "YoudaoNote"
    description_for_model = "YoudaoNote 是一个多功能的云端笔记工具，允许用户创建、管理和分享文本、图像和音频笔记，适合个人学习和工作记录，支持分类、搜索和导出功能。"
    app_classes = [
        YoudaoNoteCreateNote,
        YoudaoNoteGetNote,
        YoudaoNoteUpdateNote,
        YoudaoNoteDeleteNote,
        YoudaoNoteListNotes,
        YoudaoNoteShareNote,
        YoudaoNoteSearchNotes,
        YoudaoNoteRecordAudioNote,
        YoudaoNoteTagNote,
        YoudaoNoteExportNote,
    ]


#################### DingDing ####################


class DingDingSendMessage(VirtualFunctionApp):
    name = "DingDingSendMessage"
    summary = "发送即时消息给特定用户或团队。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "接收消息的用户或团队的名称。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息发送是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当消息格式不正确或接收者不存在时触发。",
        }
    ]


class DingDingStartVideoConference(VirtualFunctionApp):
    name = "DingDingStartVideoConference"
    summary = "创建并开始一个视频会议。"
    parameters: List[ArgParameter] = [
        {
            "name": "participants",
            "type": "array",
            "description": "会议参与者的用户名列表。",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "会议主题。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "conference_id",
            "type": "string",
            "description": "创建的会议的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当参与者列表为空或会议主题无效时触发。",
        }
    ]


class DingDingCreateTask(VirtualFunctionApp):
    name = "DingDingCreateTask"
    summary = "创建新的任务并分配给特定用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_name",
            "type": "string",
            "description": "任务名称。",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "被分配任务的用户名称。",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "任务截止日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "task_id", "type": "string", "description": "创建的任务的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当任务名称为空或截止日期无效时触发。",
        }
    ]


class DingDingRecordAttendance(VirtualFunctionApp):
    name = "DingDingRecordAttendance"
    summary = "记录员工的考勤信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "employee_name",
            "type": "string",
            "description": "员工姓名。",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "考勤状态（如“到岗”、“缺席”、“请假”）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "考勤记录是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当员工姓名或考勤状态无效时触发。",
        }
    ]


class DingDingShareFile(VirtualFunctionApp):
    name = "DingDingShareFile"
    summary = "上传并分享文件给团队成员。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "文件在本地系统中的路径。",
            "required": True,
        },
        {
            "name": "shared_with",
            "type": "array",
            "description": "共享文件的用户或团队名称列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_id", "type": "string", "description": "上传文件的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当文件路径不正确或共享用户列表为空时触发。",
        }
    ]


class DingDingGetTasks(VirtualFunctionApp):
    name = "DingDingGetTasks"
    summary = "获取当前用户的所有任务列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大任务数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "tasks", "type": "array", "description": "当前用户的任务列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当max_results参数格式不正确时触发。",
        }
    ]


class DingDingGetAttendanceReport(VirtualFunctionApp):
    name = "DingDingGetAttendanceReport"
    summary = "获取指定时间段内的考勤报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "报告开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "报告结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "考勤报告对象，包含员工姓名和考勤状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当日期格式不正确或结束日期早于开始日期时触发。",
        }
    ]


class DingDingUpdateProfile(VirtualFunctionApp):
    name = "DingDingUpdateProfile"
    summary = "更新用户的个人信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "field",
            "type": "string",
            "description": "要更新的字段名称（如“email”、“phone”）。",
            "required": True,
        },
        {
            "name": "value",
            "type": "string",
            "description": "新的字段值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当字段名称无效或新值为空时触发。",
        }
    ]


class DingDingSendFeedback(VirtualFunctionApp):
    name = "DingDingSendFeedback"
    summary = "向管理层发送用户反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当反馈内容为空时触发。"}
    ]


class DingDingGetTaskId(VirtualFunctionApp):
    name = "DingDingGetTaskId"
    summary = "根据任务名称获取任务的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_name",
            "type": "string",
            "description": "任务名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "task_id", "type": "string", "description": "任务的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当未能找到指定任务名称时触发。"}
    ]


class DingDingGetConferenceId(VirtualFunctionApp):
    name = "DingDingGetConferenceId"
    summary = "根据会议主题获取会议的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "subject",
            "type": "string",
            "description": "会议主题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "conference_id", "type": "string", "description": "会议的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当未能找到指定会议主题时触发。"}
    ]


@register_app()
class DingDing(FunctionApp):
    name_for_human = "DingDing App"
    description_for_human = "一个增强企业内部沟通、协作和管理效率的工具包。"
    name_for_model = "DingDing"
    description_for_model = "DingDing工具包提供了一系列工具，旨在增强企业内部的沟通、协作和管理效率。用户可以通过发送消息、创建视频会议、管理任务和考勤等功能，提升工作效率并促进团队合作。"
    app_classes = [
        DingDingSendMessage,
        DingDingStartVideoConference,
        DingDingCreateTask,
        DingDingRecordAttendance,
        DingDingShareFile,
        DingDingGetTasks,
        DingDingGetAttendanceReport,
        DingDingUpdateProfile,
        DingDingSendFeedback,
        DingDingGetTaskId,
        DingDingGetConferenceId,
    ]


#################### ShimoApp ####################


class ShimoAppCreateDocument(VirtualFunctionApp):
    name = "ShimoAppCreateDocument"
    summary = "创建新的文档、表格或演示文稿。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_type",
            "type": "string",
            "description": "文档类型，允许的值为'document'、'spreadsheet'、'presentation'。",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "文档的标题。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "新创建文档的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class ShimoAppCollaborateInDocument(VirtualFunctionApp):
    name = "ShimoAppCollaborateInDocument"
    summary = "允许用户实时协作编辑文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要协作编辑的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_list",
            "type": "array",
            "description": "需要协作的用户列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "协作是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的用户列表为空时触发。",
        }
    ]


class ShimoAppShareDocument(VirtualFunctionApp):
    name = "ShimoAppShareDocument"
    summary = "分享文档并设置访问权限。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要分享的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "access_level",
            "type": "string",
            "description": "访问权限，允许的值为'read'、'edit'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "生成的文档分享链接。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当access_level不在允许值中时触发。",
        }
    ]


class ShimoAppSearchDocument(VirtualFunctionApp):
    name = "ShimoAppSearchDocument"
    summary = "根据关键字搜索文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_list",
            "type": "array",
            "description": "匹配搜索条件的文档列表，包含文档的标题和唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当keyword为空时触发。"}
    ]


class ShimoAppVersionControl(VirtualFunctionApp):
    name = "ShimoAppVersionControl"
    summary = "查看和恢复文档的历史版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要查看版本的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "version_id",
            "type": "string",
            "description": "要恢复的版本的唯一标识符。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "当document_id或version_id无效时触发。",
        }
    ]


class ShimoAppCommentOnDocument(VirtualFunctionApp):
    name = "ShimoAppCommentOnDocument"
    summary = "在文档中添加评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要评论的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment_text",
            "type": "string",
            "description": "评论的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "评论是否成功添加的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当comment_text为空时触发。"}
    ]


class ShimoAppTagDocument(VirtualFunctionApp):
    name = "ShimoAppTagDocument"
    summary = "为文档添加标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要添加标签的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "tags",
            "type": "array",
            "description": "要添加的标签列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "标签是否成功添加的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当tags为空时触发。"}
    ]


class ShimoAppImportFile(VirtualFunctionApp):
    name = "ShimoAppImportFile"
    summary = "导入文件到文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要导入文件的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "文件的本地路径或远程URL。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "文件是否成功导入的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当file_path无效时触发。"}
    ]


class ShimoAppExportFile(VirtualFunctionApp):
    name = "ShimoAppExportFile"
    summary = "导出文档为不同格式的文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要导出的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出的文件格式，允许的值为'PDF'、'Word'、'Excel'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_path", "type": "string", "description": "导出的文件的路径。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当format不在允许值中时触发。",
        }
    ]


class ShimoAppSetPermissions(VirtualFunctionApp):
    name = "ShimoAppSetPermissions"
    summary = "设置文档的访问权限。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要设置权限的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "permissions",
            "type": "array",
            "description": "要设置的权限列表，允许的值为'read'、'edit'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "权限是否成功设置的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当permissions不在允许值中时触发。",
        }
    ]


class ShimoAppManageTemplates(VirtualFunctionApp):
    name = "ShimoAppManageTemplates"
    summary = "管理文档模板。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，允许的值为'create'、'update'、'delete'。",
            "required": True,
        },
        {
            "name": "template_data",
            "type": "object",
            "description": "模板数据，包括标题、内容等字段。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当action不在允许值中时触发。",
        }
    ]


class ShimoAppListDocumentVersions(VirtualFunctionApp):
    name = "ShimoAppListDocumentVersions"
    summary = "列出文档的所有版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要列出版本的文档的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "version_list",
            "type": "array",
            "description": "文档的所有版本列表，包括版本ID和版本描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当document_id无效时触发。"}
    ]


@register_app()
class ShimoApp(FunctionApp):
    name_for_human = "石墨文档工具包"
    description_for_human = (
        "一个用于在线文档创建、编辑和共享的工具包，支持团队协作和权限管理。"
    )
    name_for_model = "ShimoApp"
    description_for_model = "ShimoApp是一个用于在线文档创建、编辑和共享的工具包，支持团队协作、实时编辑、文档版本控制和权限管理，旨在增强企业用户的协作效率。"
    app_classes = [
        ShimoAppCreateDocument,
        ShimoAppCollaborateInDocument,
        ShimoAppShareDocument,
        ShimoAppSearchDocument,
        ShimoAppVersionControl,
        ShimoAppCommentOnDocument,
        ShimoAppTagDocument,
        ShimoAppImportFile,
        ShimoAppExportFile,
        ShimoAppSetPermissions,
        ShimoAppManageTemplates,
        ShimoAppListDocumentVersions,
    ]


#################### TencentDocs ####################


class TencentDocsCreateDocument(VirtualFunctionApp):
    name = "TencentDocsCreateDocument"
    summary = "创建新的文档、表格或演示文稿。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_type",
            "type": "string",
            "description": "文档类型，可以是'文档'、'表格'或'演示文稿'。",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "文档的标题。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "创建的文档的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentDocsEditDocument(VirtualFunctionApp):
    name = "TencentDocsEditDocument"
    summary = "编辑现有文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要编辑的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "要添加或更新的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "编辑操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


class TencentDocsCommentOnDocument(VirtualFunctionApp):
    name = "TencentDocsCommentOnDocument"
    summary = "在文档中添加评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要评论的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论是否成功添加。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


class TencentDocsShareDocument(VirtualFunctionApp):
    name = "TencentDocsShareDocument"
    summary = "分享文档给其他用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要分享的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "要分享给的用户的电子邮件地址。",
            "required": True,
        },
        {
            "name": "permission",
            "type": "string",
            "description": "权限类型，可以是'查看'、'编辑'或'评论'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "文档是否成功分享。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


class TencentDocsSearchDocuments(VirtualFunctionApp):
    name = "TencentDocsSearchDocuments"
    summary = "根据关键字搜索文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "可选，指定返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_ids",
            "type": "array",
            "description": "匹配搜索条件的文档唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = []


class TencentDocsExportDocument(VirtualFunctionApp):
    name = "TencentDocsExportDocument"
    summary = "将文档导出为指定格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要导出的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出格式，可以是'PDF'、'Word'或'Excel'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导出操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


class TencentDocsVersionHistory(VirtualFunctionApp):
    name = "TencentDocsVersionHistory"
    summary = "查看文档的版本历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要查看版本历史的文档的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "versions", "type": "array", "description": "文档的版本历史列表。"}
    ]
    exceptions: List[ArgException] = []


class TencentDocsRestoreVersion(VirtualFunctionApp):
    name = "TencentDocsRestoreVersion"
    summary = "恢复文档的特定版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要恢复版本的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "version_id",
            "type": "string",
            "description": "要恢复的版本的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "恢复操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "文档或版本不存在。"}
    ]


class TencentDocsManageTemplate(VirtualFunctionApp):
    name = "TencentDocsManageTemplate"
    summary = "管理文档模板。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，可以是'添加'、'删除'或'更新'。",
            "required": True,
        },
        {
            "name": "template_data",
            "type": "object",
            "description": "模板的具体数据，包括字段如'title'和'content'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "模板管理操作是否成功。"}
    ]
    exceptions: List[ArgException] = []


class TencentDocsSetPermissions(VirtualFunctionApp):
    name = "TencentDocsSetPermissions"
    summary = "设置文档的权限。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要设置权限的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "用户的电子邮件地址。",
            "required": True,
        },
        {
            "name": "permission",
            "type": "string",
            "description": "权限类型，可以是'查看'、'编辑'或'评论'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "权限设置操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


class TencentDocsClassifyDocument(VirtualFunctionApp):
    name = "TencentDocsClassifyDocument"
    summary = "将文档分类。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要分类的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "category",
            "type": "string",
            "description": "分类名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分类操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数内容不正确。"}
    ]


@register_app()
class TencentDocs(FunctionApp):
    name_for_human = "腾讯文档"
    description_for_human = "一个在线文档、表格和演示文稿的创建与协作平台，支持实时编辑和评论，适合团队进行文档共享与协作。"
    name_for_model = "TencentDocs"
    description_for_model = "腾讯文档工具包提供了一系列功能，帮助用户创建、编辑和共享文档，支持实时协作与评论，确保团队高效合作。"
    app_classes = [
        TencentDocsCreateDocument,
        TencentDocsEditDocument,
        TencentDocsCommentOnDocument,
        TencentDocsShareDocument,
        TencentDocsSearchDocuments,
        TencentDocsExportDocument,
        TencentDocsVersionHistory,
        TencentDocsRestoreVersion,
        TencentDocsManageTemplate,
        TencentDocsSetPermissions,
        TencentDocsClassifyDocument,
    ]


#################### LieYun ####################


class LieYunPublishJobInformation(VirtualFunctionApp):
    name = "LieYunPublishJobInformation"
    summary = "企业用户可以创建并发布招聘信息，吸引求职者。"
    parameters: List[ArgParameter] = [
        {
            "name": "job_title",
            "type": "string",
            "description": "招聘职位的名称。",
            "required": True,
        },
        {
            "name": "job_description",
            "type": "string",
            "description": "招聘职位的详细描述。",
            "required": True,
        },
        {
            "name": "company_name",
            "type": "string",
            "description": "招聘公司的名称。",
            "required": True,
        },
        {
            "name": "location",
            "type": "string",
            "description": "招聘职位的工作地点。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "成功发布招聘信息后的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class LieYunSearchResumes(VirtualFunctionApp):
    name = "LieYunSearchResumes"
    summary = "企业可以根据特定条件搜索求职者的简历。"
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resumes",
            "type": "array",
            "description": "符合条件的求职者简历列表。",
        }
    ]
    exceptions: List[ArgException] = []


class LieYunSubmitJobApplication(VirtualFunctionApp):
    name = "LieYunSubmitJobApplication"
    summary = "求职者可以向招聘信息提交申请。"
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "要申请的招聘信息的唯一标识符。",
            "required": True,
        },
        {
            "name": "resume",
            "type": "string",
            "description": "求职者的简历内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "application_status",
            "type": "string",
            "description": "申请提交后的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当job_id无效时抛出。"}
    ]


class LieYunCheckApplicationStatus(VirtualFunctionApp):
    name = "LieYunCheckApplicationStatus"
    summary = "求职者可以查看其申请的状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "application_id",
            "type": "string",
            "description": "申请的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "application_status",
            "type": "string",
            "description": "申请的当前状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当application_id无效时抛出。"}
    ]


class LieYunCareerDevelopmentConsultation(VirtualFunctionApp):
    name = "LieYunCareerDevelopmentConsultation"
    summary = "求职者可以获取职业发展建议和咨询服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "求职者的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "advice", "type": "string", "description": "职业发展建议的内容。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当user_id无效时抛出。"}
    ]


class LieYunSaveResume(VirtualFunctionApp):
    name = "LieYunSaveResume"
    summary = "企业可以保存感兴趣的求职者简历供后续查看。"
    parameters: List[ArgParameter] = [
        {
            "name": "resume_id",
            "type": "string",
            "description": "求职者简历的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "保存操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当resume_id无效时抛出。"}
    ]


class LieYunSendInterviewInvitation(VirtualFunctionApp):
    name = "LieYunSendInterviewInvitation"
    summary = "企业可以向求职者发送面试邀请。"
    parameters: List[ArgParameter] = [
        {
            "name": "application_id",
            "type": "string",
            "description": "求职申请的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "邀请发送是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当application_id无效时抛出。"}
    ]


class LieYunSendMessageToCandidate(VirtualFunctionApp):
    name = "LieYunSendMessageToCandidate"
    summary = "企业可以直接与求职者进行沟通。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "求职者的唯一标识符。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息发送是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当user_id无效时抛出。"}
    ]


class LieYunViewJobStatistics(VirtualFunctionApp):
    name = "LieYunViewJobStatistics"
    summary = "企业可以查看其招聘信息的浏览量和申请量。"
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "招聘信息的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistics",
            "type": "object",
            "description": "包含浏览量和申请量的统计数据。",
            "fields": [
                {
                    "name": "views",
                    "type": "integer",
                    "description": "招聘信息的浏览量。",
                },
                {
                    "name": "applications",
                    "type": "integer",
                    "description": "招聘信息的申请量。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当job_id无效时抛出。"}
    ]


class LieYunUpdateJobInformation(VirtualFunctionApp):
    name = "LieYunUpdateJobInformation"
    summary = "企业可以对已发布的招聘信息进行更新。"
    parameters: List[ArgParameter] = [
        {
            "name": "job_id",
            "type": "string",
            "description": "要更新的招聘信息的唯一标识符。",
            "required": True,
        },
        {
            "name": "job_description",
            "type": "string",
            "description": "更新后的招聘职位描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当job_id无效时抛出。"}
    ]


@register_app()
class LieYun(FunctionApp):
    name_for_human = "猎云"
    description_for_human = "猎云工具包为求职者和招聘方提供高效的求职和招聘服务。"
    name_for_model = "LieYun"
    description_for_model = "猎云工具包旨在为求职者和招聘方提供高效的求职和招聘服务，包括发布招聘信息、搜索求职者简历、提交求职申请等功能，同时考虑到潜在的安全风险和数据保护。"
    app_classes = [
        LieYunPublishJobInformation,
        LieYunSearchResumes,
        LieYunSubmitJobApplication,
        LieYunCheckApplicationStatus,
        LieYunCareerDevelopmentConsultation,
        LieYunSaveResume,
        LieYunSendInterviewInvitation,
        LieYunSendMessageToCandidate,
        LieYunViewJobStatistics,
        LieYunUpdateJobInformation,
    ]


#################### Calendly ####################


class CalendlyCreateMeeting(VirtualFunctionApp):
    name = "CalendlyCreateMeeting"
    summary = "Create a new meeting, setting the time, participants, and meeting type."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_time",
            "type": "string",
            "description": "The specific time of the meeting, formatted as 'YYYY-MM-DD HH:MM'.",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "The duration of the meeting in minutes.",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "A list of email addresses of the participants.",
            "required": True,
        },
        {
            "name": "meeting_type",
            "type": "string",
            "description": "The type of meeting, allowed values are ['one_on_one', 'team_meeting', 'group_call'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the created meeting.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'meeting_time' format is incorrect or the 'participants' list is empty.",
        }
    ]


class CalendlyCheckAvailability(VirtualFunctionApp):
    name = "CalendlyCheckAvailability"
    summary = "Check the availability of the user and participants."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "A list of email addresses of the participants.",
            "required": True,
        },
        {
            "name": "time_range",
            "type": "string",
            "description": "The time range to check, formatted as 'YYYY-MM-DD HH:MM - YYYY-MM-DD HH:MM'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "available_times",
            "type": "array",
            "description": "A list of available time slots.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'time_range' format is incorrect.",
        }
    ]


class CalendlySendInvitation(VirtualFunctionApp):
    name = "CalendlySendInvitation"
    summary = "Send meeting invitations to participants."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "A list of email addresses of the participants.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status indicating whether the invitation was successfully sent.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'meeting_id' does not exist."}
    ]


class CalendlyCancelMeeting(VirtualFunctionApp):
    name = "CalendlyCancelMeeting"
    summary = "Cancel a scheduled meeting."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status indicating whether the meeting was successfully canceled.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'meeting_id' does not exist."}
    ]


class CalendlyViewMeetingHistory(VirtualFunctionApp):
    name = "CalendlyViewMeetingHistory"
    summary = "View the history of past meetings."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "meeting_history",
            "type": "array",
            "description": "A list of records of past meetings.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'user_email' does not exist."}
    ]


class CalendlySetMeetingReminder(VirtualFunctionApp):
    name = "CalendlySetMeetingReminder"
    summary = "Set a reminder for an upcoming meeting."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "The time to send the reminder, formatted as 'YYYY-MM-DD HH:MM'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status indicating whether the reminder was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'meeting_id' does not exist."}
    ]


class CalendlySyncCalendar(VirtualFunctionApp):
    name = "CalendlySyncCalendar"
    summary = "Sync Calendly with other calendar services."
    parameters: List[ArgParameter] = [
        {
            "name": "user_email",
            "type": "string",
            "description": "The email address of the user.",
            "required": True,
        },
        {
            "name": "calendar_service",
            "type": "string",
            "description": "The calendar service to sync with, allowed values are ['Google', 'Outlook', 'iCloud'].",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "The status indicating whether the calendar was successfully synced.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'calendar_service' is not in the allowed values list.",
        }
    ]


class CalendlyCreateCustomMeetingType(VirtualFunctionApp):
    name = "CalendlyCreateCustomMeetingType"
    summary = "Create a custom meeting type."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_type_name",
            "type": "string",
            "description": "The name of the custom meeting type.",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "The duration of the meeting in minutes.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "custom_meeting_type_id",
            "type": "string",
            "description": "The unique identifier of the created custom meeting type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'meeting_type_name' is empty.",
        }
    ]


class CalendlyGenerateMeetingLink(VirtualFunctionApp):
    name = "CalendlyGenerateMeetingLink"
    summary = "Generate a shareable meeting link."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "meeting_link",
            "type": "string",
            "description": "The generated meeting link.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'meeting_id' does not exist."}
    ]


class CalendlyCollectFeedback(VirtualFunctionApp):
    name = "CalendlyCollectFeedback"
    summary = "Collect feedback from participants."
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "The unique identifier of the meeting.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback",
            "type": "array",
            "description": "A list of collected feedback from participants.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'meeting_id' does not exist."}
    ]


@register_app()
class Calendly(FunctionApp):
    name_for_human = "Calendly"
    description_for_human = (
        "App for efficiently creating, managing, and scheduling meetings."
    )
    name_for_model = "Calendly"
    description_for_model = "Calendly app provides a set of tools for efficiently creating, managing, and scheduling meetings, supporting users in checking availability, sending invitations, viewing meeting history, setting reminders, and more, suitable for individuals and teams."
    app_classes = [
        CalendlyCreateMeeting,
        CalendlyCheckAvailability,
        CalendlySendInvitation,
        CalendlyCancelMeeting,
        CalendlyViewMeetingHistory,
        CalendlySetMeetingReminder,
        CalendlySyncCalendar,
        CalendlyCreateCustomMeetingType,
        CalendlyGenerateMeetingLink,
        CalendlyCollectFeedback,
    ]


#################### NotionApp ####################


class NotionAppCreateNote(VirtualFunctionApp):
    name = "NotionAppCreateNote"
    summary = "创建新的笔记以记录信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "笔记的标题。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "笔记的内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "note_id", "type": "string", "description": "创建的笔记的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "标题或内容为空。"}
    ]


class NotionAppUpdateNote(VirtualFunctionApp):
    name = "NotionAppUpdateNote"
    summary = "更新现有笔记的内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要更新的笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "string",
            "description": "更新后的笔记内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的笔记。"}
    ]


class NotionAppDeleteNote(VirtualFunctionApp):
    name = "NotionAppDeleteNote"
    summary = "删除指定的笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要删除的笔记的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的笔记。"}
    ]


class NotionAppCreateTask(VirtualFunctionApp):
    name = "NotionAppCreateTask"
    summary = "创建新的任务以进行管理。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_title",
            "type": "string",
            "description": "任务的标题。",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "任务的截止日期，格式为 YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "task_id", "type": "string", "description": "创建的任务的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "标题或截止日期为空。"}
    ]


class NotionAppUpdateTask(VirtualFunctionApp):
    name = "NotionAppUpdateTask"
    summary = "更新现有任务的信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要更新的任务的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_due_date",
            "type": "string",
            "description": "更新后的截止日期，格式为 YYYY-MM-DD。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的任务。"}
    ]


class NotionAppDeleteTask(VirtualFunctionApp):
    name = "NotionAppDeleteTask"
    summary = "删除指定的任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要删除的任务的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的任务。"}
    ]


class NotionAppCreateDatabase(VirtualFunctionApp):
    name = "NotionAppCreateDatabase"
    summary = "创建新的数据库以存储信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "db_name",
            "type": "string",
            "description": "数据库的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "db_id", "type": "string", "description": "创建的数据库的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "数据库名称为空。"}
    ]


class NotionAppUpdateDatabase(VirtualFunctionApp):
    name = "NotionAppUpdateDatabase"
    summary = "更新现有数据库的信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "db_id",
            "type": "string",
            "description": "要更新的数据库的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_db_name",
            "type": "string",
            "description": "更新后的数据库名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的数据库。"}
    ]


class NotionAppDeleteDatabase(VirtualFunctionApp):
    name = "NotionAppDeleteDatabase"
    summary = "删除指定的数据库。"
    parameters: List[ArgParameter] = [
        {
            "name": "db_id",
            "type": "string",
            "description": "要删除的数据库的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的数据库。"}
    ]


class NotionAppSearchNotes(VirtualFunctionApp):
    name = "NotionAppSearchNotes"
    summary = "搜索笔记以查找特定信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用于搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "搜索结果的最大数量，默认值为 10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "notes",
            "type": "array",
            "description": "匹配的笔记数组，包含笔记的唯一标识符和标题。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "查询为空。"}
    ]


class NotionAppShareNote(VirtualFunctionApp):
    name = "NotionAppShareNote"
    summary = "与其他用户共享指定的笔记。"
    parameters: List[ArgParameter] = [
        {
            "name": "note_id",
            "type": "string",
            "description": "要共享的笔记的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_email",
            "type": "string",
            "description": "要共享给的用户的电子邮件地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "共享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "找不到指定的笔记。"}
    ]


class NotionAppImportFile(VirtualFunctionApp):
    name = "NotionAppImportFile"
    summary = "从外部文件导入信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "外部文件的路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导入操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "文件路径为空。"}
    ]


class NotionAppExportNotes(VirtualFunctionApp):
    name = "NotionAppExportNotes"
    summary = "导出笔记到外部文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "导出的文件格式，支持 'PDF' 或 'Markdown'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_path", "type": "string", "description": "导出文件的路径。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "导出格式无效。"}
    ]


@register_app()
class NotionApp(FunctionApp):
    name_for_human = "Notion App"
    description_for_human = (
        "一个多功能的笔记和项目管理工具，帮助用户高效管理和组织信息。"
    )
    name_for_model = "NotionApp"
    description_for_model = "NotionApp 是一个多功能的笔记和项目管理工具包，支持创建、更新、删除笔记和任务，管理数据库，搜索信息，分享内容等功能，旨在帮助用户高效管理和组织信息。"
    app_classes = [
        NotionAppCreateNote,
        NotionAppUpdateNote,
        NotionAppDeleteNote,
        NotionAppCreateTask,
        NotionAppUpdateTask,
        NotionAppDeleteTask,
        NotionAppCreateDatabase,
        NotionAppUpdateDatabase,
        NotionAppDeleteDatabase,
        NotionAppSearchNotes,
        NotionAppShareNote,
        NotionAppImportFile,
        NotionAppExportNotes,
    ]


#################### Todoist ####################


class TodoistCreateTask(VirtualFunctionApp):
    name = "TodoistCreateTask"
    summary = "创建一个新任务，包括标题、描述和截止日期。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "任务的标题，必需。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "任务的详细描述，必需。",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "任务的截止日期，格式为YYYY-MM-DD，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "task_id", "type": "string", "description": "新创建任务的唯一标识符。"}
    ]
    exceptions: List[ArgException] = []


class TodoistUpdateTask(VirtualFunctionApp):
    name = "TodoistUpdateTask"
    summary = "更新现有任务的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要更新的任务的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "title",
            "type": "string",
            "description": "更新后的任务标题，非必需。",
            "required": False,
        },
        {
            "name": "description",
            "type": "string",
            "description": "更新后的任务描述，非必需。",
            "required": False,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "更新后的截止日期，格式为YYYY-MM-DD，非必需。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的'task_id'无效或格式错误时。",
        }
    ]


class TodoistDeleteTask(VirtualFunctionApp):
    name = "TodoistDeleteTask"
    summary = "删除指定的任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要删除的任务的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"}
    ]


class TodoistRetrieveTasks(VirtualFunctionApp):
    name = "TodoistRetrieveTasks"
    summary = "检索所有任务或按条件筛选任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "filter",
            "type": "string",
            "description": "可选的过滤条件，例如'completed'或'overdue'，非必需。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tasks",
            "type": "array",
            "description": "包含所有任务的对象数组，每个对象包括'task_id', 'title', 'description', 'due_date', 'completed'。",
        }
    ]
    exceptions: List[ArgException] = []


class TodoistSetTaskPriority(VirtualFunctionApp):
    name = "TodoistSetTaskPriority"
    summary = "设置任务的优先级。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要设置优先级的任务的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "priority",
            "type": "string",
            "description": "任务优先级，值可以是'low', 'medium', 'high'，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "设置优先级操作是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"},
        {
            "name": "InvalidRequestException",
            "description": "当提供的'priority'不在允许值范围内时。",
        },
    ]


class TodoistAssignTask(VirtualFunctionApp):
    name = "TodoistAssignTask"
    summary = "将任务分配给团队成员。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要分配的任务的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "assignee",
            "type": "string",
            "description": "被分配任务的团队成员的用户名，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "分配操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"}
    ]


class TodoistAddTag(VirtualFunctionApp):
    name = "TodoistAddTag"
    summary = "为任务添加标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要添加标签的任务的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "tag",
            "type": "string",
            "description": "要添加的标签，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "添加标签操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"}
    ]


class TodoistSetReminder(VirtualFunctionApp):
    name = "TodoistSetReminder"
    summary = "为任务设置提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要设置提醒的任务的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "reminder_time",
            "type": "string",
            "description": "提醒时间，格式为YYYY-MM-DD HH:MM，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "设置提醒操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"}
    ]


class TodoistTrackTaskProgress(VirtualFunctionApp):
    name = "TodoistTrackTaskProgress"
    summary = "查看任务的完成状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_id",
            "type": "string",
            "description": "要跟踪的任务的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "completed", "type": "boolean", "description": "任务是否已完成。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的'task_id'不存在时。"}
    ]


class TodoistSearchTasks(VirtualFunctionApp):
    name = "TodoistSearchTasks"
    summary = "根据关键字搜索任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字，必需。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "可选，指定返回结果的最大数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tasks",
            "type": "array",
            "description": "包含匹配任务的对象数组，每个对象包括'task_id', 'title', 'description', 'due_date', 'completed'。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Todoist(FunctionApp):
    name_for_human = "Todoist"
    description_for_human = "一个强大的任务管理工具，帮助用户有效管理任务和项目。"
    name_for_model = "Todoist"
    description_for_model = "Todoist工具包提供了一组强大的任务管理工具，帮助用户创建、更新、删除和跟踪任务，设置优先级和提醒，适合个人和团队使用。"
    app_classes = [
        TodoistCreateTask,
        TodoistUpdateTask,
        TodoistDeleteTask,
        TodoistRetrieveTasks,
        TodoistSetTaskPriority,
        TodoistAssignTask,
        TodoistAddTag,
        TodoistSetReminder,
        TodoistTrackTaskProgress,
        TodoistSearchTasks,
    ]


#################### Slack ####################


class SlackSendMessage(VirtualFunctionApp):
    name = "SlackSendMessage"
    summary = "允许用户向特定频道或个人发送即时消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_or_user",
            "type": "string",
            "description": "要发送消息的目标频道或用户的名称。",
            "required": True,
        },
        {
            "name": "message_content",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示消息是否成功发送的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果消息内容为空或目标无效。",
        }
    ]


class SlackCreateChannel(VirtualFunctionApp):
    name = "SlackCreateChannel"
    summary = "允许用户创建新的讨论频道。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_name",
            "type": "string",
            "description": "新频道的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示频道是否成功创建的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果频道名称为空或已存在。"}
    ]


class SlackShareFile(VirtualFunctionApp):
    name = "SlackShareFile"
    summary = "允许用户上传和共享文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要上传的文件的本地路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "共享文件的远程URL。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果文件路径无效。"}
    ]


class SlackSearchMessages(VirtualFunctionApp):
    name = "SlackSearchMessages"
    summary = "允许用户根据关键字搜索历史消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "messages", "type": "array", "description": "匹配搜索条件的消息列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果关键字为空。"}
    ]


class SlackManageMembers(VirtualFunctionApp):
    name = "SlackManageMembers"
    summary = "允许用户添加或移除频道成员。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_name",
            "type": "string",
            "description": "要管理的频道的名称。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": '操作类型，允许值为"add"或"remove"。',
            "required": True,
        },
        {
            "name": "member_name",
            "type": "string",
            "description": "要添加或移除的成员名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果操作类型无效。"}
    ]


class SlackSendNotification(VirtualFunctionApp):
    name = "SlackSendNotification"
    summary = "允许用户设置提醒，确保重要消息不会被错过。"
    parameters: List[ArgParameter] = [
        {
            "name": "notification_time",
            "type": "string",
            "description": '提醒的时间，格式为"YYYY-MM-DD HH:MM"。',
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "提醒内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示通知是否成功设置的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果时间格式不正确。"}
    ]


class SlackRecordMeeting(VirtualFunctionApp):
    name = "SlackRecordMeeting"
    summary = "允许用户记录会议内容并分享给团队成员。"
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_notes",
            "type": "string",
            "description": "会议记录内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示会议记录是否成功保存的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果会议记录内容为空。"}
    ]


class SlackSetStatus(VirtualFunctionApp):
    name = "SlackSetStatus"
    summary = "允许用户设置个人状态以告知其他成员自己的可用性。"
    parameters: List[ArgParameter] = [
        {
            "name": "status_message",
            "type": "string",
            "description": "用户的状态消息。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示状态是否成功设置的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果状态消息为空。"}
    ]


class SlackSendEmoji(VirtualFunctionApp):
    name = "SlackSendEmoji"
    summary = "允许用户在消息中添加表情符号以增强沟通效果。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_or_user",
            "type": "string",
            "description": "要发送表情的目标频道或用户的名称。",
            "required": True,
        },
        {
            "name": "emoji",
            "type": "string",
            "description": "要发送的表情符号。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示表情是否成功发送的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果表情符号无效。"}
    ]


class SlackArchiveChannel(VirtualFunctionApp):
    name = "SlackArchiveChannel"
    summary = "允许用户将不再活跃的频道归档以保持界面整洁。"
    parameters: List[ArgParameter] = [
        {
            "name": "channel_name",
            "type": "string",
            "description": "要归档的频道名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示频道是否成功归档的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果频道不存在。"}
    ]


@register_app()
class Slack(FunctionApp):
    name_for_human = "Slack"
    description_for_human = "Slack工具包旨在增强团队沟通和协作的能力，提供消息发送、频道管理、文件共享等功能，适用于企业用户和团队。"
    name_for_model = "Slack"
    description_for_model = "Slack工具包旨在增强团队沟通和协作的能力，提供消息发送、频道管理、文件共享等功能，适用于企业用户和团队。"
    app_classes = [
        SlackSendMessage,
        SlackCreateChannel,
        SlackShareFile,
        SlackSearchMessages,
        SlackManageMembers,
        SlackSendNotification,
        SlackRecordMeeting,
        SlackSetStatus,
        SlackSendEmoji,
        SlackArchiveChannel,
    ]


#################### TongHuaShun ####################


class TongHuaShunGetRealTimeStockData(VirtualFunctionApp):
    name = "TongHuaShunGetRealTimeStockData"
    summary = "获取指定股票的实时行情数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码（例如，AAPL表示苹果公司）。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stock_data",
            "type": "object",
            "description": "包含股票的当前价格、涨跌幅等信息的对象。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunGetHistoricalTradingRecords(VirtualFunctionApp):
    name = "TongHuaShunGetHistoricalTradingRecords"
    summary = "查询用户的历史交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "查询的起始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "查询的结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trading_records",
            "type": "array",
            "description": "包含用户所有交易记录的数组。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunCreateInvestmentPortfolio(VirtualFunctionApp):
    name = "TongHuaShunCreateInvestmentPortfolio"
    summary = "创建新的投资组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_name",
            "type": "string",
            "description": "投资组合的名称。",
            "required": True,
        },
        {
            "name": "initial_investment",
            "type": "number",
            "description": "初始投资金额。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "新创建投资组合的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunExecuteTrade(VirtualFunctionApp):
    name = "TongHuaShunExecuteTrade"
    summary = "执行股票的买入或卖出交易。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "投资组合的唯一标识符。",
            "required": True,
        },
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码。",
            "required": True,
        },
        {
            "name": "trade_type",
            "type": "string",
            "description": '交易类型（"buy"或"sell"）。',
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "交易的股票数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "交易是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "ConflictException",
            "description": "当尝试执行的交易与当前投资组合状态冲突时触发。",
        }
    ]


class TongHuaShunGetMarketNews(VirtualFunctionApp):
    name = "TongHuaShunGetMarketNews"
    summary = "获取最新的市场新闻和分析报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "新闻类别（例如，“股票市场”，“经济”等）。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_articles",
            "type": "array",
            "description": "包含最新市场新闻的文章数组。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunSetPriceAlert(VirtualFunctionApp):
    name = "TongHuaShunSetPriceAlert"
    summary = "设置股票价格提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        },
        {
            "name": "target_price",
            "type": "number",
            "description": "目标价格，达到该价格时将发送提醒。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "设置的价格提醒的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunAnalyzeStockTrend(VirtualFunctionApp):
    name = "TongHuaShunAnalyzeStockTrend"
    summary = "分析指定股票的趋势。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trend_analysis",
            "type": "object",
            "description": "包含股票趋势分析的对象。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunGetInvestmentReturns(VirtualFunctionApp):
    name = "TongHuaShunGetInvestmentReturns"
    summary = "获取用户投资组合的收益报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "投资组合的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "returns_report",
            "type": "object",
            "description": "包含收益报告的对象。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunAccessSavedTradingStrategies(VirtualFunctionApp):
    name = "TongHuaShunAccessSavedTradingStrategies"
    summary = "访问用户保存的交易策略。"
    parameters: List[ArgParameter] = [
        {
            "name": "strategy_name",
            "type": "string",
            "description": "策略名称（可选）。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "strategies",
            "type": "array",
            "description": "包含用户保存的交易策略的数组。",
        }
    ]
    exceptions: List[ArgException] = []


class TongHuaShunGetFinancialReports(VirtualFunctionApp):
    name = "TongHuaShunGetFinancialReports"
    summary = "获取指定股票的财务报表。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "financial_report",
            "type": "object",
            "description": "包含财务报表的对象。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class TongHuaShun(FunctionApp):
    name_for_human = "同花顺"
    description_for_human = "提供股票交易、行情分析、投资组合管理等功能的工具包。"
    name_for_model = "TongHuaShun"
    description_for_model = "同花顺工具包提供股票交易、行情分析、投资组合管理等功能，旨在帮助个人投资者实时获取股票数据、历史交易记录和市场资讯，以便做出明智的投资决策。"
    app_classes = [
        TongHuaShunGetRealTimeStockData,
        TongHuaShunGetHistoricalTradingRecords,
        TongHuaShunCreateInvestmentPortfolio,
        TongHuaShunExecuteTrade,
        TongHuaShunGetMarketNews,
        TongHuaShunSetPriceAlert,
        TongHuaShunAnalyzeStockTrend,
        TongHuaShunGetInvestmentReturns,
        TongHuaShunAccessSavedTradingStrategies,
        TongHuaShunGetFinancialReports,
    ]


#################### WeChatPay ####################


class WeChatPayCreateOrder(VirtualFunctionApp):
    name = "WeChatPayCreateOrder"
    summary = "创建新的支付订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "支付金额，必须大于0。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "订单描述，最多100个字符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "创建的订单的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入的金额小于等于0或描述超出字符限制时触发。",
        }
    ]


class WeChatPayQueryOrder(VirtualFunctionApp):
    name = "WeChatPayQueryOrder"
    summary = "查询特定订单的状态和详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要查询的订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "order_status", "type": "string", "description": "订单的当前状态。"},
        {
            "name": "order_details",
            "type": "object",
            "description": "订单的详细信息，包括金额和描述。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的订单不存在时触发。"}
    ]


class WeChatPayConfirmPayment(VirtualFunctionApp):
    name = "WeChatPayConfirmPayment"
    summary = "确认用户的支付是否成功。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要确认的订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "payment_status",
            "type": "boolean",
            "description": "支付是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的订单不存在时触发。"}
    ]


class WeChatPayTransferFunds(VirtualFunctionApp):
    name = "WeChatPayTransferFunds"
    summary = "向其他微信用户转账。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_id",
            "type": "string",
            "description": "收款人的微信用户ID。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "转账金额，必须大于0。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transfer_status",
            "type": "boolean",
            "description": "转账操作的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入的金额小于等于0或收款人ID无效时触发。",
        }
    ]


class WeChatPaySendRedEnvelope(VirtualFunctionApp):
    name = "WeChatPaySendRedEnvelope"
    summary = "通过微信发送红包。"
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "红包金额，必须大于0。",
            "required": True,
        },
        {
            "name": "recipient_ids",
            "type": "array",
            "description": "收红包的用户ID列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "envelope_id",
            "type": "string",
            "description": "发送的红包的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入的金额小于等于0或收件人ID无效时触发。",
        }
    ]


class WeChatPayQueryTransactionHistory(VirtualFunctionApp):
    name = "WeChatPayQueryTransactionHistory"
    summary = "查询用户的交易历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的交易记录数量的最大值，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "transactions", "type": "array", "description": "交易记录的列表。"}
    ]
    exceptions: List[ArgException] = []


class WeChatPayRequestRefund(VirtualFunctionApp):
    name = "WeChatPayRequestRefund"
    summary = "申请退款。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要退款的订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "refund_status", "type": "boolean", "description": "退款申请的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的订单不存在时触发。"}
    ]


class WeChatPayGetUserInfo(VirtualFunctionApp):
    name = "WeChatPayGetUserInfo"
    summary = "获取用户的支付信息和设置。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "包含用户的支付信息和设置的对象。",
        }
    ]
    exceptions: List[ArgException] = []


class WeChatPayUpdatePaymentSettings(VirtualFunctionApp):
    name = "WeChatPayUpdatePaymentSettings"
    summary = "更新用户的支付设置。"
    parameters: List[ArgParameter] = [
        {
            "name": "payment_method",
            "type": "string",
            "description": "新的支付方式（如“银行卡”、“支付宝”等），必须是预定义的选项之一。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "update_status", "type": "boolean", "description": "更新操作的状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当支付方式无效时触发。"}
    ]


class WeChatPayCheckAccountBalance(VirtualFunctionApp):
    name = "WeChatPayCheckAccountBalance"
    summary = "查询用户的微信账户余额。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "balance", "type": "number", "description": "用户的账户余额。"}
    ]
    exceptions: List[ArgException] = []


@register_app()
class WeChatPay(FunctionApp):
    name_for_human = "微信支付"
    description_for_human = (
        "一个集成在微信中的支付工具，支持线上线下支付、转账、红包等功能。"
    )
    name_for_model = "WeChatPay"
    description_for_model = "微信支付工具包集成了多种支付功能，包括订单创建、支付状态确认、转账和红包发送等。该工具包旨在帮助用户方便快捷地进行支付操作，同时确保交易的安全性和隐私保护。"
    app_classes = [
        WeChatPayCreateOrder,
        WeChatPayQueryOrder,
        WeChatPayConfirmPayment,
        WeChatPayTransferFunds,
        WeChatPaySendRedEnvelope,
        WeChatPayQueryTransactionHistory,
        WeChatPayRequestRefund,
        WeChatPayGetUserInfo,
        WeChatPayUpdatePaymentSettings,
        WeChatPayCheckAccountBalance,
    ]


#################### Alipay ####################


class AlipayGetAccountBalance(VirtualFunctionApp):
    name = "AlipayGetAccountBalance"
    summary = "Query the user's account balance."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "balance",
            "type": "number",
            "description": "The current balance of the user's account.",
        }
    ]
    exceptions: List[ArgException] = []


class AlipayGetTransactionHistory(VirtualFunctionApp):
    name = "AlipayGetTransactionHistory"
    summary = "Retrieve the user's transaction history."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "The maximum number of transaction records to return, default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "A list of the user's transaction records.",
        }
    ]
    exceptions: List[ArgException] = []


class AlipayMakePayment(VirtualFunctionApp):
    name = "AlipayMakePayment"
    summary = "Perform an online payment."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The payment amount.",
            "required": True,
        },
        {
            "name": "payee_id",
            "type": "string",
            "description": "The unique identifier of the payee.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the payment was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'amount' is negative or the payee does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "Insufficient balance for the payment.",
        },
    ]


class AlipayTransferFunds(VirtualFunctionApp):
    name = "AlipayTransferFunds"
    summary = "Transfer funds to another account."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The transfer amount.",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "The unique identifier of the recipient.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the transfer was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'amount' is negative or the recipient does not exist.",
        },
        {
            "name": "ConflictException",
            "description": "Insufficient balance for the transfer.",
        },
    ]


class AlipayRepayCreditCard(VirtualFunctionApp):
    name = "AlipayRepayCreditCard"
    summary = "Make a credit card repayment."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "The repayment amount.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the repayment was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "The 'amount' is negative."}
    ]


class AlipayPurchaseInvestmentProduct(VirtualFunctionApp):
    name = "AlipayPurchaseInvestmentProduct"
    summary = "Purchase an investment product."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "product_id",
            "type": "string",
            "description": "The unique identifier of the investment product.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the investment product purchase was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The investment product does not exist.",
        }
    ]


class AlipaySetPaymentPassword(VirtualFunctionApp):
    name = "AlipaySetPaymentPassword"
    summary = "Set or change the payment password."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "new_password",
            "type": "string",
            "description": "The new payment password.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the payment password was set successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The new password does not meet the required criteria.",
        }
    ]


class AlipayUpdateAccountInfo(VirtualFunctionApp):
    name = "AlipayUpdateAccountInfo"
    summary = "Update the user's personal information."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "new_info",
            "type": "object",
            "description": "An object containing the information to be updated, including fields like `name`, `email`, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the user's information was updated successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The new information format is incorrect.",
        }
    ]


class AlipayGetTransactionDetails(VirtualFunctionApp):
    name = "AlipayGetTransactionDetails"
    summary = "Query the details of a specific transaction."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "The unique identifier of the transaction.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_details",
            "type": "object",
            "description": "An object containing the details of the transaction.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The transaction does not exist."}
    ]


class AlipaySetAccountSecurity(VirtualFunctionApp):
    name = "AlipaySetAccountSecurity"
    summary = "Set the security options for the account."
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "The unique identifier of the user.",
            "required": True,
        },
        {
            "name": "security_options",
            "type": "object",
            "description": "An object containing security options, including fields like `two_factor_auth`, etc.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Whether the security settings were applied successfully.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Alipay(FunctionApp):
    name_for_human = "Alipay App"
    description_for_human = "App for convenient online payment, fund transfer, investment product purchase, and credit card repayment."
    name_for_model = "Alipay"
    description_for_model = "Alipay app provides convenient online payment, fund transfer, investment product purchase, and credit card repayment functionalities, allowing users to access payment records, account balances, and transaction details via API."
    app_classes = [
        AlipayGetAccountBalance,
        AlipayGetTransactionHistory,
        AlipayMakePayment,
        AlipayTransferFunds,
        AlipayRepayCreditCard,
        AlipayPurchaseInvestmentProduct,
        AlipaySetPaymentPassword,
        AlipayUpdateAccountInfo,
        AlipayGetTransactionDetails,
        AlipaySetAccountSecurity,
    ]


#################### JdFinance ####################


class JdFinanceGetUserCreditScore(VirtualFunctionApp):
    name = "JdFinanceGetUserCreditScore"
    summary = "获取用户的信用评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "credit_score", "type": "number", "description": "用户的信用评分。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_id格式不正确。"}
    ]


class JdFinanceQueryInvestmentProducts(VirtualFunctionApp):
    name = "JdFinanceQueryInvestmentProducts"
    summary = "查询可用的理财产品信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_type",
            "type": "string",
            "description": "理财产品类型，例如“基金”、“股票”等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "products", "type": "array", "description": "理财产品的详细信息列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果product_type格式不正确。",
        }
    ]


class JdFinanceGetUserTransactionHistory(VirtualFunctionApp):
    name = "JdFinanceGetUserTransactionHistory"
    summary = "获取用户的交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "transactions", "type": "array", "description": "用户的交易记录列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_id格式不正确。"}
    ]


class JdFinanceCreateCreditApplication(VirtualFunctionApp):
    name = "JdFinanceCreateCreditApplication"
    summary = "创建消费信贷申请。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "申请的信贷金额。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "application_id",
            "type": "string",
            "description": "创建的信贷申请的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果user_id或amount格式不正确。",
        }
    ]


class JdFinanceUpdateUserInvestmentPreference(VirtualFunctionApp):
    name = "JdFinanceUpdateUserInvestmentPreference"
    summary = "更新用户的理财产品偏好。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "preferences",
            "type": "object",
            "description": "用户的新的理财产品偏好设置。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果user_id格式不正确或preferences格式不正确。",
        }
    ]


class JdFinanceQueryInsuranceServices(VirtualFunctionApp):
    name = "JdFinanceQueryInsuranceServices"
    summary = "查询用户的保险服务信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "insurance_services",
            "type": "array",
            "description": "用户的保险服务信息列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_id格式不正确。"}
    ]


class JdFinanceGetUserAccountBalance(VirtualFunctionApp):
    name = "JdFinanceGetUserAccountBalance"
    summary = "获取用户的账户余额。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "balance", "type": "number", "description": "用户的账户余额。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_id格式不正确。"}
    ]


class JdFinanceGetInvestmentProductPerformance(VirtualFunctionApp):
    name = "JdFinanceGetInvestmentProductPerformance"
    summary = "查看理财产品的历史表现。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "理财产品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance",
            "type": "object",
            "description": "理财产品的历史表现数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果product_id格式不正确。"}
    ]


class JdFinanceDeleteCreditApplication(VirtualFunctionApp):
    name = "JdFinanceDeleteCreditApplication"
    summary = "删除消费信贷申请。"
    parameters: List[ArgParameter] = [
        {
            "name": "application_id",
            "type": "string",
            "description": "信贷申请的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果application_id格式不正确。",
        }
    ]


class JdFinanceGetInvestmentProductRecommendations(VirtualFunctionApp):
    name = "JdFinanceGetInvestmentProductRecommendations"
    summary = "获取理财产品推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "理财产品推荐列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果user_id格式不正确。"}
    ]


@register_app()
class JdFinance(FunctionApp):
    name_for_human = "京东金融"
    description_for_human = (
        "一个提供多种金融服务的工具包，包括信用评分、理财产品和交易记录的访问。"
    )
    name_for_model = "JdFinance"
    description_for_model = "此工具包提供了与京东金融服务的无缝集成，允许开发者访问用户的信用评分、理财产品信息、交易记录以及其他金融服务，旨在增强金融应用的功能和用户体验。"
    app_classes = [
        JdFinanceGetUserCreditScore,
        JdFinanceQueryInvestmentProducts,
        JdFinanceGetUserTransactionHistory,
        JdFinanceCreateCreditApplication,
        JdFinanceUpdateUserInvestmentPreference,
        JdFinanceQueryInsuranceServices,
        JdFinanceGetUserAccountBalance,
        JdFinanceGetInvestmentProductPerformance,
        JdFinanceDeleteCreditApplication,
        JdFinanceGetInvestmentProductRecommendations,
    ]


#################### XueQiu ####################


class XueQiuGetStockQuote(VirtualFunctionApp):
    name = "XueQiuGetStockQuote"
    summary = "获取特定股票的实时行情。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "price", "type": "number", "description": "当前股票价格。"},
        {"name": "change", "type": "number", "description": "股票价格变动。"},
        {"name": "volume", "type": "number", "description": "当前交易量。"},
    ]
    exceptions: List[ArgException] = []


class XueQiuManagePortfolio(VirtualFunctionApp):
    name = "XueQiuManagePortfolio"
    summary = "管理用户的投资组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'add', 'remove', 'update'）。",
            "required": True,
        },
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "股票数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当尝试添加已存在的股票时。"}
    ]


class XueQiuGetFinancialNews(VirtualFunctionApp):
    name = "XueQiuGetFinancialNews"
    summary = "获取最新的财经新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "新闻类别，例如“市场动态”。",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大新闻数量，默认值为5。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "articles",
            "type": "array",
            "description": "新闻文章列表，每个文章包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = []


class XueQiuGetHistoricalData(VirtualFunctionApp):
    name = "XueQiuGetHistoricalData"
    summary = "查询特定股票的历史数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "查询开始日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "查询结束日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_prices",
            "type": "array",
            "description": "包含历史价格数据的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当日期格式不正确时。"}
    ]


class XueQiuAnalyzeInvestment(VirtualFunctionApp):
    name = "XueQiuAnalyzeInvestment"
    summary = "分析用户的投资表现。"
    parameters: List[ArgParameter] = [
        {
            "name": "portfolio_id",
            "type": "string",
            "description": "投资组合的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_report",
            "type": "object",
            "description": "包含投资表现报告的对象，包括收益率、风险等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的投资组合不存在时。"}
    ]


class XueQiuStockScreener(VirtualFunctionApp):
    name = "XueQiuStockScreener"
    summary = "根据条件筛选股票。"
    parameters: List[ArgParameter] = [
        {
            "name": "criteria",
            "type": "object",
            "description": "筛选条件对象，包括市值、PE比率等。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大股票数量，默认值为10。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_stocks",
            "type": "array",
            "description": "符合条件的股票列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当筛选条件格式不正确时。"}
    ]


class XueQiuSetPriceAlert(VirtualFunctionApp):
    name = "XueQiuSetPriceAlert"
    summary = "设置股票价格提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票代码。",
            "required": True,
        },
        {
            "name": "target_price",
            "type": "number",
            "description": "目标价格。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提醒设置是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当目标价格不合理时。"}
    ]


class XueQiuCommunityDiscussion(VirtualFunctionApp):
    name = "XueQiuCommunityDiscussion"
    summary = "参与社区讨论。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "讨论主题。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "用户消息。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当消息内容为空时。"}
    ]


class XueQiuManageTradeHistory(VirtualFunctionApp):
    name = "XueQiuManageTradeHistory"
    summary = "管理用户的交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'view', 'delete'）。",
            "required": True,
        },
        {
            "name": "trade_id",
            "type": "string",
            "description": "交易记录的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的交易记录不存在时。"}
    ]


class XueQiuManageFunds(VirtualFunctionApp):
    name = "XueQiuManageFunds"
    summary = "管理用户的投资资金。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'add', 'withdraw'）。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "资金金额。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当资金操作不合理时。"}
    ]


class XueQiuSearchStock(VirtualFunctionApp):
    name = "XueQiuSearchStock"
    summary = "根据股票名称或代码搜索股票。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "股票名称或代码。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大股票数量，默认值为5。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stock_symbols",
            "type": "array",
            "description": "符合条件的股票代码列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当查询为空时。"}
    ]


class XueQiuSearchPortfolio(VirtualFunctionApp):
    name = "XueQiuSearchPortfolio"
    summary = "根据用户条件搜索投资组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户唯一标识符。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大投资组合数量，默认值为5。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio_ids",
            "type": "array",
            "description": "符合条件的投资组合列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有投资组合时。"}
    ]


class XueQiuSearchTradeHistory(VirtualFunctionApp):
    name = "XueQiuSearchTradeHistory"
    summary = "根据条件搜索交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户唯一标识符。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大交易记录数量，默认值为5。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trade_ids",
            "type": "array",
            "description": "符合条件的交易记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有交易记录时。"}
    ]


@register_app()
class XueQiu(FunctionApp):
    name_for_human = "雪球"
    description_for_human = (
        "一个全面的股票投资管理平台，帮助用户获取实时股市数据和管理投资信息。"
    )
    name_for_model = "XueQiu"
    description_for_model = "XueQiu工具包提供了一个全面的股票投资管理平台，允许用户获取实时股票行情、管理投资组合、获取财经资讯以及进行市场分析。该工具包旨在帮助个人投资者做出明智的投资决策，同时也面临一定的潜在风险，如财务损失和隐私泄露。"
    app_classes = [
        XueQiuGetStockQuote,
        XueQiuManagePortfolio,
        XueQiuGetFinancialNews,
        XueQiuGetHistoricalData,
        XueQiuAnalyzeInvestment,
        XueQiuStockScreener,
        XueQiuSetPriceAlert,
        XueQiuCommunityDiscussion,
        XueQiuManageTradeHistory,
        XueQiuManageFunds,
        XueQiuSearchStock,
        XueQiuSearchPortfolio,
        XueQiuSearchTradeHistory,
    ]


#################### FutuNiuNiu ####################


class FutuNiuNiuGetRealTimeStockPrice(VirtualFunctionApp):
    name = "FutuNiuNiuGetRealTimeStockPrice"
    summary = "获取指定股票的实时价格。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”代表苹果公司。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "current_price",
            "type": "number",
            "description": "股票的当前实时价格。",
        }
    ]
    exceptions: List[ArgException] = []


class FutuNiuNiuGetUserTradeHistory(VirtualFunctionApp):
    name = "FutuNiuNiuGetUserTradeHistory"
    summary = "查询用户的交易记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "trade_history",
            "type": "array",
            "description": "包含用户所有交易记录的数组，每个记录包含交易时间、股票代码、交易类型、数量和价格。",
        }
    ]
    exceptions: List[ArgException] = []


class FutuNiuNiuGetUserAccountInfo(VirtualFunctionApp):
    name = "FutuNiuNiuGetUserAccountInfo"
    summary = "获取用户的账户信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "account_info",
            "type": "object",
            "description": "用户账户的详细信息，包括余额、持仓和可用资金。",
            "fields": {
                "balance": {"type": "number", "description": "用户账户的当前余额。"},
                "positions": {
                    "type": "array",
                    "description": "用户持有的股票及其数量的数组。",
                },
                "available_funds": {
                    "type": "number",
                    "description": "用户可用的资金。",
                },
            },
        }
    ]
    exceptions: List[ArgException] = []


class FutuNiuNiuBuyStock(VirtualFunctionApp):
    name = "FutuNiuNiuBuyStock"
    summary = "执行股票买入操作。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "购买的股票数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "order_id", "type": "string", "description": "成功买入的订单ID。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当股票代码或数量无效时触发。",
        }
    ]


class FutuNiuNiuSellStock(VirtualFunctionApp):
    name = "FutuNiuNiuSellStock"
    summary = "执行股票卖出操作。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "卖出的股票数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "order_id", "type": "string", "description": "成功卖出的订单ID。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当股票代码或数量无效时触发。",
        }
    ]


class FutuNiuNiuSearchStockHistoricalData(VirtualFunctionApp):
    name = "FutuNiuNiuSearchStockHistoricalData"
    summary = "搜索特定股票的历史数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "查询的起始日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "查询的结束日期，格式为“YYYY-MM-DD”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "array",
            "description": "指定日期范围内的股票历史数据数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当日期格式不正确时触发。"}
    ]


class FutuNiuNiuGetMarketAnalysisReport(VirtualFunctionApp):
    name = "FutuNiuNiuGetMarketAnalysisReport"
    summary = "获取市场分析报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "string",
            "description": "针对指定股票的市场分析报告文本。",
        }
    ]
    exceptions: List[ArgException] = []


class FutuNiuNiuSetPriceAlert(VirtualFunctionApp):
    name = "FutuNiuNiuSetPriceAlert"
    summary = "设置股票价格提醒。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        },
        {
            "name": "target_price",
            "type": "number",
            "description": "当股票价格达到此值时触发提醒。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当股票代码或目标价格无效时触发。",
        }
    ]


class FutuNiuNiuGetUserPortfolio(VirtualFunctionApp):
    name = "FutuNiuNiuGetUserPortfolio"
    summary = "查询用户的资产组合。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "portfolio",
            "type": "array",
            "description": "用户的资产组合，包括股票代码、持仓数量和当前价格的数组。",
        }
    ]
    exceptions: List[ArgException] = []


class FutuNiuNiuGetStockNews(VirtualFunctionApp):
    name = "FutuNiuNiuGetStockNews"
    summary = "获取股票的新闻和公告。"
    parameters: List[ArgParameter] = [
        {
            "name": "stock_symbol",
            "type": "string",
            "description": "股票的代码，例如“AAPL”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "news_articles",
            "type": "array",
            "description": "关于指定股票的新闻和公告的数组。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class FutuNiuNiu(FunctionApp):
    name_for_human = "富途牛牛"
    description_for_human = (
        "一个在线股票交易平台的工具包，提供实时行情、市场分析和投资工具。"
    )
    name_for_model = "FutuNiuNiu"
    description_for_model = "富途牛牛工具包提供了一个全面的API接口，允许用户实时获取股票行情、查询交易记录和账户信息，并执行买入和卖出操作，旨在帮助个人投资者有效管理其投资组合和交易活动。"
    app_classes = [
        FutuNiuNiuGetRealTimeStockPrice,
        FutuNiuNiuGetUserTradeHistory,
        FutuNiuNiuGetUserAccountInfo,
        FutuNiuNiuBuyStock,
        FutuNiuNiuSellStock,
        FutuNiuNiuSearchStockHistoricalData,
        FutuNiuNiuGetMarketAnalysisReport,
        FutuNiuNiuSetPriceAlert,
        FutuNiuNiuGetUserPortfolio,
        FutuNiuNiuGetStockNews,
    ]


#################### XiaomiFinance ####################


class XiaomiFinanceGetUserAccountInfo(VirtualFunctionApp):
    name = "XiaomiFinanceGetUserAccountInfo"
    summary = "检索用户的账户信息，包括账户余额、账户状态等。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "account_info",
            "type": "object",
            "description": "包含账户信息的对象，字段包括余额、状态等。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaomiFinanceGetTransactionRecords(VirtualFunctionApp):
    name = "XiaomiFinanceGetTransactionRecords"
    summary = "检索用户的交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "指定返回的最大交易记录数，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_records",
            "type": "array",
            "description": "包含交易记录的数组，每个记录包括金额、时间、类型等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaomiFinanceGetInvestmentProducts(VirtualFunctionApp):
    name = "XiaomiFinanceGetInvestmentProducts"
    summary = "检索可用的理财产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "investment_products",
            "type": "array",
            "description": "可用理财产品的数组，每个产品包括名称、收益率、风险等级等信息。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaomiFinanceApplyForCredit(VirtualFunctionApp):
    name = "XiaomiFinanceApplyForCredit"
    summary = "提交消费信贷申请。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "申请的信贷金额，必须大于0。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "申请是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果申请金额不符合要求，抛出此异常。",
        }
    ]


class XiaomiFinanceManageInsuranceProducts(VirtualFunctionApp):
    name = "XiaomiFinanceManageInsuranceProducts"
    summary = "管理用户的保险产品信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，可能的值包括'add'、'update'、'delete'。",
            "required": True,
        },
        {
            "name": "product_info",
            "type": "object",
            "description": "保险产品信息对象，字段包括产品ID、保额、保费等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果操作不符合要求，抛出此异常。",
        }
    ]


class XiaomiFinanceUpdateUserAccountInfo(VirtualFunctionApp):
    name = "XiaomiFinanceUpdateUserAccountInfo"
    summary = "更新用户的账户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        },
        {
            "name": "new_info",
            "type": "object",
            "description": "新的账户信息对象，字段包括地址、电话号码等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果新信息格式不正确，抛出此异常。",
        }
    ]


class XiaomiFinanceGetUserCreditScore(VirtualFunctionApp):
    name = "XiaomiFinanceGetUserCreditScore"
    summary = "获取用户的信用评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "credit_score",
            "type": "number",
            "description": "用户的信用评分，范围从300到850。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaomiFinanceDeleteTransactionRecord(VirtualFunctionApp):
    name = "XiaomiFinanceDeleteTransactionRecord"
    summary = "删除指定的交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "要删除的交易记录的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "删除操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果交易记录不存在，抛出此异常。"}
    ]


class XiaomiFinanceGetInvestmentProductHistory(VirtualFunctionApp):
    name = "XiaomiFinanceGetInvestmentProductHistory"
    summary = "获取理财产品的历史表现。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "理财产品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_history",
            "type": "array",
            "description": "理财产品的历史表现数组，包括时间段、收益等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果产品ID无效，抛出此异常。"}
    ]


class XiaomiFinanceGetInvestmentRecommendations(VirtualFunctionApp):
    name = "XiaomiFinanceGetInvestmentRecommendations"
    summary = "获取理财产品推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommendations",
            "type": "array",
            "description": "理财产品推荐的数组，每个推荐包括产品ID和推荐理由。",
        }
    ]
    exceptions: List[ArgException] = []


class XiaomiFinanceGetUserStoredData(VirtualFunctionApp):
    name = "XiaomiFinanceGetUserStoredData"
    summary = "获取用户存储的地址和支付信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，格式为电子邮件或手机号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "包含用户存储的地址和支付信息的对象，字段包括地址、支付方式等。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class XiaomiFinance(FunctionApp):
    name_for_human = "小米金融"
    description_for_human = (
        "小米金融工具包提供全面的金融服务API，帮助用户管理个人金融信息。"
    )
    name_for_model = "XiaomiFinance"
    description_for_model = "小米金融工具包提供了全面的金融服务API，允许用户查询账户信息、交易记录和理财产品，提交信贷申请，并管理保险产品。该工具包旨在帮助用户高效管理个人金融信息，同时确保安全性和隐私保护。"
    app_classes = [
        XiaomiFinanceGetUserAccountInfo,
        XiaomiFinanceGetTransactionRecords,
        XiaomiFinanceGetInvestmentProducts,
        XiaomiFinanceApplyForCredit,
        XiaomiFinanceManageInsuranceProducts,
        XiaomiFinanceUpdateUserAccountInfo,
        XiaomiFinanceGetUserCreditScore,
        XiaomiFinanceDeleteTransactionRecord,
        XiaomiFinanceGetInvestmentProductHistory,
        XiaomiFinanceGetInvestmentRecommendations,
        XiaomiFinanceGetUserStoredData,
    ]


#################### YiFangDaFund ####################


class YiFangDaFundGetFundNetValue(VirtualFunctionApp):
    name = "YiFangDaFundGetFundNetValue"
    summary = "允许用户获取特定基金的最新净值。"
    parameters: List[ArgParameter] = [
        {
            "name": "fund_code",
            "type": "string",
            "description": "基金的唯一代码，用于标识特定基金。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "net_value", "type": "number", "description": "基金的最新净值。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提供的基金代码无效。"},
        {"name": "NotFoundException", "description": "基金代码不存在。"},
    ]


class YiFangDaFundGetPortfolio(VirtualFunctionApp):
    name = "YiFangDaFundGetPortfolio"
    summary = "提供用户所投资基金的详细投资组合信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "fund_code",
            "type": "string",
            "description": "基金的唯一代码，用于标识特定基金。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio",
            "type": "object",
            "description": "投资组合的详细信息，包括各类资产的比例。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提供的基金代码无效。"},
        {"name": "NotFoundException", "description": "基金代码不存在。"},
    ]


class YiFangDaFundGetHistoricalPerformance(VirtualFunctionApp):
    name = "YiFangDaFundGetHistoricalPerformance"
    summary = "允许用户查看特定基金的历史表现数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "fund_code",
            "type": "string",
            "description": "基金的唯一代码，用于标识特定基金。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_data",
            "type": "array",
            "description": "基金在指定时间段内的表现数据。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "日期格式不正确。"},
        {"name": "NotFoundException", "description": "基金代码不存在。"},
    ]


class YiFangDaFundSearchFund(VirtualFunctionApp):
    name = "YiFangDaFundSearchFund"
    summary = "允许用户通过关键字搜索可用的基金。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "fund_list",
            "type": "array",
            "description": "匹配搜索条件的基金列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "关键字为空。"}
    ]


class YiFangDaFundGetInvestmentHistory(VirtualFunctionApp):
    name = "YiFangDaFundGetInvestmentHistory"
    summary = "提供用户过去的投资记录和交易历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "investment_history",
            "type": "array",
            "description": "用户的投资记录列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class YiFangDaFundGetFundCategory(VirtualFunctionApp):
    name = "YiFangDaFundGetFundCategory"
    summary = "提供基金的分类信息，如股票型、债券型等。"
    parameters: List[ArgParameter] = [
        {
            "name": "fund_code",
            "type": "string",
            "description": "基金的唯一代码，用于标识特定基金。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "fund_category", "type": "string", "description": "基金的分类信息。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提供的基金代码无效。"},
        {"name": "NotFoundException", "description": "基金代码不存在。"},
    ]


class YiFangDaFundGetManagerInfo(VirtualFunctionApp):
    name = "YiFangDaFundGetManagerInfo"
    summary = "提供基金经理的背景和管理风格信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "fund_code",
            "type": "string",
            "description": "基金的唯一代码，用于标识特定基金。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "manager_info",
            "type": "object",
            "description": "基金经理的详细信息，包括姓名、经验等。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提供的基金代码无效。"},
        {"name": "NotFoundException", "description": "基金代码不存在。"},
    ]


class YiFangDaFundGetMarketUpdates(VirtualFunctionApp):
    name = "YiFangDaFundGetMarketUpdates"
    summary = "提供有关市场动态和相关经济指标的更新。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为5。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_updates",
            "type": "array",
            "description": "最新的市场动态更新列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "返回结果数量不合法。"}
    ]


class YiFangDaFundGetAccountInfo(VirtualFunctionApp):
    name = "YiFangDaFundGetAccountInfo"
    summary = "提供用户的账户余额和投资概况。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "account_info",
            "type": "object",
            "description": "用户账户的详细信息，包括余额和投资概况。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


class YiFangDaFundGetRiskAssessment(VirtualFunctionApp):
    name = "YiFangDaFundGetRiskAssessment"
    summary = "提供用户的投资风险评估报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "risk_assessment",
            "type": "object",
            "description": "用户的风险评估报告，包括风险等级和建议。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功的状态。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户ID无效。"}
    ]


@register_app()
class YiFangDaFund(FunctionApp):
    name_for_human = "易方达基金工具包"
    description_for_human = "提供基金投资和管理服务的API工具包。"
    name_for_model = "YiFangDaFund"
    description_for_model = "易方达基金工具包提供一系列API，允许用户获取基金的净值、投资组合、历史表现等信息，帮助用户做出明智的投资决策，同时也关注用户的账户信息和投资风险评估。"
    app_classes = [
        YiFangDaFundGetFundNetValue,
        YiFangDaFundGetPortfolio,
        YiFangDaFundGetHistoricalPerformance,
        YiFangDaFundSearchFund,
        YiFangDaFundGetInvestmentHistory,
        YiFangDaFundGetFundCategory,
        YiFangDaFundGetManagerInfo,
        YiFangDaFundGetMarketUpdates,
        YiFangDaFundGetAccountInfo,
        YiFangDaFundGetRiskAssessment,
    ]


#################### LiCaiTong ####################


class LiCaiTongGetProductList(VirtualFunctionApp):
    name = "LiCaiTongGetProductList"
    summary = "获取理财产品的列表，支持按类别筛选。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "理财产品的类别，例如'基金'或'股票'",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "products",
            "type": "array",
            "description": "理财产品的列表，每个产品包含id和名称",
        }
    ]
    exceptions: List[ArgException] = []


class LiCaiTongGetProductDetails(VirtualFunctionApp):
    name = "LiCaiTongGetProductDetails"
    summary = "获取特定理财产品的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "理财产品的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "理财产品的详细信息，包括名称、类别、风险等级等",
            "fields": [
                {"name": "name", "type": "string", "description": "产品名称"},
                {"name": "risk_level", "type": "string", "description": "风险等级"},
                {
                    "name": "expected_return",
                    "type": "number",
                    "description": "预期收益率",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'product_id'无效"}
    ]


class LiCaiTongGetUserPortfolio(VirtualFunctionApp):
    name = "LiCaiTongGetUserPortfolio"
    summary = "获取用户的投资组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio",
            "type": "array",
            "description": "用户的投资组合，包含各个投资项目的详细信息",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'user_id'无效"}
    ]


class LiCaiTongUpdateUserPortfolio(VirtualFunctionApp):
    name = "LiCaiTongUpdateUserPortfolio"
    summary = "更新用户的投资组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "portfolio_update",
            "type": "object",
            "description": "更新的投资组合信息，包括投资项目的添加或删除",
            "fields": [
                {"name": "add", "type": "array", "description": "要添加的投资项目"},
                {"name": "remove", "type": "array", "description": "要删除的投资项目"},
            ],
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "如果更新失败"},
        {"name": "NotFoundException", "description": "如果'user_id'无效"},
    ]


class LiCaiTongGetUserEarnings(VirtualFunctionApp):
    name = "LiCaiTongGetUserEarnings"
    summary = "查看用户的收益情况。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "earnings", "type": "number", "description": "用户的总收益"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'user_id'无效"}
    ]


class LiCaiTongSearchProducts(VirtualFunctionApp):
    name = "LiCaiTongSearchProducts"
    summary = "搜索理财产品。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索关键词",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "搜索结果列表，包括符合条件的理财产品",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果'query'无效"}
    ]


class LiCaiTongGetUserTransactionHistory(VirtualFunctionApp):
    name = "LiCaiTongGetUserTransactionHistory"
    summary = "获取用户的历史交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_history",
            "type": "array",
            "description": "用户的历史交易记录",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'user_id'无效"}
    ]


class LiCaiTongGetUserRiskAssessment(VirtualFunctionApp):
    name = "LiCaiTongGetUserRiskAssessment"
    summary = "获取用户的风险评估。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "risk_assessment",
            "type": "string",
            "description": "用户的风险评估结果",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'user_id'无效"}
    ]


class LiCaiTongGetMarketInfo(VirtualFunctionApp):
    name = "LiCaiTongGetMarketInfo"
    summary = "获取市场动态信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "category",
            "type": "string",
            "description": "市场动态的类别，例如'股票'或'基金'",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "market_info", "type": "array", "description": "市场动态信息列表"}
    ]
    exceptions: List[ArgException] = []


class LiCaiTongGetUserInvestmentAdvice(VirtualFunctionApp):
    name = "LiCaiTongGetUserInvestmentAdvice"
    summary = "获取用户的投资建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "investment_advice",
            "type": "string",
            "description": "针对用户的个性化投资建议",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果'user_id'无效"}
    ]


@register_app()
class LiCaiTong(FunctionApp):
    name_for_human = "理财通"
    description_for_human = (
        "一个帮助个人投资者获取理财产品信息、管理投资组合和查看收益的工具包。"
    )
    name_for_model = "LiCaiTong"
    description_for_model = "理财通工具包提供了丰富的理财产品信息及用户投资管理功能，帮助个人投资者获取理财产品、管理投资组合、查看收益，并提供个性化的投资建议和市场动态信息。"
    app_classes = [
        LiCaiTongGetProductList,
        LiCaiTongGetProductDetails,
        LiCaiTongGetUserPortfolio,
        LiCaiTongUpdateUserPortfolio,
        LiCaiTongGetUserEarnings,
        LiCaiTongSearchProducts,
        LiCaiTongGetUserTransactionHistory,
        LiCaiTongGetUserRiskAssessment,
        LiCaiTongGetMarketInfo,
        LiCaiTongGetUserInvestmentAdvice,
    ]


#################### ZhiTouBao ####################


class ZhiTouBaoUserRegistration(VirtualFunctionApp):
    name = "ZhiTouBaoUserRegistration"
    summary = "允许用户创建个人投资账户并收集必要的个人信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "用户的姓名",
            "required": True,
        },
        {
            "name": "email",
            "type": "string",
            "description": "用户的电子邮件地址",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "用户的账户密码",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "注册是否成功"},
        {"name": "user_id", "type": "string", "description": "注册用户的唯一标识符"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入的电子邮件格式不正确或密码不符合要求时。",
        }
    ]


class ZhiTouBaoRiskAssessment(VirtualFunctionApp):
    name = "ZhiTouBaoRiskAssessment"
    summary = "分析用户的风险偏好并生成风险报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "risk_profile",
            "type": "object",
            "description": "用户的风险偏好分析结果，包含以下字段: risk_level: 风险等级 (string), recommendations: 建议 (array of strings)",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoInvestmentAdvice(VirtualFunctionApp):
    name = "ZhiTouBaoInvestmentAdvice"
    summary = "基于市场趋势和用户偏好提供个性化的投资建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "investment_advice",
            "type": "array",
            "description": "个性化的投资建议列表",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoTradeExecution(VirtualFunctionApp):
    name = "ZhiTouBaoTradeExecution"
    summary = "允许用户通过API执行买卖交易。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "交易操作类型，允许值: ['buy', 'sell']",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "交易金额",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "交易是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"},
        {"name": "ConflictException", "description": "当交易金额超过用户账户余额时。"},
    ]


class ZhiTouBaoPortfolioManagement(VirtualFunctionApp):
    name = "ZhiTouBaoPortfolioManagement"
    summary = "帮助用户管理和监控他们的投资组合表现。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "portfolio_summary",
            "type": "object",
            "description": "用户投资组合的总结，包含以下字段: total_value: 投资组合总值 (number), performance: 投资组合表现 (string)",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoMarketAnalysis(VirtualFunctionApp):
    name = "ZhiTouBaoMarketAnalysis"
    summary = "提供实时的市场数据和分析。"
    parameters: List[ArgParameter] = [
        {
            "name": "market_type",
            "type": "string",
            "description": "市场类型，允许值: ['stocks', 'bonds', 'crypto']",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "market_data",
            "type": "object",
            "description": "实时市场数据，包含以下字段: current_price: 当前价格 (number), trend: 市场趋势 (string)",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当市场类型无效时。"}
    ]


class ZhiTouBaoTransactionHistory(VirtualFunctionApp):
    name = "ZhiTouBaoTransactionHistory"
    summary = "允许用户查看其过往的交易记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_history",
            "type": "array",
            "description": "用户的交易历史记录列表",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoNotificationService(VirtualFunctionApp):
    name = "ZhiTouBaoNotificationService"
    summary = "向用户发送投资相关的实时通知。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "notification_type",
            "type": "string",
            "description": "通知类型，允许值: ['market_alert', 'portfolio_update']",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "通知是否成功发送"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoUserFeedbackCollection(VirtualFunctionApp):
    name = "ZhiTouBaoUserFeedbackCollection"
    summary = "收集用户对投资建议的反馈以优化服务。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈是否成功提交"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


class ZhiTouBaoFinancialPlanningApp(VirtualFunctionApp):
    name = "ZhiTouBaoFinancialPlanningApp"
    summary = "提供长期财务规划和预算工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "financial_goals",
            "type": "array",
            "description": "用户的财务目标列表",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "planning_summary",
            "type": "object",
            "description": "财务规划的总结，包含以下字段: total_savings: 总储蓄 (number), recommended_investments: 推荐投资 (array of strings)",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户唯一标识符不存在时。"}
    ]


@register_app()
class ZhiTouBao(FunctionApp):
    name_for_human = "智投宝"
    description_for_human = "智投宝是一个智能投资顾问工具，利用人工智能分析用户风险偏好和市场趋势，提供个性化投资建议，帮助用户做出更明智的投资决策。"
    name_for_model = "ZhiTouBao"
    description_for_model = "智投宝是一个智能投资顾问工具，利用人工智能分析用户风险偏好和市场趋势，提供个性化投资建议，帮助用户做出更明智的投资决策。"
    app_classes = [
        ZhiTouBaoUserRegistration,
        ZhiTouBaoRiskAssessment,
        ZhiTouBaoInvestmentAdvice,
        ZhiTouBaoTradeExecution,
        ZhiTouBaoPortfolioManagement,
        ZhiTouBaoMarketAnalysis,
        ZhiTouBaoTransactionHistory,
        ZhiTouBaoNotificationService,
        ZhiTouBaoUserFeedbackCollection,
        ZhiTouBaoFinancialPlanningApp,
    ]


#################### BaiduTieba ####################


class BaiduTiebaCreatePost(VirtualFunctionApp):
    name = "BaiduTiebaCreatePost"
    summary = "Creates a new post in a specified tieba."
    parameters: List[ArgParameter] = [
        {
            "name": "tieba_name",
            "type": "string",
            "description": "The name of the tieba where the post will be created.",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "The content of the post.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the created post.",
        },
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the post was created successfully.",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The parameters 'tieba_name' or 'content' are invalid.",
        }
    ]


class BaiduTiebaSearchPosts(VirtualFunctionApp):
    name = "BaiduTiebaSearchPosts"
    summary = "Searches for posts in a tieba based on keywords."
    parameters: List[ArgParameter] = [
        {
            "name": "tieba_name",
            "type": "string",
            "description": "The name of the tieba to search in.",
            "required": True,
        },
        {
            "name": "keywords",
            "type": "string",
            "description": "Keywords to search for.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of results to return. Default is 10.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "posts",
            "type": "array",
            "description": "A list of objects, each containing 'post_id', 'title', and 'summary'.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The parameters 'tieba_name' or 'keywords' are invalid.",
        }
    ]


class BaiduTiebaReadPost(VirtualFunctionApp):
    name = "BaiduTiebaReadPost"
    summary = "Reads the content of a specific post."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "content", "type": "string", "description": "The content of the post."}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


class BaiduTiebaDeletePost(VirtualFunctionApp):
    name = "BaiduTiebaDeletePost"
    summary = "Deletes a user's own post from a tieba."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the post was deleted successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


class BaiduTiebaGetUserPosts(VirtualFunctionApp):
    name = "BaiduTiebaGetUserPosts"
    summary = "Retrieves all posts made by a specific user."
    parameters: List[ArgParameter] = [
        {
            "name": "user_name",
            "type": "string",
            "description": "The username of the user.",
            "required": True,
        },
        {
            "name": "tieba_name",
            "type": "string",
            "description": "The name of the tieba.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "posts",
            "type": "array",
            "description": "A list of objects, each containing 'post_id', 'title', and 'content'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The user has no posts."}
    ]


class BaiduTiebaGetTiebaInfo(VirtualFunctionApp):
    name = "BaiduTiebaGetTiebaInfo"
    summary = "Provides general information about a specific tieba."
    parameters: List[ArgParameter] = [
        {
            "name": "tieba_name",
            "type": "string",
            "description": "The name of the tieba.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "info",
            "type": "object",
            "description": "An object containing 'member_count' and 'topic_count'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The tieba does not exist."}
    ]


class BaiduTiebaGetPostComments(VirtualFunctionApp):
    name = "BaiduTiebaGetPostComments"
    summary = "Retrieves comments made on a specific post."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "A list of objects, each containing 'comment_id', 'user_name', and 'content'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


class BaiduTiebaLikePost(VirtualFunctionApp):
    name = "BaiduTiebaLikePost"
    summary = "Likes a specific post to enhance user engagement."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the post was liked successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


class BaiduTiebaGetTrendingPosts(VirtualFunctionApp):
    name = "BaiduTiebaGetTrendingPosts"
    summary = "Retrieves a list of trending posts in a tieba."
    parameters: List[ArgParameter] = [
        {
            "name": "tieba_name",
            "type": "string",
            "description": "The name of the tieba.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_posts",
            "type": "array",
            "description": "A list of objects, each containing 'post_id', 'title', and 'interaction_count'.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The tieba does not exist."}
    ]


class BaiduTiebaReportPost(VirtualFunctionApp):
    name = "BaiduTiebaReportPost"
    summary = "Reports an inappropriate post for moderation."
    parameters: List[ArgParameter] = [
        {
            "name": "post_id",
            "type": "string",
            "description": "The unique identifier of the post.",
            "required": True,
        },
        {
            "name": "reason",
            "type": "string",
            "description": "The reason for reporting the post.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates if the post was reported successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The 'post_id' does not exist."}
    ]


@register_app()
class BaiduTieba(FunctionApp):
    name_for_human = "Baidu Tieba App"
    description_for_human = (
        "App for managing posts and interactions in Baidu Tieba."
    )
    name_for_model = "BaiduTieba"
    description_for_model = "BaiduTieba app provides a set of functionalities that allow users to create, search, read, and delete posts in Baidu Tieba, retrieve user posts and tieba information, view comments and like posts, as well as report inappropriate content, aimed at enhancing social interaction and community management."
    app_classes = [
        BaiduTiebaCreatePost,
        BaiduTiebaSearchPosts,
        BaiduTiebaReadPost,
        BaiduTiebaDeletePost,
        BaiduTiebaGetUserPosts,
        BaiduTiebaGetTiebaInfo,
        BaiduTiebaGetPostComments,
        BaiduTiebaLikePost,
        BaiduTiebaGetTrendingPosts,
        BaiduTiebaReportPost,
    ]


#################### Zhihu ####################


class ZhihuAskQuestion(VirtualFunctionApp):
    name = "ZhihuAskQuestion"
    summary = "允许用户在知乎上提交新问题。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "问题的标题，必需。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "问题的详细描述，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "新提问的唯一标识符。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当问题标题或内容格式不正确时触发。",
        }
    ]


class ZhihuAnswerQuestion(VirtualFunctionApp):
    name = "ZhihuAnswerQuestion"
    summary = "允许用户对特定问题进行回答。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "要回答的问题的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "回答的内容，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "answer_id", "type": "string", "description": "新回答的唯一标识符。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当回答内容格式不正确时触发。",
        }
    ]


class ZhihuCommentOnAnswer(VirtualFunctionApp):
    name = "ZhihuCommentOnAnswer"
    summary = "允许用户对特定回答进行评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "answer_id",
            "type": "string",
            "description": "要评论的回答的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "评论的内容，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "comment_id", "type": "string", "description": "新评论的唯一标识符。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当评论内容格式不正确时触发。",
        }
    ]


class ZhihuSearchQuestions(VirtualFunctionApp):
    name = "ZhihuSearchQuestions"
    summary = "根据关键词搜索特定问题。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的问题关键词，必需。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "可选，返回的最大结果数，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "questions", "type": "array", "description": "匹配的问题列表。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当关键词格式不正确时触发。"}
    ]


class ZhihuGetQuestionDetails(VirtualFunctionApp):
    name = "ZhihuGetQuestionDetails"
    summary = "获取特定问题及其答案的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "question_id",
            "type": "string",
            "description": "要获取详情的问题的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "question_details",
            "type": "object",
            "description": "包含问题及其答案的详细信息。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的问题不存在时触发。"}
    ]


class ZhihuAccessUserProfile(VirtualFunctionApp):
    name = "ZhihuAccessUserProfile"
    summary = "允许用户查看自己的知乎资料。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "包含用户资料的详细信息。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户资料无法访问时触发。"}
    ]


class ZhihuGetUserAnswers(VirtualFunctionApp):
    name = "ZhihuGetUserAnswers"
    summary = "允许用户查看自己在知乎上的所有回答。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "answers", "type": "array", "description": "包含用户所有回答的列表。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有回答时触发。"}
    ]


class ZhihuGetUserComments(VirtualFunctionApp):
    name = "ZhihuGetUserComments"
    summary = "允许用户查看自己在知乎上的所有评论。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "comments",
            "type": "array",
            "description": "包含用户所有评论的列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有评论时触发。"}
    ]


class ZhihuGetPopularQuestions(VirtualFunctionApp):
    name = "ZhihuGetPopularQuestions"
    summary = "允许用户获取当前热门问题的列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "popular_questions",
            "type": "array",
            "description": "当前热门问题的列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当没有热门问题时触发。"}
    ]


class ZhihuGetUserQuestions(VirtualFunctionApp):
    name = "ZhihuGetUserQuestions"
    summary = "允许用户查看自己在知乎上提出的所有问题。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "questions",
            "type": "array",
            "description": "包含用户所有提问的列表。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有提问时触发。"}
    ]


@register_app()
class Zhihu(FunctionApp):
    name_for_human = "知乎工具包"
    description_for_human = "一个用于在知乎平台上进行知识分享与获取的工具包。"
    name_for_model = "Zhihu"
    description_for_model = "该工具包提供了一组API，允许用户在知乎平台上进行提问、回答、评论和搜索问题，旨在增强用户的知识分享与获取能力。"
    app_classes = [
        ZhihuAskQuestion,
        ZhihuAnswerQuestion,
        ZhihuCommentOnAnswer,
        ZhihuSearchQuestions,
        ZhihuGetQuestionDetails,
        ZhihuAccessUserProfile,
        ZhihuGetUserAnswers,
        ZhihuGetUserComments,
        ZhihuGetPopularQuestions,
        ZhihuGetUserQuestions,
    ]


#################### WeChatApp ####################


class WeChatAppSendMessage(VirtualFunctionApp):
    name = "WeChatAppSendMessage"
    summary = "通过API发送文本、语音和图片消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_type",
            "type": "string",
            "description": "消息类型，取值为'text'、'voice'或'image'。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "消息内容，文本消息为文本内容，语音和图片消息为文件路径。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "接收者的用户ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {"name": "message_id", "type": "string", "description": "发送消息的唯一标识符"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当消息类型无效或缺少内容时"}
    ]


class WeChatAppReceiveMessage(VirtualFunctionApp):
    name = "WeChatAppReceiveMessage"
    summary = "接收来自其他用户的消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "messages",
            "type": "array",
            "description": "接收到的消息列表，包含消息内容和发送者信息",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时"}
    ]


class WeChatAppCreateGroupChat(VirtualFunctionApp):
    name = "WeChatAppCreateGroupChat"
    summary = "创建和管理群聊。"
    parameters: List[ArgParameter] = [
        {
            "name": "group_name",
            "type": "string",
            "description": "群聊名称。",
            "required": True,
        },
        {
            "name": "members",
            "type": "array",
            "description": "群聊成员的用户ID列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "group_id", "type": "string", "description": "创建的群聊的唯一标识符"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当群聊已存在时"}
    ]


class WeChatAppPaymentFunction(VirtualFunctionApp):
    name = "WeChatAppPaymentFunction"
    summary = "进行支付操作。"
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "支付金额。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "收款方的用户ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {"name": "transaction_id", "type": "string", "description": "交易的唯一标识符"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当支付金额无效时"}
    ]


class WeChatAppQueryFriendList(VirtualFunctionApp):
    name = "WeChatAppQueryFriendList"
    summary = "获取好友列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "friends",
            "type": "array",
            "description": "好友列表，包含好友的用户ID和昵称",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时"}
    ]


class WeChatAppShareToMoments(VirtualFunctionApp):
    name = "WeChatAppShareToMoments"
    summary = "分享内容到朋友圈。"
    parameters: List[ArgParameter] = [
        {
            "name": "content",
            "type": "string",
            "description": "分享的内容。",
            "required": True,
        },
        {
            "name": "media",
            "type": "string",
            "description": "媒体文件的路径。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当分享内容无效时"}
    ]


class WeChatAppGetUserProfile(VirtualFunctionApp):
    name = "WeChatAppGetUserProfile"
    summary = "获取用户的个人资料信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "profile",
            "type": "object",
            "description": "用户资料对象，包含昵称、头像等字段",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时"}
    ]


class WeChatAppQueryMessageHistory(VirtualFunctionApp):
    name = "WeChatAppQueryMessageHistory"
    summary = "查询历史消息记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户ID。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的消息记录数量，默认值为50。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "messages", "type": "array", "description": "历史消息记录列表"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时"}
    ]


class WeChatAppSendFile(VirtualFunctionApp):
    name = "WeChatAppSendFile"
    summary = "通过API发送文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "文件的本地路径。",
            "required": True,
        },
        {
            "name": "recipient",
            "type": "string",
            "description": "接收者的用户ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当文件路径无效时"}
    ]


class WeChatAppVoiceCall(VirtualFunctionApp):
    name = "WeChatAppVoiceCall"
    summary = "发起语音通话。"
    parameters: List[ArgParameter] = [
        {
            "name": "participant",
            "type": "string",
            "description": "参与通话的用户ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当参与者ID无效时"}
    ]


class WeChatAppSearchUser(VirtualFunctionApp):
    name = "WeChatAppSearchUser"
    summary = "根据昵称或其他信息搜索用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的用户数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "users",
            "type": "array",
            "description": "匹配的用户列表，包含用户ID和昵称",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当搜索无结果时"}
    ]


class WeChatAppAccessStoredData(VirtualFunctionApp):
    name = "WeChatAppAccessStoredData"
    summary = "访问用户存储的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户ID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "存储的数据对象，包含地址、支付方式等字段",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户ID无效时"}
    ]


@register_app()
class WeChatApp(FunctionApp):
    name_for_human = "WeChat App"
    description_for_human = "App for integrating WeChat's messaging, social networking, and payment functionalities."
    name_for_model = "WeChatApp"
    description_for_model = "WeChatApp 是一个多功能API工具包，旨在帮助开发者集成微信的即时通讯、社交网络和支付功能。它支持发送和接收消息、创建群聊、进行支付、查询好友列表及更多功能，同时提供安全性和隐私保护机制。"
    app_classes = [
        WeChatAppSendMessage,
        WeChatAppReceiveMessage,
        WeChatAppCreateGroupChat,
        WeChatAppPaymentFunction,
        WeChatAppQueryFriendList,
        WeChatAppShareToMoments,
        WeChatAppGetUserProfile,
        WeChatAppQueryMessageHistory,
        WeChatAppSendFile,
        WeChatAppVoiceCall,
        WeChatAppSearchUser,
        WeChatAppAccessStoredData,
    ]


#################### QQ ####################


class QQSendMessage(VirtualFunctionApp):
    name = "QQSendMessage"
    summary = "发送文本消息到指定用户。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "接收消息的用户的QQ号码。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "要发送的消息内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "消息是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "发送失败时，消息格式不正确。",
        }
    ]


class QQReceiveMessage(VirtualFunctionApp):
    name = "QQReceiveMessage"
    summary = "接收来自指定用户的最新消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "sender",
            "type": "string",
            "description": "发送消息的用户的QQ号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "message", "type": "string", "description": "接收到的消息内容。"},
        {"name": "success", "type": "boolean", "description": "是否成功接收消息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "没有找到对应的消息。"}
    ]


class QQTransferFile(VirtualFunctionApp):
    name = "QQTransferFile"
    summary = "向指定用户传输文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient",
            "type": "string",
            "description": "接收文件的用户的QQ号码。",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "要传输的文件的本地路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "文件是否成功传输。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "文件路径不正确。"}
    ]


class QQManageGroup(VirtualFunctionApp):
    name = "QQManageGroup"
    summary = "管理群组，包括创建、删除或修改群组信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "group_id",
            "type": "string",
            "description": "群组的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，可以是'create'、'delete'或'update'。",
            "required": True,
        },
        {
            "name": "group_info",
            "type": "object",
            "description": "群组信息（仅在action为'create'或'update'时需要）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "群组操作冲突。"}
    ]


class QQStartVoiceChat(VirtualFunctionApp):
    name = "QQStartVoiceChat"
    summary = "开始与指定用户的语音聊天。"
    parameters: List[ArgParameter] = [
        {
            "name": "participant",
            "type": "string",
            "description": "参与语音聊天的用户的QQ号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "语音聊天是否成功开始。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未在线。"}
    ]


class QQSearchMessages(VirtualFunctionApp):
    name = "QQSearchMessages"
    summary = "在与指定用户的聊天记录中搜索消息。"
    parameters: List[ArgParameter] = [
        {
            "name": "sender",
            "type": "string",
            "description": "发送消息的用户的QQ号码。",
            "required": True,
        },
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的最大消息数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "messages", "type": "array", "description": "匹配的消息列表。"},
        {"name": "success", "type": "boolean", "description": "搜索是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "搜索参数不正确。"}
    ]


class QQSearchUser(VirtualFunctionApp):
    name = "QQSearchUser"
    summary = "根据用户名或其他信息检索用户的QQ号码。"
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "用户的用户名或其他可识别信息。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "qq_number",
            "type": "string",
            "description": "检索到的用户的QQ号码。",
        },
        {"name": "success", "type": "boolean", "description": "是否成功检索用户。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "未找到用户。"}
    ]


class QQGetUserStatus(VirtualFunctionApp):
    name = "QQGetUserStatus"
    summary = "获取指定用户的在线状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的QQ号码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "用户的在线状态（可能值：online, offline, busy）。",
        },
        {"name": "success", "type": "boolean", "description": "状态获取是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未在线。"}
    ]


@register_app()
class QQ(FunctionApp):
    name_for_human = "QQ App"
    description_for_human = "App for integrating QQ messaging functionalities."
    name_for_model = "QQ"
    description_for_model = "QQ工具包提供了丰富的即时通讯功能，包括消息发送、接收、文件传输和群组管理，旨在帮助开发者创建和集成基于QQ的插件和服务。"
    app_classes = [
        QQSendMessage,
        QQReceiveMessage,
        QQTransferFile,
        QQManageGroup,
        QQStartVoiceChat,
        QQSearchMessages,
        QQSearchUser,
        QQGetUserStatus,
    ]


#################### TaoBaoOpenPlatform ####################


class TaoBaoOpenPlatformSearchProduct(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformSearchProduct"
    summary = "允许用户通过关键字搜索商品。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索的关键字，不能为空。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_list",
            "type": "array",
            "description": "包含匹配商品信息的列表，每个商品信息包括商品ID、名称、价格等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'keyword'为空，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformGetProductDetails(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformGetProductDetails"
    summary = "获取指定商品的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "包含商品的详细信息，包括名称、价格、描述、库存等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'product_id'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformCreateOrder(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformCreateOrder"
    summary = "创建新的订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，不能为空。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "购买数量，必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "order_id", "type": "string", "description": "创建的订单唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'quantity'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformUpdateOrder(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformUpdateOrder"
    summary = "更新现有订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符，不能为空。",
            "required": True,
        },
        {
            "name": "new_quantity",
            "type": "integer",
            "description": "新的购买数量，必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'order_id'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformDeleteOrder(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformDeleteOrder"
    summary = "删除指定订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'order_id'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformManageUserComments(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformManageUserComments"
    summary = "允许用户查看和管理商品评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comments_list",
            "type": "array",
            "description": "包含商品评论的列表，每条评论包括评论ID、内容、评分等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'product_id'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformUploadProduct(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformUploadProduct"
    summary = "将新商品上架到淘宝。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "包含商品的详细信息，包括名称、价格、描述、库存等字段，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "新上架商品的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'product_details'格式不正确，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformGetUserInfo(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformGetUserInfo"
    summary = "获取用户的个人信息和历史交易记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "包含用户的个人信息和交易记录，包括用户名、地址、交易历史等字段。",
        }
    ]
    exceptions: List[ArgException] = []


class TaoBaoOpenPlatformSearchOrders(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformSearchOrders"
    summary = "根据条件检索订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "status",
            "type": "string",
            "description": "订单状态过滤条件，选填。",
            "required": False,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_list",
            "type": "array",
            "description": "包含匹配订单信息的列表，每个订单信息包括订单ID、状态、总金额等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'status'无效，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformManagePromotions(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformManagePromotions"
    summary = "创建和管理促销活动。"
    parameters: List[ArgParameter] = [
        {
            "name": "promotion_details",
            "type": "object",
            "description": "包含促销活动的详细信息，包括名称、折扣、开始和结束日期等字段，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "promotion_id",
            "type": "string",
            "description": "创建的促销活动的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'promotion_details'格式不正确，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformAnalyzeSalesData(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformAnalyzeSalesData"
    summary = "提供销售和用户行为的分析报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "date_range",
            "type": "string",
            "description": "分析的时间范围，格式为'YYYY-MM-DD to YYYY-MM-DD'，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "包含分析报告的详细信息，包括销售额、用户行为统计等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果'date_range'格式不正确，则抛出此异常。",
        }
    ]


class TaoBaoOpenPlatformGetUserFeedback(VirtualFunctionApp):
    name = "TaoBaoOpenPlatformGetUserFeedback"
    summary = "处理客户反馈和问题。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，不能为空。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_list",
            "type": "array",
            "description": "包含客户反馈的列表，每条反馈包括反馈ID、内容、评分等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果'product_id'无效，则抛出此异常。",
        }
    ]


@register_app()
class TaoBaoOpenPlatform(FunctionApp):
    name_for_human = "淘宝开放平台"
    description_for_human = "提供对淘宝网数据的访问，包括商品信息、订单管理和用户评论。"
    name_for_model = "TaoBaoOpenPlatform"
    description_for_model = "淘宝开放平台工具包提供对淘宝网数据的全面访问，包括商品信息、订单管理和用户评论，旨在帮助开发者高效地进行商品上架、订单处理和用户互动。"
    app_classes = [
        TaoBaoOpenPlatformSearchProduct,
        TaoBaoOpenPlatformGetProductDetails,
        TaoBaoOpenPlatformCreateOrder,
        TaoBaoOpenPlatformUpdateOrder,
        TaoBaoOpenPlatformDeleteOrder,
        TaoBaoOpenPlatformManageUserComments,
        TaoBaoOpenPlatformUploadProduct,
        TaoBaoOpenPlatformGetUserInfo,
        TaoBaoOpenPlatformSearchOrders,
        TaoBaoOpenPlatformManagePromotions,
        TaoBaoOpenPlatformAnalyzeSalesData,
        TaoBaoOpenPlatformGetUserFeedback,
    ]


#################### Gmail ####################


class GmailSendEmail(VirtualFunctionApp):
    name = "GmailSendEmail"
    summary = "发送电子邮件到指定的收件人。"
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_email",
            "type": "string",
            "description": "收件人的电子邮件地址，必须是有效的电子邮件格式。",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "邮件的主题。",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "邮件的正文内容。",
            "required": True,
        },
        {
            "name": "attachments",
            "type": "array",
            "description": "可选的附件文件路径的数组。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "邮件发送是否成功的状态。",
        },
        {
            "name": "message_id",
            "type": "string",
            "description": "发送邮件的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当邮件格式不正确时。"},
        {"name": "ConflictException", "description": "当邮件发送失败时。"},
    ]


class GmailReceiveEmail(VirtualFunctionApp):
    name = "GmailReceiveEmail"
    summary = "检索收件箱中的电子邮件。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的邮件数量的最大限制，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "emails",
            "type": "array",
            "description": "收件箱中电子邮件的列表，每个邮件包含发件人、主题和时间戳。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当没有邮件可接收时。"},
        {"name": "InvalidRequestException", "description": "当请求参数不正确时。"},
    ]


class GmailSearchEmail(VirtualFunctionApp):
    name = "GmailSearchEmail"
    summary = "根据关键字搜索特定邮件。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的邮件数量的最大限制，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "emails",
            "type": "array",
            "description": "匹配搜索条件的电子邮件列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当关键字格式不正确时。"},
        {"name": "NotFoundException", "description": "当没有找到匹配邮件时。"},
    ]


class GmailDeleteEmail(VirtualFunctionApp):
    name = "GmailDeleteEmail"
    summary = "删除指定的电子邮件。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "要删除的邮件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "邮件删除是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当邮件不存在时。"},
        {"name": "ConflictException", "description": "当删除操作失败时。"},
    ]


class GmailManageDraft(VirtualFunctionApp):
    name = "GmailManageDraft"
    summary = "创建、更新和删除草稿邮件。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "动作类型，包括'create'、'update'和'delete'。",
            "required": True,
        },
        {
            "name": "draft_content",
            "type": "object",
            "description": "包含草稿内容的对象，字段包括subject和body。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "草稿管理操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当草稿内容不正确时。"},
        {"name": "ConflictException", "description": "当操作失败时。"},
    ]


class GmailUploadAttachment(VirtualFunctionApp):
    name = "GmailUploadAttachment"
    summary = "上传邮件附件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "本地文件的路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "attachment_id",
            "type": "string",
            "description": "上传附件的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当文件路径不正确时。"},
        {"name": "ConflictException", "description": "当上传失败时。"},
    ]


class GmailManageLabels(VirtualFunctionApp):
    name = "GmailManageLabels"
    summary = "为邮件添加和删除标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "要管理标签的邮件的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "动作类型，包括'add'和'remove'。",
            "required": True,
        },
        {
            "name": "label",
            "type": "string",
            "description": "要添加或删除的标签。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "标签管理操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当标签格式不正确时。"},
        {"name": "NotFoundException", "description": "当邮件不存在时。"},
    ]


class GmailForwardEmail(VirtualFunctionApp):
    name = "GmailForwardEmail"
    summary = "转发指定邮件到其他邮箱。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "要转发的邮件的唯一标识符。",
            "required": True,
        },
        {
            "name": "forward_to",
            "type": "string",
            "description": "转发的目标电子邮件地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "邮件转发是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当邮件不存在时。"},
        {"name": "ConflictException", "description": "当转发失败时。"},
    ]


class GmailArchiveEmail(VirtualFunctionApp):
    name = "GmailArchiveEmail"
    summary = "将邮件归档以便后续访问。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_id",
            "type": "string",
            "description": "要归档的邮件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "邮件归档是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当邮件不存在时。"},
        {"name": "ConflictException", "description": "当归档失败时。"},
    ]


class GmailCreateCalendarEvent(VirtualFunctionApp):
    name = "GmailCreateCalendarEvent"
    summary = "创建与邮件相关的日历事件。"
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "相关邮件的唯一标识符。",
            "required": True,
        },
        {
            "name": "event_details",
            "type": "object",
            "description": "包含事件详情的对象，字段包括title、date和time。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "event_id",
            "type": "string",
            "description": "创建的日历事件的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当事件详情不正确时。"},
        {"name": "ConflictException", "description": "当事件创建失败时。"},
    ]


@register_app()
class Gmail(FunctionApp):
    name_for_human = "Gmail App"
    description_for_human = "App for managing emails efficiently through API."
    name_for_model = "Gmail"
    description_for_model = "该Gmail工具包通过API简化电子邮件的发送、接收、搜索、删除和管理草稿的过程，同时提供附件管理、标签管理、邮件转发和日历集成功能，适用于需要高效管理电子邮件的个人用户和小型企业。"
    app_classes = [
        GmailSendEmail,
        GmailReceiveEmail,
        GmailSearchEmail,
        GmailDeleteEmail,
        GmailManageDraft,
        GmailUploadAttachment,
        GmailManageLabels,
        GmailForwardEmail,
        GmailArchiveEmail,
        GmailCreateCalendarEvent,
    ]


#################### Lark ####################


class LarkInstantMessaging(VirtualFunctionApp):
    name = "LarkInstantMessaging"
    summary = "允许用户进行实时消息交流，支持单聊和群聊功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "message_content",
            "type": "string",
            "description": "要发送的消息内容，字符限制为500。",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "接收者的用户ID，可以是单个用户或群组ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示消息是否成功发送。"},
        {
            "name": "message_id",
            "type": "string",
            "description": "发送的消息的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果消息内容超过字符限制。",
        },
        {"name": "NotFoundException", "description": "如果接收者ID无效。"},
    ]


class LarkDocumentEditing(VirtualFunctionApp):
    name = "LarkDocumentEditing"
    summary = "提供在线文档编辑功能，允许团队成员共同编辑文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要编辑的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "更新后的文档内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示文档是否成功更新。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果文档ID无效。"},
        {"name": "InvalidRequestException", "description": "如果内容为空。"},
    ]


class LarkCalendarManagement(VirtualFunctionApp):
    name = "LarkCalendarManagement"
    summary = "用户可以创建、查看和管理日历事件。"
    parameters: List[ArgParameter] = [
        {
            "name": "event_title",
            "type": "string",
            "description": "事件的标题，字符限制为100。",
            "required": True,
        },
        {
            "name": "event_time",
            "type": "string",
            "description": "事件的开始时间，格式为'YYYY-MM-DDTHH:MM:SS'。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "integer",
            "description": "事件的持续时间，以分钟为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示事件是否成功创建。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果事件时间格式不正确。"},
        {"name": "ConflictException", "description": "如果事件时间冲突。"},
    ]


class LarkTaskManagement(VirtualFunctionApp):
    name = "LarkTaskManagement"
    summary = "允许用户创建、分配和跟踪任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_title",
            "type": "string",
            "description": "任务的标题，字符限制为100。",
            "required": True,
        },
        {
            "name": "assignee_id",
            "type": "string",
            "description": "被分配该任务的用户的ID。",
            "required": True,
        },
        {
            "name": "due_date",
            "type": "string",
            "description": "任务的截止日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示任务是否成功创建。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果截止日期格式不正确。"},
        {"name": "NotFoundException", "description": "如果分配的用户ID无效。"},
    ]


class LarkFileSharing(VirtualFunctionApp):
    name = "LarkFileSharing"
    summary = "允许用户在聊天中分享文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要共享的文件的本地路径。",
            "required": True,
        },
        {
            "name": "recipient_id",
            "type": "string",
            "description": "接收文件的用户ID。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示文件是否成功共享。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果文件路径无效。"},
        {"name": "InvalidRequestException", "description": "如果文件格式不支持。"},
    ]


class LarkVideoConferencing(VirtualFunctionApp):
    name = "LarkVideoConferencing"
    summary = "提供视频会议功能，支持屏幕共享和会议录制。"
    parameters: List[ArgParameter] = [
        {
            "name": "meeting_title",
            "type": "string",
            "description": "会议的标题，字符限制为100。",
            "required": True,
        },
        {
            "name": "participants",
            "type": "array",
            "description": "参与者的用户ID列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "meeting_id",
            "type": "string",
            "description": "创建的会议的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参与者列表为空。"},
        {"name": "NotFoundException", "description": "如果会议创建失败。"},
    ]


class LarkPolling(VirtualFunctionApp):
    name = "LarkPolling"
    summary = "允许用户在团队中发起投票。"
    parameters: List[ArgParameter] = [
        {
            "name": "poll_question",
            "type": "string",
            "description": "投票的问题，字符限制为200。",
            "required": True,
        },
        {
            "name": "options",
            "type": "array",
            "description": "投票选项的数组，最多5个选项。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "poll_id", "type": "string", "description": "创建的投票的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果选项数量超过限制。"},
        {"name": "NotFoundException", "description": "如果投票创建失败。"},
    ]


class LarkNotificationManagement(VirtualFunctionApp):
    name = "LarkNotificationManagement"
    summary = "提供对消息和事件的通知管理功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "notification_type",
            "type": "string",
            "description": "通知类型，允许值为['message', 'event', 'task']。",
            "required": True,
        },
        {
            "name": "status",
            "type": "boolean",
            "description": "是否开启通知。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示通知设置是否成功更新。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果通知类型无效。"},
        {"name": "NotFoundException", "description": "如果更新失败。"},
    ]


class LarkUserProfileManagement(VirtualFunctionApp):
    name = "LarkUserProfileManagement"
    summary = "允许用户查看和编辑个人资料信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "要查看或编辑的用户的ID。",
            "required": True,
        },
        {
            "name": "profile_data",
            "type": "object",
            "description": "包含要更新的个人资料字段，例如{ 'name': 'string', 'email': 'string' }。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示个人资料是否成功更新。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID无效。"},
        {"name": "InvalidRequestException", "description": "如果资料数据不符合要求。"},
    ]


class LarkThirdPartyIntegration(VirtualFunctionApp):
    name = "LarkThirdPartyIntegration"
    summary = "支持与其他应用的集成。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "集成的第三方应用名称。",
            "required": True,
        },
        {
            "name": "settings",
            "type": "object",
            "description": "包含集成所需的设置，例如API密钥等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示集成是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果设置不正确。"},
        {"name": "NotFoundException", "description": "如果应用名称无效。"},
    ]


@register_app()
class Lark(FunctionApp):
    name_for_human = "Lark"
    description_for_human = "企业协作工具包，提升团队沟通和工作效率。"
    name_for_model = "Lark"
    description_for_model = "Lark工具包提供企业协作所需的核心功能，包括即时通讯、文档编辑、日历管理、任务管理和文件共享，旨在提升团队的沟通和工作效率。"
    app_classes = [
        LarkInstantMessaging,
        LarkDocumentEditing,
        LarkCalendarManagement,
        LarkTaskManagement,
        LarkFileSharing,
        LarkVideoConferencing,
        LarkPolling,
        LarkNotificationManagement,
        LarkUserProfileManagement,
        LarkThirdPartyIntegration,
    ]


#################### Outlook ####################


class OutlookSendEmail(VirtualFunctionApp):
    name = "OutlookSendEmail"
    summary = "Composes and sends an email to specified recipients."
    parameters: List[ArgParameter] = [
        {
            "name": "recipients",
            "type": "string",
            "description": "Comma-separated email addresses of the recipients.",
            "required": True,
        },
        {
            "name": "subject",
            "type": "string",
            "description": "Subject line of the email.",
            "required": True,
        },
        {
            "name": "body",
            "type": "string",
            "description": "Content of the email.",
            "required": True,
        },
        {
            "name": "attachments",
            "type": "array",
            "description": "List of file paths for attachments.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email was sent successfully.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format of the 'recipients' parameter is incorrect.",
        }
    ]


class OutlookReadEmail(VirtualFunctionApp):
    name = "OutlookReadEmail"
    summary = "Retrieves and reads the user's emails from the inbox."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "Unique identifier of the email to read.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "email_content",
            "type": "object",
            "description": "Object containing email details (subject, body, sender, date).",
            "fields": {
                "subject": "string",
                "body": "string",
                "sender": "string",
                "date": "string",
            },
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'email_id' does not exist.",
        }
    ]


class OutlookSearchEmail(VirtualFunctionApp):
    name = "OutlookSearchEmail"
    summary = "Searches for emails based on specified criteria."
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "Keywords to search for in emails.",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "Maximum number of search results to return (default is 10).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "List of email IDs matching the search criteria.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format of the 'query' parameter is incorrect.",
        }
    ]


class OutlookManageCalendarEvent(VirtualFunctionApp):
    name = "OutlookManageCalendarEvent"
    summary = "Creates, updates, or deletes calendar events."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (create, update, delete).",
            "required": True,
            "allowed_values": ["create", "update", "delete"],
        },
        {
            "name": "event_details",
            "type": "object",
            "description": "Object containing event details (title, date, time, location).",
            "fields": {
                "title": "string",
                "date": "string",
                "time": "string",
                "location": "string",
            },
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the calendar event was successfully managed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not one of the allowed values.",
        }
    ]


class OutlookManageContacts(VirtualFunctionApp):
    name = "OutlookManageContacts"
    summary = "Creates, updates, or deletes contacts."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "Action to perform (create, update, delete).",
            "required": True,
            "allowed_values": ["create", "update", "delete"],
        },
        {
            "name": "contact_details",
            "type": "object",
            "description": "Object containing contact details (name, email, phone).",
            "fields": {"name": "string", "email": "string", "phone": "string"},
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the contact was successfully managed.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not one of the allowed values.",
        }
    ]


class OutlookAttachFile(VirtualFunctionApp):
    name = "OutlookAttachFile"
    summary = "Attaches files to an email before sending."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "Unique identifier of the email to attach files to.",
            "required": True,
        },
        {
            "name": "file_paths",
            "type": "array",
            "description": "List of local file paths to attach.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the files were successfully attached.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'email_id' does not exist.",
        }
    ]


class OutlookSetEmailFlag(VirtualFunctionApp):
    name = "OutlookSetEmailFlag"
    summary = "Flags an email for follow-up."
    parameters: List[ArgParameter] = [
        {
            "name": "email_id",
            "type": "string",
            "description": "Unique identifier of the email to flag.",
            "required": True,
        },
        {
            "name": "flag_status",
            "type": "string",
            "description": "Status of the flag (flagged, unflagged).",
            "required": True,
            "allowed_values": ["flagged", "unflagged"],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the email flag was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'email_id' does not exist.",
        }
    ]


class OutlookCreateTask(VirtualFunctionApp):
    name = "OutlookCreateTask"
    summary = "Creates a task linked to an email or calendar event."
    parameters: List[ArgParameter] = [
        {
            "name": "task_details",
            "type": "object",
            "description": "Object containing task details (title, due_date, related_email_id).",
            "fields": {
                "title": "string",
                "due_date": "string",
                "related_email_id": "string",
            },
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the task was successfully created.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The format of the 'task_details' parameter is incorrect.",
        }
    ]


class OutlookShareCalendar(VirtualFunctionApp):
    name = "OutlookShareCalendar"
    summary = "Shares the user's calendar with specified individuals."
    parameters: List[ArgParameter] = [
        {
            "name": "recipient_emails",
            "type": "string",
            "description": "Comma-separated email addresses of recipients to share the calendar with.",
            "required": True,
        },
        {
            "name": "share_permission",
            "type": "string",
            "description": "Permission level for shared access (view, edit).",
            "required": True,
            "allowed_values": ["view", "edit"],
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the calendar was successfully shared.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'share_permission' parameter is not one of the allowed values.",
        }
    ]


class OutlookAccessStoredData(VirtualFunctionApp):
    name = "OutlookAccessStoredData"
    summary = "Retrieves stored user information such as frequently used contacts or email templates."
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "Type of stored data to access (contacts, templates).",
            "required": True,
            "allowed_values": ["contacts", "templates"],
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data",
            "type": "array",
            "description": "List of stored data entries based on the specified type.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'data_type' parameter is not one of the allowed values.",
        }
    ]


@register_app()
class Outlook(FunctionApp):
    name_for_human = "Outlook App"
    description_for_human = "A app for managing emails, calendar events, tasks, and contacts using Outlook."
    name_for_model = "Outlook"
    description_for_model = "The Outlook app provides a comprehensive set of tools for managing emails, calendar events, tasks, and contacts, enabling users to efficiently handle their communication and organization needs."
    app_classes = [
        OutlookSendEmail,
        OutlookReadEmail,
        OutlookSearchEmail,
        OutlookManageCalendarEvent,
        OutlookManageContacts,
        OutlookAttachFile,
        OutlookSetEmailFlag,
        OutlookCreateTask,
        OutlookShareCalendar,
        OutlookAccessStoredData,
    ]


#################### ElemeOpenPlatform ####################


class ElemeOpenPlatformPlaceOrder(VirtualFunctionApp):
    name = "ElemeOpenPlatformPlaceOrder"
    summary = "允许用户通过API下单外卖。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "包含订单的详细信息，包括商家ID、菜品列表和数量。必需。",
            "required": True,
        },
        {
            "name": "user_address",
            "type": "string",
            "description": "用户的送餐地址。必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "新创建订单的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果订单细节格式不正确。"}
    ]


class ElemeOpenPlatformTrackOrder(VirtualFunctionApp):
    name = "ElemeOpenPlatformTrackOrder"
    summary = "提供实时订单状态更新。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要跟踪的订单唯一标识符。必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "order_status", "type": "string", "description": "当前订单状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单ID不存在。"}
    ]


class ElemeOpenPlatformManageUserReviews(VirtualFunctionApp):
    name = "ElemeOpenPlatformManageUserReviews"
    summary = "允许用户查看和提交对商家的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "merchant_id",
            "type": "string",
            "description": "商家的唯一标识符。必需。",
            "required": True,
        },
        {
            "name": "review",
            "type": "string",
            "description": "用户的评价内容。可选。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果评价格式不正确。"}
    ]


class ElemeOpenPlatformQueryMerchantInfo(VirtualFunctionApp):
    name = "ElemeOpenPlatformQueryMerchantInfo"
    summary = "提供商家的详细信息和菜单。"
    parameters: List[ArgParameter] = [
        {
            "name": "merchant_id",
            "type": "string",
            "description": "商家的唯一标识符。必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "merchant_info",
            "type": "object",
            "description": "包含商家名称、地址、菜单等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商家ID不存在。"}
    ]


class ElemeOpenPlatformAccessUserInfo(VirtualFunctionApp):
    name = "ElemeOpenPlatformAccessUserInfo"
    summary = "允许访问用户的基本信息和历史订单。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "包含用户的姓名、电话号码和历史订单列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户ID不存在。"}
    ]


class ElemeOpenPlatformCancelOrder(VirtualFunctionApp):
    name = "ElemeOpenPlatformCancelOrder"
    summary = "允许用户取消未完成的订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要取消的订单唯一标识符。必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单ID不存在。"}
    ]


class ElemeOpenPlatformProcessPayment(VirtualFunctionApp):
    name = "ElemeOpenPlatformProcessPayment"
    summary = "集成支付功能以完成订单支付。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "要支付的订单唯一标识符。必需。",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "支付方式（例如，信用卡、支付宝）。必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "payment_status", "type": "string", "description": "支付状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果支付方式无效。"}
    ]


class ElemeOpenPlatformManageCoupons(VirtualFunctionApp):
    name = "ElemeOpenPlatformManageCoupons"
    summary = "允许用户查询和使用优惠券。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。必需。",
            "required": True,
        },
        {
            "name": "coupon_code",
            "type": "string",
            "description": "要使用的优惠券代码。可选。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "coupon_status", "type": "string", "description": "优惠券状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果优惠券无效。"}
    ]


class ElemeOpenPlatformSearchMerchant(VirtualFunctionApp):
    name = "ElemeOpenPlatformSearchMerchant"
    summary = "根据不同条件搜索商家。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索关键词。必需。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "最大返回结果数，默认值为10。可选。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "merchant_list",
            "type": "array",
            "description": "符合条件的商家列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果查询格式不正确。"}
    ]


class ElemeOpenPlatformManageUserAddresses(VirtualFunctionApp):
    name = "ElemeOpenPlatformManageUserAddresses"
    summary = "允许用户查看和更新保存的地址。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（查看、添加、更新、删除）。必需。",
            "required": True,
        },
        {
            "name": "address",
            "type": "string",
            "description": "地址内容。可选。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果地址格式不正确。"}
    ]


@register_app()
class ElemeOpenPlatform(FunctionApp):
    name_for_human = "饿了么开放平台"
    description_for_human = "提供对饿了么的订单、商家和用户数据的访问，允许开发者通过API实现外卖下单、订单跟踪和用户评价管理。"
    name_for_model = "ElemeOpenPlatform"
    description_for_model = "这个工具包提供对饿了么的订单、商家和用户数据的访问，允许开发者通过API实现外卖下单、订单跟踪、用户评价管理等功能，旨在提升用户体验和订单管理效率。"
    app_classes = [
        ElemeOpenPlatformPlaceOrder,
        ElemeOpenPlatformTrackOrder,
        ElemeOpenPlatformManageUserReviews,
        ElemeOpenPlatformQueryMerchantInfo,
        ElemeOpenPlatformAccessUserInfo,
        ElemeOpenPlatformCancelOrder,
        ElemeOpenPlatformProcessPayment,
        ElemeOpenPlatformManageCoupons,
        ElemeOpenPlatformSearchMerchant,
        ElemeOpenPlatformManageUserAddresses,
    ]


#################### JdUnionApi ####################


class JdUnionApiGetProductInfo(VirtualFunctionApp):
    name = "JdUnionApiGetProductInfo"
    summary = "获取指定商品的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_details",
            "type": "object",
            "description": "包含商品名称、价格、库存等详细信息的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的product_id不存在时触发。"}
    ]


class JdUnionApiGetPromotionData(VirtualFunctionApp):
    name = "JdUnionApiGetPromotionData"
    summary = "获取用户的推广数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "promotion_data",
            "type": "object",
            "description": "包含推广效果、点击量等数据的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的user_id不存在时触发。"}
    ]


class JdUnionApiSearchProducts(VirtualFunctionApp):
    name = "JdUnionApiSearchProducts"
    summary = "根据关键词搜索商品。"
    parameters: List[ArgParameter] = [
        {
            "name": "keywords",
            "type": "string",
            "description": "用于搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_list",
            "type": "array",
            "description": "符合搜索条件的商品列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当keywords格式不正确时触发。",
        }
    ]


class JdUnionApiCreatePromotionLink(VirtualFunctionApp):
    name = "JdUnionApiCreatePromotionLink"
    summary = "创建一个商品的推广链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "promotion_link", "type": "string", "description": "生成的推广链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的product_id不存在时触发。"}
    ]


class JdUnionApiQueryPromotionEffect(VirtualFunctionApp):
    name = "JdUnionApiQueryPromotionEffect"
    summary = "查询指定时间段内的推广效果。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "推广开始日期，格式为YYYY-MM-DD。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "推广结束日期，格式为YYYY-MM-DD。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "effect_data",
            "type": "object",
            "description": "包含推广效果的详细数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当日期格式不正确时触发。"}
    ]


class JdUnionApiGetCategoryList(VirtualFunctionApp):
    name = "JdUnionApiGetCategoryList"
    summary = "获取商品类目列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "category_list",
            "type": "array",
            "description": "包含所有商品类目的列表。",
        }
    ]
    exceptions: List[ArgException] = []


class JdUnionApiGetHistoricalPrice(VirtualFunctionApp):
    name = "JdUnionApiGetHistoricalPrice"
    summary = "获取指定商品的历史价格。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_prices",
            "type": "array",
            "description": "包含商品历史价格的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的product_id不存在时触发。"}
    ]


class JdUnionApiGenerateQRCode(VirtualFunctionApp):
    name = "JdUnionApiGenerateQRCode"
    summary = "生成指定商品的二维码。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "qr_code_url", "type": "string", "description": "生成的二维码的URL。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的product_id不存在时触发。"}
    ]


class JdUnionApiGetUserPromotionInfo(VirtualFunctionApp):
    name = "JdUnionApiGetUserPromotionInfo"
    summary = "获取用户的推广账号信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "包含用户推广账号信息的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的user_id不存在时触发。"}
    ]


class JdUnionApiQueryPromotionStatus(VirtualFunctionApp):
    name = "JdUnionApiQueryPromotionStatus"
    summary = "查询推广活动的状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "promotion_id",
            "type": "string",
            "description": "推广活动的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "promotion_status",
            "type": "string",
            "description": "推广活动的当前状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "当查询的promotion_id不存在时触发。",
        }
    ]


class JdUnionApiGetStoredUserInfo(VirtualFunctionApp):
    name = "JdUnionApiGetStoredUserInfo"
    summary = "获取存储的用户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_user_info",
            "type": "object",
            "description": "包含用户存储信息的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当查询的user_id不存在时触发。"}
    ]


@register_app()
class JdUnionApi(FunctionApp):
    name_for_human = "京东联盟API工具包"
    description_for_human = "为电商营销人员提供获取京东商品信息和推广数据的能力。"
    name_for_model = "JdUnionApi"
    description_for_model = "京东联盟API工具包为电商营销人员提供获取京东商品信息和推广数据的能力，支持商品搜索、推广链接创建及效果查询等功能，旨在优化产品推广策略。"
    app_classes = [
        JdUnionApiGetProductInfo,
        JdUnionApiGetPromotionData,
        JdUnionApiSearchProducts,
        JdUnionApiCreatePromotionLink,
        JdUnionApiQueryPromotionEffect,
        JdUnionApiGetCategoryList,
        JdUnionApiGetHistoricalPrice,
        JdUnionApiGenerateQRCode,
        JdUnionApiGetUserPromotionInfo,
        JdUnionApiQueryPromotionStatus,
        JdUnionApiGetStoredUserInfo,
    ]


#################### AlipayOpenPlatform ####################


class AlipayOpenPlatformQuickPayment(VirtualFunctionApp):
    name = "AlipayOpenPlatformQuickPayment"
    summary = "处理用户的快速支付请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "number",
            "description": "支付金额，必须为正数。",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "支付方式，允许的值为['银行卡', '余额', '信用卡']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "支付是否成功。"},
        {
            "name": "transaction_id",
            "type": "string",
            "description": "支付交易的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如金额为负数或支付方式不在允许的值中。",
        },
        {"name": "NotFoundException", "description": "用户未找到或支付请求无法处理。"},
    ]


class AlipayOpenPlatformRefundRequest(VirtualFunctionApp):
    name = "AlipayOpenPlatformRefundRequest"
    summary = "处理用户的退款请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "transaction_id",
            "type": "string",
            "description": "需要退款的交易的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "退款是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如交易ID无效。",
        },
        {"name": "NotFoundException", "description": "用户未找到或交易记录未找到。"},
    ]


class AlipayOpenPlatformBillQuery(VirtualFunctionApp):
    name = "AlipayOpenPlatformBillQuery"
    summary = "查询用户的账单信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "bills",
            "type": "array",
            "description": "返回用户的账单信息列表，每个账单包含{amount: number, date: string, status: string}。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到或账单记录未找到。"}
    ]


class AlipayOpenPlatformTransactionHistory(VirtualFunctionApp):
    name = "AlipayOpenPlatformTransactionHistory"
    summary = "检索用户的交易历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "limit",
            "type": "integer",
            "description": "返回的交易记录数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transactions",
            "type": "array",
            "description": "返回用户的交易记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到或交易记录未找到。"}
    ]


class AlipayOpenPlatformPaymentStatus(VirtualFunctionApp):
    name = "AlipayOpenPlatformPaymentStatus"
    summary = "查询特定支付的状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "需要查询的交易的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "交易状态，可能的值为['成功', '失败', '处理中']。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "交易记录未找到。"}
    ]


class AlipayOpenPlatformBatchRefund(VirtualFunctionApp):
    name = "AlipayOpenPlatformBatchRefund"
    summary = "处理多个退款请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "transaction_ids",
            "type": "array",
            "description": "需要退款的交易的唯一标识符列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "批量退款是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如交易ID列表为空。",
        },
        {"name": "NotFoundException", "description": "用户未找到或交易记录未找到。"},
    ]


class AlipayOpenPlatformPaymentMethodManagement(VirtualFunctionApp):
    name = "AlipayOpenPlatformPaymentMethodManagement"
    summary = "管理用户的支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为['添加', '删除', '更新']。",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "object",
            "description": "支付方式的详细信息，包含{type: string, details: string}。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如操作类型不在允许的值中。",
        }
    ]


class AlipayOpenPlatformTransactionExceptionHandling(VirtualFunctionApp):
    name = "AlipayOpenPlatformTransactionExceptionHandling"
    summary = "处理交易异常情况。"
    parameters: List[ArgParameter] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "需要处理的交易的唯一标识符。",
            "required": True,
        },
        {
            "name": "resolution",
            "type": "string",
            "description": "解决方案描述。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "异常处理是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "交易记录未找到。"}
    ]


class AlipayOpenPlatformUserInfoManagement(VirtualFunctionApp):
    name = "AlipayOpenPlatformUserInfoManagement"
    summary = "管理用户的基本信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为['获取', '更新']。",
            "required": True,
        },
        {
            "name": "user_info",
            "type": "object",
            "description": "用户信息，包含{name: string, email: string, phone: string}。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class AlipayOpenPlatformBalanceQuery(VirtualFunctionApp):
    name = "AlipayOpenPlatformBalanceQuery"
    summary = "查询用户的支付宝账户余额。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "balance", "type": "number", "description": "用户账户的当前余额。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class AlipayOpenPlatformSearchUser(VirtualFunctionApp):
    name = "AlipayOpenPlatformSearchUser"
    summary = "根据用户信息检索用户的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "用户的电子邮件地址。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "user_id", "type": "string", "description": "用户的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "用户未找到。"}
    ]


class AlipayOpenPlatformSearchTransaction(VirtualFunctionApp):
    name = "AlipayOpenPlatformSearchTransaction"
    summary = "根据交易信息检索交易的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "date",
            "type": "string",
            "description": "交易日期，格式为YYYY-MM-DD。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transaction_id",
            "type": "string",
            "description": "交易的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "交易记录未找到。"}
    ]


@register_app()
class AlipayOpenPlatform(FunctionApp):
    name_for_human = "支付宝开放平台"
    description_for_human = "为电商平台开发者提供支付、退款、账单查询等功能的工具包。"
    name_for_model = "AlipayOpenPlatform"
    description_for_model = "AlipayOpenPlatform是一个为电商平台开发者设计的工具包，提供支付、退款、账单查询等功能，帮助用户实现高效的支付集成和管理。"
    app_classes = [
        AlipayOpenPlatformQuickPayment,
        AlipayOpenPlatformRefundRequest,
        AlipayOpenPlatformBillQuery,
        AlipayOpenPlatformTransactionHistory,
        AlipayOpenPlatformPaymentStatus,
        AlipayOpenPlatformBatchRefund,
        AlipayOpenPlatformPaymentMethodManagement,
        AlipayOpenPlatformTransactionExceptionHandling,
        AlipayOpenPlatformUserInfoManagement,
        AlipayOpenPlatformBalanceQuery,
        AlipayOpenPlatformSearchUser,
        AlipayOpenPlatformSearchTransaction,
    ]


#################### MeituanTakeaway ####################


class MeituanTakeawayFetchOrderInfo(VirtualFunctionApp):
    name = "MeituanTakeawayFetchOrderInfo"
    summary = "获取外卖订单的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "包含订单的详细信息，包括商品、数量、价格等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单不存在。"}
    ]


class MeituanTakeawayFetchMerchantInfo(VirtualFunctionApp):
    name = "MeituanTakeawayFetchMerchantInfo"
    summary = "获取商家的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "merchant_id",
            "type": "string",
            "description": "商家的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "merchant_details",
            "type": "object",
            "description": "包含商家的详细信息，包括名称、地址、评分等字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商家不存在。"}
    ]


class MeituanTakeawayFetchUserReviews(VirtualFunctionApp):
    name = "MeituanTakeawayFetchUserReviews"
    summary = "获取用户对商家的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "merchant_id",
            "type": "string",
            "description": "商家的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "reviews",
            "type": "array",
            "description": "包含用户评价的数组，每个评价包含内容和评分。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商家没有评价。"}
    ]


class MeituanTakeawayCreateOrder(VirtualFunctionApp):
    name = "MeituanTakeawayCreateOrder"
    summary = "创建新的外卖订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_details",
            "type": "object",
            "description": "包含订单的详细信息，包括商家ID、商品列表等字段。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示订单是否成功创建。"},
        {
            "name": "order_id",
            "type": "string",
            "description": "新创建订单的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果订单详情不正确。"}
    ]


class MeituanTakeawayUpdateOrderStatus(VirtualFunctionApp):
    name = "MeituanTakeawayUpdateOrderStatus"
    summary = "更新外卖订单的状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        },
        {
            "name": "status",
            "type": "string",
            "description": "新的订单状态，可能的值包括 'pending', 'delivered', 'canceled'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示订单状态是否成功更新。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单不存在。"},
        {"name": "ConflictException", "description": "如果状态更新不符合逻辑。"},
    ]


class MeituanTakeawaySearchMerchant(VirtualFunctionApp):
    name = "MeituanTakeawaySearchMerchant"
    summary = "根据关键字搜索商家。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为5。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "merchants",
            "type": "array",
            "description": "匹配的商家列表，每个商家包含ID和名称。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果关键字为空。"}
    ]


class MeituanTakeawayFetchUserOrderHistory(VirtualFunctionApp):
    name = "MeituanTakeawayFetchUserOrderHistory"
    summary = "获取用户的历史订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "orders", "type": "array", "description": "用户的历史订单列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有历史订单。"}
    ]


class MeituanTakeawayDeleteOrder(VirtualFunctionApp):
    name = "MeituanTakeawayDeleteOrder"
    summary = "删除指定的外卖订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示订单是否成功删除。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单不存在。"}
    ]


class MeituanTakeawayFetchRecommendedMerchants(VirtualFunctionApp):
    name = "MeituanTakeawayFetchRecommendedMerchants"
    summary = "获取推荐的外卖商家。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "recommended_merchants",
            "type": "array",
            "description": "推荐的商家列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户没有推荐商家。"}
    ]


class MeituanTakeawayFetchDeliveryStatus(VirtualFunctionApp):
    name = "MeituanTakeawayFetchDeliveryStatus"
    summary = "获取外卖配送状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "delivery_status",
            "type": "string",
            "description": "订单的当前配送状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单不存在。"}
    ]


@register_app()
class MeituanTakeaway(FunctionApp):
    name_for_human = "美团外卖API"
    description_for_human = (
        "工具包提供了获取外卖订单、商家信息、用户评价等功能，帮助开发者集成外卖服务。"
    )
    name_for_model = "MeituanTakeaway"
    description_for_model = "美团外卖API工具包提供了获取外卖订单、商家信息、用户评价等功能，旨在帮助开发者构建外卖推荐系统或集成外卖服务到其他应用中。"
    app_classes = [
        MeituanTakeawayFetchOrderInfo,
        MeituanTakeawayFetchMerchantInfo,
        MeituanTakeawayFetchUserReviews,
        MeituanTakeawayCreateOrder,
        MeituanTakeawayUpdateOrderStatus,
        MeituanTakeawaySearchMerchant,
        MeituanTakeawayFetchUserOrderHistory,
        MeituanTakeawayDeleteOrder,
        MeituanTakeawayFetchRecommendedMerchants,
        MeituanTakeawayFetchDeliveryStatus,
    ]


#################### PinduoduoOpenPlatform ####################


class PinduoduoOpenPlatformUploadProductApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformUploadProductApp"
    summary = "允许开发者将商品上架到拼多多平台。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_name",
            "type": "string",
            "description": "商品名称，必需。",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "商品价格，必需。",
            "required": True,
        },
        {
            "name": "stock",
            "type": "integer",
            "description": "商品库存，必需。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "商品描述，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "上架商品的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果商品信息格式不正确。"}
    ]


class PinduoduoOpenPlatformQueryProductApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformQueryProductApp"
    summary = "提供查询拼多多平台商品信息的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "查询关键字，必需。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回结果的最大数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "products", "type": "array", "description": "商品信息的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果查询参数格式不正确。"}
    ]


class PinduoduoOpenPlatformOrderManagementApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformOrderManagementApp"
    summary = "允许开发者管理订单，包括创建、更新和删除。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_action",
            "type": "string",
            "description": "订单操作类型（'create', 'update', 'delete'），必需。",
            "required": True,
        },
        {
            "name": "order_details",
            "type": "object",
            "description": "包含订单详细信息，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果订单操作类型不正确。"},
        {"name": "ConflictException", "description": "如果尝试删除不存在的订单。"},
    ]


class PinduoduoOpenPlatformGetUserInfoApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformGetUserInfoApp"
    summary = "提供访问用户信息的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "用户信息，包括姓名、联系方式等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户未找到。"}
    ]


class PinduoduoOpenPlatformSalesDataAnalysisApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformSalesDataAnalysisApp"
    summary = "允许开发者获取销售数据，以帮助做出业务决策。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "开始日期，格式为'YYYY-MM-DD'，必需。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "结束日期，格式为'YYYY-MM-DD'，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "sales_data", "type": "object", "description": "销售数据的详细信息。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果日期格式不正确。"}
    ]


class PinduoduoOpenPlatformUpdateStockApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformUpdateStockApp"
    summary = "允许开发者更新商品的库存信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，必需。",
            "required": True,
        },
        {
            "name": "new_stock",
            "type": "integer",
            "description": "新的库存数量，必需。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商品未找到。"},
        {"name": "InvalidRequestException", "description": "如果库存数量不正确。"},
    ]


class PinduoduoOpenPlatformQueryOrderStatusApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformQueryOrderStatusApp"
    summary = "提供查询订单状态的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "order_status", "type": "string", "description": "订单当前状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单未找到。"}
    ]


class PinduoduoOpenPlatformGetUserReviewsApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformGetUserReviewsApp"
    summary = "允许开发者获取用户对商品的评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "reviews", "type": "array", "description": "用户评价的列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商品未找到。"}
    ]


class PinduoduoOpenPlatformManagePromotionApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformManagePromotionApp"
    summary = "提供管理促销活动的功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "promotion_details",
            "type": "object",
            "description": "包含促销活动的详细信息，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果促销活动格式不正确。"}
    ]


class PinduoduoOpenPlatformExportDataApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformExportDataApp"
    summary = "允许开发者将商品和订单数据导出为CSV文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "导出的数据类型（'products', 'orders'），必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的下载链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果数据类型不正确。"}
    ]


class PinduoduoOpenPlatformSearchProductApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformSearchProductApp"
    summary = "允许开发者通过关键字搜索商品。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "搜索关键字，必需。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回结果的最大数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "product_ids",
            "type": "array",
            "description": "匹配商品的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果搜索关键字格式不正确。"}
    ]


class PinduoduoOpenPlatformGetSalesStatisticsApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformGetSalesStatisticsApp"
    summary = "允许开发者获取销售统计信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "time_period",
            "type": "string",
            "description": "时间段（'daily', 'weekly', 'monthly'），必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "statistics", "type": "object", "description": "销售统计信息。"}
    ]
    exceptions: List[ArgException] = []


class PinduoduoOpenPlatformQueryOrderApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformQueryOrderApp"
    summary = "允许开发者查询特定订单的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "order_details", "type": "object", "description": "订单详细信息。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单未找到。"}
    ]


class PinduoduoOpenPlatformQueryUserApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformQueryUserApp"
    summary = "允许开发者查询特定用户的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "user_details", "type": "object", "description": "用户详细信息。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户未找到。"}
    ]


class PinduoduoOpenPlatformGetUserStoredInfoApp(VirtualFunctionApp):
    name = "PinduoduoOpenPlatformGetUserStoredInfoApp"
    summary = "允许开发者访问用户的存储信息，如地址和支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符，必需。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_info",
            "type": "object",
            "description": "用户存储信息，包括地址和支付方式。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户未找到。"}
    ]


@register_app()
class PinduoduoOpenPlatform(FunctionApp):
    name_for_human = "拼多多开放平台"
    description_for_human = (
        "为电商开发者提供商品上架、订单管理、用户信息访问等功能的工具包。"
    )
    name_for_model = "PinduoduoOpenPlatform"
    description_for_model = "拼多多开放平台工具包为电商开发者提供商品上架、订单管理、用户信息访问等功能，支持高效的市场分析和数据管理，旨在优化电商业务流程。"
    app_classes = [
        PinduoduoOpenPlatformUploadProductApp,
        PinduoduoOpenPlatformQueryProductApp,
        PinduoduoOpenPlatformOrderManagementApp,
        PinduoduoOpenPlatformGetUserInfoApp,
        PinduoduoOpenPlatformSalesDataAnalysisApp,
        PinduoduoOpenPlatformUpdateStockApp,
        PinduoduoOpenPlatformQueryOrderStatusApp,
        PinduoduoOpenPlatformGetUserReviewsApp,
        PinduoduoOpenPlatformManagePromotionApp,
        PinduoduoOpenPlatformExportDataApp,
        PinduoduoOpenPlatformSearchProductApp,
        PinduoduoOpenPlatformGetSalesStatisticsApp,
        PinduoduoOpenPlatformQueryOrderApp,
        PinduoduoOpenPlatformQueryUserApp,
        PinduoduoOpenPlatformGetUserStoredInfoApp,
    ]


#################### BaiduAPI ####################


class BaiduAPISearchWeb(VirtualFunctionApp):
    name = "BaiduAPISearchWeb"
    summary = "通过关键词搜索网页结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "包含搜索结果的数组，每个结果包含网页的唯一标识符和标题。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或为空时触发。",
        }
    ]


class BaiduAPISearchImage(VirtualFunctionApp):
    name = "BaiduAPISearchImage"
    summary = "通过关键词搜索图片结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "包含搜索结果的数组，每个结果包含图片的唯一标识符和标题。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或为空时触发。",
        }
    ]


class BaiduAPISearchNews(VirtualFunctionApp):
    name = "BaiduAPISearchNews"
    summary = "通过关键词搜索新闻结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "包含搜索结果的数组，每个结果包含新闻的唯一标识符和标题。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或为空时触发。",
        }
    ]


class BaiduAPIGetWebDetails(VirtualFunctionApp):
    name = "BaiduAPIGetWebDetails"
    summary = "根据网页的唯一标识符获取详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "web_id",
            "type": "string",
            "description": "网页的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "包含网页的详细信息，如标题、内容和链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的网页标识符不存在时触发。"}
    ]


class BaiduAPIGetImageDetails(VirtualFunctionApp):
    name = "BaiduAPIGetImageDetails"
    summary = "根据图片的唯一标识符获取详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "图片的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "包含图片的详细信息，如标题、描述和链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的图片标识符不存在时触发。"}
    ]


class BaiduAPIGetSearchCount(VirtualFunctionApp):
    name = "BaiduAPIGetSearchCount"
    summary = "返回特定关键词的搜索结果数量。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "count", "type": "integer", "description": "搜索结果的数量。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或为空时触发。",
        }
    ]


class BaiduAPIGetTrendingKeywords(VirtualFunctionApp):
    name = "BaiduAPIGetTrendingKeywords"
    summary = "获取当前热门的搜索关键词。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "trending_keywords",
            "type": "array",
            "description": "当前热门搜索关键词的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当请求失败时触发。"}
    ]


class BaiduAPIGetRelatedSearchSuggestions(VirtualFunctionApp):
    name = "BaiduAPIGetRelatedSearchSuggestions"
    summary = "根据用户的搜索关键词提供相关搜索建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "要搜索的关键词。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "suggestions", "type": "array", "description": "相关搜索建议的数组。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当关键词格式不正确或为空时触发。",
        }
    ]


class BaiduAPIGetSummary(VirtualFunctionApp):
    name = "BaiduAPIGetSummary"
    summary = "返回特定网页或新闻的摘要信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "web_id",
            "type": "string",
            "description": "网页或新闻的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "summary", "type": "string", "description": "网页或新闻的摘要信息。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "当请求的网页或新闻标识符不存在时触发。",
        }
    ]


class BaiduAPIGetImageInfo(VirtualFunctionApp):
    name = "BaiduAPIGetImageInfo"
    summary = "返回特定图片的相关信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "image_id",
            "type": "string",
            "description": "图片的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "info",
            "type": "object",
            "description": "包含图片的相关信息，如标题和描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的图片标识符不存在时触发。"}
    ]


@register_app()
class BaiduAPI(FunctionApp):
    name_for_human = "Baidu API"
    description_for_human = "App for accessing Baidu search results, including web pages, images, and news."
    name_for_model = "BaiduAPI"
    description_for_model = "BaiduAPI工具包提供对百度搜索结果的访问，包括网页、图片和新闻等，旨在帮助开发人员将搜索功能集成到应用程序中。"
    app_classes = [
        BaiduAPISearchWeb,
        BaiduAPISearchImage,
        BaiduAPISearchNews,
        BaiduAPIGetWebDetails,
        BaiduAPIGetImageDetails,
        BaiduAPIGetSearchCount,
        BaiduAPIGetTrendingKeywords,
        BaiduAPIGetRelatedSearchSuggestions,
        BaiduAPIGetSummary,
        BaiduAPIGetImageInfo,
    ]


#################### CloudStoreManagement ####################


class CloudStoreManagementInventoryManagement(VirtualFunctionApp):
    name = "CloudStoreManagementInventoryManagement"
    summary = "允许商家添加、更新和删除库存项。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'add', 'update', 'delete'。",
            "required": True,
        },
        {
            "name": "item_name",
            "type": "string",
            "description": "库存项的名称。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "库存数量，仅在添加或更新时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "message", "type": "string", "description": "操作结果的描述。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型不正确或缺少必需参数。",
        }
    ]


class CloudStoreManagementOrderProcessing(VirtualFunctionApp):
    name = "CloudStoreManagementOrderProcessing"
    summary = "允许商家查看、创建和更新客户订单。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'view', 'create', 'update'。",
            "required": True,
        },
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符，仅在查看或更新时需要。",
            "required": False,
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "客户的唯一标识符，仅在创建新订单时需要。",
            "required": True,
        },
        {
            "name": "order_details",
            "type": "object",
            "description": "订单详细信息，包括商品列表和总金额。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "order_id",
            "type": "string",
            "description": "创建或更新的订单的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型不正确或缺少必需参数。",
        },
        {"name": "NotFoundException", "description": "订单未找到。"},
    ]


class CloudStoreManagementDataAnalysis(VirtualFunctionApp):
    name = "CloudStoreManagementDataAnalysis"
    summary = "提供销售和库存报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "report_type",
            "type": "string",
            "description": "报告类型，允许的值为 'sales', 'inventory'。",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "报告的日期范围，格式为 'YYYY-MM-DD to YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "report", "type": "object", "description": "报告的详细数据。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "日期范围格式错误。"}
    ]


class CloudStoreManagementCustomerManagement(VirtualFunctionApp):
    name = "CloudStoreManagementCustomerManagement"
    summary = "允许商家管理客户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'add', 'update', 'delete', 'view'。",
            "required": True,
        },
        {
            "name": "customer_id",
            "type": "string",
            "description": "客户的唯一标识符，仅在更新或删除时需要。",
            "required": False,
        },
        {
            "name": "customer_info",
            "type": "object",
            "description": "客户的详细信息，包括姓名和联系方式。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型不正确或缺少必需参数。",
        },
        {"name": "NotFoundException", "description": "客户未找到。"},
    ]


class CloudStoreManagementPaymentProcessing(VirtualFunctionApp):
    name = "CloudStoreManagementPaymentProcessing"
    summary = "提供与支付网关集成的工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "amount",
            "type": "number",
            "description": "交易金额。",
            "required": True,
        },
        {
            "name": "payment_method",
            "type": "string",
            "description": "支付方式，允许的值为 'credit_card', 'paypal', 'bank_transfer'。",
            "required": True,
        },
        {
            "name": "order_id",
            "type": "string",
            "description": "关联的订单的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "transaction_id",
            "type": "string",
            "description": "交易的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，交易金额或支付方式不正确。",
        }
    ]


class CloudStoreManagementPromotionManagement(VirtualFunctionApp):
    name = "CloudStoreManagementPromotionManagement"
    summary = "允许商家创建和管理促销活动。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'create', 'update', 'delete'。",
            "required": True,
        },
        {
            "name": "promotion_details",
            "type": "object",
            "description": "促销活动的详细信息，包括折扣率和有效期。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型不正确或缺少必需参数。",
        }
    ]


class CloudStoreManagementReturnProcessing(VirtualFunctionApp):
    name = "CloudStoreManagementReturnProcessing"
    summary = "提供工具来处理客户退货请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "关联的订单的唯一标识符。",
            "required": True,
        },
        {
            "name": "reason",
            "type": "string",
            "description": "退货原因。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "参数错误，缺少必需参数。"},
        {"name": "NotFoundException", "description": "订单未找到。"},
    ]


class CloudStoreManagementOrderTracking(VirtualFunctionApp):
    name = "CloudStoreManagementOrderTracking"
    summary = "提供客户订单状态更新。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "string", "description": "订单的当前状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "订单未找到。"}
    ]


class CloudStoreManagementMultiChannelIntegration(VirtualFunctionApp):
    name = "CloudStoreManagementMultiChannelIntegration"
    summary = "支持与多个电商平台的集成。"
    parameters: List[ArgParameter] = [
        {
            "name": "platform",
            "type": "string",
            "description": "集成的平台名称，允许的值为 'amazon', 'ebay', 'shopify'。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'connect', 'disconnect'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型或平台名称不正确。",
        }
    ]


class CloudStoreManagementReviewManagement(VirtualFunctionApp):
    name = "CloudStoreManagementReviewManagement"
    summary = "允许商家查看和回复客户评价。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，允许的值为 'view', 'respond'。",
            "required": True,
        },
        {
            "name": "review_id",
            "type": "string",
            "description": "评价的唯一标识符，仅在查看或回复时需要。",
            "required": False,
        },
        {
            "name": "response",
            "type": "string",
            "description": "商家对评价的回复，仅在回复时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "参数错误，操作类型不正确或缺少必需参数。",
        },
        {"name": "NotFoundException", "description": "评价未找到。"},
    ]


@register_app()
class CloudStoreManagement(FunctionApp):
    name_for_human = "Cloud Store Management"
    description_for_human = "App for managing online stores for small businesses, including inventory management, order processing, customer management, and data analysis."
    name_for_model = "CloudStoreManagement"
    description_for_model = "CloudStoreManagement工具包旨在帮助小型商家管理在线店铺，提供库存管理、订单处理、客户管理和数据分析等功能，确保商家能够高效运营并做出数据驱动的决策。"
    app_classes = [
        CloudStoreManagementInventoryManagement,
        CloudStoreManagementOrderProcessing,
        CloudStoreManagementDataAnalysis,
        CloudStoreManagementCustomerManagement,
        CloudStoreManagementPaymentProcessing,
        CloudStoreManagementPromotionManagement,
        CloudStoreManagementReturnProcessing,
        CloudStoreManagementOrderTracking,
        CloudStoreManagementMultiChannelIntegration,
        CloudStoreManagementReviewManagement,
    ]


#################### SmartPricingApp ####################


class SmartPricingAppMarketDataAnalysis(VirtualFunctionApp):
    name = "SmartPricingAppMarketDataAnalysis"
    summary = "分析市场数据以识别趋势和竞争对手定价。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_source",
            "type": "string",
            "description": "数据来源的URL或API端点。",
            "required": True,
        },
        {
            "name": "analysis_type",
            "type": "string",
            "description": "分析的类型，例如'price_trend'或'competitor_analysis'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_result",
            "type": "object",
            "description": "分析结果，包括趋势和定价建议。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如数据源格式不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的数据源。"},
    ]


class SmartPricingAppDynamicPricingStrategy(VirtualFunctionApp):
    name = "SmartPricingAppDynamicPricingStrategy"
    summary = "生成动态定价策略。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "market_data",
            "type": "object",
            "description": "市场数据对象，包含竞争对手价格和市场趋势信息。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "pricing_strategy",
            "type": "object",
            "description": "生成的定价策略，包括建议价格和理由。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
    ]


class SmartPricingAppUpdatePricing(VirtualFunctionApp):
    name = "SmartPricingAppUpdatePricing"
    summary = "更新电商平台上的产品价格。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_price",
            "type": "number",
            "description": "建议的新价格，必须为正数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "价格更新是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或新价格为负数。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
        {
            "name": "ConflictException",
            "description": "更新价格时发生冲突，例如价格低于最低限价。",
        },
    ]


class SmartPricingAppHistoricalDataReview(VirtualFunctionApp):
    name = "SmartPricingAppHistoricalDataReview"
    summary = "检索和分析历史定价数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "time_frame",
            "type": "string",
            "description": "历史数据的时间范围，例如'last_month'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "historical_data",
            "type": "object",
            "description": "历史定价数据及分析结果。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或时间范围不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品或历史数据。"},
    ]


class SmartPricingAppSetPriceAlert(VirtualFunctionApp):
    name = "SmartPricingAppSetPriceAlert"
    summary = "设置价格警报。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "threshold_price",
            "type": "number",
            "description": "触发警报的价格阈值，必须为正数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "alert_id",
            "type": "string",
            "description": "设置的警报的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或阈值价格为负数。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
    ]


class SmartPricingAppCompetitorMonitoring(VirtualFunctionApp):
    name = "SmartPricingAppCompetitorMonitoring"
    summary = "监控竞争对手的价格变化。"
    parameters: List[ArgParameter] = [
        {
            "name": "competitor_id",
            "type": "string",
            "description": "竞争对手的唯一标识符。",
            "required": True,
        },
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "competitor_price",
            "type": "number",
            "description": "竞争对手当前的价格。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如竞争对手ID或产品ID格式不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的竞争对手或产品。"},
    ]


class SmartPricingAppUserFeedbackCollection(VirtualFunctionApp):
    name = "SmartPricingAppUserFeedbackCollection"
    summary = "收集用户对价格的反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户反馈内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈是否成功提交。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或反馈内容为空。",
        }
    ]


class SmartPricingAppSalesForecast(VirtualFunctionApp):
    name = "SmartPricingAppSalesForecast"
    summary = "预测未来销售。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "pricing_strategy",
            "type": "object",
            "description": "当前定价策略对象，包含建议价格和理由。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "forecast", "type": "object", "description": "未来销售预测结果。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或定价策略格式不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
    ]


class SmartPricingAppReportGeneration(VirtualFunctionApp):
    name = "SmartPricingAppReportGeneration"
    summary = "生成定价策略的报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "产品的唯一标识符。",
            "required": True,
        },
        {
            "name": "report_type",
            "type": "string",
            "description": "报告类型，例如'strategy_effectiveness'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "report", "type": "object", "description": "生成的报告内容。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品ID格式不正确或报告类型不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
    ]


class SmartPricingAppAPIIntegration(VirtualFunctionApp):
    name = "SmartPricingAppAPIIntegration"
    summary = "与电商平台的API集成。"
    parameters: List[ArgParameter] = [
        {
            "name": "platform_name",
            "type": "string",
            "description": "电商平台名称，例如'Amazon'。",
            "required": True,
        },
        {
            "name": "api_key",
            "type": "string",
            "description": "API密钥。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "集成是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如平台名称或API密钥格式不正确。",
        },
        {"name": "AuthorizationException", "description": "API密钥无效或未授权。"},
    ]


class SmartPricingAppSearchProduct(VirtualFunctionApp):
    name = "SmartPricingAppSearchProduct"
    summary = "根据产品名称搜索产品并返回product_id。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_name",
            "type": "string",
            "description": "产品名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "product_id", "type": "string", "description": "产品的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如产品名称为空。",
        },
        {"name": "NotFoundException", "description": "未找到指定的产品。"},
    ]


class SmartPricingAppSearchCompetitor(VirtualFunctionApp):
    name = "SmartPricingAppSearchCompetitor"
    summary = "根据竞争对手名称搜索竞争对手并返回competitor_id。"
    parameters: List[ArgParameter] = [
        {
            "name": "competitor_name",
            "type": "string",
            "description": "竞争对手名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "competitor_id",
            "type": "string",
            "description": "竞争对手的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如竞争对手名称为空。",
        },
        {"name": "NotFoundException", "description": "未找到指定的竞争对手。"},
    ]


class SmartPricingAppGetUserAccountInfo(VirtualFunctionApp):
    name = "SmartPricingAppGetUserAccountInfo"
    summary = "获取用户的电商账户信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "account_info",
            "type": "object",
            "description": "用户的电商账户信息，包括账户余额、订单历史等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如用户ID格式不正确。",
        },
        {"name": "NotFoundException", "description": "未找到指定的用户。"},
    ]


@register_app()
class SmartPricingApp(FunctionApp):
    name_for_human = "智能定价工具"
    description_for_human = "为电商卖家提供动态定价策略的工具包。"
    name_for_model = "SmartPricingApp"
    description_for_model = "智能定价工具包为电商卖家提供动态定价策略，利用市场数据分析和机器学习算法生成实时定价建议，确保卖家在竞争中保持优势。"
    app_classes = [
        SmartPricingAppMarketDataAnalysis,
        SmartPricingAppDynamicPricingStrategy,
        SmartPricingAppUpdatePricing,
        SmartPricingAppHistoricalDataReview,
        SmartPricingAppSetPriceAlert,
        SmartPricingAppCompetitorMonitoring,
        SmartPricingAppUserFeedbackCollection,
        SmartPricingAppSalesForecast,
        SmartPricingAppReportGeneration,
        SmartPricingAppAPIIntegration,
        SmartPricingAppSearchProduct,
        SmartPricingAppSearchCompetitor,
        SmartPricingAppGetUserAccountInfo,
    ]


#################### SocialCommerceApp ####################


class SocialCommerceAppPublishProduct(VirtualFunctionApp):
    name = "SocialCommerceAppPublishProduct"
    summary = "允许商家在多个社交平台上发布商品信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_name",
            "type": "string",
            "description": "商品的名称。",
            "required": True,
        },
        {
            "name": "product_description",
            "type": "string",
            "description": "商品的详细描述。",
            "required": True,
        },
        {
            "name": "price",
            "type": "number",
            "description": "商品的价格。",
            "required": True,
        },
        {
            "name": "image_url",
            "type": "string",
            "description": "商品图片的远程URL。",
            "required": True,
        },
        {
            "name": "platforms",
            "type": "array",
            "description": "要发布的社交平台列表，例如['Facebook', 'Instagram', 'Twitter']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "发布是否成功。"},
        {"name": "message", "type": "string", "description": "发布结果的消息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"},
        {"name": "ConflictException", "description": "如果商品已存在。"},
    ]


class SocialCommerceAppUserInteraction(VirtualFunctionApp):
    name = "SocialCommerceAppUserInteraction"
    summary = "支持商家与用户之间的评论、点赞和私信互动。"
    parameters: List[ArgParameter] = [
        {
            "name": "platform",
            "type": "string",
            "description": "社交平台的名称，例如'Facebook'。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "action",
            "type": "string",
            "description": "用户的互动行为，例如'comment', 'like', 'message'。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "互动内容，如评论或消息文本。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "互动是否成功。"},
        {"name": "message", "type": "string", "description": "互动结果的消息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"},
        {"name": "NotFoundException", "description": "如果用户不存在。"},
    ]


class SocialCommerceAppSalesAnalysis(VirtualFunctionApp):
    name = "SocialCommerceAppSalesAnalysis"
    summary = "提供销售数据和用户行为分析报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "start_date",
            "type": "string",
            "description": "分析的开始日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "分析的结束日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "report",
            "type": "object",
            "description": "包含销售数据和用户行为分析的报告，字段包括：total_sales, total_orders, user_engagement, feedback。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果日期格式不正确。"}
    ]


class SocialCommerceAppCampaignManagement(VirtualFunctionApp):
    name = "SocialCommerceAppCampaignManagement"
    summary = "允许商家创建和管理促销活动。"
    parameters: List[ArgParameter] = [
        {
            "name": "campaign_name",
            "type": "string",
            "description": "促销活动的名称。",
            "required": True,
        },
        {
            "name": "start_date",
            "type": "string",
            "description": "促销活动的开始日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "end_date",
            "type": "string",
            "description": "促销活动的结束日期，格式为'YYYY-MM-DD'。",
            "required": True,
        },
        {
            "name": "discount",
            "type": "number",
            "description": "促销活动的折扣百分比。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "促销活动是否成功创建。"},
        {
            "name": "campaign_id",
            "type": "string",
            "description": "创建的促销活动的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"},
        {"name": "ConflictException", "description": "如果促销活动已存在。"},
    ]


class SocialCommerceAppFeedbackCollection(VirtualFunctionApp):
    name = "SocialCommerceAppFeedbackCollection"
    summary = "收集用户对商品和服务的反馈和建议。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        },
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "feedback",
            "type": "string",
            "description": "用户的反馈内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "反馈是否成功提交。"},
        {"name": "message", "type": "string", "description": "提交结果的消息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"},
        {"name": "NotFoundException", "description": "如果商品或用户不存在。"},
    ]


class SocialCommerceAppAdManagement(VirtualFunctionApp):
    name = "SocialCommerceAppAdManagement"
    summary = "支持商家在社交媒体上创建和管理广告。"
    parameters: List[ArgParameter] = [
        {
            "name": "ad_content",
            "type": "string",
            "description": "广告内容。",
            "required": True,
        },
        {
            "name": "target_audience",
            "type": "string",
            "description": "目标受众描述。",
            "required": True,
        },
        {
            "name": "budget",
            "type": "number",
            "description": "广告预算。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "number",
            "description": "广告投放的天数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "广告是否成功创建。"},
        {"name": "ad_id", "type": "string", "description": "创建的广告的唯一标识符。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"}
    ]


class SocialCommerceAppOrderManagement(VirtualFunctionApp):
    name = "SocialCommerceAppOrderManagement"
    summary = "允许商家查看和管理订单状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "order_id",
            "type": "string",
            "description": "订单的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "order_status",
            "type": "string",
            "description": "订单当前的状态，例如'pending', 'shipped', 'delivered'。",
        },
        {"name": "message", "type": "string", "description": "订单状态的详细信息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果订单不存在。"}
    ]


class SocialCommerceAppInventoryManagement(VirtualFunctionApp):
    name = "SocialCommerceAppInventoryManagement"
    summary = "提供库存数据的实时更新和管理。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        },
        {
            "name": "quantity",
            "type": "integer",
            "description": "更新后的库存数量。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "库存更新是否成功。"},
        {"name": "message", "type": "string", "description": "更新结果的消息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"},
        {"name": "NotFoundException", "description": "如果商品不存在。"},
    ]


class SocialCommerceAppLinkTracking(VirtualFunctionApp):
    name = "SocialCommerceAppLinkTracking"
    summary = "生成和追踪社交媒体上的商品链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "product_id",
            "type": "string",
            "description": "商品的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "tracking_url",
            "type": "string",
            "description": "生成的追踪链接的URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果商品不存在。"}
    ]


class SocialCommerceAppUserProfileAnalysis(VirtualFunctionApp):
    name = "SocialCommerceAppUserProfileAnalysis"
    summary = "分析用户的购买习惯和偏好。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "preferences",
            "type": "object",
            "description": "用户的购买偏好分析，字段包括：favorite_categories, average_spending, purchase_frequency。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果用户不存在。"}
    ]


@register_app()
class SocialCommerceApp(FunctionApp):
    name_for_human = "社交电商营销工具"
    description_for_human = "帮助商家通过社交媒体平台进行商品推广和销售的工具包。"
    name_for_model = "SocialCommerceApp"
    description_for_model = "该工具包旨在帮助商家通过社交媒体平台进行商品推广和销售，集成了多种功能，包括商品发布、用户互动、销售分析、促销活动管理和用户反馈收集，旨在增强商家的在线营销能力。"
    app_classes = [
        SocialCommerceAppPublishProduct,
        SocialCommerceAppUserInteraction,
        SocialCommerceAppSalesAnalysis,
        SocialCommerceAppCampaignManagement,
        SocialCommerceAppFeedbackCollection,
        SocialCommerceAppAdManagement,
        SocialCommerceAppOrderManagement,
        SocialCommerceAppInventoryManagement,
        SocialCommerceAppLinkTracking,
        SocialCommerceAppUserProfileAnalysis,
    ]


#################### UserBehaviorAnalysis ####################


class UserBehaviorAnalysisAnalyzeBrowsingData(VirtualFunctionApp):
    name = "UserBehaviorAnalysisAnalyzeBrowsingData"
    summary = "分析用户的浏览历史，识别热门产品和用户兴趣。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "browsing_analysis",
            "type": "object",
            "description": "用户浏览行为分析结果，包括热门产品和用户兴趣",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当未找到用户的浏览数据时触发。"},
    ]


class UserBehaviorAnalysisAnalyzePurchasingData(VirtualFunctionApp):
    name = "UserBehaviorAnalysisAnalyzePurchasingData"
    summary = "分析用户的购买历史，识别购买趋势和偏好。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "purchasing_analysis",
            "type": "object",
            "description": "用户购买行为分析结果，包括购买趋势和偏好",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当未找到用户的购买数据时触发。"},
    ]


class UserBehaviorAnalysisAnalyzeFeedbackData(VirtualFunctionApp):
    name = "UserBehaviorAnalysisAnalyzeFeedbackData"
    summary = "收集和分析用户的反馈和评价，以了解用户满意度和改进点。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认值为10",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "feedback_analysis",
            "type": "object",
            "description": "用户反馈分析结果，包括满意度和改进点",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当未找到用户的反馈数据时触发。"},
    ]


class UserBehaviorAnalysisGenerateBehaviorReport(VirtualFunctionApp):
    name = "UserBehaviorAnalysisGenerateBehaviorReport"
    summary = "生成详细的用户行为报告，帮助商家制定市场策略。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "behavior_report",
            "type": "object",
            "description": "用户行为报告，包括分析结果和建议",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        }
    ]


class UserBehaviorAnalysisPredictUserBehavior(VirtualFunctionApp):
    name = "UserBehaviorAnalysisPredictUserBehavior"
    summary = "使用历史数据预测用户未来的行为和购买意图。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "behavior_prediction",
            "type": "object",
            "description": "用户未来行为预测结果",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        }
    ]


class UserBehaviorAnalysisSegmentUsers(VirtualFunctionApp):
    name = "UserBehaviorAnalysisSegmentUsers"
    summary = "根据用户行为数据将用户分为不同的群体。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_groups",
            "type": "integer",
            "description": "要创建的用户群体数量",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {"name": "user_segments", "type": "array", "description": "用户群体列表"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当创建的用户群体数量不合理时触发。",
        }
    ]


class UserBehaviorAnalysisMonitorRealTimeData(VirtualFunctionApp):
    name = "UserBehaviorAnalysisMonitorRealTimeData"
    summary = "实时监控用户行为数据，及时调整营销策略。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {"name": "real_time_data", "type": "object", "description": "实时用户行为数据"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        }
    ]


class UserBehaviorAnalysisVisualizeData(VirtualFunctionApp):
    name = "UserBehaviorAnalysisVisualizeData"
    summary = "将用户行为数据以图表形式可视化，便于理解和分析。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "visual_data",
            "type": "object",
            "description": "用户行为数据的可视化结果",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        }
    ]


class UserBehaviorAnalysisAnalyzeABTesting(VirtualFunctionApp):
    name = "UserBehaviorAnalysisAnalyzeABTesting"
    summary = "分析不同营销策略对用户行为的影响。"
    parameters: List[ArgParameter] = [
        {
            "name": "test_id",
            "type": "string",
            "description": "A/B测试的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "ab_test_analysis",
            "type": "object",
            "description": "A/B测试分析结果",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当测试 ID 格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当未找到指定的 A/B 测试数据时触发。",
        },
    ]


class UserBehaviorAnalysisGenerateRecommendations(VirtualFunctionApp):
    name = "UserBehaviorAnalysisGenerateRecommendations"
    summary = "根据用户的浏览和购买历史，提供个性化产品推荐。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {
            "name": "recommendations",
            "type": "array",
            "description": "个性化产品推荐列表",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户 ID 格式不正确时触发。",
        }
    ]


class UserBehaviorAnalysisSearchUserByEmail(VirtualFunctionApp):
    name = "UserBehaviorAnalysisSearchUserByEmail"
    summary = "根据用户的电子邮件地址搜索用户的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "email",
            "type": "string",
            "description": "用户的电子邮件地址",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功"},
        {"name": "user_id", "type": "string", "description": "用户的唯一标识符"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当电子邮件格式不正确时触发。",
        },
        {"name": "NotFoundException", "description": "当未找到指定的用户时触发。"},
    ]


@register_app()
class UserBehaviorAnalysis(FunctionApp):
    name_for_human = "用户行为分析工具"
    description_for_human = (
        "该工具包用于分析电商平台用户的行为数据，帮助商家优化购物体验。"
    )
    name_for_model = "UserBehaviorAnalysis"
    description_for_model = "该工具包用于分析电商平台用户的行为数据，帮助商家优化购物体验。通过分析用户的浏览、购买和反馈数据，生成详细报告和个性化推荐，从而提升销售和用户满意度。"
    app_classes = [
        UserBehaviorAnalysisAnalyzeBrowsingData,
        UserBehaviorAnalysisAnalyzePurchasingData,
        UserBehaviorAnalysisAnalyzeFeedbackData,
        UserBehaviorAnalysisGenerateBehaviorReport,
        UserBehaviorAnalysisPredictUserBehavior,
        UserBehaviorAnalysisSegmentUsers,
        UserBehaviorAnalysisMonitorRealTimeData,
        UserBehaviorAnalysisVisualizeData,
        UserBehaviorAnalysisAnalyzeABTesting,
        UserBehaviorAnalysisGenerateRecommendations,
        UserBehaviorAnalysisSearchUserByEmail,
    ]


#################### WifiScanner ####################


class WifiScannerScanNetworks(VirtualFunctionApp):
    name = "WifiScannerScanNetworks"
    summary = "扫描周围可用的WIFI网络并返回网络列表。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "指定要返回的最大网络数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "networks",
            "type": "array",
            "description": "可用WIFI网络的列表，包括每个网络的SSID和信号强度。",
        }
    ]
    exceptions: List[ArgException] = []


class WifiScannerGetSignalStrength(VirtualFunctionApp):
    name = "WifiScannerGetSignalStrength"
    summary = "获取指定WIFI网络的信号强度。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要获取信号强度的网络SSID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "signal_strength",
            "type": "number",
            "description": "返回指定WIFI网络的信号强度，单位为dBm。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"}
    ]


class WifiScannerConnectToNetwork(VirtualFunctionApp):
    name = "WifiScannerConnectToNetwork"
    summary = "连接到指定的WIFI网络。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要连接的网络SSID。",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "连接所需的网络密码。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "返回连接是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"},
        {"name": "ConflictException", "description": "如果网络连接失败。"},
    ]


class WifiScannerDisconnectFromNetwork(VirtualFunctionApp):
    name = "WifiScannerDisconnectFromNetwork"
    summary = "断开与当前连接的WIFI网络的连接。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "返回断开连接是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = []


class WifiScannerGetNetworkDetails(VirtualFunctionApp):
    name = "WifiScannerGetNetworkDetails"
    summary = "获取指定WIFI网络的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要获取详细信息的网络SSID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "network_details",
            "type": "object",
            "description": "包含网络的SSID、信道和安全类型等信息。",
            "fields": [
                {"name": "ssid", "type": "string", "description": "网络的SSID。"},
                {"name": "channel", "type": "integer", "description": "网络的信道。"},
                {
                    "name": "security_type",
                    "type": "string",
                    "description": "网络的安全类型。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"},
        {"name": "NotFoundException", "description": "如果SSID不存在。"},
    ]


class WifiScannerSavePreferredNetwork(VirtualFunctionApp):
    name = "WifiScannerSavePreferredNetwork"
    summary = "保存用户常用的WIFI网络以便快速连接。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要保存的网络SSID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "返回保存操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"},
        {"name": "ConflictException", "description": "如果网络已保存。"},
    ]


class WifiScannerForgetSavedNetwork(VirtualFunctionApp):
    name = "WifiScannerForgetSavedNetwork"
    summary = "忘记已保存的WIFI网络。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要忘记的网络SSID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "返回忘记操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"},
        {"name": "NotFoundException", "description": "如果SSID不存在。"},
    ]


class WifiScannerDisplayNetworkSecurityType(VirtualFunctionApp):
    name = "WifiScannerDisplayNetworkSecurityType"
    summary = "显示可用WIFI网络的安全类型。"
    parameters: List[ArgParameter] = [
        {
            "name": "ssid",
            "type": "string",
            "description": "要获取安全类型的网络SSID。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "security_type",
            "type": "string",
            "description": "返回指定网络的安全类型。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果SSID格式不正确。"},
        {"name": "NotFoundException", "description": "如果SSID不存在。"},
    ]


class WifiScannerCheckNetworkSpeed(VirtualFunctionApp):
    name = "WifiScannerCheckNetworkSpeed"
    summary = "测试并报告当前连接网络的速度。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "speed",
            "type": "number",
            "description": "返回当前网络速度，单位为Mbps。",
        }
    ]
    exceptions: List[ArgException] = []


class WifiScannerProvideTroubleshootingTips(VirtualFunctionApp):
    name = "WifiScannerProvideTroubleshootingTips"
    summary = "提供连接问题的故障排除建议。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "tips", "type": "array", "description": "返回故障排除建议的列表。"}
    ]
    exceptions: List[ArgException] = []


@register_app()
class WifiScanner(FunctionApp):
    name_for_human = "WIFI探测工具"
    description_for_human = "帮助用户扫描并选择最佳的WIFI网络连接。"
    name_for_model = "WifiScanner"
    description_for_model = "该工具包提供了一系列工具，用于扫描和连接可用的WIFI网络，获取信号强度和网络详细信息，帮助用户选择最佳的网络连接，同时提供故障排除建议。"
    app_classes = [
        WifiScannerScanNetworks,
        WifiScannerGetSignalStrength,
        WifiScannerConnectToNetwork,
        WifiScannerDisconnectFromNetwork,
        WifiScannerGetNetworkDetails,
        WifiScannerSavePreferredNetwork,
        WifiScannerForgetSavedNetwork,
        WifiScannerDisplayNetworkSecurityType,
        WifiScannerCheckNetworkSpeed,
        WifiScannerProvideTroubleshootingTips,
    ]


#################### GoogleCustomSearch ####################


class GoogleCustomSearchCustomSearchIntegration(VirtualFunctionApp):
    name = "GoogleCustomSearchCustomSearchIntegration"
    summary = "允许开发者将Google搜索功能集成到自定义网站中。"
    parameters: List[ArgParameter] = [
        {
            "name": "site_url",
            "type": "string",
            "description": "网站的URL，必须是有效的URL格式。",
            "required": True,
        },
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integration_status",
            "type": "boolean",
            "description": "集成操作的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果site_url参数格式不正确，集成将失败。",
        }
    ]


class GoogleCustomSearchResultFiltering(VirtualFunctionApp):
    name = "GoogleCustomSearchResultFiltering"
    summary = "提供过滤选项，以便用户可以根据特定条件筛选搜索结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "filter_criteria",
            "type": "string",
            "description": "过滤标准，如“日期”、“类型”等。",
            "required": True,
        },
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "经过过滤的搜索结果列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果filter_criteria参数不符合要求，过滤将失败。",
        }
    ]


class GoogleCustomSearchSearchQueryManagement(VirtualFunctionApp):
    name = "GoogleCustomSearchSearchQueryManagement"
    summary = "允许开发者管理和优化搜索查询以提高结果相关性。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用户的搜索查询。",
            "required": True,
        },
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_query",
            "type": "string",
            "description": "优化后的搜索查询。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果query参数无效，优化将失败。",
        }
    ]


class GoogleCustomSearchResultPagination(VirtualFunctionApp):
    name = "GoogleCustomSearchResultPagination"
    summary = "支持搜索结果的分页显示，以提高用户体验。"
    parameters: List[ArgParameter] = [
        {
            "name": "page_number",
            "type": "integer",
            "description": "请求的页面编号，从1开始。",
            "required": True,
        },
        {
            "name": "results_per_page",
            "type": "integer",
            "description": "每页显示的结果数量，最大为50。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "paginated_results",
            "type": "array",
            "description": "当前页面的搜索结果列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果page_number或results_per_page参数不符合限制，分页将失败。",
        }
    ]


class GoogleCustomSearchAnalyticsTracking(VirtualFunctionApp):
    name = "GoogleCustomSearchAnalyticsTracking"
    summary = "提供对搜索结果和用户行为的分析功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analytics_data",
            "type": "object",
            "description": "包含用户搜索行为的分析数据。",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCustomSearchCustomBranding(VirtualFunctionApp):
    name = "GoogleCustomSearchCustomBranding"
    summary = "允许开发者自定义搜索结果页面的外观。"
    parameters: List[ArgParameter] = [
        {
            "name": "branding_options",
            "type": "object",
            "description": "包含品牌定制选项的对象，如颜色、字体等。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "branding_status",
            "type": "boolean",
            "description": "自定义品牌操作的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果branding_options参数格式不正确，自定义将失败。",
        }
    ]


class GoogleCustomSearchAPIAccessForSearchResults(VirtualFunctionApp):
    name = "GoogleCustomSearchAPIAccessForSearchResults"
    summary = "提供API接口以便于程序化访问搜索结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "api_endpoint",
            "type": "string",
            "description": "可用于访问搜索结果的API端点。",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCustomSearchLanguageFiltering(VirtualFunctionApp):
    name = "GoogleCustomSearchLanguageFiltering"
    summary = "允许用户根据语言筛选搜索结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "language_code",
            "type": "string",
            "description": "语言代码，如“en”、“fr”等。",
            "required": True,
        },
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_language_results",
            "type": "array",
            "description": "根据语言筛选的搜索结果列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果language_code参数无效，筛选将失败。",
        }
    ]


class GoogleCustomSearchSafeSearchOptions(VirtualFunctionApp):
    name = "GoogleCustomSearchSafeSearchOptions"
    summary = "提供安全搜索选项，以过滤不当内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "safe_search",
            "type": "boolean",
            "description": "指定是否启用安全搜索。",
            "required": True,
        },
        {
            "name": "search_engine_id",
            "type": "string",
            "description": "Google自定义搜索引擎的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "safe_search_status",
            "type": "boolean",
            "description": "安全搜索设置的成功状态。",
        }
    ]
    exceptions: List[ArgException] = []


class GoogleCustomSearchSearchHistoryManagement(VirtualFunctionApp):
    name = "GoogleCustomSearchSearchHistoryManagement"
    summary = "允许用户查看和管理他们的搜索历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_history",
            "type": "array",
            "description": "用户的搜索历史记录列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果user_id无效，则无法找到搜索历史。",
        }
    ]


@register_app()
class GoogleCustomSearch(FunctionApp):
    name_for_human = "Google Custom Search"
    description_for_human = (
        "App for integrating Google search functionality into custom websites."
    )
    name_for_model = "GoogleCustomSearch"
    description_for_model = "GoogleCustomSearch工具包允许开发者在自定义网站上集成Google搜索功能，支持自定义搜索结果、过滤器和分析功能，旨在增强用户体验和信息检索效率。"
    app_classes = [
        GoogleCustomSearchCustomSearchIntegration,
        GoogleCustomSearchResultFiltering,
        GoogleCustomSearchSearchQueryManagement,
        GoogleCustomSearchResultPagination,
        GoogleCustomSearchAnalyticsTracking,
        GoogleCustomSearchCustomBranding,
        GoogleCustomSearchAPIAccessForSearchResults,
        GoogleCustomSearchLanguageFiltering,
        GoogleCustomSearchSafeSearchOptions,
        GoogleCustomSearchSearchHistoryManagement,
    ]


#################### MobileNetworkMonitoring ####################


class MobileNetworkMonitoringMeasureNetworkSpeed(VirtualFunctionApp):
    name = "MobileNetworkMonitoringMeasureNetworkSpeed"
    summary = "测量当前移动网络的下载和上传速度。"
    parameters: List[ArgParameter] = [
        {
            "name": "test_duration",
            "type": "integer",
            "description": "测试持续时间（以秒为单位），必须为正整数。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_speed",
            "type": "number",
            "description": "当前网络的下载速度（以 Mbps 为单位）。",
        },
        {
            "name": "upload_speed",
            "type": "number",
            "description": "当前网络的上传速度（以 Mbps 为单位）。",
        },
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringAnalyzeNetworkStability(VirtualFunctionApp):
    name = "MobileNetworkMonitoringAnalyzeNetworkStability"
    summary = "监测网络连接的稳定性，包括丢包率和延迟。"
    parameters: List[ArgParameter] = [
        {
            "name": "test_duration",
            "type": "integer",
            "description": "测试持续时间（以秒为单位），必须为正整数。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "packet_loss",
            "type": "number",
            "description": "网络丢包率（以百分比表示）。",
        },
        {
            "name": "latency",
            "type": "number",
            "description": "网络延迟（以毫秒为单位）。",
        },
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringRecordHistoricalData(VirtualFunctionApp):
    name = "MobileNetworkMonitoringRecordHistoricalData"
    summary = "记录并存储网络速度和稳定性数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "download_speed",
            "type": "number",
            "description": "下载速度（以 Mbps 为单位）。",
            "required": True,
        },
        {
            "name": "upload_speed",
            "type": "number",
            "description": "上传速度（以 Mbps 为单位）。",
            "required": True,
        },
        {
            "name": "packet_loss",
            "type": "number",
            "description": "网络丢包率（以百分比表示）。",
            "required": True,
        },
        {
            "name": "latency",
            "type": "number",
            "description": "网络延迟（以毫秒为单位）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示数据是否成功记录的状态。",
        }
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringRateNetworkQuality(VirtualFunctionApp):
    name = "MobileNetworkMonitoringRateNetworkQuality"
    summary = "根据测量结果为用户提供网络质量评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "download_speed",
            "type": "number",
            "description": "下载速度（以 Mbps 为单位）。",
            "required": True,
        },
        {
            "name": "upload_speed",
            "type": "number",
            "description": "上传速度（以 Mbps 为单位）。",
            "required": True,
        },
        {
            "name": "packet_loss",
            "type": "number",
            "description": "网络丢包率（以百分比表示）。",
            "required": True,
        },
        {
            "name": "latency",
            "type": "number",
            "description": "网络延迟（以毫秒为单位）。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "quality_score",
            "type": "string",
            "description": "网络质量评分，可能的值为“优秀”、“良好”、“一般”、“差”。",
        }
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringBenchmarkLocation(VirtualFunctionApp):
    name = "MobileNetworkMonitoringBenchmarkLocation"
    summary = "在不同位置进行网络测试并比较结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "location",
            "type": "string",
            "description": "测试的地理位置，必须是有效的地址。",
            "required": True,
        },
        {
            "name": "test_duration",
            "type": "integer",
            "description": "测试持续时间（以秒为单位），必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "benchmark_results",
            "type": "object",
            "description": "包含该位置的网络速度和稳定性结果的对象，包括下载速度、上传速度、丢包率和延迟。",
        }
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringGetCarrierInfo(VirtualFunctionApp):
    name = "MobileNetworkMonitoringGetCarrierInfo"
    summary = "显示用户当前使用的网络运营商信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "carrier_name",
            "type": "string",
            "description": "当前网络运营商的名称。",
        },
        {
            "name": "carrier_type",
            "type": "string",
            "description": "网络类型，例如“4G”、“5G”等。",
        },
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringCompareNetworks(VirtualFunctionApp):
    name = "MobileNetworkMonitoringCompareNetworks"
    summary = "允许用户比较不同网络运营商的速度和稳定性。"
    parameters: List[ArgParameter] = [
        {
            "name": "network_list",
            "type": "array",
            "description": "包含要比较的网络运营商名称的数组，必须至少包含两个网络。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_results",
            "type": "object",
            "description": "包含各网络运营商的速度和稳定性比较结果的对象。",
        }
    ]
    exceptions: List[ArgException] = []


class MobileNetworkMonitoringSendReport(VirtualFunctionApp):
    name = "MobileNetworkMonitoringSendReport"
    summary = "允许用户将网络测试结果通过电子邮件发送给他人。"
    parameters: List[ArgParameter] = [
        {
            "name": "email_address",
            "type": "string",
            "description": "收件人的电子邮件地址，必须是有效的电子邮件格式。",
            "required": True,
        },
        {
            "name": "report_data",
            "type": "string",
            "description": "网络测试结果的详细数据，必须为字符串格式。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示报告是否成功发送的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当电子邮件地址格式不正确或报告数据为空时触发。",
        }
    ]


class MobileNetworkMonitoringSetAlertThreshold(VirtualFunctionApp):
    name = "MobileNetworkMonitoringSetAlertThreshold"
    summary = "允许用户设置网络质量阈值并在超出时发送警报。"
    parameters: List[ArgParameter] = [
        {
            "name": "threshold_value",
            "type": "number",
            "description": "用户设置的网络质量阈值，必须为正数。",
            "required": True,
        },
        {
            "name": "alert_type",
            "type": "string",
            "description": "警报类型，可能的值为“下载速度”、“上传速度”、“丢包率”、“延迟”。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示阈值设置是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当阈值设置不正确时触发（例如，负数）。",
        }
    ]


class MobileNetworkMonitoringRealTimeMonitoring(VirtualFunctionApp):
    name = "MobileNetworkMonitoringRealTimeMonitoring"
    summary = "提供实时监控功能，持续跟踪网络性能并更新数据。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "current_status",
            "type": "object",
            "description": "包含当前网络性能状态的对象，包括下载速度、上传速度、丢包率和延迟。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class MobileNetworkMonitoring(FunctionApp):
    name_for_human = "移动网络监测工具"
    description_for_human = "监测和分析移动网络的速度和稳定性，提供网络质量评估。"
    name_for_model = "MobileNetworkMonitoring"
    description_for_model = "该工具包旨在监测和分析移动网络的速度和稳定性，为用户提供网络质量评估，包含多种工具以满足不同的网络监测需求。"
    app_classes = [
        MobileNetworkMonitoringMeasureNetworkSpeed,
        MobileNetworkMonitoringAnalyzeNetworkStability,
        MobileNetworkMonitoringRecordHistoricalData,
        MobileNetworkMonitoringRateNetworkQuality,
        MobileNetworkMonitoringBenchmarkLocation,
        MobileNetworkMonitoringGetCarrierInfo,
        MobileNetworkMonitoringCompareNetworks,
        MobileNetworkMonitoringSendReport,
        MobileNetworkMonitoringSetAlertThreshold,
        MobileNetworkMonitoringRealTimeMonitoring,
    ]


#################### NetworkProxyService ####################


class NetworkProxyServiceCreateProxy(VirtualFunctionApp):
    name = "NetworkProxyServiceCreateProxy"
    summary = "创建新的网络代理并返回其唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_type",
            "type": "string",
            "description": "代理类型，必须为 'HTTP', 'HTTPS' 或 'SOCKS' 中的一个。",
            "required": True,
        },
        {
            "name": "region",
            "type": "string",
            "description": "代理所在的地理区域。",
            "required": True,
        },
        {
            "name": "authentication",
            "type": "boolean",
            "description": "是否需要身份验证，默认为 false。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "新创建代理的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果 'proxy_type' 或 'region' 格式不正确。",
        }
    ]


class NetworkProxyServiceListProxies(VirtualFunctionApp):
    name = "NetworkProxyServiceListProxies"
    summary = "检索当前可用的网络代理列表。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "proxies",
            "type": "array",
            "description": "可用代理的列表，每个代理包含其唯一标识符和基本信息。",
        }
    ]
    exceptions: List[ArgException] = []


class NetworkProxyServiceUseProxy(VirtualFunctionApp):
    name = "NetworkProxyServiceUseProxy"
    summary = "选择特定的网络代理进行使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要使用的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示选择代理是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceDeleteProxy(VirtualFunctionApp):
    name = "NetworkProxyServiceDeleteProxy"
    summary = "删除指定的网络代理。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要删除的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceUpdateProxy(VirtualFunctionApp):
    name = "NetworkProxyServiceUpdateProxy"
    summary = "更新网络代理的配置。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要更新的代理的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_region",
            "type": "string",
            "description": "更新后的代理地理区域。",
            "required": True,
        },
        {
            "name": "new_authentication",
            "type": "boolean",
            "description": "更新后的身份验证设置。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceValidateProxy(VirtualFunctionApp):
    name = "NetworkProxyServiceValidateProxy"
    summary = "验证指定代理的可用性。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要验证的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "is_available", "type": "boolean", "description": "表示代理是否可用。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceGetProxySpeed(VirtualFunctionApp):
    name = "NetworkProxyServiceGetProxySpeed"
    summary = "获取指定代理的连接速度。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要检查的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "speed",
            "type": "number",
            "description": "代理的连接速度，单位为毫秒。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceRecordUsage(VirtualFunctionApp):
    name = "NetworkProxyServiceRecordUsage"
    summary = "记录使用历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "使用的代理的唯一标识符。",
            "required": True,
        },
        {
            "name": "timestamp",
            "type": "string",
            "description": "使用时间戳，格式为 ISO 8601。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示记录操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceGetAnonymityScore(VirtualFunctionApp):
    name = "NetworkProxyServiceGetAnonymityScore"
    summary = "提供指定代理的匿名性评分。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要检查的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "score",
            "type": "number",
            "description": "代理的匿名性评分，范围为 0 到 100。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


class NetworkProxyServiceSupportProtocols(VirtualFunctionApp):
    name = "NetworkProxyServiceSupportProtocols"
    summary = "获取代理支持的协议类型。"
    parameters: List[ArgParameter] = [
        {
            "name": "proxy_id",
            "type": "string",
            "description": "要检查的代理的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "protocols",
            "type": "array",
            "description": "代理支持的协议类型列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果 'proxy_id' 无效。"}
    ]


@register_app()
class NetworkProxyService(FunctionApp):
    name_for_human = "Network Proxy Service"
    description_for_human = (
        "提供可编程访问不同地区的网络代理服务，适合需要进行数据抓取和匿名浏览的用户。"
    )
    name_for_model = "NetworkProxyService"
    description_for_model = "该工具包提供可编程访问不同地区的网络代理服务，适合需要进行数据抓取和匿名浏览的用户，包含创建、管理和验证代理的多种功能，同时确保用户数据的安全性和隐私。"
    app_classes = [
        NetworkProxyServiceCreateProxy,
        NetworkProxyServiceListProxies,
        NetworkProxyServiceUseProxy,
        NetworkProxyServiceDeleteProxy,
        NetworkProxyServiceUpdateProxy,
        NetworkProxyServiceValidateProxy,
        NetworkProxyServiceGetProxySpeed,
        NetworkProxyServiceRecordUsage,
        NetworkProxyServiceGetAnonymityScore,
        NetworkProxyServiceSupportProtocols,
    ]


#################### BingSearch ####################


class BingSearchWebSearch(VirtualFunctionApp):
    name = "BingSearchWebSearch"
    summary = "通过关键字搜索网页内容并返回相关结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键字或短语。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "返回的网页搜索结果列表，每个结果包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当query为空或格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当没有找到相关的搜索结果时触发。",
        },
    ]


class BingSearchImageSearch(VirtualFunctionApp):
    name = "BingSearchImageSearch"
    summary = "通过关键字搜索图片并返回相关结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键字或短语。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "返回的图片搜索结果列表，每个结果包含图片链接和描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当query为空或格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当没有找到相关的搜索结果时触发。",
        },
    ]


class BingSearchVideoSearch(VirtualFunctionApp):
    name = "BingSearchVideoSearch"
    summary = "通过关键字搜索视频并返回相关结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键字或短语。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "返回的视频搜索结果列表，每个结果包含视频链接和描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当query为空或格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当没有找到相关的搜索结果时触发。",
        },
    ]


class BingSearchNewsSearch(VirtualFunctionApp):
    name = "BingSearchNewsSearch"
    summary = "通过关键字搜索新闻并返回相关结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键字或短语。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "results",
            "type": "array",
            "description": "返回的新闻搜索结果列表，每个结果包含标题和链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当query为空或格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当没有找到相关的搜索结果时触发。",
        },
    ]


class BingSearchComprehensiveSearch(VirtualFunctionApp):
    name = "BingSearchComprehensiveSearch"
    summary = "同时搜索网页、图片、视频和新闻。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要搜索的关键字或短语。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大搜索结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "web_results",
            "type": "array",
            "description": "返回的网页搜索结果列表。",
        },
        {
            "name": "image_results",
            "type": "array",
            "description": "返回的图片搜索结果列表。",
        },
        {
            "name": "video_results",
            "type": "array",
            "description": "返回的视频搜索结果列表。",
        },
        {
            "name": "news_results",
            "type": "array",
            "description": "返回的新闻搜索结果列表。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当query为空或格式不正确时触发。",
        }
    ]


class BingSearchFilterResults(VirtualFunctionApp):
    name = "BingSearchFilterResults"
    summary = "根据特定条件过滤搜索结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "results",
            "type": "array",
            "description": "要过滤的搜索结果列表。",
            "required": True,
        },
        {
            "name": "filter_criteria",
            "type": "object",
            "description": "过滤条件对象，包含字段如`date`和`type`。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_results",
            "type": "array",
            "description": "返回的过滤后的搜索结果列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当results为空或filter_criteria格式不正确时触发。",
        }
    ]


class BingSearchGetSearchDetails(VirtualFunctionApp):
    name = "BingSearchGetSearchDetails"
    summary = "获取特定搜索结果的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "result_id",
            "type": "string",
            "description": "要获取详细信息的搜索结果的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "details",
            "type": "object",
            "description": "返回的搜索结果详细信息对象，包括标题、链接和描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当result_id为空或格式不正确时触发。",
        },
        {
            "name": "NotFoundException",
            "description": "当result_id对应的结果不存在时触发。",
        },
    ]


class BingSearchStoreSearchHistory(VirtualFunctionApp):
    name = "BingSearchStoreSearchHistory"
    summary = "存储用户的搜索历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "要存储的搜索查询。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示搜索历史是否成功存储的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当query为空时触发。"}
    ]


class BingSearchAccessStoredData(VirtualFunctionApp):
    name = "BingSearchAccessStoredData"
    summary = "访问用户存储的数据，如搜索偏好设置。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "要访问的数据类型，例如`preferences`。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "data", "type": "object", "description": "返回的存储数据对象。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当data_type为空或格式不正确时触发。",
        }
    ]


class BingSearchBatchSearch(VirtualFunctionApp):
    name = "BingSearchBatchSearch"
    summary = "同时提交多个搜索请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "queries",
            "type": "array",
            "description": "要搜索的关键字列表。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "results", "type": "array", "description": "返回的多个搜索结果列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当queries为空或格式不正确时触发。",
        }
    ]


@register_app()
class BingSearch(FunctionApp):
    name_for_human = "Bing Search"
    description_for_human = "App for accessing Bing search engine, supporting various search types including web, image, video, and news."
    name_for_model = "BingSearch"
    description_for_model = "该工具包提供对Bing搜索引擎的访问，支持网页、图片、视频和新闻搜索，旨在增强应用程序的信息检索能力，并允许用户存储和管理搜索历史。"
    app_classes = [
        BingSearchWebSearch,
        BingSearchImageSearch,
        BingSearchVideoSearch,
        BingSearchNewsSearch,
        BingSearchComprehensiveSearch,
        BingSearchFilterResults,
        BingSearchGetSearchDetails,
        BingSearchStoreSearchHistory,
        BingSearchAccessStoredData,
        BingSearchBatchSearch,
    ]


#################### VpnServiceApi ####################


class VpnServiceApiConnectToVpn(VirtualFunctionApp):
    name = "VpnServiceApiConnectToVpn"
    summary = "连接到指定的VPN服务器以保护用户的网络连接。"
    parameters: List[ArgParameter] = [
        {
            "name": "server_name",
            "type": "string",
            "description": "需要连接的VPN服务器的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示连接是否成功。"},
        {"name": "message", "type": "string", "description": "连接结果的详细信息。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果服务器名称无效，抛出此异常。",
        }
    ]


class VpnServiceApiDisconnectVpn(VirtualFunctionApp):
    name = "VpnServiceApiDisconnectVpn"
    summary = "断开当前的VPN连接。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示断开是否成功。"},
        {"name": "message", "type": "string", "description": "断开的结果的详细信息。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果没有连接，抛出此异常。"}
    ]


class VpnServiceApiGetServerList(VirtualFunctionApp):
    name = "VpnServiceApiGetServerList"
    summary = "获取可用的VPN服务器列表及其状态。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "servers",
            "type": "array",
            "description": "包含服务器名称和状态的对象数组，每个对象包含字段: server_name (string), status (string)。",
        }
    ]
    exceptions: List[ArgException] = []


class VpnServiceApiGetConnectionStatus(VirtualFunctionApp):
    name = "VpnServiceApiGetConnectionStatus"
    summary = "检查当前VPN连接的状态。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "is_connected",
            "type": "boolean",
            "description": "表示当前是否已连接到VPN。",
        },
        {
            "name": "server_name",
            "type": "string",
            "description": "当前连接的服务器名称，如果未连接则为null。",
        },
    ]
    exceptions: List[ArgException] = []


class VpnServiceApiAccessStoredUserInfo(VirtualFunctionApp):
    name = "VpnServiceApiAccessStoredUserInfo"
    summary = "访问用户的VPN配置和凭据。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "user_info",
            "type": "object",
            "description": "包含用户VPN配置的对象，包括字段: username (string), password (string), protocol (string)。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果没有存储的信息，抛出此异常。"}
    ]


class VpnServiceApiChangeVpnServer(VirtualFunctionApp):
    name = "VpnServiceApiChangeVpnServer"
    summary = "更改已连接的VPN服务器。"
    parameters: List[ArgParameter] = [
        {
            "name": "new_server_name",
            "type": "string",
            "description": "新的VPN服务器名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "表示服务器更改是否成功。",
        },
        {"name": "message", "type": "string", "description": "更改结果的详细信息。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果新服务器名称无效，抛出此异常。",
        }
    ]


class VpnServiceApiGetTrafficStats(VirtualFunctionApp):
    name = "VpnServiceApiGetTrafficStats"
    summary = "提供用户的流量使用情况统计。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "stats",
            "type": "object",
            "description": "包含流量统计信息的对象，包括字段: total_data (number), used_data (number), remaining_data (number)。",
        }
    ]
    exceptions: List[ArgException] = []


class VpnServiceApiGetConnectionLogs(VirtualFunctionApp):
    name = "VpnServiceApiGetConnectionLogs"
    summary = "提供VPN连接的历史记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "array",
            "description": "包含连接日志的对象数组，每个对象包含字段: timestamp (string), server_name (string), duration (number)。",
        }
    ]
    exceptions: List[ArgException] = []


class VpnServiceApiSetPreferredServer(VirtualFunctionApp):
    name = "VpnServiceApiSetPreferredServer"
    summary = "允许用户设置默认连接的VPN服务器。"
    parameters: List[ArgParameter] = [
        {
            "name": "preferred_server_name",
            "type": "string",
            "description": "用户首选的VPN服务器名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示设置是否成功。"},
        {"name": "message", "type": "string", "description": "设置结果的详细信息。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果首选服务器名称无效，抛出此异常。",
        }
    ]


class VpnServiceApiAccessUserSettings(VirtualFunctionApp):
    name = "VpnServiceApiAccessUserSettings"
    summary = "访问用户的个性化设置，如协议类型和加密级别。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "settings",
            "type": "object",
            "description": "包含用户设置的对象，包括字段: protocol (string), encryption_level (string)。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class VpnServiceApi(FunctionApp):
    name_for_human = "VPN Service API"
    description_for_human = (
        "提供对虚拟私人网络的编程访问，允许用户安全地浏览互联网，保护隐私。"
    )
    name_for_model = "VpnServiceApi"
    description_for_model = "VpnServiceApi提供对虚拟私人网络的编程访问，允许用户安全地浏览互联网，并保护隐私，同时提供多种功能以增强用户体验和安全性。"
    app_classes = [
        VpnServiceApiConnectToVpn,
        VpnServiceApiDisconnectVpn,
        VpnServiceApiGetServerList,
        VpnServiceApiGetConnectionStatus,
        VpnServiceApiAccessStoredUserInfo,
        VpnServiceApiChangeVpnServer,
        VpnServiceApiGetTrafficStats,
        VpnServiceApiGetConnectionLogs,
        VpnServiceApiSetPreferredServer,
        VpnServiceApiAccessUserSettings,
    ]


#################### SocialMediaAnalysisApi ####################


class SocialMediaAnalysisApiUserBehaviorAnalysis(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiUserBehaviorAnalysis"
    summary = "获取用户在社交媒体上的行为数据，包括点赞、评论、分享等。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "查询的时间范围，格式为'YYYY-MM-DD to YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "behavior_data",
            "type": "object",
            "description": "用户行为数据的详细信息，包括点赞、评论和分享的数量。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的user_id格式不正确时触发。",
        }
    ]


class SocialMediaAnalysisApiSentimentMonitoring(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiSentimentMonitoring"
    summary = "监控特定话题或品牌在社交媒体上的舆情，分析正面和负面情绪。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "需要监控的特定话题或品牌名称。",
            "required": True,
        },
        {
            "name": "date_range",
            "type": "string",
            "description": "查询的时间范围，格式为'YYYY-MM-DD to YYYY-MM-DD'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sentiment_analysis",
            "type": "object",
            "description": "舆情分析结果，包括正面、负面和中性情绪的比例。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当topic格式不正确或date_range不符合要求时触发。",
        }
    ]


class SocialMediaAnalysisApiKeywordSearch(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiKeywordSearch"
    summary = "根据用户定义的关键字搜索相关的社交媒体帖子和评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "需要搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "与关键字匹配的社交媒体帖子和评论列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当keyword为空或不符合要求时触发。",
        }
    ]


class SocialMediaAnalysisApiDataSummary(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiDataSummary"
    summary = "对收集到的数据进行汇总，生成统计报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "summary_report",
            "type": "object",
            "description": "数据汇总报告，包括各种统计信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当user_id不存在时触发。"}
    ]


class SocialMediaAnalysisApiUserProfileGeneration(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiUserProfileGeneration"
    summary = "根据用户行为数据生成用户画像。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "user_profile",
            "type": "object",
            "description": "生成的用户画像，包括兴趣、偏好等信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当user_id不存在时触发。"}
    ]


class SocialMediaAnalysisApiCompetitorAnalysis(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiCompetitorAnalysis"
    summary = "监控竞争对手在社交媒体上的表现，分析其用户互动情况。"
    parameters: List[ArgParameter] = [
        {
            "name": "competitor_name",
            "type": "string",
            "description": "竞争对手的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "competitor_data",
            "type": "object",
            "description": "竞争对手的社交媒体表现数据，包括互动率等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当competitor_name不存在时触发。"}
    ]


class SocialMediaAnalysisApiTrendingTopicsTracking(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiTrendingTopicsTracking"
    summary = "实时追踪当前热门话题和趋势。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "trending_topics",
            "type": "array",
            "description": "当前热门话题的列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当max_results小于1时触发。"}
    ]


class SocialMediaAnalysisApiCustomReportGeneration(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiCustomReportGeneration"
    summary = "根据用户需求生成定制化的分析报告。"
    parameters: List[ArgParameter] = [
        {
            "name": "report_parameters",
            "type": "object",
            "description": "用户自定义的报告参数，包括需要分析的数据类型和范围。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "report", "type": "object", "description": "生成的定制化报告。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当report_parameters格式不正确时触发。",
        }
    ]


class SocialMediaAnalysisApiAdPerformanceEvaluation(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiAdPerformanceEvaluation"
    summary = "评估广告在社交媒体上的表现，包括点击率和转化率。"
    parameters: List[ArgParameter] = [
        {
            "name": "ad_id",
            "type": "string",
            "description": "广告的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_metrics",
            "type": "object",
            "description": "广告表现的关键指标，包括点击率和转化率。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当ad_id不存在时触发。"}
    ]


class SocialMediaAnalysisApiUserFeedbackCollection(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiUserFeedbackCollection"
    summary = "收集和分析用户对品牌或产品的反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "feedback_type",
            "type": "string",
            "description": "反馈类型，例如'positive'或'negative'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_data",
            "type": "object",
            "description": "收集到的用户反馈数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当feedback_type格式不正确时触发。",
        }
    ]


class SocialMediaAnalysisApiFeedbackSearch(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiFeedbackSearch"
    summary = "根据用户定义的条件搜索用户反馈。"
    parameters: List[ArgParameter] = [
        {
            "name": "feedback_type",
            "type": "string",
            "description": "反馈类型，例如'positive'或'negative'。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "feedback_results",
            "type": "array",
            "description": "与条件匹配的用户反馈列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当feedback_type格式不正确或max_results小于1时触发。",
        }
    ]


class SocialMediaAnalysisApiTrendingTopicSearch(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiTrendingTopicSearch"
    summary = "根据用户定义的条件搜索热门话题。"
    parameters: List[ArgParameter] = [
        {
            "name": "topic",
            "type": "string",
            "description": "需要搜索的热门话题。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "topic_results",
            "type": "array",
            "description": "与条件匹配的热门话题列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当topic为空或max_results小于1时触发。",
        }
    ]


class SocialMediaAnalysisApiUserStoredDataAccess(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiUserStoredDataAccess"
    summary = "访问用户存储的社交媒体数据，如地址和支付方式。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "stored_data",
            "type": "object",
            "description": "用户存储的社交媒体数据，包括地址和支付方式。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当user_id不存在时触发。"}
    ]


class SocialMediaAnalysisApiOperationStatus(VirtualFunctionApp):
    name = "SocialMediaAnalysisApiOperationStatus"
    summary = "返回操作的状态，适用于所有创建、更新和删除操作。"
    parameters: List[ArgParameter] = [
        {
            "name": "operation",
            "type": "string",
            "description": "操作类型，例如'create'、'update'或'delete'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当operation不在允许的操作类型中时触发。",
        }
    ]


@register_app()
class SocialMediaAnalysisApi(FunctionApp):
    name_for_human = "社交媒体分析API"
    description_for_human = (
        "提供对社交媒体平台数据的访问，支持用户行为分析、舆情监测、关键字搜索等功能。"
    )
    name_for_model = "SocialMediaAnalysisApi"
    description_for_model = "社交媒体分析API提供对社交媒体平台数据的访问，支持用户行为分析、舆情监测、关键字搜索等功能，旨在帮助品牌营销人员和用户洞察市场动态。"
    app_classes = [
        SocialMediaAnalysisApiUserBehaviorAnalysis,
        SocialMediaAnalysisApiSentimentMonitoring,
        SocialMediaAnalysisApiKeywordSearch,
        SocialMediaAnalysisApiDataSummary,
        SocialMediaAnalysisApiUserProfileGeneration,
        SocialMediaAnalysisApiCompetitorAnalysis,
        SocialMediaAnalysisApiTrendingTopicsTracking,
        SocialMediaAnalysisApiCustomReportGeneration,
        SocialMediaAnalysisApiAdPerformanceEvaluation,
        SocialMediaAnalysisApiUserFeedbackCollection,
        SocialMediaAnalysisApiFeedbackSearch,
        SocialMediaAnalysisApiTrendingTopicSearch,
        SocialMediaAnalysisApiUserStoredDataAccess,
        SocialMediaAnalysisApiOperationStatus,
    ]


#################### DataCleaningAndIntegration ####################


class DataCleaningAndIntegrationDataExtraction(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataExtraction"
    summary = "从指定的网络数据源提取原始数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "source_url",
            "type": "string",
            "description": "数据源的URL地址。",
            "required": True,
        },
        {
            "name": "extraction_type",
            "type": "string",
            "description": "提取的数据类型，例如'json'或'xml'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "raw_data", "type": "object", "description": "提取的原始数据对象。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的source_url格式不正确或不被支持时。",
        }
    ]


class DataCleaningAndIntegrationDataCleaning(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataCleaning"
    summary = "清理原始数据，去除重复和无效信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "raw_data",
            "type": "object",
            "description": "要清理的原始数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "cleaned_data", "type": "object", "description": "清理后的数据对象。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的raw_data格式不正确或为空时。",
        }
    ]


class DataCleaningAndIntegrationDataIntegration(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataIntegration"
    summary = "将多个清理后的数据合并成统一格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "cleaned_data_list",
            "type": "array",
            "description": "清理后的数据对象数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "integrated_data",
            "type": "object",
            "description": "整合后的数据对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的cleaned_data_list为空或格式不正确时。",
        }
    ]


class DataCleaningAndIntegrationDataTransformation(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataTransformation"
    summary = "将数据转换为适合分析的格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "integrated_data",
            "type": "object",
            "description": "整合后的数据对象。",
            "required": True,
        },
        {
            "name": "target_format",
            "type": "string",
            "description": "目标格式，例如'csv'或'json'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transformed_data",
            "type": "object",
            "description": "转换后的数据对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的target_format不在允许的值列表中时。",
        }
    ]


class DataCleaningAndIntegrationDataValidation(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataValidation"
    summary = "验证数据的完整性和准确性。"
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "要验证的数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "validation_status",
            "type": "boolean",
            "description": "数据验证的状态，成功返回true，失败返回false。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的data格式不正确或为空时。",
        }
    ]


class DataCleaningAndIntegrationDataStorage(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataStorage"
    summary = "将清洗和整合后的数据存储到指定的数据库或文件中。"
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "要存储的数据对象。",
            "required": True,
        },
        {
            "name": "storage_location",
            "type": "string",
            "description": "存储位置的URL或路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "storage_success",
            "type": "boolean",
            "description": "数据存储的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的storage_location格式不正确或为空时。",
        }
    ]


class DataCleaningAndIntegrationDataAnalysis(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataAnalysis"
    summary = "对整合后的数据进行基本分析，生成统计信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "integrated_data",
            "type": "object",
            "description": "整合后的数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "数据分析的报告对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的integrated_data格式不正确或为空时。",
        }
    ]


class DataCleaningAndIntegrationDataVisualization(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataVisualization"
    summary = "创建数据的可视化图表以便于理解。"
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "要可视化的数据对象。",
            "required": True,
        },
        {
            "name": "visualization_type",
            "type": "string",
            "description": "可视化类型，例如'bar_chart'或'line_chart'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "可视化图表的URL链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的visualization_type不在允许的值列表中时。",
        }
    ]


class DataCleaningAndIntegrationDataExport(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationDataExport"
    summary = "将处理后的数据导出为不同格式（如CSV、JSON）。"
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "object",
            "description": "要导出的数据对象。",
            "required": True,
        },
        {
            "name": "export_format",
            "type": "string",
            "description": "导出格式，例如'csv'或'json'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "export_success",
            "type": "boolean",
            "description": "数据导出的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的export_format不在允许的值列表中时。",
        }
    ]


class DataCleaningAndIntegrationErrorLogging(VirtualFunctionApp):
    name = "DataCleaningAndIntegrationErrorLogging"
    summary = "记录在数据处理过程中遇到的错误和异常。"
    parameters: List[ArgParameter] = [
        {
            "name": "error_message",
            "type": "string",
            "description": "错误信息的描述。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "log_success",
            "type": "boolean",
            "description": "错误记录的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当提供的error_message为空时。",
        }
    ]


@register_app()
class DataCleaningAndIntegration(FunctionApp):
    name_for_human = "数据清洗与整合工具"
    description_for_human = (
        "用于从多个网络数据源提取、清洗和整合信息的工具包，适合数据科学和商业智能应用。"
    )
    name_for_model = "DataCleaningAndIntegration"
    description_for_model = "该工具包提供了一系列工具，用于从多个网络数据源中提取、清洗和整合数据，适用于数据科学和商业智能应用。工具包确保数据处理的合规性和安全性，支持数据存储、分析和可视化。"
    app_classes = [
        DataCleaningAndIntegrationDataExtraction,
        DataCleaningAndIntegrationDataCleaning,
        DataCleaningAndIntegrationDataIntegration,
        DataCleaningAndIntegrationDataTransformation,
        DataCleaningAndIntegrationDataValidation,
        DataCleaningAndIntegrationDataStorage,
        DataCleaningAndIntegrationDataAnalysis,
        DataCleaningAndIntegrationDataVisualization,
        DataCleaningAndIntegrationDataExport,
        DataCleaningAndIntegrationErrorLogging,
    ]


#################### WindowsPowerShell ####################


class WindowsPowerShellExecuteCommand(VirtualFunctionApp):
    name = "WindowsPowerShellExecuteCommand"
    summary = "运行指定的PowerShell命令并返回结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "要执行的PowerShell命令。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "output", "type": "string", "description": "命令执行的结果。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当命令格式不正确时抛出。"}
    ]


class WindowsPowerShellManageService(VirtualFunctionApp):
    name = "WindowsPowerShellManageService"
    summary = "启动、停止或检查服务状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'start', 'stop', 'status'）。",
            "required": True,
        },
        {
            "name": "service_name",
            "type": "string",
            "description": "要管理的服务名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "status",
            "type": "string",
            "description": "服务的当前状态（仅在操作为'status'时返回）。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当服务名称无效时抛出。"},
        {"name": "NotFoundException", "description": "当服务不存在时抛出。"},
    ]


class WindowsPowerShellFileManagement(VirtualFunctionApp):
    name = "WindowsPowerShellFileManagement"
    summary = "创建、删除和管理文件和目录。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'create', 'delete', 'list'）。",
            "required": True,
        },
        {
            "name": "path",
            "type": "string",
            "description": "文件或目录的路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "files",
            "type": "array",
            "description": "列出目录中的文件（仅在操作为'list'时返回）。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当路径格式不正确时抛出。"},
        {"name": "NotFoundException", "description": "当文件或目录不存在时抛出。"},
    ]


class WindowsPowerShellUserManagement(VirtualFunctionApp):
    name = "WindowsPowerShellUserManagement"
    summary = "创建、删除和管理用户账户。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'create', 'delete', 'list'）。",
            "required": True,
        },
        {
            "name": "username",
            "type": "string",
            "description": "用户名（仅在操作为'create'或'delete'时需要）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "user_list",
            "type": "array",
            "description": "当前用户列表（仅在操作为'list'时返回）。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当用户名格式不正确时抛出。",
        },
        {"name": "NotFoundException", "description": "当用户不存在时抛出。"},
    ]


class WindowsPowerShellSystemConfiguration(VirtualFunctionApp):
    name = "WindowsPowerShellSystemConfiguration"
    summary = "配置系统设置和参数。"
    parameters: List[ArgParameter] = [
        {
            "name": "setting",
            "type": "string",
            "description": "要配置的设置名称。",
            "required": True,
        },
        {
            "name": "value",
            "type": "string",
            "description": "要设置的值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当设置名称无效时抛出。"}
    ]


class WindowsPowerShellScriptExecution(VirtualFunctionApp):
    name = "WindowsPowerShellScriptExecution"
    summary = "运行指定的PowerShell脚本。"
    parameters: List[ArgParameter] = [
        {
            "name": "script_path",
            "type": "string",
            "description": "脚本文件的路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "output", "type": "string", "description": "脚本执行的结果。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当脚本路径格式不正确时抛出。",
        },
        {"name": "NotFoundException", "description": "当脚本不存在时抛出。"},
    ]


class WindowsPowerShellRemoteManagement(VirtualFunctionApp):
    name = "WindowsPowerShellRemoteManagement"
    summary = "通过远程会话管理其他计算机。"
    parameters: List[ArgParameter] = [
        {
            "name": "computer_name",
            "type": "string",
            "description": "目标计算机的名称或IP地址。",
            "required": True,
        },
        {
            "name": "command",
            "type": "string",
            "description": "要在远程计算机上执行的命令。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "output", "type": "string", "description": "远程命令执行的结果。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当计算机名称格式不正确时抛出。",
        },
        {"name": "NotFoundException", "description": "当无法连接到计算机时抛出。"},
    ]


class WindowsPowerShellEventLogAccess(VirtualFunctionApp):
    name = "WindowsPowerShellEventLogAccess"
    summary = "访问和查询系统事件日志。"
    parameters: List[ArgParameter] = [
        {
            "name": "log_name",
            "type": "string",
            "description": "要访问的事件日志名称。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "最大返回的事件数量，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "events", "type": "array", "description": "返回的事件列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当日志名称无效时抛出。"}
    ]


class WindowsPowerShellProcessManagement(VirtualFunctionApp):
    name = "WindowsPowerShellProcessManagement"
    summary = "启动、停止和管理系统进程。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'start', 'stop', 'list'）。",
            "required": True,
        },
        {
            "name": "process_name",
            "type": "string",
            "description": "进程名称（仅在操作为'start'或'stop'时需要）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "process_list",
            "type": "array",
            "description": "当前运行的进程列表（仅在操作为'list'时返回）。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当进程名称格式不正确时抛出。",
        },
        {"name": "NotFoundException", "description": "当进程不存在时抛出。"},
    ]


class WindowsPowerShellNetworkConfiguration(VirtualFunctionApp):
    name = "WindowsPowerShellNetworkConfiguration"
    summary = "配置网络设置和查看网络状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型（'configure', 'status'）。",
            "required": True,
        },
        {
            "name": "network_param",
            "type": "string",
            "description": "网络参数（仅在操作为'configure'时需要）。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "network_status",
            "type": "string",
            "description": "网络状态（仅在操作为'status'时返回）。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当网络参数格式不正确时抛出。",
        }
    ]


@register_app()
class WindowsPowerShell(FunctionApp):
    name_for_human = "Windows PowerShell"
    description_for_human = "App for executing system management and automation tasks using command line tools."
    name_for_model = "WindowsPowerShell"
    description_for_model = "WindowsPowerShell工具包提供了一组强大的命令行工具，允许用户执行系统管理、自动化和配置管理任务，适合系统管理员和高级用户。它支持命令执行、服务管理、文件管理、用户管理、系统配置等功能，同时具备潜在的风险，如未授权访问和数据丢失。"
    app_classes = [
        WindowsPowerShellExecuteCommand,
        WindowsPowerShellManageService,
        WindowsPowerShellFileManagement,
        WindowsPowerShellUserManagement,
        WindowsPowerShellSystemConfiguration,
        WindowsPowerShellScriptExecution,
        WindowsPowerShellRemoteManagement,
        WindowsPowerShellEventLogAccess,
        WindowsPowerShellProcessManagement,
        WindowsPowerShellNetworkConfiguration,
    ]


#################### WebScrapingDataAnalysis ####################


class WebScrapingDataAnalysisExtractData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisExtractData"
    summary = "从指定网址提取数据并返回原始数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "要提取数据的网址，必须是有效的URL格式。",
            "required": True,
        },
        {
            "name": "css_selector",
            "type": "string",
            "description": "用于选择要提取内容的CSS选择器。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "raw_data",
            "type": "object",
            "description": "提取的原始数据对象，包含抓取的数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当URL格式不正确时抛出。"},
        {"name": "NotFoundException", "description": "当指定的网页不可用时抛出。"},
    ]


class WebScrapingDataAnalysisCleanData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisCleanData"
    summary = "对提取的数据进行清理和格式化。"
    parameters: List[ArgParameter] = [
        {
            "name": "raw_data",
            "type": "object",
            "description": "要清理的原始数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "cleaned_data", "type": "object", "description": "清理后的数据对象。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的数据格式不正确时抛出。",
        }
    ]


class WebScrapingDataAnalysisAnalyzeData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisAnalyzeData"
    summary = "对清理后的数据进行分析，生成统计信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "cleaned_data",
            "type": "object",
            "description": "清理后的数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "数据分析报告，包含统计信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的数据格式不正确时抛出。",
        }
    ]


class WebScrapingDataAnalysisVisualizeData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisVisualizeData"
    summary = "生成数据的可视化图表。"
    parameters: List[ArgParameter] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "数据分析报告，包含统计信息。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "chart_url", "type": "string", "description": "可视化图表的URL。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的数据格式不正确时抛出。",
        }
    ]


class WebScrapingDataAnalysisExportData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisExportData"
    summary = "将分析结果导出为CSV或JSON格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "analysis_report",
            "type": "object",
            "description": "数据分析报告，包含统计信息。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出格式，可以是'CSV'或'JSON'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的URL。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的数据格式不正确或不支持的导出格式时抛出。",
        }
    ]


class WebScrapingDataAnalysisStoreData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisStoreData"
    summary = "将提取的数据保存到数据库中。"
    parameters: List[ArgParameter] = [
        {
            "name": "cleaned_data",
            "type": "object",
            "description": "要存储的清理后的数据对象。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "数据存储是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "当存储的数据已经存在时抛出。"}
    ]


class WebScrapingDataAnalysisScheduleScraping(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisScheduleScraping"
    summary = "设置定时任务定期抓取数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "要定时抓取的网址，必须是有效的URL格式。",
            "required": True,
        },
        {
            "name": "interval",
            "type": "integer",
            "description": "抓取的时间间隔，以分钟为单位。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "定时抓取设置是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当时间间隔不合理时抛出。"}
    ]


class WebScrapingDataAnalysisCompareData(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisCompareData"
    summary = "比较不同时间点的数据变化。"
    parameters: List[ArgParameter] = [
        {
            "name": "old_data",
            "type": "object",
            "description": "旧数据对象。",
            "required": True,
        },
        {
            "name": "new_data",
            "type": "object",
            "description": "新数据对象。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "comparison_report",
            "type": "object",
            "description": "数据比较报告，包含变化信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的数据格式不正确时抛出。",
        }
    ]


class WebScrapingDataAnalysisMultiThreadedScraping(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisMultiThreadedScraping"
    summary = "支持多线程并发抓取数据以提高效率。"
    parameters: List[ArgParameter] = [
        {
            "name": "urls",
            "type": "array",
            "description": "要抓取的多个网址列表，必须是有效的URL格式。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "多线程抓取是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当传入的URL格式不正确时抛出。",
        }
    ]


class WebScrapingDataAnalysisLogErrors(VirtualFunctionApp):
    name = "WebScrapingDataAnalysisLogErrors"
    summary = "记录抓取过程中的错误和异常。"
    parameters: List[ArgParameter] = [
        {
            "name": "error_message",
            "type": "string",
            "description": "错误消息的描述。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "错误记录是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当错误消息格式不正确时抛出。",
        }
    ]


@register_app()
class WebScrapingDataAnalysis(FunctionApp):
    name_for_human = "Web Scraping Data Analysis"
    description_for_human = "一个强大的工具包，用于从网络爬虫中提取、清理、分析和可视化数据，支持市场研究和竞争分析。"
    name_for_model = "WebScrapingDataAnalysis"
    description_for_model = "该工具包为市场研究和竞争分析提供强大的数据提取、清理、分析和可视化功能，旨在帮助用户从网络爬虫中提取有价值的数据并进行深入分析，同时需注意潜在的法律和隐私风险。"
    app_classes = [
        WebScrapingDataAnalysisExtractData,
        WebScrapingDataAnalysisCleanData,
        WebScrapingDataAnalysisAnalyzeData,
        WebScrapingDataAnalysisVisualizeData,
        WebScrapingDataAnalysisExportData,
        WebScrapingDataAnalysisStoreData,
        WebScrapingDataAnalysisScheduleScraping,
        WebScrapingDataAnalysisCompareData,
        WebScrapingDataAnalysisMultiThreadedScraping,
        WebScrapingDataAnalysisLogErrors,
    ]


#################### GitBash ####################


class GitBashCommitChanges(VirtualFunctionApp):
    name = "GitBashCommitChanges"
    summary = "提交文件的更改到本地Git仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "commit_message",
            "type": "string",
            "description": "提交的描述信息。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "提交操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "提交信息不能为空。"}
    ]


class GitBashPushChanges(VirtualFunctionApp):
    name = "GitBashPushChanges"
    summary = "将本地提交推送到远程Git仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "remote_name",
            "type": "string",
            "description": "远程仓库的名称，通常为origin。",
            "required": True,
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "要推送的分支名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "推送操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "远程名称或分支名称不能为空。",
        }
    ]


class GitBashPullChanges(VirtualFunctionApp):
    name = "GitBashPullChanges"
    summary = "从远程Git仓库获取最新的更改并合并到本地。"
    parameters: List[ArgParameter] = [
        {
            "name": "remote_name",
            "type": "string",
            "description": "远程仓库的名称，通常为origin。",
            "required": True,
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "要拉取的分支名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "拉取操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "远程名称或分支名称不能为空。",
        }
    ]


class GitBashCloneRepository(VirtualFunctionApp):
    name = "GitBashCloneRepository"
    summary = "从远程Git仓库克隆一个新的本地副本。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_url",
            "type": "string",
            "description": "远程仓库的URL。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "克隆操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "仓库URL不能为空。"}
    ]


class GitBashCheckStatus(VirtualFunctionApp):
    name = "GitBashCheckStatus"
    summary = "检查当前工作区和暂存区的状态。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "string",
            "description": "当前工作区和暂存区的状态信息。",
        }
    ]
    exceptions: List[ArgException] = []


class GitBashCreateBranch(VirtualFunctionApp):
    name = "GitBashCreateBranch"
    summary = "创建一个新的Git分支。"
    parameters: List[ArgParameter] = [
        {
            "name": "branch_name",
            "type": "string",
            "description": "要创建的分支名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "创建分支操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "分支名称不能为空。"}
    ]


class GitBashMergeBranch(VirtualFunctionApp):
    name = "GitBashMergeBranch"
    summary = "合并一个分支到当前分支。"
    parameters: List[ArgParameter] = [
        {
            "name": "branch_name",
            "type": "string",
            "description": "要合并的分支名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "合并操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "分支名称不能为空。"}
    ]


class GitBashDeleteBranch(VirtualFunctionApp):
    name = "GitBashDeleteBranch"
    summary = "删除一个指定的分支。"
    parameters: List[ArgParameter] = [
        {
            "name": "branch_name",
            "type": "string",
            "description": "要删除的分支名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "分支名称不能为空。"}
    ]


class GitBashViewLog(VirtualFunctionApp):
    name = "GitBashViewLog"
    summary = "查看提交历史记录。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "log", "type": "array", "description": "提交历史记录的数组。"}
    ]
    exceptions: List[ArgException] = []


class GitBashRevertChanges(VirtualFunctionApp):
    name = "GitBashRevertChanges"
    summary = "撤销对文件的更改。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要撤销更改的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "撤销操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "文件路径不能为空。"}
    ]


class GitBashListBranches(VirtualFunctionApp):
    name = "GitBashListBranches"
    summary = "列出所有分支。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {"name": "branches", "type": "array", "description": "所有分支名称的数组。"}
    ]
    exceptions: List[ArgException] = []


class GitBashGetRepositoryInfo(VirtualFunctionApp):
    name = "GitBashGetRepositoryInfo"
    summary = "获取当前Git仓库的信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "repository_info",
            "type": "object",
            "description": "当前Git仓库的信息，包括分支列表和提交历史。",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class GitBash(FunctionApp):
    name_for_human = "Git Bash"
    description_for_human = "A command-line interface app for managing Git version control operations efficiently."
    name_for_model = "GitBash"
    description_for_model = "GitBash工具包为开发者提供一套基于Bash的命令行接口，用于高效管理Git版本控制操作，包括提交、推送、拉取、克隆仓库、创建和删除分支等功能，旨在增强开发者在版本控制中的效率和控制力。"
    app_classes = [
        GitBashCommitChanges,
        GitBashPushChanges,
        GitBashPullChanges,
        GitBashCloneRepository,
        GitBashCheckStatus,
        GitBashCreateBranch,
        GitBashMergeBranch,
        GitBashDeleteBranch,
        GitBashViewLog,
        GitBashRevertChanges,
        GitBashListBranches,
        GitBashGetRepositoryInfo,
    ]


#################### Ansible ####################


class AnsibleConfigurationManagement(VirtualFunctionApp):
    name = "AnsibleConfigurationManagement"
    summary = "管理和自动化系统配置，确保系统在预期状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "config_file",
            "type": "string",
            "description": "要应用的配置文件的路径，必须是有效的文件路径。",
            "required": True,
        },
        {
            "name": "target_hosts",
            "type": "array",
            "description": "目标主机列表，必须包含至少一个有效的主机名或IP地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "message",
            "type": "string",
            "description": "操作的详细信息或错误消息。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果配置文件格式不正确，抛出此异常。",
        }
    ]


class AnsibleApplicationDeployment(VirtualFunctionApp):
    name = "AnsibleApplicationDeployment"
    summary = "自动化应用程序的部署过程，简化软件发布。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_package",
            "type": "string",
            "description": "应用程序包的路径，必须是有效的文件路径。",
            "required": True,
        },
        {
            "name": "deploy_hosts",
            "type": "array",
            "description": "部署目标主机列表，必须包含至少一个有效的主机名或IP地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "message",
            "type": "string",
            "description": "操作的详细信息或错误消息。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果应用程序包路径不正确，抛出此异常。",
        }
    ]


class AnsibleTaskAutomation(VirtualFunctionApp):
    name = "AnsibleTaskAutomation"
    summary = "自动执行重复性任务，提高效率。"
    parameters: List[ArgParameter] = [
        {
            "name": "task_script",
            "type": "string",
            "description": "要执行的任务脚本，必须是有效的脚本文件路径。",
            "required": True,
        },
        {
            "name": "target_hosts",
            "type": "array",
            "description": "目标主机列表，必须包含至少一个有效的主机名或IP地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {"name": "output", "type": "string", "description": "任务执行的输出结果。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果任务脚本格式不正确，抛出此异常。",
        }
    ]


class AnsibleCloudProvisioning(VirtualFunctionApp):
    name = "AnsibleCloudProvisioning"
    summary = "在云环境中自动创建和管理资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "资源类型（如实例、存储等），必须是有效的资源类型名称。",
            "required": True,
        },
        {
            "name": "resource_config",
            "type": "string",
            "description": "资源配置的详细信息，必须是有效的配置格式。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "resource_id",
            "type": "string",
            "description": "创建的资源的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果资源类型不正确，抛出此异常。",
        }
    ]


class AnsibleInventoryManagement(VirtualFunctionApp):
    name = "AnsibleInventoryManagement"
    summary = "管理和组织多个服务器和设备的清单。"
    parameters: List[ArgParameter] = [
        {
            "name": "inventory_file",
            "type": "string",
            "description": "清单文件的路径，必须是有效的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "inventory_list",
            "type": "array",
            "description": "返回的清单列表，包含所有管理的服务器和设备信息。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果清单文件未找到，抛出此异常。"}
    ]


class AnsibleRoleManagement(VirtualFunctionApp):
    name = "AnsibleRoleManagement"
    summary = "支持角色的定义和重用，以便于配置和部署。"
    parameters: List[ArgParameter] = [
        {
            "name": "role_definition",
            "type": "string",
            "description": "角色定义的详细信息，必须是有效的角色格式。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "role_id",
            "type": "string",
            "description": "创建的角色的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果角色定义格式不正确，抛出此异常。",
        }
    ]


class AnsiblePlaybookExecution(VirtualFunctionApp):
    name = "AnsiblePlaybookExecution"
    summary = "执行复杂的操作序列，支持多种任务的组合。"
    parameters: List[ArgParameter] = [
        {
            "name": "playbook_file",
            "type": "string",
            "description": "要执行的 playbook 文件路径，必须是有效的文件路径。",
            "required": True,
        },
        {
            "name": "target_hosts",
            "type": "array",
            "description": "目标主机列表，必须包含至少一个有效的主机名或IP地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "execution_output",
            "type": "string",
            "description": "执行的详细输出。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果 playbook 文件未找到，抛出此异常。",
        }
    ]


class AnsibleModuleIntegration(VirtualFunctionApp):
    name = "AnsibleModuleIntegration"
    summary = "集成各种 Ansible 模块，以扩展功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "module_name",
            "type": "string",
            "description": "要集成的模块名称，必须是有效的模块名称。",
            "required": True,
        },
        {
            "name": "module_params",
            "type": "object",
            "description": "模块参数的对象，必须包含模块所需的所有参数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "integration_message",
            "type": "string",
            "description": "集成的详细信息。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果模块名称不正确，抛出此异常。",
        }
    ]


class AnsibleErrorHandling(VirtualFunctionApp):
    name = "AnsibleErrorHandling"
    summary = "提供错误处理机制，以便于调试和修复。"
    parameters: List[ArgParameter] = [
        {
            "name": "error_code",
            "type": "string",
            "description": "错误代码，必须是有效的错误代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {"name": "error_message", "type": "string", "description": "错误的详细描述。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果错误代码无效，抛出此异常。"}
    ]


class AnsibleVersionControl(VirtualFunctionApp):
    name = "AnsibleVersionControl"
    summary = "支持对配置文件和部署脚本的版本控制。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要版本控制的文件路径，必须是有效的文件路径。",
            "required": True,
        },
        {
            "name": "version_action",
            "type": "string",
            "description": "版本操作（如提交、回滚），必须是有效的操作类型。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {
            "name": "version_info",
            "type": "string",
            "description": "版本信息的详细描述。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果版本操作不合法，抛出此异常。",
        }
    ]


class AnsibleStoredDataAccess(VirtualFunctionApp):
    name = "AnsibleStoredDataAccess"
    summary = "访问用户存储的配置或脚本。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "要访问的数据类型（如配置、脚本），必须是有效的数据类型名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "表示操作是否成功。"},
        {"name": "data_content", "type": "string", "description": "返回的数据内容。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "如果请求的数据类型不存在，抛出此异常。",
        }
    ]


@register_app()
class Ansible(FunctionApp):
    name_for_human = "Ansible App"
    description_for_human = "Ansible工具包提供了一系列自动化管理工具，旨在简化配置管理、应用程序部署和云资源管理等任务。"
    name_for_model = "Ansible"
    description_for_model = "Ansible工具包提供了一系列自动化管理工具，旨在简化配置管理、应用程序部署和云资源管理等任务。通过使用简单的参数，用户可以轻松管理和自动化其系统配置，提高操作效率，同时降低潜在的风险。"
    app_classes = [
        AnsibleConfigurationManagement,
        AnsibleApplicationDeployment,
        AnsibleTaskAutomation,
        AnsibleCloudProvisioning,
        AnsibleInventoryManagement,
        AnsibleRoleManagement,
        AnsiblePlaybookExecution,
        AnsibleModuleIntegration,
        AnsibleErrorHandling,
        AnsibleVersionControl,
        AnsibleStoredDataAccess,
    ]


#################### DockerCLI ####################


class DockerCLICreateContainer(VirtualFunctionApp):
    name = "DockerCLICreateContainer"
    summary = "创建一个新的Docker容器。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_name",
            "type": "string",
            "description": "容器的名称，必须是唯一的。",
            "required": True,
        },
        {
            "name": "image_name",
            "type": "string",
            "description": "要使用的Docker镜像名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "容器创建是否成功。"},
        {
            "name": "container_id",
            "type": "string",
            "description": "新创建的容器的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果参数格式不正确。"}
    ]


class DockerCLIStartContainer(VirtualFunctionApp):
    name = "DockerCLIStartContainer"
    summary = "启动一个已创建的Docker容器。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "要启动的容器的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "容器启动是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLIStopContainer(VirtualFunctionApp):
    name = "DockerCLIStopContainer"
    summary = "停止正在运行的Docker容器。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "要停止的容器的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "容器停止是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLIGetContainerStatus(VirtualFunctionApp):
    name = "DockerCLIGetContainerStatus"
    summary = "获取指定容器的当前状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "要检查状态的容器的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "string", "description": "容器的当前状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLIDeleteContainer(VirtualFunctionApp):
    name = "DockerCLIDeleteContainer"
    summary = "删除指定的Docker容器。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "要删除的容器的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "容器删除是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLIListAllContainers(VirtualFunctionApp):
    name = "DockerCLIListAllContainers"
    summary = "列出所有已创建的Docker容器及其状态。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "containers",
            "type": "array",
            "description": "包含所有容器的数组，每个项包含容器的ID和状态。",
        }
    ]
    exceptions: List[ArgException] = []


class DockerCLIGetContainerLogs(VirtualFunctionApp):
    name = "DockerCLIGetContainerLogs"
    summary = "获取指定容器的日志。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "要获取日志的容器的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "logs", "type": "string", "description": "容器的日志内容。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLICopyToContainer(VirtualFunctionApp):
    name = "DockerCLICopyToContainer"
    summary = "将文件从本地复制到指定的Docker容器。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "目标容器的唯一标识符。",
            "required": True,
        },
        {
            "name": "local_file_path",
            "type": "string",
            "description": "本地文件的路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "文件复制是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLICopyFromContainer(VirtualFunctionApp):
    name = "DockerCLICopyFromContainer"
    summary = "将文件从指定的Docker容器复制到本地。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "源容器的唯一标识符。",
            "required": True,
        },
        {
            "name": "remote_file_path",
            "type": "string",
            "description": "容器内文件的路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "文件复制是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


class DockerCLIRunCommandInContainer(VirtualFunctionApp):
    name = "DockerCLIRunCommandInContainer"
    summary = "在指定的Docker容器内运行命令。"
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "目标容器的唯一标识符。",
            "required": True,
        },
        {
            "name": "command",
            "type": "string",
            "description": "要在容器内执行的命令。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "output", "type": "string", "description": "命令的输出结果。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果容器不存在。"}
    ]


@register_app()
class DockerCLI(FunctionApp):
    name_for_human = "Docker CLI"
    description_for_human = (
        "App for managing Docker containers through command line operations."
    )
    name_for_model = "DockerCLI"
    description_for_model = "DockerCLI工具包提供对Docker容器的全面管理和编排功能，包括创建、启动、停止和删除容器，支持查看状态和日志，文件复制和命令执行等功能，旨在帮助开发和运维人员高效管理容器。"
    app_classes = [
        DockerCLICreateContainer,
        DockerCLIStartContainer,
        DockerCLIStopContainer,
        DockerCLIGetContainerStatus,
        DockerCLIDeleteContainer,
        DockerCLIListAllContainers,
        DockerCLIGetContainerLogs,
        DockerCLICopyToContainer,
        DockerCLICopyFromContainer,
        DockerCLIRunCommandInContainer,
    ]


#################### Nmap ####################


class NmapHostDiscovery(VirtualFunctionApp):
    name = "NmapHostDiscovery"
    summary = "识别网络中的活动主机。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_network",
            "type": "string",
            "description": "目标网络的CIDR表示法，如'192.168.1.0/24'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "active_hosts",
            "type": "array",
            "description": "活动主机的IP地址列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标网络格式不正确时触发。",
        }
    ]


class NmapPortScanning(VirtualFunctionApp):
    name = "NmapPortScanning"
    summary = "扫描主机的开放端口。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        },
        {
            "name": "port_range",
            "type": "string",
            "description": "要扫描的端口范围，如'1-65535'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "open_ports", "type": "array", "description": "开放端口的列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标主机格式不正确或端口范围无效时触发。",
        }
    ]


class NmapServiceVersionDetection(VirtualFunctionApp):
    name = "NmapServiceVersionDetection"
    summary = "确定开放端口上运行的服务及其版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        },
        {
            "name": "open_ports",
            "type": "array",
            "description": "开放端口的列表。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "service_versions",
            "type": "object",
            "description": "端口及其对应服务版本的键值对。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标主机格式不正确或开放端口无效时触发。",
        }
    ]


class NmapOperatingSystemDetection(VirtualFunctionApp):
    name = "NmapOperatingSystemDetection"
    summary = "识别目标主机的操作系统。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "operating_system",
            "type": "string",
            "description": "识别出的操作系统名称。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标主机格式不正确时触发。",
        }
    ]


class NmapNetworkMapping(VirtualFunctionApp):
    name = "NmapNetworkMapping"
    summary = "显示网络中设备的拓扑结构。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_network",
            "type": "string",
            "description": "目标网络的CIDR表示法。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "network_topology",
            "type": "object",
            "description": "网络设备及其连接关系的描述。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标网络格式不正确时触发。",
        }
    ]


class NmapScriptableInteraction(VirtualFunctionApp):
    name = "NmapScriptableInteraction"
    summary = "使用Nmap脚本引擎进行定制化扫描。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        },
        {
            "name": "script_name",
            "type": "string",
            "description": "要运行的Nmap脚本名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "script_output",
            "type": "string",
            "description": "脚本执行的输出结果。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标主机格式不正确或脚本名称无效时触发。",
        }
    ]


class NmapVulnerabilityScanning(VirtualFunctionApp):
    name = "NmapVulnerabilityScanning"
    summary = "检测目标主机的已知漏洞。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "vulnerabilities", "type": "array", "description": "发现的漏洞列表。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当目标主机格式不正确时触发。",
        }
    ]


class NmapOutputFormatting(VirtualFunctionApp):
    name = "NmapOutputFormatting"
    summary = "生成扫描结果的多种格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "scan_results",
            "type": "object",
            "description": "扫描结果的对象格式。",
            "required": True,
        },
        {
            "name": "format_type",
            "type": "string",
            "description": "输出格式类型，如'xml'或'json'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "formatted_output",
            "type": "string",
            "description": "格式化后的输出结果。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当扫描结果格式不正确或输出格式无效时触发。",
        }
    ]


class NmapScanScheduling(VirtualFunctionApp):
    name = "NmapScanScheduling"
    summary = "定时安排扫描任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        },
        {
            "name": "schedule_time",
            "type": "string",
            "description": "扫描任务的计划时间，格式为'YYYY-MM-DD HH:MM'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "schedule_status",
            "type": "boolean",
            "description": "扫描任务是否成功安排。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当计划时间格式不正确时触发。",
        }
    ]


class NmapPerformanceOptimization(VirtualFunctionApp):
    name = "NmapPerformanceOptimization"
    summary = "调整扫描参数以提高扫描效率。"
    parameters: List[ArgParameter] = [
        {
            "name": "target_host",
            "type": "string",
            "description": "目标主机的IP地址。",
            "required": True,
        },
        {
            "name": "optimization_parameters",
            "type": "object",
            "description": "优化参数对象，包含具体的优化选项。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimization_status",
            "type": "boolean",
            "description": "优化是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当优化参数无效时触发。"}
    ]


class NmapRetrieveScanHistory(VirtualFunctionApp):
    name = "NmapRetrieveScanHistory"
    summary = "检索用户的扫描历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "user_id",
            "type": "string",
            "description": "用户的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "scan_history", "type": "array", "description": "用户的扫描历史记录。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当用户ID格式不正确时触发。"}
    ]


@register_app()
class Nmap(FunctionApp):
    name_for_human = "Nmap App"
    description_for_human = "App for network scanning and security auditing."
    name_for_model = "Nmap"
    description_for_model = "Nmap工具包提供了一系列工具，用于网络扫描和安全审计，包括主机发现、端口扫描、服务版本检测、操作系统识别和网络映射。该工具包适用于网络安全专家，帮助他们识别和评估网络中的潜在安全风险，同时也考虑到滥用可能带来的风险。"
    app_classes = [
        NmapHostDiscovery,
        NmapPortScanning,
        NmapServiceVersionDetection,
        NmapOperatingSystemDetection,
        NmapNetworkMapping,
        NmapScriptableInteraction,
        NmapVulnerabilityScanning,
        NmapOutputFormatting,
        NmapScanScheduling,
        NmapPerformanceOptimization,
        NmapRetrieveScanHistory,
    ]


#################### FFmpeg ####################


class FFmpegFormatConversion(VirtualFunctionApp):
    name = "FFmpegFormatConversion"
    summary = "将音频或视频文件从一种格式转换为另一种格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入文件的本地路径或URL。",
            "required": True,
        },
        {
            "name": "output_format",
            "type": "string",
            "description": "输出文件格式，支持的格式包括'mp4', 'mp3', 'avi', 'mkv', 'wav'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_file",
            "type": "string",
            "description": "转换后的文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文件格式不正确或不支持时。",
        }
    ]


class FFmpegVideoCutting(VirtualFunctionApp):
    name = "FFmpegVideoCutting"
    summary = "剪辑视频文件的特定部分，提取所需的片段。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入视频文件的本地路径或URL。",
            "required": True,
        },
        {
            "name": "start_time",
            "type": "string",
            "description": "剪辑开始时间，格式为'HH:MM:SS'。",
            "required": True,
        },
        {
            "name": "duration",
            "type": "string",
            "description": "剪辑持续时间，格式为'HH:MM:SS'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_file",
            "type": "string",
            "description": "剪辑后的视频文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当start_time或duration格式不正确时。",
        }
    ]


class FFmpegAudioExtraction(VirtualFunctionApp):
    name = "FFmpegAudioExtraction"
    summary = "从视频文件中提取音频轨道，生成音频文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入视频文件的本地路径或URL。",
            "required": True,
        },
        {
            "name": "output_format",
            "type": "string",
            "description": "输出音频文件格式，支持的格式包括'mp3', 'wav'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_file",
            "type": "string",
            "description": "提取后的音频文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文件格式不正确或不支持时。",
        }
    ]


class FFmpegStreamProcessing(VirtualFunctionApp):
    name = "FFmpegStreamProcessing"
    summary = "实时处理音视频流，支持直播和转码。"
    parameters: List[ArgParameter] = [
        {
            "name": "stream_url",
            "type": "string",
            "description": "输入流的URL。",
            "required": True,
        },
        {
            "name": "output_format",
            "type": "string",
            "description": "输出流格式，支持的格式包括'mp4', 'flv'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_stream",
            "type": "string",
            "description": "处理后的输出流URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当stream_url格式不正确时。"}
    ]


class FFmpegMetadataEditing(VirtualFunctionApp):
    name = "FFmpegMetadataEditing"
    summary = "编辑音频或视频文件的元数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入文件的本地路径或URL。",
            "required": True,
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "要编辑的元数据对象，包含字段如'title', 'artist', 'album'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "编辑操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当metadata格式不正确或缺少必要字段时。",
        }
    ]


class FFmpegBatchProcessing(VirtualFunctionApp):
    name = "FFmpegBatchProcessing"
    summary = "支持同时处理多个音视频文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_files",
            "type": "array",
            "description": "输入文件的本地路径或URL数组。",
            "required": True,
        },
        {
            "name": "output_format",
            "type": "string",
            "description": "输出文件格式，支持的格式包括'mp4', 'mp3', 'avi', 'mkv', 'wav'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_files",
            "type": "array",
            "description": "转换后的文件路径或URL数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当input_files格式不正确或包含不支持的文件时。",
        }
    ]


class FFmpegThumbnailGeneration(VirtualFunctionApp):
    name = "FFmpegThumbnailGeneration"
    summary = "从视频文件中生成缩略图。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入视频文件的本地路径或URL。",
            "required": True,
        },
        {
            "name": "time_stamp",
            "type": "string",
            "description": "生成缩略图的时间戳，格式为'HH:MM:SS'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "thumbnail_file",
            "type": "string",
            "description": "生成的缩略图文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当time_stamp格式不正确时。"}
    ]


class FFmpegVideoMerging(VirtualFunctionApp):
    name = "FFmpegVideoMerging"
    summary = "将多个视频文件合并成一个文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_files",
            "type": "array",
            "description": "输入视频文件的本地路径或URL数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_file",
            "type": "string",
            "description": "合并后的视频文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当input_files格式不正确或包含不支持的文件时。",
        }
    ]


class FFmpegAudioNormalization(VirtualFunctionApp):
    name = "FFmpegAudioNormalization"
    summary = "对音频文件进行音量标准化处理。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入音频文件的本地路径或URL。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "output_file",
            "type": "string",
            "description": "标准化后的音频文件路径或URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文件格式不正确或不支持时。",
        }
    ]


class FFmpegCodecInfoRetrieval(VirtualFunctionApp):
    name = "FFmpegCodecInfoRetrieval"
    summary = "获取音视频文件的编码信息和参数。"
    parameters: List[ArgParameter] = [
        {
            "name": "input_file",
            "type": "string",
            "description": "输入文件的本地路径或URL。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "codec_info",
            "type": "object",
            "description": "包含音视频文件编码信息的对象，字段包括'codec_name', 'bit_rate', 'duration'等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当输入文件格式不正确或不支持时。",
        }
    ]


@register_app()
class FFmpeg(FunctionApp):
    name_for_human = "FFmpeg App"
    description_for_human = "强大的音视频处理工具包，支持格式转换、剪辑、提取和流处理。"
    name_for_model = "FFmpeg"
    description_for_model = "FFmpeg工具包提供强大的音视频处理功能，包括格式转换、视频剪辑、音频提取和流处理，旨在帮助用户高效处理多媒体文件，同时需注意潜在的版权和隐私风险。"
    app_classes = [
        FFmpegFormatConversion,
        FFmpegVideoCutting,
        FFmpegAudioExtraction,
        FFmpegStreamProcessing,
        FFmpegMetadataEditing,
        FFmpegBatchProcessing,
        FFmpegThumbnailGeneration,
        FFmpegVideoMerging,
        FFmpegAudioNormalization,
        FFmpegCodecInfoRetrieval,
    ]


#################### Jq ####################


class JqJSONQuery(VirtualFunctionApp):
    name = "JqJSONQuery"
    summary = "允许用户使用简单的查询语言提取特定数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "用户输入的查询字符串，指定要提取的数据。",
            "required": True,
        },
        {
            "name": "json_data",
            "type": "string",
            "description": "要查询的JSON数据。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "result", "type": "object", "description": "返回查询结果的JSON对象。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果查询格式不正确。"}
    ]


class JqDataTransform(VirtualFunctionApp):
    name = "JqDataTransform"
    summary = "将JSON数据转换为其他格式，如CSV。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要转换的JSON数据。",
            "required": True,
        },
        {
            "name": "target_format",
            "type": "string",
            "description": "目标格式，支持'csv'或'xml'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "transformed_data",
            "type": "string",
            "description": "转换后的数据，格式为目标格式。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果目标格式不支持。"}
    ]


class JqDataFilter(VirtualFunctionApp):
    name = "JqDataFilter"
    summary = "根据条件过滤JSON数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要过滤的JSON数据。",
            "required": True,
        },
        {
            "name": "condition",
            "type": "string",
            "description": "过滤条件，指定要保留的数据。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "filtered_data",
            "type": "object",
            "description": "返回过滤后的JSON数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果过滤条件不正确。"}
    ]


class JqDataMerge(VirtualFunctionApp):
    name = "JqDataMerge"
    summary = "将多个JSON文件合并为一个。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_files",
            "type": "array",
            "description": "要合并的JSON文件路径列表。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "merged_data",
            "type": "object",
            "description": "返回合并后的JSON数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果文件路径无效。"}
    ]


class JqDataValidate(VirtualFunctionApp):
    name = "JqDataValidate"
    summary = "验证JSON数据的结构和内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要验证的JSON数据。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "is_valid",
            "type": "boolean",
            "description": "返回验证结果，true表示有效，false表示无效。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果JSON数据格式不正确。"}
    ]


class JqDataSort(VirtualFunctionApp):
    name = "JqDataSort"
    summary = "按照指定字段对JSON数据进行排序。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要排序的JSON数据。",
            "required": True,
        },
        {
            "name": "sort_field",
            "type": "string",
            "description": "用于排序的字段名。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "sorted_data",
            "type": "object",
            "description": "返回排序后的JSON数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果排序字段无效。"}
    ]


class JqDataGroup(VirtualFunctionApp):
    name = "JqDataGroup"
    summary = "根据某个字段对JSON数据进行分组。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要分组的JSON数据。",
            "required": True,
        },
        {
            "name": "group_field",
            "type": "string",
            "description": "用于分组的字段名。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "grouped_data",
            "type": "object",
            "description": "返回分组后的JSON数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果分组字段无效。"}
    ]


class JqDataStatistics(VirtualFunctionApp):
    name = "JqDataStatistics"
    summary = "计算JSON数据中的某些统计信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要计算统计信息的JSON数据。",
            "required": True,
        },
        {
            "name": "statistic_type",
            "type": "string",
            "description": "要计算的统计类型，支持'count'、'average'等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "statistic_result",
            "type": "number",
            "description": "返回计算的统计结果。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果统计类型不支持。"}
    ]


class JqDataFormat(VirtualFunctionApp):
    name = "JqDataFormat"
    summary = "将JSON数据格式化为易读的格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要格式化的JSON数据。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "formatted_data",
            "type": "string",
            "description": "返回格式化后的JSON数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果JSON数据格式不正确。"}
    ]


class JqDataBackup(VirtualFunctionApp):
    name = "JqDataBackup"
    summary = "将处理后的JSON数据备份到指定位置。"
    parameters: List[ArgParameter] = [
        {
            "name": "json_data",
            "type": "string",
            "description": "要备份的JSON数据。",
            "required": True,
        },
        {
            "name": "backup_location",
            "type": "string",
            "description": "备份文件的存储路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "返回备份操作的成功状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果备份路径无效。"}
    ]


class JqGetStoredData(VirtualFunctionApp):
    name = "JqGetStoredData"
    summary = "获取用户存储的JSON数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "指定要获取的数据类型。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "stored_data", "type": "string", "description": "返回存储的JSON数据。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的数据类型不存在。"}
    ]


@register_app()
class Jq(FunctionApp):
    name_for_human = "jq App"
    description_for_human = (
        "A app for parsing, manipulating, and managing JSON data efficiently."
    )
    name_for_model = "Jq"
    description_for_model = "jq工具包提供了一系列强大的工具，用于解析、操作和管理JSON数据，适用于开发者和数据分析师，帮助他们高效处理数据，同时注意潜在的数据泄露和误操作风险。"
    app_classes = [
        JqJSONQuery,
        JqDataTransform,
        JqDataFilter,
        JqDataMerge,
        JqDataValidate,
        JqDataSort,
        JqDataGroup,
        JqDataStatistics,
        JqDataFormat,
        JqDataBackup,
        JqGetStoredData,
    ]


#################### GitHub ####################


class GitHubCreateRepository(VirtualFunctionApp):
    name = "GitHubCreateRepository"
    summary = "创建一个新的代码仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_name",
            "type": "string",
            "description": "仓库的名称，必须唯一且不超过100个字符。",
            "required": True,
        },
        {
            "name": "description",
            "type": "string",
            "description": "仓库的描述，最多255个字符。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "新创建的仓库的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果仓库名称重复或不符合格式。",
        }
    ]


class GitHubGetRepositoryDetails(VirtualFunctionApp):
    name = "GitHubGetRepositoryDetails"
    summary = "获取现有代码仓库的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "要查询的仓库的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "repository_details",
            "type": "object",
            "description": "包含仓库详细信息的对象，包括名称、描述、创建日期等。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库不存在。"}
    ]


class GitHubUpdateRepository(VirtualFunctionApp):
    name = "GitHubUpdateRepository"
    summary = "更新代码仓库的元数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "要更新的仓库的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_name",
            "type": "string",
            "description": "新的仓库名称，必须唯一且不超过100个字符。",
            "required": False,
        },
        {
            "name": "new_description",
            "type": "string",
            "description": "新的仓库描述，最多255个字符。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库不存在。"},
        {
            "name": "InvalidRequestException",
            "description": "如果新名称或描述不符合格式。",
        },
    ]


class GitHubDeleteRepository(VirtualFunctionApp):
    name = "GitHubDeleteRepository"
    summary = "删除指定的代码仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "要删除的仓库的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库不存在。"}
    ]


class GitHubListUserRepositories(VirtualFunctionApp):
    name = "GitHubListUserRepositories"
    summary = "列出用户的所有代码仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大仓库数量，默认值为10。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "repositories",
            "type": "array",
            "description": "包含用户所有仓库的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果max_results参数不符合格式。",
        }
    ]


class GitHubSearchRepositories(VirtualFunctionApp):
    name = "GitHubSearchRepositories"
    summary = "根据关键字搜索代码仓库。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大仓库数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "search_results",
            "type": "array",
            "description": "包含匹配搜索条件的仓库的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果查询参数为空。"}
    ]


class GitHubGetCommitHistory(VirtualFunctionApp):
    name = "GitHubGetCommitHistory"
    summary = "获取指定仓库的提交历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "要查询的仓库的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "commit_history",
            "type": "array",
            "description": "包含提交历史的数组。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库不存在。"}
    ]


class GitHubGetCommitDetails(VirtualFunctionApp):
    name = "GitHubGetCommitDetails"
    summary = "获取特定提交的详细信息。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "相关仓库的唯一标识符。",
            "required": True,
        },
        {
            "name": "commit_id",
            "type": "string",
            "description": "要查询的提交的唯一标识符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "commit_details",
            "type": "object",
            "description": "包含提交详细信息的对象。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库或提交不存在。"}
    ]


class GitHubCreateBranch(VirtualFunctionApp):
    name = "GitHubCreateBranch"
    summary = "创建新的分支。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "要创建分支的仓库的唯一标识符。",
            "required": True,
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "新分支的名称，必须唯一且不超过100个字符。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "创建操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库不存在。"},
        {"name": "InvalidRequestException", "description": "如果分支名称不符合格式。"},
    ]


class GitHubDeleteBranch(VirtualFunctionApp):
    name = "GitHubDeleteBranch"
    summary = "删除指定的分支。"
    parameters: List[ArgParameter] = [
        {
            "name": "repository_id",
            "type": "string",
            "description": "相关仓库的唯一标识符。",
            "required": True,
        },
        {
            "name": "branch_name",
            "type": "string",
            "description": "要删除的分支名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果指定的仓库或分支不存在。"}
    ]


@register_app()
class GitHub(FunctionApp):
    name_for_human = "GitHub App"
    description_for_human = "App for managing code repositories on GitHub."
    name_for_model = "GitHub"
    description_for_model = "GitHub工具包提供了一系列API，允许开发者创建、管理和删除代码仓库，获取仓库和提交的详细信息，以及进行分支操作，旨在提高开发者在GitHub上的工作效率。"
    app_classes = [
        GitHubCreateRepository,
        GitHubGetRepositoryDetails,
        GitHubUpdateRepository,
        GitHubDeleteRepository,
        GitHubListUserRepositories,
        GitHubSearchRepositories,
        GitHubGetCommitHistory,
        GitHubGetCommitDetails,
        GitHubCreateBranch,
        GitHubDeleteBranch,
    ]


#################### Curl ####################


class CurlSendGetRequest(VirtualFunctionApp):
    name = "CurlSendGetRequest"
    summary = "Sends a GET request to the specified URL to retrieve data."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The API endpoint URL to send the request to.",
            "required": True,
        },
        {
            "name": "query_params",
            "type": "object",
            "description": "An object containing key-value pairs for query parameters.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "The response data from the API call, including status and body.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'url' parameter is malformed.",
        }
    ]


class CurlSendPostRequest(VirtualFunctionApp):
    name = "CurlSendPostRequest"
    summary = "Sends a POST request to the specified URL with the provided data."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The API endpoint URL to send the request to.",
            "required": True,
        },
        {
            "name": "data",
            "type": "object",
            "description": "The data to be sent in the body of the request.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "The response data from the API call, including status and body.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'url' or 'data' parameter is malformed.",
        }
    ]


class CurlUploadFile(VirtualFunctionApp):
    name = "CurlUploadFile"
    summary = "Uploads a file to the specified URL using a PUT request."
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "The API endpoint URL to send the file to.",
            "required": True,
        },
        {
            "name": "file_path",
            "type": "string",
            "description": "The local path of the file to be uploaded.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "The response data from the API call, including status and body.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'url' or 'file_path' is invalid.",
        }
    ]


class CurlSetCustomHeaders(VirtualFunctionApp):
    name = "CurlSetCustomHeaders"
    summary = "Sets custom headers for subsequent requests."
    parameters: List[ArgParameter] = [
        {
            "name": "headers",
            "type": "object",
            "description": "An object containing key-value pairs for custom headers.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the headers were successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'headers' parameter is malformed.",
        }
    ]


class CurlFollowRedirects(VirtualFunctionApp):
    name = "CurlFollowRedirects"
    summary = "Configures the app to automatically follow HTTP redirects."
    parameters: List[ArgParameter] = [
        {
            "name": "follow",
            "type": "boolean",
            "description": "Set to true to enable following redirects, false to disable.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the redirect setting was successfully configured.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'follow' parameter is not boolean.",
        }
    ]


class CurlSetTimeout(VirtualFunctionApp):
    name = "CurlSetTimeout"
    summary = "Sets a timeout for API requests."
    parameters: List[ArgParameter] = [
        {
            "name": "timeout",
            "type": "integer",
            "description": "The timeout duration in seconds for requests.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the timeout was successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'timeout' parameter is not a valid integer.",
        }
    ]


class CurlHandleResponse(VirtualFunctionApp):
    name = "CurlHandleResponse"
    summary = "Processes the response from the last API call."
    parameters: List[ArgParameter] = [
        {
            "name": "response",
            "type": "object",
            "description": "The response object to process.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the response was successfully processed.",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "The response is not valid."}
    ]


class CurlManageCookies(VirtualFunctionApp):
    name = "CurlManageCookies"
    summary = "Manages cookies for session persistence."
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "The action to perform (set, get, delete).",
            "required": True,
        },
        {
            "name": "cookie_data",
            "type": "object",
            "description": "The cookie data to manage (only required for set action).",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the cookie management action was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'action' parameter is not valid.",
        }
    ]


class CurlBasicAuth(VirtualFunctionApp):
    name = "CurlBasicAuth"
    summary = "Configures basic authentication for subsequent requests."
    parameters: List[ArgParameter] = [
        {
            "name": "username",
            "type": "string",
            "description": "The username for authentication.",
            "required": True,
        },
        {
            "name": "password",
            "type": "string",
            "description": "The password for authentication.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the authentication was successfully configured.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'username' or 'password' is empty.",
        }
    ]


class CurlSetQueryParams(VirtualFunctionApp):
    name = "CurlSetQueryParams"
    summary = "Sets query parameters for the next GET request."
    parameters: List[ArgParameter] = [
        {
            "name": "query_params",
            "type": "object",
            "description": "An object containing key-value pairs for query parameters.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the query parameters were successfully set.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'query_params' are malformed.",
        }
    ]


class CurlResetSettings(VirtualFunctionApp):
    name = "CurlResetSettings"
    summary = "Resets all settings to default values."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "status",
            "type": "boolean",
            "description": "Indicates whether the settings were successfully reset.",
        }
    ]
    exceptions: List[ArgException] = []


class CurlCheckRateLimit(VirtualFunctionApp):
    name = "CurlCheckRateLimit"
    summary = "Checks the current rate limit status of the API."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "limit_status",
            "type": "object",
            "description": "An object containing the current rate limit status.",
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class Curl(FunctionApp):
    name_for_human = "Curl App"
    description_for_human = "A command-line tool for data transfer that supports various protocols and API interactions."
    name_for_model = "Curl"
    description_for_model = "The curl app provides a command-line interface for data transfer, enabling users to send and receive data via various protocols. It supports GET and POST requests, file uploads, and custom configurations, while managing potential risks associated with API usage."
    app_classes = [
        CurlSendGetRequest,
        CurlSendPostRequest,
        CurlUploadFile,
        CurlSetCustomHeaders,
        CurlFollowRedirects,
        CurlSetTimeout,
        CurlHandleResponse,
        CurlManageCookies,
        CurlBasicAuth,
        CurlSetQueryParams,
        CurlResetSettings,
        CurlCheckRateLimit,
    ]


#################### Terraform ####################


class TerraformCreateResource(VirtualFunctionApp):
    name = "TerraformCreateResource"
    summary = "创建新的云资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "要创建的资源类型（如“vm”、“storage”等），必须是“vm”、“storage”或“network”中的一个。",
            "required": True,
        },
        {
            "name": "configuration",
            "type": "object",
            "description": "资源的配置参数，具体字段根据资源类型而定。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "创建的资源的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果配置格式错误。"}
    ]


class TerraformUpdateResource(VirtualFunctionApp):
    name = "TerraformUpdateResource"
    summary = "更新现有的云资源配置。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "要更新的资源的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_configuration",
            "type": "object",
            "description": "更新后的资源配置参数，具体字段根据资源类型而定。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果资源ID无效。"},
        {"name": "InvalidRequestException", "description": "如果新配置格式错误。"},
    ]


class TerraformDeleteResource(VirtualFunctionApp):
    name = "TerraformDeleteResource"
    summary = "删除指定的云资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "要删除的资源的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果资源ID无效。"}
    ]


class TerraformListResources(VirtualFunctionApp):
    name = "TerraformListResources"
    summary = "列出所有当前管理的云资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大资源数量，默认为100。",
            "required": False,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resources",
            "type": "array",
            "description": "当前所有资源的列表，包含每个资源的基本信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果max_results不是正整数。",
        }
    ]


class TerraformGetResourceStatus(VirtualFunctionApp):
    name = "TerraformGetResourceStatus"
    summary = "检索特定云资源的状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "要检查状态的资源的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "string", "description": "资源的当前状态。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果资源ID无效。"}
    ]


class TerraformSearchResources(VirtualFunctionApp):
    name = "TerraformSearchResources"
    summary = "根据条件搜索云资源。"
    parameters: List[ArgParameter] = [
        {
            "name": "query",
            "type": "string",
            "description": "搜索条件，允许使用关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "返回的最大结果数量，默认为50。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "results", "type": "array", "description": "符合条件的资源列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果查询格式错误。"}
    ]


class TerraformTagResource(VirtualFunctionApp):
    name = "TerraformTagResource"
    summary = "为云资源添加或更新标签。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "要标记的资源的唯一标识符。",
            "required": True,
        },
        {
            "name": "tags",
            "type": "object",
            "description": "要添加或更新的标签，键为标签名，值为标签值。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "标签操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果资源ID无效。"},
        {"name": "InvalidRequestException", "description": "如果标签格式错误。"},
    ]


class TerraformManageDependencies(VirtualFunctionApp):
    name = "TerraformManageDependencies"
    summary = "查看和管理资源之间的依赖关系。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "要查看依赖关系的资源的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "dependencies",
            "type": "array",
            "description": "该资源的依赖资源列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果资源ID无效。"}
    ]


class TerraformImportResource(VirtualFunctionApp):
    name = "TerraformImportResource"
    summary = "导入现有的云资源到Terraform管理。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_details",
            "type": "object",
            "description": "现有资源的详细信息，包括类型和配置。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resource_id",
            "type": "string",
            "description": "导入资源的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果资源详细信息格式错误。"}
    ]


class TerraformPlanChanges(VirtualFunctionApp):
    name = "TerraformPlanChanges"
    summary = "生成资源变更的计划。"
    parameters: List[ArgParameter] = [
        {
            "name": "change_details",
            "type": "object",
            "description": "要应用的变更的详细信息，包括资源ID和变更类型。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "plan_summary", "type": "string", "description": "变更计划的摘要。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果变更详细信息格式错误。"}
    ]


@register_app()
class Terraform(FunctionApp):
    name_for_human = "Terraform"
    description_for_human = (
        "一个用于管理云基础设施的工具包，支持资源的创建、更新、删除和检索。"
    )
    name_for_model = "Terraform"
    description_for_model = "Terraform工具包提供了一组API，帮助用户高效管理云基础设施，包括创建、更新、删除和检索资源，同时支持资源搜索和标签管理，旨在降低操作风险并提高资源管理的灵活性。"
    app_classes = [
        TerraformCreateResource,
        TerraformUpdateResource,
        TerraformDeleteResource,
        TerraformListResources,
        TerraformGetResourceStatus,
        TerraformSearchResources,
        TerraformTagResource,
        TerraformManageDependencies,
        TerraformImportResource,
        TerraformPlanChanges,
    ]


#################### PowerToys ####################


class PowerToysWindowManager(VirtualFunctionApp):
    name = "PowerToysWindowManager"
    summary = "允许用户通过快捷键快速管理和排列窗口。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的窗口管理操作，可能的值包括 'maximize', 'minimize', 'snap_left', 'snap_right'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "指示操作是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当操作类型无效时。"}
    ]


class PowerToysFilePreview(VirtualFunctionApp):
    name = "PowerToysFilePreview"
    summary = "提供文件的快速预览功能，支持多种文件格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要预览的文件的路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "preview_content", "type": "string", "description": "文件的预览内容。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当文件路径无效或文件不存在时。"}
    ]


class PowerToysColorPicker(VirtualFunctionApp):
    name = "PowerToysColorPicker"
    summary = "允许用户从屏幕上选择颜色。"
    parameters: List[ArgParameter] = [
        {
            "name": "x_coordinate",
            "type": "integer",
            "description": "屏幕上选择颜色的X坐标。",
            "required": True,
        },
        {
            "name": "y_coordinate",
            "type": "integer",
            "description": "屏幕上选择颜色的Y坐标。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "color_value",
            "type": "string",
            "description": "选择的颜色的十六进制值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当坐标超出屏幕范围时。"}
    ]


class PowerToysImageResizer(VirtualFunctionApp):
    name = "PowerToysImageResizer"
    summary = "提供图像大小调整和格式转换功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "image_path",
            "type": "string",
            "description": "要调整大小的图像的路径。",
            "required": True,
        },
        {
            "name": "new_size",
            "type": "string",
            "description": "新的图像大小，格式为 '宽x高' (例如 '800x600')。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resized_image_path",
            "type": "string",
            "description": "调整大小后图像的路径。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当图像路径无效时。"}
    ]


class PowerToysBatchRename(VirtualFunctionApp):
    name = "PowerToysBatchRename"
    summary = "允许用户对文件进行批量重命名。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_paths",
            "type": "array",
            "description": "要重命名的文件路径数组。",
            "required": True,
        },
        {
            "name": "new_name_format",
            "type": "string",
            "description": "新的命名格式，例如 'file_{index}.txt'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "指示操作是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当新命名格式不正确时。"}
    ]


class PowerToysShortcutCustomizer(VirtualFunctionApp):
    name = "PowerToysShortcutCustomizer"
    summary = "允许用户自定义命令和快捷键。"
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "要自定义的命令。",
            "required": True,
        },
        {
            "name": "shortcut",
            "type": "string",
            "description": "新的快捷键组合。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "指示操作是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当命令无效时。"}
    ]


class PowerToysWindowSnapping(VirtualFunctionApp):
    name = "PowerToysWindowSnapping"
    summary = "允许用户将窗口分屏以便同时查看多个应用程序。"
    parameters: List[ArgParameter] = [
        {
            "name": "window_id",
            "type": "string",
            "description": "要分屏的窗口的唯一标识符。",
            "required": True,
        },
        {
            "name": "position",
            "type": "string",
            "description": "窗口的新位置，可能的值包括 'left', 'right', 'top', 'bottom'.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "指示操作是否成功的布尔值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当窗口ID无效时。"}
    ]


class PowerToysSystemMonitor(VirtualFunctionApp):
    name = "PowerToysSystemMonitor"
    summary = "提供系统资源使用情况的实时监控。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "要监控的资源类型，可能的值包括 'CPU', 'Memory', 'Disk'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "resource_usage",
            "type": "number",
            "description": "所选资源的使用百分比。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当资源类型无效时。"}
    ]


class PowerToysFileHistory(VirtualFunctionApp):
    name = "PowerToysFileHistory"
    summary = "记录文件的修改历史，以便用户查看和恢复。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "要查看历史记录的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "history", "type": "array", "description": "该文件的修改历史记录。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当文件路径无效时。"}
    ]


class PowerToysClipboardManager(VirtualFunctionApp):
    name = "PowerToysClipboardManager"
    summary = "允许用户管理和查看剪贴板历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，可能的值包括 'view', 'clear'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "clipboard_content",
            "type": "array",
            "description": "剪贴板的当前内容。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当操作无效时。"}
    ]


class PowerToysRetrieveWindowId(VirtualFunctionApp):
    name = "PowerToysRetrieveWindowId"
    summary = "检索当前打开窗口的唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "window_title",
            "type": "string",
            "description": "要检索的窗口的标题。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "window_id",
            "type": "string",
            "description": "检索到的窗口的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当窗口标题无效时。"}
    ]


class PowerToysAccessSavedData(VirtualFunctionApp):
    name = "PowerToysAccessSavedData"
    summary = "访问用户保存的设置或数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_type",
            "type": "string",
            "description": "要访问的数据类型，可能的值包括 'settings', 'preferences'.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "data_content",
            "type": "object",
            "description": "返回的保存数据内容，包含相应的字段。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当请求的数据类型不存在时。"}
    ]


@register_app()
class PowerToys(FunctionApp):
    name_for_human = "PowerToys"
    description_for_human = (
        "一组增强Windows操作系统功能的实用工具，旨在提高用户的工作效率。"
    )
    name_for_model = "PowerToys"
    description_for_model = "PowerToys 是一组增强Windows操作系统功能的实用工具，旨在提高用户的工作效率，提供窗口管理、文件预览、颜色选择、图像调整和批量重命名等功能，同时包含潜在风险以确保用户谨慎使用。"
    app_classes = [
        PowerToysWindowManager,
        PowerToysFilePreview,
        PowerToysColorPicker,
        PowerToysImageResizer,
        PowerToysBatchRename,
        PowerToysShortcutCustomizer,
        PowerToysWindowSnapping,
        PowerToysSystemMonitor,
        PowerToysFileHistory,
        PowerToysClipboardManager,
        PowerToysRetrieveWindowId,
        PowerToysAccessSavedData,
    ]


#################### FigmaApp ####################


class FigmaAppCreateDesignFile(VirtualFunctionApp):
    name = "FigmaAppCreateDesignFile"
    summary = "创建新的设计项目文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_name",
            "type": "string",
            "description": "新设计文件的名称。",
            "required": True,
        },
        {
            "name": "template_id",
            "type": "string",
            "description": "可选参数，指定要使用的模板ID。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "新创建设计文件的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = []


class FigmaAppReadDesignFile(VirtualFunctionApp):
    name = "FigmaAppReadDesignFile"
    summary = "读取现有设计项目文件的内容。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要读取的设计文件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_content",
            "type": "object",
            "description": "设计文件的详细内容，包括设计元素和布局。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppUpdateDesignFile(VirtualFunctionApp):
    name = "FigmaAppUpdateDesignFile"
    summary = "更新现有设计项目文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要更新的设计文件的唯一标识符。",
            "required": True,
        },
        {
            "name": "new_content",
            "type": "object",
            "description": "更新后的设计文件内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "更新操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"},
        {
            "name": "ConflictException",
            "description": "当更新内容与当前状态冲突时触发。",
        },
    ]


class FigmaAppDeleteDesignFile(VirtualFunctionApp):
    name = "FigmaAppDeleteDesignFile"
    summary = "删除指定的设计项目文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要删除的设计文件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "删除操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppAddComment(VirtualFunctionApp):
    name = "FigmaAppAddComment"
    summary = "在设计文件中添加评论。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要添加评论的设计文件的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment_text",
            "type": "string",
            "description": "评论的文本内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "添加评论操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppSearchDesignFiles(VirtualFunctionApp):
    name = "FigmaAppSearchDesignFiles"
    summary = "根据关键字搜索设计文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        },
        {
            "name": "max_results",
            "type": "integer",
            "description": "可选参数，指定返回结果的最大数量，默认值为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "file_ids",
            "type": "array",
            "description": "符合搜索条件的设计文件的唯一标识符列表。",
        }
    ]
    exceptions: List[ArgException] = []


class FigmaAppViewVersionHistory(VirtualFunctionApp):
    name = "FigmaAppViewVersionHistory"
    summary = "查看设计文件的版本历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要查看版本历史的设计文件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "version_history",
            "type": "array",
            "description": "设计文件的版本历史记录。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppImportResource(VirtualFunctionApp):
    name = "FigmaAppImportResource"
    summary = "导入外部设计资源到Figma项目中。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要导入资源的设计文件的唯一标识符。",
            "required": True,
        },
        {
            "name": "resource_url",
            "type": "string",
            "description": "外部资源的URL。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导入操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppExportDesignFile(VirtualFunctionApp):
    name = "FigmaAppExportDesignFile"
    summary = "导出设计文件为指定格式。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要导出的设计文件的唯一标识符。",
            "required": True,
        },
        {
            "name": "format",
            "type": "string",
            "description": "导出文件的格式，支持PNG、SVG等。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "download_link",
            "type": "string",
            "description": "导出文件的下载链接。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


class FigmaAppShareDesignFile(VirtualFunctionApp):
    name = "FigmaAppShareDesignFile"
    summary = "生成可共享的设计文件链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_id",
            "type": "string",
            "description": "要共享的设计文件的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "生成的共享链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当file_id不存在时触发。"}
    ]


@register_app()
class FigmaApp(FunctionApp):
    name_for_human = "Figma App"
    description_for_human = (
        "一个集成的工具包，帮助设计师和团队高效管理Figma中的设计项目。"
    )
    name_for_model = "FigmaApp"
    description_for_model = "FigmaApp是一个集成的工具包，旨在帮助设计师和团队高效管理Figma中的设计项目，包括创建、读取、更新和删除设计文件，以及协作评论、搜索和导入资源等功能。"
    app_classes = [
        FigmaAppCreateDesignFile,
        FigmaAppReadDesignFile,
        FigmaAppUpdateDesignFile,
        FigmaAppDeleteDesignFile,
        FigmaAppAddComment,
        FigmaAppSearchDesignFiles,
        FigmaAppViewVersionHistory,
        FigmaAppImportResource,
        FigmaAppExportDesignFile,
        FigmaAppShareDesignFile,
    ]


#################### VisualStudioCode ####################


class VisualStudioCodeCodeEditor(VirtualFunctionApp):
    name = "VisualStudioCodeCodeEditor"
    summary = "提供代码编辑功能，包括语法高亮和智能提示。"
    parameters: List[ArgParameter] = [
        {
            "name": "language",
            "type": "string",
            "description": "编程语言的名称，如'JavaScript'、'Python'等。",
            "required": True,
        },
        {
            "name": "code",
            "type": "string",
            "description": "用户要编辑的代码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "formatted_code", "type": "string", "description": "格式化后的代码。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果语言不支持，抛出此异常。",
        },
        {"name": "NotFoundException", "description": "如果代码不存在，抛出此异常。"},
    ]


class VisualStudioCodeDebugger(VirtualFunctionApp):
    name = "VisualStudioCodeDebugger"
    summary = "提供调试功能，包括设置断点和查看变量。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_id",
            "type": "string",
            "description": "代码的唯一标识符，用于调试。",
            "required": True,
        },
        {
            "name": "breakpoints",
            "type": "array",
            "description": "断点的行号数组。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "debug_info",
            "type": "object",
            "description": "调试信息，包括变量值和调用堆栈。",
            "fields": [
                {
                    "name": "variables",
                    "type": "object",
                    "description": "当前变量的值。",
                },
                {
                    "name": "call_stack",
                    "type": "array",
                    "description": "当前调用堆栈的列表。",
                },
            ],
        },
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "如果code_id无效，抛出此异常。"}
    ]


class VisualStudioCodeVersionControl(VirtualFunctionApp):
    name = "VisualStudioCodeVersionControl"
    summary = "提供版本控制功能，支持提交和查看历史记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的版本控制操作，如'commit'或'history'。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "提交信息，仅在action为'commit'时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "history",
            "type": "array",
            "description": "提交历史记录，仅在action为'history'时返回。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果action无效，抛出此异常。",
        }
    ]


class VisualStudioCodeExtensionManager(VirtualFunctionApp):
    name = "VisualStudioCodeExtensionManager"
    summary = "管理扩展的安装和卸载。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，如'install'或'uninstall'。",
            "required": True,
        },
        {
            "name": "extension_name",
            "type": "string",
            "description": "要安装或卸载的扩展名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果action无效，抛出此异常。",
        }
    ]


class VisualStudioCodeSnippetManager(VirtualFunctionApp):
    name = "VisualStudioCodeSnippetManager"
    summary = "管理代码片段的创建和使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "要执行的操作，如'create'或'use'。",
            "required": True,
        },
        {
            "name": "snippet",
            "type": "string",
            "description": "代码片段内容，仅在action为'create'时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {
            "name": "snippet_used",
            "type": "string",
            "description": "使用的代码片段，仅在action为'use'时返回。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果action无效，抛出此异常。",
        }
    ]


class VisualStudioCodeThemeManager(VirtualFunctionApp):
    name = "VisualStudioCodeThemeManager"
    summary = "管理编辑器的主题和配色方案。"
    parameters: List[ArgParameter] = [
        {
            "name": "theme",
            "type": "string",
            "description": "要设置的主题名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果theme无效，抛出此异常。",
        }
    ]


class VisualStudioCodeTerminal(VirtualFunctionApp):
    name = "VisualStudioCodeTerminal"
    summary = "提供集成终端功能。"
    parameters: List[ArgParameter] = [
        {
            "name": "command",
            "type": "string",
            "description": "要在终端中执行的命令。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "output", "type": "string", "description": "执行命令后的输出。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果command无效，抛出此异常。",
        }
    ]


class VisualStudioCodeCodeFormatter(VirtualFunctionApp):
    name = "VisualStudioCodeCodeFormatter"
    summary = "格式化代码以保持一致的风格。"
    parameters: List[ArgParameter] = [
        {
            "name": "code",
            "type": "string",
            "description": "要格式化的代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "formatted_code", "type": "string", "description": "格式化后的代码。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果code格式不正确，抛出此异常。",
        }
    ]


class VisualStudioCodeTaskRunner(VirtualFunctionApp):
    name = "VisualStudioCodeTaskRunner"
    summary = "运行构建和其他任务。"
    parameters: List[ArgParameter] = [
        {
            "name": "task",
            "type": "string",
            "description": "要运行的任务名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
        {"name": "result", "type": "string", "description": "任务运行的结果。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果task无效，抛出此异常。"}
    ]


class VisualStudioCodeCodeSearcher(VirtualFunctionApp):
    name = "VisualStudioCodeCodeSearcher"
    summary = "根据关键字搜索代码并返回唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "keyword",
            "type": "string",
            "description": "关键字用于搜索代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "code_id",
            "type": "string",
            "description": "匹配的代码的唯一标识符。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果keyword为空，抛出此异常。",
        }
    ]


class VisualStudioCodeUserData(VirtualFunctionApp):
    name = "VisualStudioCodeUserData"
    summary = "访问用户存储的配置信息。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "config",
            "type": "object",
            "description": "用户的配置信息，包括主题、代码片段等。",
            "fields": [
                {"name": "theme", "type": "string", "description": "当前主题。"},
                {
                    "name": "snippets",
                    "type": "array",
                    "description": "用户的代码片段列表。",
                },
            ],
        }
    ]
    exceptions: List[ArgException] = []


@register_app()
class VisualStudioCode(FunctionApp):
    name_for_human = "Visual Studio Code App"
    description_for_human = (
        "App for developers to efficiently write, debug, and manage code."
    )
    name_for_model = "VisualStudioCode"
    description_for_model = "这个工具包为开发者提供了一系列强大的工具，用于高效编写、调试和管理代码，包括代码编辑、调试、版本控制、扩展管理、代码片段管理等功能，同时也考虑了潜在的安全风险和数据管理需求。"
    app_classes = [
        VisualStudioCodeCodeEditor,
        VisualStudioCodeDebugger,
        VisualStudioCodeVersionControl,
        VisualStudioCodeExtensionManager,
        VisualStudioCodeSnippetManager,
        VisualStudioCodeThemeManager,
        VisualStudioCodeTerminal,
        VisualStudioCodeCodeFormatter,
        VisualStudioCodeTaskRunner,
        VisualStudioCodeCodeSearcher,
        VisualStudioCodeUserData,
    ]


#################### CodePen ####################


class CodePenRealTimePreview(VirtualFunctionApp):
    name = "CodePenRealTimePreview"
    summary = "实时预览用户编写的HTML、CSS和JavaScript代码。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_snippet",
            "type": "string",
            "description": "用户编写的代码片段，包括HTML、CSS和JavaScript。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "preview_url", "type": "string", "description": "实时预览的URL链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当代码片段格式不正确时。"}
    ]


class CodePenShareCode(VirtualFunctionApp):
    name = "CodePenShareCode"
    summary = "生成用户代码的分享链接。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_snippet",
            "type": "string",
            "description": "用户要分享的代码片段。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "share_link", "type": "string", "description": "生成的分享链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当代码片段格式不正确时。"}
    ]


class CodePenSaveCode(VirtualFunctionApp):
    name = "CodePenSaveCode"
    summary = "保存用户的代码片段到用户的账户。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_snippet",
            "type": "string",
            "description": "用户要保存的代码片段。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "保存操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当代码片段格式不正确时。"}
    ]


class CodePenImportCode(VirtualFunctionApp):
    name = "CodePenImportCode"
    summary = "从外部文件或库导入代码。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "外部文件的路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导入操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的文件路径不存在时。"}
    ]


class CodePenExportCode(VirtualFunctionApp):
    name = "CodePenExportCode"
    summary = "将用户的代码导出为文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_name",
            "type": "string",
            "description": "导出文件的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "file_url", "type": "string", "description": "导出文件的下载链接。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当文件名不符合格式时。"}
    ]


class CodePenSelectTheme(VirtualFunctionApp):
    name = "CodePenSelectTheme"
    summary = "选择编辑器的主题。"
    parameters: List[ArgParameter] = [
        {
            "name": "theme_name",
            "type": "string",
            "description": "主题的名称，可能的值包括“light”、“dark”、“solarized”。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "主题选择是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当主题名称不在允许的值中时。",
        }
    ]


class CodePenVersionControl(VirtualFunctionApp):
    name = "CodePenVersionControl"
    summary = "查看和恢复到以前的代码版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "version_id",
            "type": "string",
            "description": "版本的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "恢复操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的版本不存在时。"}
    ]


class CodePenAddComment(VirtualFunctionApp):
    name = "CodePenAddComment"
    summary = "为用户的代码添加注释。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_snippet",
            "type": "string",
            "description": "用户的代码片段。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "要添加的注释内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "注释添加是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当注释格式不正确时。"}
    ]


class CodePenCommunityInteraction(VirtualFunctionApp):
    name = "CodePenCommunityInteraction"
    summary = "查看和评论其他用户的代码。"
    parameters: List[ArgParameter] = [
        {
            "name": "code_id",
            "type": "string",
            "description": "其他用户代码的唯一标识符。",
            "required": True,
        },
        {
            "name": "comment",
            "type": "string",
            "description": "用户的评论内容。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "评论是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的代码不存在时。"}
    ]


class CodePenPluginSupport(VirtualFunctionApp):
    name = "CodePenPluginSupport"
    summary = "安装和管理第三方插件。"
    parameters: List[ArgParameter] = [
        {
            "name": "plugin_name",
            "type": "string",
            "description": "要安装的插件名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "插件安装是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当插件名称不符合格式时。"}
    ]


class CodePenSearchVersion(VirtualFunctionApp):
    name = "CodePenSearchVersion"
    summary = "根据条件搜索代码版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "search_term",
            "type": "string",
            "description": "用于搜索的关键字。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "version_id",
            "type": "string",
            "description": "找到的版本的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当搜索条件不正确时。"}
    ]


class CodePenAccessSavedCodes(VirtualFunctionApp):
    name = "CodePenAccessSavedCodes"
    summary = "访问用户保存的代码片段。"
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "saved_codes",
            "type": "array",
            "description": "用户保存的代码片段列表。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当用户没有保存的代码时。"}
    ]


@register_app()
class CodePen(FunctionApp):
    name_for_human = "CodePen"
    description_for_human = "一个在线代码编辑器，专注于前端开发，允许用户实时预览 HTML、CSS 和 JavaScript 的效果，适合快速原型制作和分享创意。"
    name_for_model = "CodePen"
    description_for_model = "CodePen工具包为前端开发人员提供实时预览、代码分享、保存、导入和导出功能，支持主题选择、版本控制、社区互动等多种功能，旨在提升代码开发和分享的效率。"
    app_classes = [
        CodePenRealTimePreview,
        CodePenShareCode,
        CodePenSaveCode,
        CodePenImportCode,
        CodePenExportCode,
        CodePenSelectTheme,
        CodePenVersionControl,
        CodePenAddComment,
        CodePenCommunityInteraction,
        CodePenPluginSupport,
        CodePenSearchVersion,
        CodePenAccessSavedCodes,
    ]


#################### Postman ####################


class PostmanCreateApiRequest(VirtualFunctionApp):
    name = "PostmanCreateApiRequest"
    summary = "创建并发送API请求，支持多种请求类型。"
    parameters: List[ArgParameter] = [
        {
            "name": "request_type",
            "type": "string",
            "description": "请求类型，支持'GET'、'POST'、'PUT'、'DELETE'。",
            "required": True,
        },
        {
            "name": "url",
            "type": "string",
            "description": "API的完整URL。",
            "required": True,
        },
        {
            "name": "headers",
            "type": "object",
            "description": "请求头部，包含键值对格式的头部信息。",
            "required": False,
        },
        {
            "name": "body",
            "type": "string",
            "description": "请求体，适用于POST和PUT请求。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "API响应，包括状态码、头部和响应体。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求参数格式不正确。"}
    ]


class PostmanManageEnvironmentVariables(VirtualFunctionApp):
    name = "PostmanManageEnvironmentVariables"
    summary = "管理API请求中的环境变量。"
    parameters: List[ArgParameter] = [
        {
            "name": "action",
            "type": "string",
            "description": "操作类型，支持'add'、'update'、'delete'。",
            "required": True,
        },
        {
            "name": "variable_name",
            "type": "string",
            "description": "环境变量的名称。",
            "required": True,
        },
        {
            "name": "variable_value",
            "type": "string",
            "description": "环境变量的值，仅在添加或更新时需要。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "操作类型不正确。"}
    ]


class PostmanViewApiResponse(VirtualFunctionApp):
    name = "PostmanViewApiResponse"
    summary = "查看最近一次API请求的响应。"
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "请求的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "response",
            "type": "object",
            "description": "返回的API响应，包括状态码、头部和响应体。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "请求ID未找到。"}
    ]


class PostmanGenerateApiDocumentation(VirtualFunctionApp):
    name = "PostmanGenerateApiDocumentation"
    summary = "根据用户的API请求生成文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "request_ids",
            "type": "array",
            "description": "要生成文档的请求ID数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "documentation",
            "type": "string",
            "description": "生成的API文档内容。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "请求ID未找到。"}
    ]


class PostmanRunApiTests(VirtualFunctionApp):
    name = "PostmanRunApiTests"
    summary = "运行用户定义的API测试脚本。"
    parameters: List[ArgParameter] = [
        {
            "name": "test_script",
            "type": "string",
            "description": "测试脚本内容。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "test_results",
            "type": "object",
            "description": "测试结果，包括通过和失败的测试数量。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "测试脚本格式不正确。"}
    ]


class PostmanImportApiRequests(VirtualFunctionApp):
    name = "PostmanImportApiRequests"
    summary = "导入API请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "包含API请求的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导入操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "文件路径不正确。"}
    ]


class PostmanExportApiRequests(VirtualFunctionApp):
    name = "PostmanExportApiRequests"
    summary = "导出API请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "导出的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "导出操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "文件路径不正确。"}
    ]


class PostmanMonitorApiPerformance(VirtualFunctionApp):
    name = "PostmanMonitorApiPerformance"
    summary = "监控API的性能指标。"
    parameters: List[ArgParameter] = [
        {
            "name": "url",
            "type": "string",
            "description": "要监控的API URL。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_data",
            "type": "object",
            "description": "返回的性能数据，包括响应时间和状态码。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "URL未找到。"}
    ]


class PostmanBatchApiRequests(VirtualFunctionApp):
    name = "PostmanBatchApiRequests"
    summary = "批量发送多个API请求。"
    parameters: List[ArgParameter] = [
        {
            "name": "requests",
            "type": "array",
            "description": "包含多个API请求的数组。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "responses", "type": "array", "description": "返回的多个API响应。"},
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "请求格式不正确。"}
    ]


class PostmanRecordRequestHistory(VirtualFunctionApp):
    name = "PostmanRecordRequestHistory"
    summary = "记录用户的请求历史。"
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "请求的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "history_entry",
            "type": "object",
            "description": "返回的请求历史记录条目。",
        },
        {"name": "success", "type": "boolean", "description": "操作是否成功。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "请求ID未找到。"}
    ]


class PostmanSearchEnvironmentVariable(VirtualFunctionApp):
    name = "PostmanSearchEnvironmentVariable"
    summary = "根据名称搜索环境变量的值。"
    parameters: List[ArgParameter] = [
        {
            "name": "variable_name",
            "type": "string",
            "description": "环境变量的名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "variable_value",
            "type": "string",
            "description": "返回的环境变量值。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "环境变量未找到。"}
    ]


class PostmanSearchApiUrl(VirtualFunctionApp):
    name = "PostmanSearchApiUrl"
    summary = "根据请求ID获取API URL。"
    parameters: List[ArgParameter] = [
        {
            "name": "request_id",
            "type": "string",
            "description": "请求的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "url", "type": "string", "description": "返回的API URL。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "请求ID未找到。"}
    ]


@register_app()
class Postman(FunctionApp):
    name_for_human = "Postman App"
    description_for_human = "App for API development and testing."
    name_for_model = "Postman"
    description_for_model = "Postman工具包提供了一整套API开发和测试工具，允许用户创建、管理和测试API请求，支持多种认证方式和环境变量管理，适合开发者进行高效的API调试和文档生成。"
    app_classes = [
        PostmanCreateApiRequest,
        PostmanManageEnvironmentVariables,
        PostmanViewApiResponse,
        PostmanGenerateApiDocumentation,
        PostmanRunApiTests,
        PostmanImportApiRequests,
        PostmanExportApiRequests,
        PostmanMonitorApiPerformance,
        PostmanBatchApiRequests,
        PostmanRecordRequestHistory,
        PostmanSearchEnvironmentVariable,
        PostmanSearchApiUrl,
    ]


#################### DockerApp ####################


class DockerAppCreateContainer(VirtualFunctionApp):
    name = "DockerAppCreateContainer"
    summary = "Create a new Docker container based on a specified Docker image."
    parameters: List[ArgParameter] = [
        {
            "name": "image_name",
            "type": "string",
            "description": "The name of the Docker image to use for creating the container.",
            "required": True,
        },
        {
            "name": "container_name",
            "type": "string",
            "description": "The name to assign to the new container. If not provided, a random name will be generated.",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the newly created container.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'image_name' format is incorrect.",
        }
    ]


class DockerAppStartContainer(VirtualFunctionApp):
    name = "DockerAppStartContainer"
    summary = "Start a specified Docker container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to start.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the start operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'container_id' does not exist.",
        }
    ]


class DockerAppStopContainer(VirtualFunctionApp):
    name = "DockerAppStopContainer"
    summary = "Stop a running Docker container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to stop.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the stop operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'container_id' does not exist.",
        }
    ]


class DockerAppDeleteContainer(VirtualFunctionApp):
    name = "DockerAppDeleteContainer"
    summary = "Delete a specified Docker container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to delete.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the delete operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'container_id' does not exist.",
        }
    ]


class DockerAppListContainers(VirtualFunctionApp):
    name = "DockerAppListContainers"
    summary = "List all Docker containers and their statuses."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "containers",
            "type": "array",
            "description": "An array containing all containers, where each element is an object with fields: container_id, container_name, and status.",
        }
    ]
    exceptions: List[ArgException] = []


class DockerAppPullImage(VirtualFunctionApp):
    name = "DockerAppPullImage"
    summary = "Pull a specified Docker image from Docker Hub."
    parameters: List[ArgParameter] = [
        {
            "name": "image_name",
            "type": "string",
            "description": "The name of the Docker image to pull.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the pull operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'image_name' format is incorrect.",
        }
    ]


class DockerAppPushImage(VirtualFunctionApp):
    name = "DockerAppPushImage"
    summary = "Push a local Docker image to Docker Hub."
    parameters: List[ArgParameter] = [
        {
            "name": "image_name",
            "type": "string",
            "description": "The name of the Docker image to push.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the push operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "The 'image_name' format is incorrect.",
        }
    ]


class DockerAppViewContainerLogs(VirtualFunctionApp):
    name = "DockerAppViewContainerLogs"
    summary = "Retrieve the runtime logs of a specified Docker container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container to retrieve logs from.",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "logs",
            "type": "string",
            "description": "The runtime logs of the specified container.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'container_id' does not exist.",
        }
    ]


class DockerAppAccessStoredConfig(VirtualFunctionApp):
    name = "DockerAppAccessStoredConfig"
    summary = "Access user-saved Docker configuration files."
    parameters: List[ArgParameter] = []
    returns: List[ArgReturn] = [
        {
            "name": "config",
            "type": "object",
            "description": "An object containing the user's saved Docker configurations, with fields: config_name and config_value.",
        }
    ]
    exceptions: List[ArgException] = []


class DockerAppUpdateContainerConfig(VirtualFunctionApp):
    name = "DockerAppUpdateContainerConfig"
    summary = "Update the configuration of a specified Docker container."
    parameters: List[ArgParameter] = [
        {
            "name": "container_id",
            "type": "string",
            "description": "The unique identifier of the container whose configuration is to be updated.",
            "required": True,
        },
        {
            "name": "new_config",
            "type": "object",
            "description": "The new configuration object, with fields: config_name and config_value.",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "Indicates whether the update operation was successful.",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "The specified 'container_id' does not exist.",
        }
    ]


@register_app()
class DockerApp(FunctionApp):
    name_for_human = "Docker App"
    description_for_human = "App for managing Docker containerized applications."
    name_for_model = "DockerApp"
    description_for_model = "DockerApp provides a comprehensive set of tools for developers and operations personnel to create, manage, and deploy Docker containerized applications, supporting efficient microservices architecture management."
    app_classes = [
        DockerAppCreateContainer,
        DockerAppStartContainer,
        DockerAppStopContainer,
        DockerAppDeleteContainer,
        DockerAppListContainers,
        DockerAppPullImage,
        DockerAppPushImage,
        DockerAppViewContainerLogs,
        DockerAppAccessStoredConfig,
        DockerAppUpdateContainerConfig,
    ]


#################### Kubernetes ####################


class KubernetesDeployApplication(VirtualFunctionApp):
    name = "KubernetesDeployApplication"
    summary = "自动化部署容器化应用。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要部署的应用名称。",
            "required": True,
        },
        {
            "name": "image",
            "type": "string",
            "description": "容器镜像名称。",
            "required": True,
        },
        {
            "name": "replicas",
            "type": "integer",
            "description": "要部署的副本数量，必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "部署是否成功。"},
        {
            "name": "deployment_id",
            "type": "string",
            "description": "部署的唯一标识符。",
        },
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如镜像名称无效。",
        }
    ]


class KubernetesMonitorApplication(VirtualFunctionApp):
    name = "KubernetesMonitorApplication"
    summary = "监控应用的健康状态。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要监控的应用名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "string", "description": "应用的当前状态。"},
        {"name": "health", "type": "boolean", "description": "应用是否健康。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的应用未找到。"}
    ]


class KubernetesScaleService(VirtualFunctionApp):
    name = "KubernetesScaleService"
    summary = "根据负载调整服务实例数量。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要扩展的应用名称。",
            "required": True,
        },
        {
            "name": "replicas",
            "type": "integer",
            "description": "要调整到的副本数量，必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "扩展是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "ConflictException", "description": "副本数与当前状态冲突。"}
    ]


class KubernetesUpdateApplication(VirtualFunctionApp):
    name = "KubernetesUpdateApplication"
    summary = "更新已部署的应用版本。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要更新的应用名称。",
            "required": True,
        },
        {
            "name": "new_image",
            "type": "string",
            "description": "新的容器镜像名称。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "更新是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的应用未找到。"}
    ]


class KubernetesManageResources(VirtualFunctionApp):
    name = "KubernetesManageResources"
    summary = "管理集群资源的分配和使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "resource_type",
            "type": "string",
            "description": "资源类型 (如 CPU, Memory)。",
            "required": True,
        },
        {
            "name": "amount",
            "type": "integer",
            "description": "要分配的资源数量，必须为正整数。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "资源管理是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如资源类型无效。",
        }
    ]


class KubernetesManageLogs(VirtualFunctionApp):
    name = "KubernetesManageLogs"
    summary = "集中管理和查看应用日志。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要查看日志的应用名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "logs", "type": "array", "description": "应用的日志列表。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的应用未找到。"}
    ]


class KubernetesManageConfiguration(VirtualFunctionApp):
    name = "KubernetesManageConfiguration"
    summary = "管理应用的配置和密钥。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "应用名称。",
            "required": True,
        },
        {
            "name": "config",
            "type": "object",
            "description": "应用的配置项，包含键值对形式的配置。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "配置管理是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如配置格式无效。",
        }
    ]


class KubernetesNotifyEvents(VirtualFunctionApp):
    name = "KubernetesNotifyEvents"
    summary = "发送事件通知以便及时响应问题。"
    parameters: List[ArgParameter] = [
        {
            "name": "event_type",
            "type": "string",
            "description": "事件类型 (如 Error, Warning)。",
            "required": True,
        },
        {
            "name": "message",
            "type": "string",
            "description": "事件消息。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "通知是否成功发送。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如事件类型无效。",
        }
    ]


class KubernetesLoadBalance(VirtualFunctionApp):
    name = "KubernetesLoadBalance"
    summary = "自动分配流量以优化资源使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要负载均衡的应用名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "负载均衡是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的应用未找到。"}
    ]


class KubernetesManageNetworkPolicy(VirtualFunctionApp):
    name = "KubernetesManageNetworkPolicy"
    summary = "管理服务间的网络访问控制。"
    parameters: List[ArgParameter] = [
        {
            "name": "policy",
            "type": "object",
            "description": "网络策略定义，包含访问控制规则。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "boolean", "description": "网络策略是否成功应用。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，例如策略格式无效。",
        }
    ]


class KubernetesViewApplicationStatus(VirtualFunctionApp):
    name = "KubernetesViewApplicationStatus"
    summary = "查看应用的当前状态和事件。"
    parameters: List[ArgParameter] = [
        {
            "name": "app_name",
            "type": "string",
            "description": "要查看的应用名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "status", "type": "string", "description": "当前状态。"},
        {"name": "events", "type": "array", "description": "相关事件列表。"},
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的应用未找到。"}
    ]


@register_app()
class Kubernetes(FunctionApp):
    name_for_human = "Kubernetes App"
    description_for_human = "App for automating the deployment, monitoring, scaling, and management of containerized applications."
    name_for_model = "Kubernetes"
    description_for_model = "Kubernetes工具包提供了一系列工具，用于自动化容器化应用的部署、监控、扩展和管理，以确保高可用性和弹性，适用于开发人员和运维团队。"
    app_classes = [
        KubernetesDeployApplication,
        KubernetesMonitorApplication,
        KubernetesScaleService,
        KubernetesUpdateApplication,
        KubernetesManageResources,
        KubernetesManageLogs,
        KubernetesManageConfiguration,
        KubernetesNotifyEvents,
        KubernetesLoadBalance,
        KubernetesManageNetworkPolicy,
        KubernetesViewApplicationStatus,
    ]


#################### JupyterNotebook ####################


class JupyterNotebookExecuteCode(VirtualFunctionApp):
    name = "JupyterNotebookExecuteCode"
    summary = "执行用户提供的代码并返回结果。"
    parameters: List[ArgParameter] = [
        {
            "name": "code",
            "type": "string",
            "description": "用户要执行的代码。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "result", "type": "string", "description": "执行代码后的结果。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当代码格式不正确或有错误的参数时触发。",
        }
    ]


class JupyterNotebookCreateDocument(VirtualFunctionApp):
    name = "JupyterNotebookCreateDocument"
    summary = "创建一个新的文档，包含用户的文本和代码。"
    parameters: List[ArgParameter] = [
        {
            "name": "title",
            "type": "string",
            "description": "文档的标题。",
            "required": True,
        },
        {
            "name": "content",
            "type": "string",
            "description": "文档的内容，包括文本和代码。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "创建文档的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当文档标题或内容格式不正确时触发。",
        }
    ]


class JupyterNotebookVisualizeData(VirtualFunctionApp):
    name = "JupyterNotebookVisualizeData"
    summary = "根据用户提供的数据生成可视化图表。"
    parameters: List[ArgParameter] = [
        {
            "name": "data",
            "type": "string",
            "description": "用户提供的数据，格式为JSON。",
            "required": True,
        },
        {
            "name": "chart_type",
            "type": "string",
            "description": "图表类型，允许的值为['line', 'bar', 'scatter', 'histogram']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "chart_url", "type": "string", "description": "生成的图表的URL。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当数据格式不正确或图表类型无效时触发。",
        }
    ]


class JupyterNotebookTrainModel(VirtualFunctionApp):
    name = "JupyterNotebookTrainModel"
    summary = "使用用户提供的数据训练机器学习模型。"
    parameters: List[ArgParameter] = [
        {
            "name": "training_data",
            "type": "string",
            "description": "用于训练模型的数据，格式为CSV。",
            "required": True,
        },
        {
            "name": "model_type",
            "type": "string",
            "description": "模型类型，允许的值为['linear_regression', 'decision_tree', 'neural_network']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "训练后模型的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当训练数据格式不正确或模型类型无效时触发。",
        }
    ]


class JupyterNotebookShareNotebook(VirtualFunctionApp):
    name = "JupyterNotebookShareNotebook"
    summary = "共享用户的笔记本文件。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_id",
            "type": "string",
            "description": "要共享的文档的唯一标识符。",
            "required": True,
        },
        {
            "name": "recipient_email",
            "type": "string",
            "description": "收件人的电子邮件地址。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "共享操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的文档不存在时触发。"}
    ]


class JupyterNotebookImportData(VirtualFunctionApp):
    name = "JupyterNotebookImportData"
    summary = "从指定路径导入数据。"
    parameters: List[ArgParameter] = [
        {
            "name": "file_path",
            "type": "string",
            "description": "数据文件的本地路径。",
            "required": True,
        },
        {
            "name": "file_format",
            "type": "string",
            "description": "文件格式，允许的值为['csv', 'excel']。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "data_id", "type": "string", "description": "导入数据的唯一标识符。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当文件路径或格式不正确时触发。",
        }
    ]


class JupyterNotebookCleanData(VirtualFunctionApp):
    name = "JupyterNotebookCleanData"
    summary = "清洗用户提供的数据，处理缺失值。"
    parameters: List[ArgParameter] = [
        {
            "name": "data_id",
            "type": "string",
            "description": "要清洗的数据的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "cleaned_data_id",
            "type": "string",
            "description": "清洗后数据的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "当指定的数据集不存在时触发。"}
    ]


class JupyterNotebookManageCodeSnippets(VirtualFunctionApp):
    name = "JupyterNotebookManageCodeSnippets"
    summary = "保存和管理用户的代码片段。"
    parameters: List[ArgParameter] = [
        {
            "name": "snippet",
            "type": "string",
            "description": "用户要保存的代码片段。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "snippet_id",
            "type": "string",
            "description": "保存的代码片段的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "当代码片段格式不正确时触发。",
        }
    ]


class JupyterNotebookCreateInteractiveWidget(VirtualFunctionApp):
    name = "JupyterNotebookCreateInteractiveWidget"
    summary = "创建一个交互式小部件以增强用户体验。"
    parameters: List[ArgParameter] = [
        {
            "name": "widget_type",
            "type": "string",
            "description": "小部件类型，允许的值为['slider', 'dropdown', 'textbox']。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "widget_id",
            "type": "string",
            "description": "创建的小部件的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当小部件类型无效时触发。"}
    ]


class JupyterNotebookIntegrateExtension(VirtualFunctionApp):
    name = "JupyterNotebookIntegrateExtension"
    summary = "集成第三方库或扩展。"
    parameters: List[ArgParameter] = [
        {
            "name": "extension_name",
            "type": "string",
            "description": "要集成的扩展名称。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "扩展集成是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "当扩展名称无效时触发。"}
    ]


@register_app()
class JupyterNotebook(FunctionApp):
    name_for_human = "Jupyter Notebook App"
    description_for_human = "App for executing code, creating documents, visualizing data, training machine learning models, and sharing notebooks in Jupyter Notebook."
    name_for_model = "JupyterNotebook"
    description_for_model = "该工具包提供了一系列工具，帮助用户在Jupyter Notebook环境中执行代码、创建文档、可视化数据、训练机器学习模型并共享笔记本，适用于数据科学家和分析师进行数据分析和机器学习。"
    app_classes = [
        JupyterNotebookExecuteCode,
        JupyterNotebookCreateDocument,
        JupyterNotebookVisualizeData,
        JupyterNotebookTrainModel,
        JupyterNotebookShareNotebook,
        JupyterNotebookImportData,
        JupyterNotebookCleanData,
        JupyterNotebookManageCodeSnippets,
        JupyterNotebookCreateInteractiveWidget,
        JupyterNotebookIntegrateExtension,
    ]


#################### Swagger ####################


class SwaggerGenerateDocumentation(VirtualFunctionApp):
    name = "SwaggerGenerateDocumentation"
    summary = "自动生成API文档，根据提供的API代码生成详细的文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_code",
            "type": "string",
            "description": "API的源代码，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "documentation_url",
            "type": "string",
            "description": "生成的文档的URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果api_code格式不正确。"}
    ]


class SwaggerGenerateClientCode(VirtualFunctionApp):
    name = "SwaggerGenerateClientCode"
    summary = "根据API文档生成客户端代码，支持多种编程语言。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_documentation",
            "type": "string",
            "description": "API文档的URL，必须提供。",
            "required": True,
        },
        {
            "name": "language",
            "type": "string",
            "description": "生成代码的编程语言，支持的值包括 'Java', 'Python', 'JavaScript'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "client_code", "type": "string", "description": "生成的客户端代码。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果api_documentation或language参数无效。",
        }
    ]


class SwaggerDesignAPI(VirtualFunctionApp):
    name = "SwaggerDesignAPI"
    summary = "提供可视化界面，帮助开发者设计和修改API。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_schema",
            "type": "string",
            "description": "API的初始设计架构，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "updated_schema",
            "type": "string",
            "description": "修改后的API设计架构。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果api_schema格式不正确。"}
    ]


class SwaggerTestAPI(VirtualFunctionApp):
    name = "SwaggerTestAPI"
    summary = "允许开发者直接在文档中测试API，确保其功能正常。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_endpoint",
            "type": "string",
            "description": "要测试的API端点，必须提供。",
            "required": True,
        },
        {
            "name": "request_data",
            "type": "string",
            "description": "发送到API的请求数据，必须提供。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "response", "type": "string", "description": "API的响应数据。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果api_endpoint或request_data格式不正确。",
        }
    ]


class SwaggerManageVersion(VirtualFunctionApp):
    name = "SwaggerManageVersion"
    summary = "支持API版本的管理和变更记录。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_version",
            "type": "string",
            "description": "要管理的API版本，必须提供。",
            "required": True,
        },
        {
            "name": "change_log",
            "type": "string",
            "description": "版本变更记录，必须提供。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "操作是否成功。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果api_version或change_log格式不正确。",
        }
    ]


class SwaggerImportAPI(VirtualFunctionApp):
    name = "SwaggerImportAPI"
    summary = "导入API定义文件，便于与其他工具集成。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_file",
            "type": "string",
            "description": "API定义文件的路径，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "import_status",
            "type": "boolean",
            "description": "导入操作是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果api_file路径无效。"}
    ]


class SwaggerExportAPI(VirtualFunctionApp):
    name = "SwaggerExportAPI"
    summary = "导出API定义文件，便于与其他工具集成。"
    parameters: List[ArgParameter] = [
        {
            "name": "format",
            "type": "string",
            "description": "导出文件的格式，支持的值包括 'JSON', 'YAML'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {"name": "export_file_url", "type": "string", "description": "导出文件的URL。"}
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果format参数无效。"}
    ]


class SwaggerMonitorAPI(VirtualFunctionApp):
    name = "SwaggerMonitorAPI"
    summary = "提供API调用的性能监测和分析工具。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_endpoint",
            "type": "string",
            "description": "要监控的API端点，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "performance_metrics",
            "type": "string",
            "description": "API性能指标的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果api_endpoint格式不正确。",
        }
    ]


class SwaggerCollaborateAPI(VirtualFunctionApp):
    name = "SwaggerCollaborateAPI"
    summary = "允许多个开发者共同编辑API文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "document_url",
            "type": "string",
            "description": "要协作编辑的文档URL，必须提供。",
            "required": True,
        },
        {
            "name": "collaborator_email",
            "type": "string",
            "description": "要邀请的协作者的电子邮件地址，必须提供。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "invitation_status",
            "type": "boolean",
            "description": "邀请状态是否成功。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果document_url或collaborator_email格式不正确。",
        }
    ]


class SwaggerValidateDocumentation(VirtualFunctionApp):
    name = "SwaggerValidateDocumentation"
    summary = "验证生成的文档的准确性和完整性。"
    parameters: List[ArgParameter] = [
        {
            "name": "documentation_url",
            "type": "string",
            "description": "需要验证的文档的URL，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "validation_report",
            "type": "string",
            "description": "验证报告的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果documentation_url格式不正确。",
        }
    ]


class SwaggerGenerateAuthenticationDocs(VirtualFunctionApp):
    name = "SwaggerGenerateAuthenticationDocs"
    summary = "生成API认证方式的文档。"
    parameters: List[ArgParameter] = [
        {
            "name": "auth_type",
            "type": "string",
            "description": "认证类型，支持的值包括 'OAuth2', 'API Key'。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "auth_documentation",
            "type": "string",
            "description": "认证文档的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "InvalidRequestException", "description": "如果auth_type无效。"}
    ]


class SwaggerProvideExamples(VirtualFunctionApp):
    name = "SwaggerProvideExamples"
    summary = "提供API请求和响应的示例。"
    parameters: List[ArgParameter] = [
        {
            "name": "api_documentation",
            "type": "string",
            "description": "API文档的URL，必须提供。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "examples",
            "type": "string",
            "description": "示例请求和响应的详细信息。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "如果api_documentation格式不正确。",
        }
    ]


@register_app()
class Swagger(FunctionApp):
    name_for_human = "Swagger App"
    description_for_human = "一个用于API文档生成和管理的工具包，提升开发效率。"
    name_for_model = "Swagger"
    description_for_model = "Swagger工具包通过自动生成API文档、客户端代码和提供API设计、测试及版本管理功能，旨在提升开发者在API开发过程中的效率和准确性，同时确保文档的安全性与可靠性。"
    app_classes = [
        SwaggerGenerateDocumentation,
        SwaggerGenerateClientCode,
        SwaggerDesignAPI,
        SwaggerTestAPI,
        SwaggerManageVersion,
        SwaggerImportAPI,
        SwaggerExportAPI,
        SwaggerMonitorAPI,
        SwaggerCollaborateAPI,
        SwaggerValidateDocumentation,
        SwaggerGenerateAuthenticationDocs,
        SwaggerProvideExamples,
    ]


#################### TensorFlow ####################


class TensorFlowModelBuilder(VirtualFunctionApp):
    name = "TensorFlowModelBuilder"
    summary = "提供API支持，帮助用户构建机器学习模型。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_type",
            "type": "string",
            "description": "模型的类型，例如'线性回归'、'决策树'等。",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "模型的超参数设置，具体字段取决于模型类型。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "成功构建的模型的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型类型不支持或参数格式错误。",
        }
    ]


class TensorFlowModelTrainer(VirtualFunctionApp):
    name = "TensorFlowModelTrainer"
    summary = "使用训练数据集训练模型，并调整超参数。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要训练的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "training_data",
            "type": "array",
            "description": "用于训练的输入数据集。",
            "required": True,
        },
        {
            "name": "epochs",
            "type": "integer",
            "description": "训练的轮数，默认为10。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "success", "type": "boolean", "description": "训练是否成功的状态。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或训练数据格式错误。",
        }
    ]


class TensorFlowModelEvaluator(VirtualFunctionApp):
    name = "TensorFlowModelEvaluator"
    summary = "评估模型的性能，包括准确度和损失等指标。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要评估的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "test_data",
            "type": "array",
            "description": "用于评估的测试数据集。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "evaluation_metrics",
            "type": "object",
            "description": "模型评估指标，包括准确度和损失等。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或测试数据格式错误。",
        }
    ]


class TensorFlowModelPredictor(VirtualFunctionApp):
    name = "TensorFlowModelPredictor"
    summary = "使用训练好的模型进行新数据的预测。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要使用的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "input_data",
            "type": "array",
            "description": "用于预测的新输入数据。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "predictions",
            "type": "array",
            "description": "模型对新数据的预测结果。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或输入数据格式错误。",
        }
    ]


class TensorFlowModelSaver(VirtualFunctionApp):
    name = "TensorFlowModelSaver"
    summary = "保存训练好的模型以便后续使用。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要保存的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "save_path",
            "type": "string",
            "description": "模型保存的文件路径。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "保存操作是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或保存路径无效。",
        }
    ]


class TensorFlowModelLoader(VirtualFunctionApp):
    name = "TensorFlowModelLoader"
    summary = "重新加载已保存的模型。"
    parameters: List[ArgParameter] = [
        {
            "name": "load_path",
            "type": "string",
            "description": "模型加载的文件路径。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "成功加载的模型的唯一标识符。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "NotFoundException",
            "description": "指定的加载路径不存在或模型文件无效。",
        }
    ]


class TensorFlowDataPreprocessor(VirtualFunctionApp):
    name = "TensorFlowDataPreprocessor"
    summary = "对数据进行清洗和预处理，确保数据质量。"
    parameters: List[ArgParameter] = [
        {
            "name": "raw_data",
            "type": "array",
            "description": "原始输入数据。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "processed_data",
            "type": "array",
            "description": "清洗和预处理后的数据。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是原始数据格式错误。",
        }
    ]


class TensorFlowVisualizer(VirtualFunctionApp):
    name = "TensorFlowVisualizer"
    summary = "可视化训练过程和模型性能。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要可视化的模型的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "visualization_url",
            "type": "string",
            "description": "可视化结果的URL。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "指定的模型ID不存在。"}
    ]


class TensorFlowHyperparameterOptimizer(VirtualFunctionApp):
    name = "TensorFlowHyperparameterOptimizer"
    summary = "自动化优化模型的超参数。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要优化的模型的唯一标识符。",
            "required": True,
        }
    ]
    returns: List[ArgReturn] = [
        {
            "name": "optimized_parameters",
            "type": "object",
            "description": "优化后的超参数设置。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在。",
        }
    ]


class TensorFlowDistributedTrainer(VirtualFunctionApp):
    name = "TensorFlowDistributedTrainer"
    summary = "在多个设备或节点上进行模型训练。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要训练的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "training_data",
            "type": "array",
            "description": "用于训练的输入数据集。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "success",
            "type": "boolean",
            "description": "分布式训练是否成功的状态。",
        }
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或训练数据格式错误。",
        }
    ]


class TensorFlowModelExporter(VirtualFunctionApp):
    name = "TensorFlowModelExporter"
    summary = "将模型导出为不同格式以便于部署。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "要导出的模型的唯一标识符。",
            "required": True,
        },
        {
            "name": "export_format",
            "type": "string",
            "description": "导出模型的格式，例如'TF SavedModel'或'TF Lite'。",
            "required": True,
        },
    ]
    returns: List[ArgReturn] = [
        {"name": "export_path", "type": "string", "description": "导出模型的文件路径。"}
    ]
    exceptions: List[ArgException] = [
        {
            "name": "InvalidRequestException",
            "description": "请求参数无效，可能是模型ID不存在或导出格式不支持。",
        }
    ]


class TensorFlowModelSearcher(VirtualFunctionApp):
    name = "TensorFlowModelSearcher"
    summary = "根据模型类型和参数搜索模型并返回其唯一标识符。"
    parameters: List[ArgParameter] = [
        {
            "name": "model_type",
            "type": "string",
            "description": "模型的类型，例如'线性回归'、'决策树'等。",
            "required": True,
        },
        {
            "name": "parameters",
            "type": "object",
            "description": "模型的超参数设置。",
            "required": False,
        },
    ]
    returns: List[ArgReturn] = [
        {
            "name": "model_id",
            "type": "string",
            "description": "找到的模型的唯一标识符，未找到时返回空字符串。",
        }
    ]
    exceptions: List[ArgException] = [
        {"name": "NotFoundException", "description": "未找到符合条件的模型。"}
    ]


@register_app()
class TensorFlow(FunctionApp):
    name_for_human = "TensorFlow App"
    description_for_human = (
        "一个强大的机器学习框架，支持构建和训练各种机器学习和深度学习模型。"
    )
    name_for_model = "TensorFlow"
    description_for_model = "TensorFlow工具包提供了一个全面的机器学习框架，支持模型构建、训练、评估和预测，适合开发人员和数据科学家在实际应用中使用。"
    app_classes = [
        TensorFlowModelBuilder,
        TensorFlowModelTrainer,
        TensorFlowModelEvaluator,
        TensorFlowModelPredictor,
        TensorFlowModelSaver,
        TensorFlowModelLoader,
        TensorFlowDataPreprocessor,
        TensorFlowVisualizer,
        TensorFlowHyperparameterOptimizer,
        TensorFlowDistributedTrainer,
        TensorFlowModelExporter,
        TensorFlowModelSearcher,
    ]
